//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RhPro.Oodd
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace RhPro.Oodd.Web.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Linq;
    
    
    /// <summary>
    /// The 'OrgChart' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="OrgDomainContext"/> context.
    /// The <see cref="OdDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RhPro.Oodd.Web.DataModel")]
    public sealed partial class OrgChart : Entity
    {
        
        private string _errorMessage;
        
        private int _orgChartCode;
        
        private int _returnCode;
        
        private XElement _tree;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnerrorMessageChanging(string value);
        partial void OnerrorMessageChanged();
        partial void OnorgChartCodeChanging(int value);
        partial void OnorgChartCodeChanged();
        partial void OnreturnCodeChanging(int value);
        partial void OnreturnCodeChanged();
        partial void OntreeChanging(XElement value);
        partial void OntreeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgChart"/> class.
        /// </summary>
        public OrgChart()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'errorMessage' value.
        /// </summary>
        [DataMember()]
        public string errorMessage
        {
            get
            {
                return this._errorMessage;
            }
            set
            {
                if ((this._errorMessage != value))
                {
                    this.OnerrorMessageChanging(value);
                    this.RaiseDataMemberChanging("errorMessage");
                    this.ValidateProperty("errorMessage", value);
                    this._errorMessage = value;
                    this.RaiseDataMemberChanged("errorMessage");
                    this.OnerrorMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'orgChartCode' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int orgChartCode
        {
            get
            {
                return this._orgChartCode;
            }
            set
            {
                if ((this._orgChartCode != value))
                {
                    this.OnorgChartCodeChanging(value);
                    this.ValidateProperty("orgChartCode", value);
                    this._orgChartCode = value;
                    this.RaisePropertyChanged("orgChartCode");
                    this.OnorgChartCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'returnCode' value.
        /// </summary>
        [DataMember()]
        public int returnCode
        {
            get
            {
                return this._returnCode;
            }
            set
            {
                if ((this._returnCode != value))
                {
                    this.OnreturnCodeChanging(value);
                    this.RaiseDataMemberChanging("returnCode");
                    this.ValidateProperty("returnCode", value);
                    this._returnCode = value;
                    this.RaiseDataMemberChanged("returnCode");
                    this.OnreturnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tree' value.
        /// </summary>
        [DataMember()]
        public XElement tree
        {
            get
            {
                return this._tree;
            }
            set
            {
                if ((this._tree != value))
                {
                    this.OntreeChanging(value);
                    this.RaiseDataMemberChanging("tree");
                    this.ValidateProperty("tree", value);
                    this._tree = value;
                    this.RaiseDataMemberChanged("tree");
                    this.OntreeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._orgChartCode;
        }
    }
}
namespace RhPro.Oodd.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Linq;
    using RhPro.Oodd.Web.DataModel;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'OdDomainService' DomainService.
    /// </summary>
    public sealed partial class OdDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OdDomainContext"/> class.
        /// </summary>
        public OdDomainContext() : 
                this(new WebDomainClient<IOdDomainServiceContract>(new Uri("RhPro-Oodd-Web-Services-OdDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OdDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The OdDomainService service URI.</param>
        public OdDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IOdDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OdDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public OdDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="OrgChart"/> entity instances that have been loaded into this <see cref="OdDomainContext"/> instance.
        /// </summary>
        public EntitySet<OrgChart> OrgCharts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OrgChart>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OrgChart"/> entity instances using the 'GetMyOrgChart' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OrgChart"/> entity instances.</returns>
        public EntityQuery<OrgChart> GetMyOrgChartQuery()
        {
            this.ValidateMethod("GetMyOrgChartQuery", null);
            return base.CreateQuery<OrgChart>("GetMyOrgChart", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrg' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrg(long legajo, int maxLevel, Action<InvokeOperation<OrgChart>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrg", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrg", typeof(OrgChart), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrg' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrg(long legajo, int maxLevel)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrg", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrg", typeof(OrgChart), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrgFromNextEmp' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrgFromNextEmp(long legajo, int maxLevel, Action<InvokeOperation<OrgChart>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrgFromNextEmp", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrgFromNextEmp", typeof(OrgChart), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrgFromNextEmp' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrgFromNextEmp(long legajo, int maxLevel)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrgFromNextEmp", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrgFromNextEmp", typeof(OrgChart), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrgFromPreviousEmp' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrgFromPreviousEmp(long legajo, int maxLevel, Action<InvokeOperation<OrgChart>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrgFromPreviousEmp", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrgFromPreviousEmp", typeof(OrgChart), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrgFromPreviousEmp' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrgFromPreviousEmp(long legajo, int maxLevel)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrgFromPreviousEmp", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrgFromPreviousEmp", typeof(OrgChart), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SaveOrg' method of the DomainService.
        /// </summary>
        /// <param name="nodes">The value for the 'nodes' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> SaveOrg(XElement nodes, Action<InvokeOperation<OrgChart>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("nodes", nodes);
            this.ValidateMethod("SaveOrg", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("SaveOrg", typeof(OrgChart), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SaveOrg' method of the DomainService.
        /// </summary>
        /// <param name="nodes">The value for the 'nodes' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> SaveOrg(XElement nodes)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("nodes", nodes);
            this.ValidateMethod("SaveOrg", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("SaveOrg", typeof(OrgChart), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new OdDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'OdDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IOdDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetMyOrgChart' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OdDomainService/GetMyOrgChartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OdDomainService/GetMyOrgChart", ReplyAction="http://tempuri.org/OdDomainService/GetMyOrgChartResponse")]
            [WebGet()]
            IAsyncResult BeginGetMyOrgChart(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMyOrgChart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMyOrgChart'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMyOrgChart' operation.</returns>
            QueryResult<OrgChart> EndGetMyOrgChart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadOrg' operation.
            /// </summary>
            /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
            /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OdDomainService/ReadOrgDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OdDomainService/ReadOrg", ReplyAction="http://tempuri.org/OdDomainService/ReadOrgResponse")]
            IAsyncResult BeginReadOrg(long legajo, int maxLevel, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadOrg'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadOrg'.</param>
            /// <returns>The 'OrgChart' returned from the 'ReadOrg' operation.</returns>
            OrgChart EndReadOrg(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadOrgFromNextEmp' operation.
            /// </summary>
            /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
            /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OdDomainService/ReadOrgFromNextEmpDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OdDomainService/ReadOrgFromNextEmp", ReplyAction="http://tempuri.org/OdDomainService/ReadOrgFromNextEmpResponse")]
            IAsyncResult BeginReadOrgFromNextEmp(long legajo, int maxLevel, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadOrgFromNextEmp'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadOrgFromNextEmp'.</param>
            /// <returns>The 'OrgChart' returned from the 'ReadOrgFromNextEmp' operation.</returns>
            OrgChart EndReadOrgFromNextEmp(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadOrgFromPreviousEmp' operation.
            /// </summary>
            /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
            /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OdDomainService/ReadOrgFromPreviousEmpDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OdDomainService/ReadOrgFromPreviousEmp", ReplyAction="http://tempuri.org/OdDomainService/ReadOrgFromPreviousEmpResponse")]
            IAsyncResult BeginReadOrgFromPreviousEmp(long legajo, int maxLevel, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadOrgFromPreviousEmp'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadOrgFromPreviousEmp'.</param>
            /// <returns>The 'OrgChart' returned from the 'ReadOrgFromPreviousEmp' operation.</returns>
            OrgChart EndReadOrgFromPreviousEmp(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SaveOrg' operation.
            /// </summary>
            /// <param name="nodes">The value for the 'nodes' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OdDomainService/SaveOrgDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OdDomainService/SaveOrg", ReplyAction="http://tempuri.org/OdDomainService/SaveOrgResponse")]
            IAsyncResult BeginSaveOrg(XElement nodes, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSaveOrg'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSaveOrg'.</param>
            /// <returns>The 'OrgChart' returned from the 'SaveOrg' operation.</returns>
            OrgChart EndSaveOrg(IAsyncResult result);
        }
        
        internal sealed class OdDomainContextEntityContainer : EntityContainer
        {
            
            public OdDomainContextEntityContainer()
            {
                this.CreateEntitySet<OrgChart>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'OrgDomainService' DomainService.
    /// </summary>
    public sealed partial class OrgDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgDomainContext"/> class.
        /// </summary>
        public OrgDomainContext() : 
                this(new WebDomainClient<IOrgDomainServiceContract>(new Uri("RhPro-Oodd-Web-Services-OrgDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The OrgDomainService service URI.</param>
        public OrgDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IOrgDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public OrgDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="OrgChart"/> entity instances that have been loaded into this <see cref="OrgDomainContext"/> instance.
        /// </summary>
        public EntitySet<OrgChart> OrgCharts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OrgChart>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OrgChart"/> entity instances using the 'GetMyOrgChart' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OrgChart"/> entity instances.</returns>
        public EntityQuery<OrgChart> GetMyOrgChartQuery()
        {
            this.ValidateMethod("GetMyOrgChartQuery", null);
            return base.CreateQuery<OrgChart>("GetMyOrgChart", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrg' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrg(long legajo, int maxLevel, Action<InvokeOperation<OrgChart>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrg", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrg", typeof(OrgChart), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrg' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrg(long legajo, int maxLevel)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrg", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrg", typeof(OrgChart), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrgFromNextEmp' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrgFromNextEmp(long legajo, int maxLevel, Action<InvokeOperation<OrgChart>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrgFromNextEmp", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrgFromNextEmp", typeof(OrgChart), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrgFromNextEmp' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrgFromNextEmp(long legajo, int maxLevel)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrgFromNextEmp", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrgFromNextEmp", typeof(OrgChart), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrgFromPreviousEmp' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrgFromPreviousEmp(long legajo, int maxLevel, Action<InvokeOperation<OrgChart>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrgFromPreviousEmp", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrgFromPreviousEmp", typeof(OrgChart), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ReadOrgFromPreviousEmp' method of the DomainService.
        /// </summary>
        /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
        /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> ReadOrgFromPreviousEmp(long legajo, int maxLevel)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("legajo", legajo);
            parameters.Add("maxLevel", maxLevel);
            this.ValidateMethod("ReadOrgFromPreviousEmp", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("ReadOrgFromPreviousEmp", typeof(OrgChart), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SaveOrg' method of the DomainService.
        /// </summary>
        /// <param name="nodes">The value for the 'nodes' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> SaveOrg(XElement nodes, Action<InvokeOperation<OrgChart>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("nodes", nodes);
            this.ValidateMethod("SaveOrg", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("SaveOrg", typeof(OrgChart), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SaveOrg' method of the DomainService.
        /// </summary>
        /// <param name="nodes">The value for the 'nodes' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OrgChart> SaveOrg(XElement nodes)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("nodes", nodes);
            this.ValidateMethod("SaveOrg", parameters);
            return ((InvokeOperation<OrgChart>)(this.InvokeOperation("SaveOrg", typeof(OrgChart), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new OrgDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'OrgDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IOrgDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetMyOrgChart' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrgDomainService/GetMyOrgChartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrgDomainService/GetMyOrgChart", ReplyAction="http://tempuri.org/OrgDomainService/GetMyOrgChartResponse")]
            [WebGet()]
            IAsyncResult BeginGetMyOrgChart(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMyOrgChart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMyOrgChart'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMyOrgChart' operation.</returns>
            QueryResult<OrgChart> EndGetMyOrgChart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadOrg' operation.
            /// </summary>
            /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
            /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrgDomainService/ReadOrgDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrgDomainService/ReadOrg", ReplyAction="http://tempuri.org/OrgDomainService/ReadOrgResponse")]
            IAsyncResult BeginReadOrg(long legajo, int maxLevel, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadOrg'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadOrg'.</param>
            /// <returns>The 'OrgChart' returned from the 'ReadOrg' operation.</returns>
            OrgChart EndReadOrg(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadOrgFromNextEmp' operation.
            /// </summary>
            /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
            /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrgDomainService/ReadOrgFromNextEmpDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrgDomainService/ReadOrgFromNextEmp", ReplyAction="http://tempuri.org/OrgDomainService/ReadOrgFromNextEmpResponse")]
            IAsyncResult BeginReadOrgFromNextEmp(long legajo, int maxLevel, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadOrgFromNextEmp'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadOrgFromNextEmp'.</param>
            /// <returns>The 'OrgChart' returned from the 'ReadOrgFromNextEmp' operation.</returns>
            OrgChart EndReadOrgFromNextEmp(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ReadOrgFromPreviousEmp' operation.
            /// </summary>
            /// <param name="legajo">The value for the 'legajo' parameter of this action.</param>
            /// <param name="maxLevel">The value for the 'maxLevel' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrgDomainService/ReadOrgFromPreviousEmpDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrgDomainService/ReadOrgFromPreviousEmp", ReplyAction="http://tempuri.org/OrgDomainService/ReadOrgFromPreviousEmpResponse")]
            IAsyncResult BeginReadOrgFromPreviousEmp(long legajo, int maxLevel, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginReadOrgFromPreviousEmp'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginReadOrgFromPreviousEmp'.</param>
            /// <returns>The 'OrgChart' returned from the 'ReadOrgFromPreviousEmp' operation.</returns>
            OrgChart EndReadOrgFromPreviousEmp(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SaveOrg' operation.
            /// </summary>
            /// <param name="nodes">The value for the 'nodes' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrgDomainService/SaveOrgDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrgDomainService/SaveOrg", ReplyAction="http://tempuri.org/OrgDomainService/SaveOrgResponse")]
            IAsyncResult BeginSaveOrg(XElement nodes, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSaveOrg'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSaveOrg'.</param>
            /// <returns>The 'OrgChart' returned from the 'SaveOrg' operation.</returns>
            OrgChart EndSaveOrg(IAsyncResult result);
        }
        
        internal sealed class OrgDomainContextEntityContainer : EntityContainer
        {
            
            public OrgDomainContextEntityContainer()
            {
                this.CreateEntitySet<OrgChart>(EntitySetOperations.None);
            }
        }
    }
}
