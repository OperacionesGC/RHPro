'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5420
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Este código fuente fue generado automáticamente por wsdl, Versión=2.0.50727.3038.
'

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Web.Services.WebServiceBindingAttribute(Name:="ServiceMovimientosSoap", [Namespace]:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos")>  _
Partial Public Class ServiceMovimientos
    Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
    
    Private wsListarMovimientosOperationCompleted As System.Threading.SendOrPostCallback
    
    Private wsListarMovimientosv2OperationCompleted As System.Threading.SendOrPostCallback
    
    Private wsListarMovimientosPersonasOperationCompleted As System.Threading.SendOrPostCallback
    
    Private wsInsertarNuevoUsuarioOperationCompleted As System.Threading.SendOrPostCallback
    
    Private wsInsertarMovimientoOperationCompleted As System.Threading.SendOrPostCallback
    
    Private ControlUsuarioEmpresaSectorOperationCompleted As System.Threading.SendOrPostCallback
    
    Private wsListarNovedadesOperationCompleted As System.Threading.SendOrPostCallback
    
    '''<remarks/>
    Public Sub New()
        MyBase.New
        Me.Url = "http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos.asmx"
    End Sub
    
    '''<remarks/>
    Public Event wsListarMovimientosCompleted As wsListarMovimientosCompletedEventHandler
    
    '''<remarks/>
    Public Event wsListarMovimientosv2Completed As wsListarMovimientosv2CompletedEventHandler
    
    '''<remarks/>
    Public Event wsListarMovimientosPersonasCompleted As wsListarMovimientosPersonasCompletedEventHandler
    
    '''<remarks/>
    Public Event wsInsertarNuevoUsuarioCompleted As wsInsertarNuevoUsuarioCompletedEventHandler
    
    '''<remarks/>
    Public Event wsInsertarMovimientoCompleted As wsInsertarMovimientoCompletedEventHandler
    
    '''<remarks/>
    Public Event ControlUsuarioEmpresaSectorCompleted As ControlUsuarioEmpresaSectorCompletedEventHandler
    
    '''<remarks/>
    Public Event wsListarNovedadesCompleted As wsListarNovedadesCompletedEventHandler
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos/wsListarMovimientos", RequestNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", ResponseNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function wsListarMovimientos(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal marcaExporta As Integer, ByVal marcaMov As Integer, ByVal TipoSalida As Integer) As System.Data.DataSet
        Dim results() As Object = Me.Invoke("wsListarMovimientos", New Object() {idEmpresa, password, Legajo, fechaDesde, fechaHasta, marcaExporta, marcaMov, TipoSalida})
        Return CType(results(0),System.Data.DataSet)
    End Function
    
    '''<remarks/>
    Public Function BeginwsListarMovimientos(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal marcaExporta As Integer, ByVal marcaMov As Integer, ByVal TipoSalida As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("wsListarMovimientos", New Object() {idEmpresa, password, Legajo, fechaDesde, fechaHasta, marcaExporta, marcaMov, TipoSalida}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndwsListarMovimientos(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Data.DataSet)
    End Function
    
    '''<remarks/>
    Public Overloads Sub wsListarMovimientosAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal marcaExporta As Integer, ByVal marcaMov As Integer, ByVal TipoSalida As Integer)
        Me.wsListarMovimientosAsync(idEmpresa, password, Legajo, fechaDesde, fechaHasta, marcaExporta, marcaMov, TipoSalida, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub wsListarMovimientosAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal marcaExporta As Integer, ByVal marcaMov As Integer, ByVal TipoSalida As Integer, ByVal userState As Object)
        If (Me.wsListarMovimientosOperationCompleted Is Nothing) Then
            Me.wsListarMovimientosOperationCompleted = AddressOf Me.OnwsListarMovimientosOperationCompleted
        End If
        Me.InvokeAsync("wsListarMovimientos", New Object() {idEmpresa, password, Legajo, fechaDesde, fechaHasta, marcaExporta, marcaMov, TipoSalida}, Me.wsListarMovimientosOperationCompleted, userState)
    End Sub
    
    Private Sub OnwsListarMovimientosOperationCompleted(ByVal arg As Object)
        If (Not (Me.wsListarMovimientosCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent wsListarMovimientosCompleted(Me, New wsListarMovimientosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos/wsListarMovimientosv2", RequestNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", ResponseNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function wsListarMovimientosv2(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal marcaExporta As Integer, ByVal marcaMov As Integer, ByVal TipoSalida As Integer) As System.Data.DataSet
        Dim results() As Object = Me.Invoke("wsListarMovimientosv2", New Object() {idEmpresa, password, Legajo, fechaDesde, fechaHasta, marcaExporta, marcaMov, TipoSalida})
        Return CType(results(0),System.Data.DataSet)
    End Function
    
    '''<remarks/>
    Public Function BeginwsListarMovimientosv2(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal marcaExporta As Integer, ByVal marcaMov As Integer, ByVal TipoSalida As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("wsListarMovimientosv2", New Object() {idEmpresa, password, Legajo, fechaDesde, fechaHasta, marcaExporta, marcaMov, TipoSalida}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndwsListarMovimientosv2(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Data.DataSet)
    End Function
    
    '''<remarks/>
    Public Overloads Sub wsListarMovimientosv2Async(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal marcaExporta As Integer, ByVal marcaMov As Integer, ByVal TipoSalida As Integer)
        Me.wsListarMovimientosv2Async(idEmpresa, password, Legajo, fechaDesde, fechaHasta, marcaExporta, marcaMov, TipoSalida, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub wsListarMovimientosv2Async(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal marcaExporta As Integer, ByVal marcaMov As Integer, ByVal TipoSalida As Integer, ByVal userState As Object)
        If (Me.wsListarMovimientosv2OperationCompleted Is Nothing) Then
            Me.wsListarMovimientosv2OperationCompleted = AddressOf Me.OnwsListarMovimientosv2OperationCompleted
        End If
        Me.InvokeAsync("wsListarMovimientosv2", New Object() {idEmpresa, password, Legajo, fechaDesde, fechaHasta, marcaExporta, marcaMov, TipoSalida}, Me.wsListarMovimientosv2OperationCompleted, userState)
    End Sub
    
    Private Sub OnwsListarMovimientosv2OperationCompleted(ByVal arg As Object)
        If (Not (Me.wsListarMovimientosv2CompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent wsListarMovimientosv2Completed(Me, New wsListarMovimientosv2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos/wsListarMovimientosPer"& _ 
        "sonas", RequestNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", ResponseNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function wsListarMovimientosPersonas(ByVal idEmpresa As Integer, ByVal password As String, ByVal dni As String, ByVal fechaDesde As String, ByVal fechaHasta As String) As System.Data.DataSet
        Dim results() As Object = Me.Invoke("wsListarMovimientosPersonas", New Object() {idEmpresa, password, dni, fechaDesde, fechaHasta})
        Return CType(results(0),System.Data.DataSet)
    End Function
    
    '''<remarks/>
    Public Function BeginwsListarMovimientosPersonas(ByVal idEmpresa As Integer, ByVal password As String, ByVal dni As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("wsListarMovimientosPersonas", New Object() {idEmpresa, password, dni, fechaDesde, fechaHasta}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndwsListarMovimientosPersonas(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Data.DataSet)
    End Function
    
    '''<remarks/>
    Public Overloads Sub wsListarMovimientosPersonasAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal dni As String, ByVal fechaDesde As String, ByVal fechaHasta As String)
        Me.wsListarMovimientosPersonasAsync(idEmpresa, password, dni, fechaDesde, fechaHasta, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub wsListarMovimientosPersonasAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal dni As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal userState As Object)
        If (Me.wsListarMovimientosPersonasOperationCompleted Is Nothing) Then
            Me.wsListarMovimientosPersonasOperationCompleted = AddressOf Me.OnwsListarMovimientosPersonasOperationCompleted
        End If
        Me.InvokeAsync("wsListarMovimientosPersonas", New Object() {idEmpresa, password, dni, fechaDesde, fechaHasta}, Me.wsListarMovimientosPersonasOperationCompleted, userState)
    End Sub
    
    Private Sub OnwsListarMovimientosPersonasOperationCompleted(ByVal arg As Object)
        If (Not (Me.wsListarMovimientosPersonasCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent wsListarMovimientosPersonasCompleted(Me, New wsListarMovimientosPersonasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos/wsInsertarNuevoUsuario"& _ 
        "", RequestNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", ResponseNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function wsInsertarNuevoUsuario(ByVal idEmpresa As Integer, ByVal password As String, ByVal idSector As Integer, ByVal Nombre As String, ByVal Apellido As String, ByVal Documento As String, ByVal Legajo As Integer, ByVal Email As String, ByVal Telefono As String, ByVal Direccion As String, ByVal Username As String, ByVal Claveacceso As String, ByVal Obsevaciones As String) As Integer
        Dim results() As Object = Me.Invoke("wsInsertarNuevoUsuario", New Object() {idEmpresa, password, idSector, Nombre, Apellido, Documento, Legajo, Email, Telefono, Direccion, Username, Claveacceso, Obsevaciones})
        Return CType(results(0),Integer)
    End Function
    
    '''<remarks/>
    Public Function BeginwsInsertarNuevoUsuario(ByVal idEmpresa As Integer, ByVal password As String, ByVal idSector As Integer, ByVal Nombre As String, ByVal Apellido As String, ByVal Documento As String, ByVal Legajo As Integer, ByVal Email As String, ByVal Telefono As String, ByVal Direccion As String, ByVal Username As String, ByVal Claveacceso As String, ByVal Obsevaciones As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("wsInsertarNuevoUsuario", New Object() {idEmpresa, password, idSector, Nombre, Apellido, Documento, Legajo, Email, Telefono, Direccion, Username, Claveacceso, Obsevaciones}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndwsInsertarNuevoUsuario(ByVal asyncResult As System.IAsyncResult) As Integer
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),Integer)
    End Function
    
    '''<remarks/>
    Public Overloads Sub wsInsertarNuevoUsuarioAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal idSector As Integer, ByVal Nombre As String, ByVal Apellido As String, ByVal Documento As String, ByVal Legajo As Integer, ByVal Email As String, ByVal Telefono As String, ByVal Direccion As String, ByVal Username As String, ByVal Claveacceso As String, ByVal Obsevaciones As String)
        Me.wsInsertarNuevoUsuarioAsync(idEmpresa, password, idSector, Nombre, Apellido, Documento, Legajo, Email, Telefono, Direccion, Username, Claveacceso, Obsevaciones, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub wsInsertarNuevoUsuarioAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal idSector As Integer, ByVal Nombre As String, ByVal Apellido As String, ByVal Documento As String, ByVal Legajo As Integer, ByVal Email As String, ByVal Telefono As String, ByVal Direccion As String, ByVal Username As String, ByVal Claveacceso As String, ByVal Obsevaciones As String, ByVal userState As Object)
        If (Me.wsInsertarNuevoUsuarioOperationCompleted Is Nothing) Then
            Me.wsInsertarNuevoUsuarioOperationCompleted = AddressOf Me.OnwsInsertarNuevoUsuarioOperationCompleted
        End If
        Me.InvokeAsync("wsInsertarNuevoUsuario", New Object() {idEmpresa, password, idSector, Nombre, Apellido, Documento, Legajo, Email, Telefono, Direccion, Username, Claveacceso, Obsevaciones}, Me.wsInsertarNuevoUsuarioOperationCompleted, userState)
    End Sub
    
    Private Sub OnwsInsertarNuevoUsuarioOperationCompleted(ByVal arg As Object)
        If (Not (Me.wsInsertarNuevoUsuarioCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent wsInsertarNuevoUsuarioCompleted(Me, New wsInsertarNuevoUsuarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos/wsInsertarMovimiento", RequestNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", ResponseNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function wsInsertarMovimiento(ByVal idEmpresa As Integer, ByVal password As String, ByVal idSector As Integer, ByVal idUsuario As Integer, ByVal sensorId As String, ByVal fechaHoraMov As String, ByVal idTipoMov As Integer, ByVal Obsevaciones As String) As Integer
        Dim results() As Object = Me.Invoke("wsInsertarMovimiento", New Object() {idEmpresa, password, idSector, idUsuario, sensorId, fechaHoraMov, idTipoMov, Obsevaciones})
        Return CType(results(0),Integer)
    End Function
    
    '''<remarks/>
    Public Function BeginwsInsertarMovimiento(ByVal idEmpresa As Integer, ByVal password As String, ByVal idSector As Integer, ByVal idUsuario As Integer, ByVal sensorId As String, ByVal fechaHoraMov As String, ByVal idTipoMov As Integer, ByVal Obsevaciones As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("wsInsertarMovimiento", New Object() {idEmpresa, password, idSector, idUsuario, sensorId, fechaHoraMov, idTipoMov, Obsevaciones}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndwsInsertarMovimiento(ByVal asyncResult As System.IAsyncResult) As Integer
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),Integer)
    End Function
    
    '''<remarks/>
    Public Overloads Sub wsInsertarMovimientoAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal idSector As Integer, ByVal idUsuario As Integer, ByVal sensorId As String, ByVal fechaHoraMov As String, ByVal idTipoMov As Integer, ByVal Obsevaciones As String)
        Me.wsInsertarMovimientoAsync(idEmpresa, password, idSector, idUsuario, sensorId, fechaHoraMov, idTipoMov, Obsevaciones, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub wsInsertarMovimientoAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal idSector As Integer, ByVal idUsuario As Integer, ByVal sensorId As String, ByVal fechaHoraMov As String, ByVal idTipoMov As Integer, ByVal Obsevaciones As String, ByVal userState As Object)
        If (Me.wsInsertarMovimientoOperationCompleted Is Nothing) Then
            Me.wsInsertarMovimientoOperationCompleted = AddressOf Me.OnwsInsertarMovimientoOperationCompleted
        End If
        Me.InvokeAsync("wsInsertarMovimiento", New Object() {idEmpresa, password, idSector, idUsuario, sensorId, fechaHoraMov, idTipoMov, Obsevaciones}, Me.wsInsertarMovimientoOperationCompleted, userState)
    End Sub
    
    Private Sub OnwsInsertarMovimientoOperationCompleted(ByVal arg As Object)
        If (Not (Me.wsInsertarMovimientoCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent wsInsertarMovimientoCompleted(Me, New wsInsertarMovimientoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos/ControlUsuarioEmpresaS"& _ 
        "ector", RequestNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", ResponseNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ControlUsuarioEmpresaSector(ByVal idUsuario As Integer, ByVal idEmpresa As Integer, ByVal idSector As Integer) As Integer
        Dim results() As Object = Me.Invoke("ControlUsuarioEmpresaSector", New Object() {idUsuario, idEmpresa, idSector})
        Return CType(results(0),Integer)
    End Function
    
    '''<remarks/>
    Public Function BeginControlUsuarioEmpresaSector(ByVal idUsuario As Integer, ByVal idEmpresa As Integer, ByVal idSector As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ControlUsuarioEmpresaSector", New Object() {idUsuario, idEmpresa, idSector}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndControlUsuarioEmpresaSector(ByVal asyncResult As System.IAsyncResult) As Integer
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),Integer)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ControlUsuarioEmpresaSectorAsync(ByVal idUsuario As Integer, ByVal idEmpresa As Integer, ByVal idSector As Integer)
        Me.ControlUsuarioEmpresaSectorAsync(idUsuario, idEmpresa, idSector, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ControlUsuarioEmpresaSectorAsync(ByVal idUsuario As Integer, ByVal idEmpresa As Integer, ByVal idSector As Integer, ByVal userState As Object)
        If (Me.ControlUsuarioEmpresaSectorOperationCompleted Is Nothing) Then
            Me.ControlUsuarioEmpresaSectorOperationCompleted = AddressOf Me.OnControlUsuarioEmpresaSectorOperationCompleted
        End If
        Me.InvokeAsync("ControlUsuarioEmpresaSector", New Object() {idUsuario, idEmpresa, idSector}, Me.ControlUsuarioEmpresaSectorOperationCompleted, userState)
    End Sub
    
    Private Sub OnControlUsuarioEmpresaSectorOperationCompleted(ByVal arg As Object)
        If (Not (Me.ControlUsuarioEmpresaSectorCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ControlUsuarioEmpresaSectorCompleted(Me, New ControlUsuarioEmpresaSectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos/wsListarNovedades", RequestNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", ResponseNamespace:="http://www.qpweb.com.ar/QPWsMovimientos/ServiceMovimientos", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function wsListarNovedades(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String) As System.Data.DataSet
        Dim results() As Object = Me.Invoke("wsListarNovedades", New Object() {idEmpresa, password, Legajo, fechaDesde, fechaHasta})
        Return CType(results(0),System.Data.DataSet)
    End Function
    
    '''<remarks/>
    Public Function BeginwsListarNovedades(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("wsListarNovedades", New Object() {idEmpresa, password, Legajo, fechaDesde, fechaHasta}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndwsListarNovedades(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Data.DataSet)
    End Function
    
    '''<remarks/>
    Public Overloads Sub wsListarNovedadesAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String)
        Me.wsListarNovedadesAsync(idEmpresa, password, Legajo, fechaDesde, fechaHasta, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub wsListarNovedadesAsync(ByVal idEmpresa As Integer, ByVal password As String, ByVal Legajo As String, ByVal fechaDesde As String, ByVal fechaHasta As String, ByVal userState As Object)
        If (Me.wsListarNovedadesOperationCompleted Is Nothing) Then
            Me.wsListarNovedadesOperationCompleted = AddressOf Me.OnwsListarNovedadesOperationCompleted
        End If
        Me.InvokeAsync("wsListarNovedades", New Object() {idEmpresa, password, Legajo, fechaDesde, fechaHasta}, Me.wsListarNovedadesOperationCompleted, userState)
    End Sub
    
    Private Sub OnwsListarNovedadesOperationCompleted(ByVal arg As Object)
        If (Not (Me.wsListarNovedadesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent wsListarNovedadesCompleted(Me, New wsListarNovedadesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    Public Shadows Sub CancelAsync(ByVal userState As Object)
        MyBase.CancelAsync(userState)
    End Sub
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub wsListarMovimientosCompletedEventHandler(ByVal sender As Object, ByVal e As wsListarMovimientosCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class wsListarMovimientosCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Data.DataSet
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Data.DataSet)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub wsListarMovimientosv2CompletedEventHandler(ByVal sender As Object, ByVal e As wsListarMovimientosv2CompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class wsListarMovimientosv2CompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Data.DataSet
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Data.DataSet)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub wsListarMovimientosPersonasCompletedEventHandler(ByVal sender As Object, ByVal e As wsListarMovimientosPersonasCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class wsListarMovimientosPersonasCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Data.DataSet
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Data.DataSet)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub wsInsertarNuevoUsuarioCompletedEventHandler(ByVal sender As Object, ByVal e As wsInsertarNuevoUsuarioCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class wsInsertarNuevoUsuarioCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As Integer
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),Integer)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub wsInsertarMovimientoCompletedEventHandler(ByVal sender As Object, ByVal e As wsInsertarMovimientoCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class wsInsertarMovimientoCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As Integer
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),Integer)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ControlUsuarioEmpresaSectorCompletedEventHandler(ByVal sender As Object, ByVal e As ControlUsuarioEmpresaSectorCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ControlUsuarioEmpresaSectorCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As Integer
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),Integer)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub wsListarNovedadesCompletedEventHandler(ByVal sender As Object, ByVal e As wsListarNovedadesCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class wsListarNovedadesCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Data.DataSet
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Data.DataSet)
        End Get
    End Property
End Class
