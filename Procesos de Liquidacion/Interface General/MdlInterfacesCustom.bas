Attribute VB_Name = "MdlInterfacesCustom"
Option Explicit
Global datosEsp(0 To 9) As Long
Global datosEltoAna(0 To 1, 0 To 113) As Long

Public Type T_NovedadConfrep
    concepto As String
    Parametro As String
End Type


Public Sub Insertar_Linea_Segun_Modelo_Custom(ByVal Linea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Procedimiento llamador de acurdo al modelo
' Autor      : FGZ
' Fecha      : 30/07/2004
' Ultima Mod.: 11/02/2011 Gonzalez Nicolás - Se agregó llamada a LineaModelo_334
'              17/02/2011 Gonzalez Nicolás - Se agregó llamada a LineaModelo_335 y LineaModelo_336
'              19/04/2011 Gonzalez Nicolás Se agregó llamada a LineaModelo_339
'              20/04/2011 Gonzalez Nicolás Se agregó llamada a LineaModelo_341
'              30/05/2011 Gonzalez Nicolás Se agregó llamada a LineaModelo_343
'              01/06/2011 Gonzalez Nicolás Se agregó llamada a LineaModelo_344
'              04/10/2011 Deluchi Ezequiel Se agregó llamada a LineaModelo_345
'              2506//2012 Deluchi Ezequiel Se agregó llamada a LineaModelo_352 y LineaModelo_353
'              13/03/2013 Gonzalez Nicolás Se agregó llamada a LineaModelo_358
'              17/06/2013 Gonzalez Nicolás Se agregó llamada a LineaModelo_388
' ---------------------------------------------------------------------------------------------
' Interfaces Customisadas
Dim OK As Boolean

MyBeginTrans
    HuboError = False
    Select Case NroModelo
        Case 216: 'Acumuladores de Agencia para Citrusvil
            Call LineaModelo_216(Linea)
        Case 226: 'Postulantes - Deloitte
            Call LineaModelo_226(Linea)
        Case 239: 'Interfase de Postulantes Deloitte
            Call LineaModelo_239(Linea)
        Case 240: 'LiqPro04
            Call LineaModelo_240(Linea)
        Case 241: 'Interfase de Postulantes Dabra
            Call LineaModelo_241(Linea)
        Case 247: 'Interfase Acumulado de Horas TELEPERFORMANCE
            Call LineaModelo_247(Linea)
        Case 263: 'Interfase de Postulantes CARSA
            Call LineaModelo_263(Linea)
        Case 266: 'Interface Wella Zonas de Ventas
            Call LineaModelo_266(Linea)
        Case 267: 'Interface Wella Cab de Facturacion
            Call LineaModelo_267(Linea)
        Case 268: 'Interface de RRHH Deloitte
            Call LineaModelo_268(Linea, OK)
        Case 272: 'Interface Novedades SPEC (IMSA)
            Call LineaModelo_272(Linea)
        Case 279: 'Interface Acumulados Diarios SMT - San Martin de Tabacal
            Call LineaModelo_279(Linea)
        Case 284: 'Interface Recibos - Farmacity
            Call LineaModelo_284(Linea)
        Case 300: 'Interfase de empleados para Teleperformance
            OK = True
            Call LineaModelo_300(Linea, OK)
        Case 303: 'Interfase de empleados para Halliburton
            Call LineaModelo_303(Linea)
        Case 304: 'Interfase de modelos para Wella
            Call LineaModelo_304(Linea)
        Case 305: 'Interfase de empleados de zona para Wella
            Call LineaModelo_305(Linea)
        Case 306: 'Interfase de empleados de zona motivo para Wella
            Call LineaModelo_306(Linea)
        Case 307: 'Interfase de resultados de evaluacion-Importacion
            Call LineaModelo_307(Linea)
        Case 308: 'Interfase de Acum Diarios para Sidersa - modelo 1
            Call LineaModelo_308(Linea)
        Case 309: 'Interfase de Acum Diarios para Sidersa - modelo 2
            Call LineaModelo_309(Linea)
        'Case 310: 'Interfase Importacion de Liquidaciones para Sidersa
            'Call LineaModelo_310(Linea) Se encuentra implementada a travez de un proceso fuera del modulo interfaces
        Case 311: '?????
            'Call LineaModelo_311(linea)
        Case 312: '?????
            'Call LineaModelo_311(linea)
        Case 313: 'Novedades Con Seguridad, es = al 211 pero con seguridad
            Call LineaModelo_313(Linea)
        Case 315: 'Historico de ranking - Custom IAMSA
            Call LineaModelo_315(Linea)
        Case 317:   'Interfase de Distribución Contable - Custom PRICE
            Call LineaModelo_317(Linea)
        Case 318:   'Interfase de Valor Plan Obra Social
            Call LineaModelo_318(Linea)
        Case 325: 'Anticipos MV
            Call LineaModelo_325(Linea)
        Case 328: 'Interface de Postulantes Estandar - Medicus
            Call LineaModelo_328(Linea)
        Case 337: 'Interface de Importacion Archivos de AsoSykes Deducciones
            Call LineaModelo_337(Linea)
        Case 338: 'Interface de Importacion Archivos de Afiliación de AsoSykes
            Call LineaModelo_338(Linea)
        'Case 333: 'Interface de Notificaciones Horarias de Sykes
        '    Call LineaModelo_333(linea)
        '   Como ahora lee de una tabla se sacó de acá
        Case 334: 'Importación de Cafetería - CR - Sykes
            Call LineaModelo_334(Linea)
        Case 335: 'Importación de Novedades Horarias - CR - Sykes
            Call LineaModelo_335(Linea)
        Case 336: 'Importación de Partes Diarios  de HS Extras - CR - Sykes
            Call LineaModelo_336(Linea)
        Case 339: 'Importación Banco Popular - CR - Sykes
            Call LineaModelo_339(Linea)
        Case 341: 'Réplica de LineaModelo_211 Adecuada para Sykes - CR
            Call LineaModelo_341(Linea)
        Case 343: 'Inserta Manual en WC_MOV_HORARIOS
            Call LineaModelo_343(Linea)
        Case 344: ' = 233 + Circuito de firmas - Sykes - CR
            Call LineaModelo_344(Linea)
        Case 345: ' Interface de Vacaciones - Sykes - CR
            Call LineaModelo_345(Linea)
        Case 349: 'Importacion de Tarjetas --> SYKES
            Call LineaModelo_349(Linea)
        Case 351: 'Interface de Novedades para PKF
            Call LineaModelo_351(Linea)
        Case 352: 'Interface comisiones Monto
            Call LineaModelo_352(Linea)
        Case 353: 'Interface comisiones Monto
            Call LineaModelo_353(Linea)
        Case 358: 'Réplica de LineaModelo_341 - Sykes CR
            Call LineaModelo_358(Linea)
        Case 388: 'Interface Lic. Pagas - Sykes CR
            Call LineaModelo_388(Linea)
        Case 392: 'Interfaz Requerimientos EyP - Unión Personal
            Call LineaModelo_392(Linea)
        Case 394: 'Importacion de novedades horarias medicus
            Call LineaModelo_394(Linea)
        Case 395: 'Importacion de dias de turismo (Uruguay)
            Call LineaModelo_395(Linea)
        Case 396: 'Importación de Partes de autorizacion de HS - Medicus
            Call LineaModelo_396(Linea)
        Case 397: 'Importación de Novedades de Liquidacion - CAS-28695 - NGA - Citricos - Interface I-Time
            Call LineaModelo_397(Linea)
        Case 398: 'Importación de Familiares (SIN DOMICILIOS)- CTM
            Call LineaModelo_398(Linea, OK)
        Case 400: 'Importación de dependencia de estructuras - CAS-28350 - Salto Grande - Custom ADP - Organigrama Funcional
            Call LineaModelo_400(Linea)
        Case 401: 'Importación de Histórico de People Review - CAS-22072 - Raffo - Adecuaciones GDD - Migración historico People Review
            Call LineaModelo_401(Linea)
        Case 402: 'Importación de Partes de Cambio de Turno - CAS-31268 - IBT - CUSTOM PARTE DE CAMBIO DE TURNO
            Call LineaModelo_402(Linea)
        Case 403: 'Importación de Visitas Medicas - CAS-30758 - ACARA - SO - ABM de visitas medicas y nueva interfaz de importación
            Call LineaModelo_403(Linea)
        Case 404: 'Importación de Seguros - CAS-32751 - LA CAJA - Custom Seguros ADP
            Call LineaModelo_404(Linea)
        Case 665: 'Interface Distribucion horaria - ActionLine
            Call LineaModelo_314(Linea)
        Case 670: 'Parte de Horas - CDA
            Call LineaModelo_670(Linea)
        Case 676: 'Importacion familiares - Obras sociales
            Call LineaModelo_676(Linea, OK)
        Case 677: 'Importacion legajo - Paga salario Fam CTM
            Call LineaModelo_677(Linea, OK)
        Case 913:  'Importación de Partes Diarios  de HS Extras |Directas| - SYKES SV
            Call LineaModelo_913(Linea)
        Case 674:  'Importación de Comisiones - Raffo - CAS 23307
            Call LineaModelo_674(Linea)
        Case Else:
            Texto = ": " & "No se encontro el Numero de modelo Custom, revisar configuracion"
            Call Escribir_Log("flog", 1, 1, Texto, Tabs, Linea)
        End Select
    
MyCommitTrans
If Not HuboError Then
    'Flog.Writeline Espacios(Tabulador * 1) & "Transaccion Cometida"
Else
    Flog.writeline Espacios(Tabulador * 1) & "Transaccion Abortada"
End If

End Sub

Public Sub LineaModelo_309(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Acumulados Diarios segun formato 2 para Sidersa
' Autor      : FAF
'              El formato es:
'               Legajo; Nombre; Fecha; Descripcion Tipo Hora; Tipo Hora; Cantidad
' Fecha      : 14/09/2006
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Integer
Dim pos2 As Integer
    
Dim Tercero As Long
Dim NroLegajo As Long
Dim thnro As Long
Dim Cantidad As Double
Dim FechaAD As Date
Dim FechaAD_aux As String
Dim Cantidad_aux As String
Dim DescTH  As String
Dim ApNombr As String

Dim rs_Empleado As New ADODB.Recordset
Dim rs_TipHora As New ADODB.Recordset
Dim rs_GTI_AcumDiario As New ADODB.Recordset


    On Error GoTo Manejador_De_Error
    Tabs = 1
    
    'Nro de Legajo
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        InsertaError 1, 8
        GoTo Fin
    End If
    
    'Apellido y Nombre
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    ApNombr = Mid(strLinea, pos1, pos2 - pos1)
    
    'Fecha
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    FechaAD_aux = Mid(strLinea, pos1, pos2 - pos1)

    'Desc Tipo Hora
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    DescTH = Mid(strLinea, pos1, pos2 - pos1)
    
    'Tipo de Hora
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    thnro = Mid(strLinea, pos1, pos2 - pos1)

    'Cantidad
    pos1 = pos2 + 1
    pos2 = Len(strLinea)
    Cantidad_aux = Mid(strLinea, pos1, pos2)

'====================================================================
' Validar los parametros Levantados

    'Que exista el legajo
    StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
    OpenRecordset StrSql, rs_Empleado
    If rs_Empleado.EOF Then
        NroColumna = 1
        Texto = "No se encontro el legajo --> " & NroLegajo
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 1, 8
        GoTo Fin
    Else
        Tercero = rs_Empleado!Ternro
    End If
    
    'Que la fecha sea valida
    If Not IsDate(FechaAD_aux) Then
        NroColumna = 3
        Texto = "Fecha no válida --> " & FechaAD_aux
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 3, 4
        GoTo Fin
    Else
        FechaAD = CDate(FechaAD_aux)
    End If
    
    'Que exista el tipo de hora
    StrSql = "SELECT * FROM tiphora WHERE thnro = " & thnro
    OpenRecordset StrSql, rs_TipHora
    If rs_TipHora.EOF Then
        NroColumna = 5
        Texto = "No se encontro el tipo de hora --> " & thnro
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 5, 37
        GoTo Fin
    End If
    
    'Que sea numerico la cantidad
    If Not IsNumeric(Cantidad_aux) Then
        NroColumna = 6
        Texto = "La cantidad no es numérica --> " & Cantidad_aux
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 6, 38
        GoTo Fin
    Else
        Cantidad = CDbl(Cantidad_aux)
    End If
    
'=============================================================
'Busco si existe
    StrSql = "SELECT * FROM gti_acumdiario WHERE " & _
             " thnro = " & thnro & _
             " AND ternro = " & Tercero & _
             " AND adfecha = " & ConvFecha(FechaAD)
    OpenRecordset StrSql, rs_GTI_AcumDiario
    
    If rs_GTI_AcumDiario.EOF Then
            StrSql = "INSERT INTO gti_acumdiario (" & _
                     "ternro,thnro,adfecha,adcanthoras,admanual,advalido,adestado" & _
                     ") VALUES (" & Tercero & _
                     "," & thnro & _
                     "," & ConvFecha(FechaAD) & _
                     "," & Cantidad & _
                     ",0,0,'L'" & _
                     " )"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Acum Diario insertado "
        Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Else
        StrSql = "SELECT * FROM gti_acumdiario WHERE " & _
                 " thnro = " & thnro & _
                 " AND ternro = " & Tercero & _
                 " AND admanual = 0 AND adValido = 0 AND adestado = 'L'" & _
                 " AND adfecha = " & ConvFecha(FechaAD)
        If rs_GTI_AcumDiario.State = adStateOpen Then rs_GTI_AcumDiario.Close
        OpenRecordset StrSql, rs_GTI_AcumDiario
        
        If Not rs_GTI_AcumDiario.EOF Then
                StrSql = "UPDATE gti_acumdiario SET adcanthoras = " & Cantidad & _
                         " WHERE thnro = " & thnro & _
                         " AND ternro = " & Tercero & _
                         " AND admanual = 0 AND adValido = 0 AND adestado = 'L'" & _
                         " AND adfecha = " & ConvFecha(FechaAD)
            objConn.Execute StrSql, , adExecuteNoRecords
            Texto = "Acum Diario Actualizado."
            Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Else
            Texto = "El Acum Diario ya existe."
            Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            InsertaError 1, 54
        End If
    End If

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_TipHora.State = adStateOpen Then rs_TipHora.Close
If rs_GTI_AcumDiario.State = adStateOpen Then rs_GTI_AcumDiario.Close

Set rs_Empleado = Nothing
Set rs_TipHora = Nothing
Set rs_GTI_AcumDiario = Nothing

Fin:
Exit Sub

Manejador_De_Error:
    HuboError = True
'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub


Public Sub LineaModelo_308(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Acumulados Diarios segun formato 1 para Sidersa
' Autor      : FAF
'              El formato es:
'               Legajo; Nombre; Fecha; Descripcion Tipo Hora; Tipo Hora; Cantidad
' Fecha      : 14/09/2006
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Integer
Dim pos2 As Integer
    
Dim Tercero As Long
Dim NroLegajo As Long
Dim thnro As Long
Dim Cantidad As Double
Dim FechaAD As Date
Dim FechaAD_aux As String
Dim Cantidad_aux As String
Dim DescTH  As String
Dim ApNombr As String

Dim rs_Empleado As New ADODB.Recordset
Dim rs_TipHora As New ADODB.Recordset
Dim rs_GTI_AcumDiario As New ADODB.Recordset


    On Error GoTo Manejador_De_Error
    
    Tabs = 1
    
    'Nro de Legajo
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1 + 1, pos2 - pos1 - 2)) Then
        NroLegajo = Mid$(strLinea, pos1 + 1, pos2 - pos1 - 2)
    Else
        InsertaError 1, 8
        GoTo Fin
    End If
    
    'Apellido y Nombre
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    ApNombr = Mid(strLinea, pos1, pos2 - pos1)
    
    'Fecha
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    FechaAD_aux = Mid(strLinea, pos1 + 1, pos2 - pos1 - 2)

    'Desc Tipo Hora
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    DescTH = Mid(strLinea, pos1, pos2 - pos1)
    
    'Tipo de Hora
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    thnro = Mid(strLinea, pos1 + 1, pos2 - pos1 - 2)

    'Cantidad
    pos1 = pos2 + 1
    pos2 = Len(strLinea)
    Cantidad_aux = Mid(strLinea, pos1 + 1, pos2 - pos1 - 1)

'====================================================================
' Validar los parametros Levantados

    'Que exista el legajo
    StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
    OpenRecordset StrSql, rs_Empleado
    If rs_Empleado.EOF Then
        NroColumna = 1
        Texto = "No se encontro el legajo --> " & NroLegajo
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 1, 8
        GoTo Fin
    Else
        Tercero = rs_Empleado!Ternro
    End If
    
    'Que la fecha sea valida
    If Not IsDate(FechaAD_aux) Then
        NroColumna = 3
        Texto = "Fecha no válida --> " & FechaAD_aux
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 3, 4
        GoTo Fin
    Else
        FechaAD = CDate(FechaAD_aux)
    End If
    
    'Que exista el tipo de hora
    StrSql = "SELECT * FROM tiphora WHERE thnro = " & thnro
    OpenRecordset StrSql, rs_TipHora
    If rs_TipHora.EOF Then
        NroColumna = 5
        Texto = "No se encontro el tipo de hora --> " & thnro
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 5, 37
        GoTo Fin
    End If
    
    'Que sea numerico la cantidad
    If Not IsNumeric(Cantidad_aux) Then
        NroColumna = 6
        Texto = "La cantidad no es numérica --> " & Cantidad_aux
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 6, 38
        GoTo Fin
    Else
        Cantidad = CDbl(Cantidad_aux)
    End If
    
'=============================================================
'Busco si existe
    StrSql = "SELECT * FROM gti_acumdiario WHERE " & _
             " thnro = " & thnro & _
             " AND ternro = " & Tercero & _
             " AND adfecha = " & ConvFecha(FechaAD)
    OpenRecordset StrSql, rs_GTI_AcumDiario
    
    If rs_GTI_AcumDiario.EOF Then
            StrSql = "INSERT INTO gti_acumdiario (" & _
                     "ternro,thnro,adfecha,adcanthoras,admanual,advalido,adestado" & _
                     ") VALUES (" & Tercero & _
                     "," & thnro & _
                     "," & ConvFecha(FechaAD) & _
                     "," & Cantidad & _
                     ",0,0,'L'" & _
                     " )"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Acum Diario insertado "
        Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Else
        StrSql = "SELECT * FROM gti_acumdiario WHERE " & _
                 " thnro = " & thnro & _
                 " AND ternro = " & Tercero & _
                 " AND admanual = 0 AND adValido = 0 AND adestado = 'L'" & _
                 " AND adfecha = " & ConvFecha(FechaAD)
        If rs_GTI_AcumDiario.State = adStateOpen Then rs_GTI_AcumDiario.Close
        OpenRecordset StrSql, rs_GTI_AcumDiario
        
        If Not rs_GTI_AcumDiario.EOF Then
                StrSql = "UPDATE gti_acumdiario SET adcanthoras = " & Cantidad & _
                         " WHERE thnro = " & thnro & _
                         " AND ternro = " & Tercero & _
                         " AND admanual = 0 AND adValido = 0 AND adestado = 'L'" & _
                         " AND adfecha = " & ConvFecha(FechaAD)
            objConn.Execute StrSql, , adExecuteNoRecords
            Texto = "Acum Diario Actualizado."
            Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Else
            Texto = "El Acum Diario ya existe."
            Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            InsertaError 1, 54
        End If
    End If

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_TipHora.State = adStateOpen Then rs_TipHora.Close
If rs_GTI_AcumDiario.State = adStateOpen Then rs_GTI_AcumDiario.Close

Set rs_Empleado = Nothing
Set rs_TipHora = Nothing
Set rs_GTI_AcumDiario = Nothing

Fin:
Exit Sub

Manejador_De_Error:
    HuboError = True
'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub



Public Sub LineaModelo_307(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Apex
' Autor      : Truzzi J.
' Fecha      : 11/08/2006
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
' El formato es:    NRO. DE EVENTO
'                   NRO. LEGAJO DEL EMPLEADO
'                   TIPO DE NOTA
'                   RESULTADO
'                   NRO. LLEGAJO EVALUADOR
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim cant As Long
Dim I As Long
Dim datos

Dim evaevenro As Long
Dim empleg As Long
Dim evatnnro As Long
Dim evaresudesc As String
Dim evaluador As Long
Dim evacabnro As Long
Dim evldrnro As Long
Dim evaseccnro As Long

Dim rs_consulta As New ADODB.Recordset
Dim rs_Aux As New ADODB.Recordset
Dim rs_Aux2 As New ADODB.Recordset
    
    On Error GoTo Manejador_De_Error:
            
    Flog.writeline "                                                         "
    Flog.writeline "    -----------------------------------------------------"
    Flog.writeline "    -----------------------------------------------------"
    Flog.writeline "                                                         "


    Flog.writeline "procesando linea " & strLinea
    datos = Split(strLinea, separador)
    'Controlo que la linea tenga los 6 registros
    If UBound(datos) <> 4 Then
        If UBound(datos) < 4 Then
            Flog.writeline "    ERROR. La cantidad de registros de la línea es menor a la esperada."
        Else
            Flog.writeline "    ERROR. La cantidad de registros de la línea es mayor a la esperada."
        End If
        Exit Sub
    End If
   
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I
    
    'Nro Evento
    Flog.writeline "    chequeo que el numero de evento sea numerico"
    If Not IsNumeric(datos(0)) Then
        Flog.writeline "    El numero de evento: " & datos(0) & " no es numérico."
        Exit Sub
    End If
    evaevenro = datos(0)

    'Legajo Empleado
    Flog.writeline "    chequeo que el numero de legajo del empleado sea numerico"
    If Not IsNumeric(datos(1)) Then
        Flog.writeline "    El legajo del empleado: " & datos(1) & " no es numérico."
        Exit Sub
    End If
    empleg = datos(1)

    'Tipo de Nota
    Flog.writeline "    chequeo que el numero de nota sea numerico"
    If Not IsNumeric(datos(2)) Then
        Flog.writeline "    El Tipo de Nota: " & datos(2) & " no es numérico."
        Exit Sub
    End If
    evatnnro = datos(2)

    'Resultado
    Flog.writeline "    chequeo que el resultado tenga menos de 1500 caracteres"
    If Not Len(datos(3)) < 1500 Then
        Flog.writeline "    El Resultado: " & datos(3) & " tiene mas de 1500 caracteres."
        Exit Sub
    End If
    evaresudesc = datos(3)
    
    'Legajo Evalulador
    Flog.writeline "    chequeo que el numero de legajo del evaluador sea numerico"
    If Not IsNumeric(datos(4)) Then
        Flog.writeline "    El Resultado: " & datos(4) & " no es numérico."
        Exit Sub
    End If
    evaluador = datos(4)


    'Busco si existe el empleado
    Flog.writeline "    Busco si existe el empleado"
    StrSql = "SELECT ternro FROM empleado " & _
            " WHERE empleg = " & empleg
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "    No se encontró el empleado con legajo: " & empleg
        Exit Sub
    Else
        rs_consulta.Close
    End If
    
    'Busco si existe el evaluador
    Flog.writeline "    Busco si existe el evaluador"
    StrSql = "SELECT ternro FROM empleado " & _
            " WHERE empleg = " & evaluador
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "    No se encontró el evaluador con legajo: " & evaluador
        Exit Sub
    Else
        rs_consulta.Close
    End If
    
    
    'Busco si existe el tipo de nota
    Flog.writeline "   Busco si existe el tipo de nota"
    StrSql = "SELECT evatnnro FROM evatiponota " & _
            " WHERE evatnnro = " & evatnnro
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "    No se encontró el tipo de nota: " & evatnnro
        Exit Sub
    Else
        rs_consulta.Close
    End If
    
    
    'Me fijo si existe cabecera de evaluacion para ese empleado en ese evento
    Flog.writeline "   Me fijo si existe cabecera de evaluacion para ese empleado en ese evento"
    StrSql = "SELECT * FROM evacab " & _
             " INNER JOIN empleado on empleado.ternro = evacab.empleado " & _
             " WHERE evacab.evaevenro = " & evaevenro & " AND empleado.empleg=" & empleg
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "    No existe la cabecera de evaluacion para el empleado " & empleg & " y el evento " & evaevenro
        Exit Sub
    Else
        evacabnro = rs_consulta!evacabnro
        rs_consulta.Close
    End If
    
    
    
    'Me fijo que la evaluacion no este aprobada
    Flog.writeline "   Me fijo que la evaluacion no este aprobada"
    StrSql = "SELECT evacab.cabaprobada FROM evacab " & _
             " INNER JOIN empleado on empleado.ternro = evacab.empleado " & _
             " WHERE evacab.evaevenro = " & evaevenro & " AND empleado.empleg=" & empleg
    OpenRecordset StrSql, rs_consulta
    If Not rs_consulta.EOF Then
        If CInt(rs_consulta!cabaprobada) = -1 Then
            rs_consulta.Close
            Flog.writeline "    La evaluacion " & evaevenro & " esta aprobada"
            Exit Sub
        Else
            rs_consulta.Close
        End If
    End If
    
    
    'Obtengo el evaseccnro para el tipo de nota en este formulario y evento
    Flog.writeline "   Obtengo el evaseccnro para el tipo de nota en este formulario y evento"
    StrSql = "SELECT evaseccnota.evaseccnro FROM evaseccnota " & _
    " INNER JOIN evasecc on evasecc.evaseccnro = evaseccnota.evaseccnro " & _
    " INNER JOIN evatipoeva on evatipoeva.evatipnro = evasecc.evatipnro " & _
    " INNER JOIN evaevento on evaevento.evatipnro = evatipoeva.evatipnro " & _
    " WHERE evaseccnota.evatnnro = " & evatnnro & " and evaevento.evaevenro=" & evaevenro
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "    No existe el evaseccnro para el tipo de nota en este formulario y evento"
        Exit Sub
    Else
        evaseccnro = rs_consulta!evaseccnro
        rs_consulta.Close
    End If
        
    
    'Miro que exista relacion cabecera/seccion/evaluador en la tabla evadetevldor, y si hay me fijo si hay notas cradas.
    Flog.writeline "   Miro que exista relacion cabecera/seccion/evaluador en la tabla evadetevldor, y si hay me fijo si hay notas cradas."
    StrSql = "SELECT evadetevldor.evaseccnro,evadetevldor.evldrnro FROM evaseccnota" & _
    " INNER JOIN evasecc on evasecc.evaseccnro = evaseccnota.evaseccnro" & _
    " INNER JOIN evadetevldor on evadetevldor.evaseccnro = evaseccnota.evaseccnro" & _
    " INNER JOIN evaoblieva on evaoblieva.evaseccnro = evaseccnota.evaseccnro and evaoblieva.evatevnro=evadetevldor.evatevnro " & _
    " INNER JOIN empleado on empleado.ternro = evadetevldor.evaluador " & _
    " WHERE evadetevldor.evacabnro=" & evacabnro & " AND evadetevldor.evaseccnro=" & evaseccnro & " and empleado.empleg=" & evaluador & " AND evaseccnota.evatnnro = " & evatnnro & _
    " ORDER BY evaoblieva.evaobliorden "
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "    Error en la relacion cabecera=" & evacabnro & " / seccion=" & evaseccnro & " / evaluador=" & evaluador
        Exit Sub
    Else
        
        evldrnro = rs_consulta!evldrnro
            'Chequeo que exista un rol para el evaluador y traigo el primero
            Flog.writeline "   Chequeo que exista un rol para el evaluador y traigo el primero"
            StrSql = " SELECT * FROM evanotas " & _
            " WHERE evldrnro=" & evldrnro & " AND evatnnro=" & evatnnro
            OpenRecordset StrSql, rs_Aux2
            Flog.writeline "   Si existen notas craadas/llenas"
            'Si existen notas craadas/llenas
            If Not rs_Aux2.EOF Then
                Flog.writeline "    La seccion ya esta evaluada y tiene notas asignadas. Se borraran las anteriores y se agregaran las nuevas."
                StrSql = "DELETE FROM evanotas WHERE evldrnro=" & evldrnro & " AND evatnnro=" & evatnnro
                objConn.Execute StrSql, , adExecuteNoRecords
            End If
            
            'Si no existen notas craadas/llenas Agrego la Nota
            Flog.writeline "   Si no existen notas craadas/llenas Agrego la Nota"
            StrSql = "INSERT INTO evanotas ("
            StrSql = StrSql & "evldrnro,"
            StrSql = StrSql & "evatnnro,"
            StrSql = StrSql & "evanotadesc"
            StrSql = StrSql & ") VALUES ("
            StrSql = StrSql & "" & evldrnro & ","
            StrSql = StrSql & "" & evatnnro & ","
            StrSql = StrSql & "'" & evaresudesc & "'"
            StrSql = StrSql & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            'Cierro la seccion
            Flog.writeline "   Cierro la seccion"
            StrSql = "UPDATE evadetevldor SET evldorcargada=-1,habilitado=0  where evldrnro=" & evldrnro
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline "    Se inserto el resultado: " & evldrnro & " - Tipo de Nota: " & evatnnro & " - Evaluador: " & evldrnro
            Flog.writeline "    --------------------"
            rs_Aux2.Close
    End If
    
    'cierro y libero
    If rs_consulta.State = adStateOpen Then rs_consulta.Close
    Set rs_consulta = Nothing

Fin:
    Exit Sub

Manejador_De_Error:
    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub


Public Sub LineaModelo_306(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta en wella_motempzona. Wella
' Autor      : Fapitalle N.
' Fecha      : 16/06/2006
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
' El formato es:    Legajo
'                   Apellido y Nombre
'                   Codigo de zona
'                   Codigo de motivo
'                   % venta
'                   % cobranza
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim cant As Long
Dim I As Long
Dim datos
Dim empleg As Long
Dim Ternro As Long
Dim zoncod As String
Dim motcod As String
Dim porcvta As Double
Dim porccob As Double
Dim zonnro As Long
Dim motnro As Long
Dim empzonnro As Long
Dim motventcob As Integer

Dim rs_consulta As New ADODB.Recordset
Dim rs_motivo As New ADODB.Recordset
    
    On Error GoTo Manejador_De_Error:

    Flog.writeline "procesando linea " & strLinea
    Flog.writeline " "
    datos = Split(strLinea, separador)
    'Controlo que la linea tenga los 6 registros
    If UBound(datos) <> 5 Then
        If UBound(datos) < 5 Then
            Flog.writeline "    ERROR. La cantidad de registros de la línea es menor a la esperada."
        Else
            Flog.writeline "    ERROR. La cantidad de registros de la línea es mayor a la esperada."
        End If
        Exit Sub
    End If
   
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I
    
    'legajo
    If Not IsNumeric(datos(0)) Then
        Flog.writeline "El legajo: " & datos(0) & " no es numérico"
        Exit Sub
    End If
    empleg = datos(0)

    'apellido y nombre
    'descartar esta columna Datos(1)

    'codigo de zona
    zoncod = datos(2)
    If Len(zoncod) > 10 Then
        Flog.writeline "El Código de zona: " & zoncod & " tiene más de 10 caracteres"
        Exit Sub
    End If

    'Busco si existe el empleado
    StrSql = "SELECT ternro FROM v_empleado " & _
            " WHERE empleg = " & empleg
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "No se encontró el empleado con legajo: " & empleg
        Exit Sub
    Else
        Ternro = rs_consulta!Ternro
        rs_consulta.Close
    End If
    
    'Busco si existe la zona
    StrSql = "SELECT zonnro FROM wella_zonas " & _
            " WHERE zoncod = '" & zoncod & "'"
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "No se encontró la zona: " & zoncod
        Exit Sub
    Else
        zonnro = rs_consulta!zonnro
        rs_consulta.Close
    End If
    
    'codigo de motivo
    motcod = datos(3)
    If Len(motcod) > 10 Then
        Flog.writeline "El Código de motivo: " & motcod & " tiene más de 10 caracteres"
        Exit Sub
    End If

    '% venta
    If Not IsNumeric(datos(4)) Then
        Flog.writeline "El porcentaje de venta " & datos(4) & " no es numérico"
        Exit Sub
    End If
    porcvta = datos(4)
    
    '% cobranza
    If Not IsNumeric(datos(5)) Then
        Flog.writeline "El porcentaje de cobranza " & datos(5) & " no es numérico"
        Exit Sub
    End If
    porccob = datos(5)
    
    'Busco si existe el empleado con la zona
    StrSql = "SELECT empzonnro FROM wella_empzona " & _
            " WHERE ternro = " & Ternro & _
            " AND zonnro = " & zonnro
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "El empleado " & empleg & " no esta asociado a la zona " & zoncod
        Exit Sub
    Else
        empzonnro = rs_consulta!empzonnro
        rs_consulta.Close
    End If
    
    'Busco si existe el codigo de motivo
    StrSql = "SELECT * FROM wella_motivo " & _
            " WHERE motcod = '" & motcod & "'"
    OpenRecordset StrSql, rs_motivo

    If rs_motivo.EOF Then
        rs_motivo.Close
        Flog.writeline "No existe el motivo: " & motcod
        Exit Sub
    Else
        motnro = rs_motivo!motnro
        motventcob = rs_motivo!motventcob
        rs_motivo.Close
    End If
    
    'verifico de que clase es el motivo
    If (CDbl(motventcob) = CDbl(-1)) And (porcvta <> CDbl(0)) Then
        Flog.writeline "El motivo es de cobranza, el porcentaje de venta debe ser 0 "
        Exit Sub
    End If
    If (CDbl(motventcob) = CDbl(0)) And (porccob <> CDbl(0)) Then
        Flog.writeline "El motivo es de venta, el porcentaje de cobranza debe ser 0 "
        Exit Sub
    End If
    
    'Busco si existe otro empleado para esa zona motivo
    StrSql = "SELECT * FROM wella_motempzona " & _
            " WHERE empzonnro = " & empzonnro & _
            " AND motnro = " & motnro
    OpenRecordset StrSql, rs_consulta
    If Not rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "No puede existir mas de un porcentaje asociado a la zona, empleado y motivo"
        Exit Sub
    Else
        rs_consulta.Close
        StrSql = "INSERT INTO wella_motempzona ("
        StrSql = StrSql & "motnro,"
        StrSql = StrSql & "empzonnro,"
        StrSql = StrSql & "porcventa,"
        StrSql = StrSql & "porccobra"
        StrSql = StrSql & ") VALUES ("
        StrSql = StrSql & "" & motnro & ","
        StrSql = StrSql & "" & empzonnro & ","
        StrSql = StrSql & "" & Replace(porcvta, ",", ".") & ","
        StrSql = StrSql & "" & Replace(porccob, ",", ".") & ""
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        Flog.writeline "Se inserto el motempzona: Mot: " & motcod & " - Leg: " & empleg & " - Zon: " & zoncod
    End If
    
    
    'cierro y libero
    If rs_consulta.State = adStateOpen Then rs_consulta.Close
    Set rs_consulta = Nothing

Fin:
    Exit Sub

Manejador_De_Error:
    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub


Public Sub LineaModelo_305(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta en wella_empzona. Wella
' Autor      : Fapitalle N.
' Fecha      : 16/06/2006
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
' El formato es:    Legajo
'                   Apellido y Nombre
'                   Codigo de zona
'
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim cant As Long
Dim I As Long
Dim datos
Dim empleg As Long
Dim Ternro As Long
Dim zoncod As String
Dim motcod As String
Dim zonnro As Long


Dim rs_consulta As New ADODB.Recordset
    
    On Error GoTo Manejador_De_Error:

    Flog.writeline "procesando linea " & strLinea
    datos = Split(strLinea, separador)
    'Controlo que la linea tenga los 3 registros
    If UBound(datos) <> 2 Then
        If UBound(datos) < 2 Then
            Flog.writeline "    ERROR. La cantidad de registros de la línea es menor a la esperada."
        Else
            Flog.writeline "    ERROR. La cantidad de registros de la línea es mayor a la esperada."
        End If
        Exit Sub
    End If
   
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I
    
    'legajo
    If Not IsNumeric(datos(0)) Then
        Flog.writeline "El legajo: " & motcod & " no es numérico"
        Exit Sub
    End If
    empleg = datos(0)

    'apellido y nombre
    'descartar esta columna Datos(1)

    'codigo de zona
    zoncod = datos(2)
    If Len(zoncod) > 10 Then
        Flog.writeline "El Código de zona: " & zoncod & " tiene más de 10 caracteres"
        Exit Sub
    End If

    'Busco si existe el empleado
    StrSql = "SELECT ternro FROM v_empleado " & _
            " WHERE empleg = " & empleg
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "No se encontró el empleado con legajo: " & empleg
        Exit Sub
    Else
        Ternro = rs_consulta!Ternro
        rs_consulta.Close
    End If
    
    'Busco si existe la zona
    StrSql = "SELECT zonnro FROM wella_zonas " & _
            " WHERE zoncod = '" & zoncod & "'"
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "No se encontró la zona: " & zoncod
        Exit Sub
    Else
        zonnro = rs_consulta!zonnro
        rs_consulta.Close
    End If
    
    'Busco si existe otro empleado para esa zona
    StrSql = "SELECT * FROM wella_empzona " & _
            " WHERE zonnro = '" & zonnro & "'"
    OpenRecordset StrSql, rs_consulta
    If Not rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "No puede existir mas de un empleado asociado a la zona: " & zoncod
        Exit Sub
    Else
        rs_consulta.Close
        StrSql = "INSERT INTO wella_empzona ("
        StrSql = StrSql & "ternro,"
        StrSql = StrSql & "zonnro"
        StrSql = StrSql & ") VALUES ("
        StrSql = StrSql & "" & Ternro & ","
        StrSql = StrSql & "" & zonnro & ""
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        Flog.writeline "Se inserto el empzona: " & empleg & " - " & zoncod
    End If
    
    
    'cierro y libero
    If rs_consulta.State = adStateOpen Then rs_consulta.Close
    Set rs_consulta = Nothing

Fin:
    Exit Sub

Manejador_De_Error:
    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub


Public Sub LineaModelo_304(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta en wella_motivo. Wella
' Autor      : Fapitalle N.
' Fecha      : 16/06/2006
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
' El formato es:    Codigo Motivo(<=10 caracteres)
'                   Descripcion(<=50 carac)
'                   Indica Venta o Cobranza ( 0 o -1)
'
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim cant As Long
Dim I As Long
Dim datos
Dim motcod As String
Dim motdesabr As String
Dim motventcob As Integer
Dim rs_motivo As New ADODB.Recordset
    
    On Error GoTo Manejador_De_Error:

    Flog.writeline "procesando linea " & strLinea
    datos = Split(strLinea, separador)
    'Controlo que la linea tenga los 3 registros
    If UBound(datos) <> 2 Then
        If UBound(datos) < 2 Then
            Flog.writeline "    ERROR. La cantidad de registros de la línea es menor a la esperada."
        Else
            Flog.writeline "    ERROR. La cantidad de registros de la línea es mayor a la esperada."
        End If
        Exit Sub
    End If
    
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I
    
    'codigo de motivo
    motcod = datos(0)
    If Len(motcod) > 10 Then
        Flog.writeline "El Código de motivo: " & motcod & " tiene más de 10 caracteres"
        Exit Sub
    End If

    'descripcion de motivo
    motdesabr = Left(datos(1), 50)

    'venta o cobranza
    motventcob = 1
    If IsNumeric(datos(2)) Then
        motventcob = CInt(datos(2))
    End If
    If motventcob <> 0 And motventcob <> -1 Then
        Flog.writeline "El Codigo de Venta/Cobranza es inválido: " & datos(2) & "."
        Exit Sub
    End If
    
    'Busco si existe el codigo de motivo
    StrSql = "SELECT * FROM wella_motivo " & _
            " WHERE motcod = '" & motcod & "'"
    OpenRecordset StrSql, rs_motivo

    If rs_motivo.EOF Then
            StrSql = "INSERT INTO wella_motivo ("
            StrSql = StrSql & "motcod,"
            StrSql = StrSql & "motdesabr,"
            StrSql = StrSql & "motventcob"
            StrSql = StrSql & ") VALUES ("
            StrSql = StrSql & "'" & motcod & "',"
            StrSql = StrSql & "'" & motdesabr & "',"
            StrSql = StrSql & "" & motventcob & ""
            StrSql = StrSql & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
        
            Flog.writeline "Se inserto el Código de Motivo: " & motcod
    Else
            'Ya existe la zona
            Flog.writeline "Ya existe otro motivo con el Código de Motivo: " & motcod
    End If
    rs_motivo.Close
    
    'cierro y libero
    If rs_motivo.State = adStateOpen Then rs_motivo.Close
    Set rs_motivo = Nothing

Fin:
    Exit Sub

Manejador_De_Error:
    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub

Public Sub LineaModelo_266(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta en wella_zonas. Modelo para Wella
' Autor      : Fapitalle N.
' Fecha      : 20/10/2005
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
' El formato es: CodZona(10 digitos) y 100 ceros
' Ej: 00000001350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim cant As Long
Dim I As Long

Dim CodZona As String
Dim rs_zona As New ADODB.Recordset
    
    On Error GoTo Manejador_De_Error:

    'saco caracteres q pueden estar en un numero pero no son validos
    strLinea = Replace(strLinea, ".", "")
    strLinea = Replace(strLinea, ",", "")
    strLinea = Replace(strLinea, "-", "")
    strLinea = Replace(strLinea, " ", "")

    If Len(strLinea) < 10 Then
        InsertaError 1, 1
        Exit Sub
    End If

    'Numero de Zona
    pos1 = 1
    cant = 10
    
    If IsNumeric(Mid$(strLinea, pos1, cant)) Then
        CodZona = Mid$(strLinea, pos1, cant)
    Else
        InsertaError 1, 3
        Exit Sub
    End If

    'Busco si existe el codigo de zona
    StrSql = "SELECT * FROM wella_zonas " & _
            " WHERE zoncod = '" & CodZona & "'"
    OpenRecordset StrSql, rs_zona

    If rs_zona.EOF Then
            StrSql = "INSERT INTO wella_zonas ("
            StrSql = StrSql & "zoncod"
            StrSql = StrSql & ") VALUES ('" & CodZona & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
        
            Flog.writeline "Codigo de zona " & CodZona & " insertado."
    Else
            'Ya existe la zona
            Flog.writeline "Codigo de zona " & CodZona & " ya existe."
    End If
    rs_zona.Close
    
    'cierro y libero
    If rs_zona.State = adStateOpen Then rs_zona.Close
    Set rs_zona = Nothing

Fin:
    Exit Sub

Manejador_De_Error:
    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub


Public Sub LineaModelo_267(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta en ??. Modelo para Wella
' Autor      : Fapitalle N.
' Fecha      : 20/10/2005
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
' El formato es:
' Zona de Ventas(10), NroComprobante(18), Codigo de Movimiento(10), Letra de Comprobante(1), Fecha Facturacion (8), Importe(11), 150 ceros
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim cant As Long
Dim I As Long

Dim NroZona As Long
Dim CodZona As String
Dim NroMovimiento As Long
Dim CodMovimiento As String

Dim NroComprobante As String
Dim LetraComp As String
Dim FechaFact As String
Dim importe As Double
Dim ImporteStr As String

'Fecha = ConvFecha(CDate(Datos(6)))

'Dim Pliqnro As Long

Dim rs_zona As New ADODB.Recordset
Dim rs_codmov As New ADODB.Recordset
Dim rs_Periodo As New ADODB.Recordset
Dim rs_facturacion As New ADODB.Recordset

    'Numero de Zona
    pos1 = 1
    cant = 10
    If IsNumeric(Mid$(strLinea, pos1, cant)) Then
        CodZona = Mid$(strLinea, pos1, cant)
    Else
        Flog.writeline "El Codigo de Zona no es numérico."
        InsertaError 1, 3
        Exit Sub
    End If
    
    'Numero de Comprobante
    pos1 = pos1 + cant
    cant = 18
    If IsNumeric(Mid$(strLinea, pos1, cant)) Then
        NroComprobante = Mid$(strLinea, pos1, cant)
    Else
        Flog.writeline "El Numero de Comprobante no es numérico."
        InsertaError 2, 3
        Exit Sub
    End If
    
    'Codigo de Movimiento
    pos1 = pos1 + cant
    cant = 10
    If IsNumeric(Mid$(strLinea, pos1, cant)) Then
        CodMovimiento = Mid$(strLinea, pos1, cant)
    Else
        Flog.writeline "El Codigo de Movimiento no es numérico."
        InsertaError 3, 3
        Exit Sub
    End If
    
    'Letra del Comprobante
    pos1 = pos1 + cant
    cant = 1
'    If (UCase(Mid$(strlinea, pos1, cant)) <= "Z") And (UCase(Mid$(strlinea, pos1, cant)) >= "A") Then
        LetraComp = Mid$(strLinea, pos1, cant)
'    Else
'        Flog.Writeline "La letra del comprobante es inválida."
'        InsertaError 4, 13
'        Exit Sub
'    End If
    
    'Fecha Facturacion
    pos1 = pos1 + cant
    cant = 2
    FechaFact = Mid$(strLinea, pos1, cant) & "/"
    pos1 = pos1 + cant
    cant = 2
    FechaFact = FechaFact & Mid$(strLinea, pos1, cant) & "/"
    pos1 = pos1 + cant
    cant = 4
    FechaFact = FechaFact & Mid$(strLinea, pos1, cant)
    FechaFact = ConvFecha(CDate(FechaFact))
    
    'Monto
    pos1 = pos1 + cant
    cant = 11
    'ImporteStr =
    ImporteStr = Mid(strLinea, pos1, cant)
    If IsNumeric(CDbl(ImporteStr)) Then
        importe = StrToDbl(Replace(Mid(strLinea, pos1, cant), ".", ","))
    Else
        Flog.writeline "El importe no es numérico."
        InsertaError 6, 13
        Exit Sub
    End If
    
    'Busco si existe el codigo de zona
    StrSql = "SELECT * FROM wella_zonas " & _
            " WHERE zoncod = '" & CodZona & "'"
    OpenRecordset StrSql, rs_zona

    If rs_zona.EOF Then
        Flog.writeline "No existe Zona con el codigo: " & CodZona
        StrSql = "INSERT INTO wella_zonas ("
        StrSql = StrSql & "zoncod"
        StrSql = StrSql & ") VALUES ('" & CodZona & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
        NroZona = getLastIdentity(objConn, "wella_zonas")
        Flog.writeline "Codigo de zona " & CodZona & " insertado."
    Else
        NroZona = rs_zona!zonnro
    End If
    rs_zona.Close
    
    'Busco si existe el codigo de movimiento
    StrSql = "SELECT * FROM wella_cod_mov " & _
            " WHERE codmovcod = '" & CodMovimiento & "'"
    OpenRecordset StrSql, rs_codmov

    If rs_codmov.EOF Then
        Flog.writeline "No existe Movimiento con el codigo: " & CodMovimiento
        StrSql = "INSERT INTO wella_cod_mov ("
        StrSql = StrSql & "codmovcod, codmovdesc, codmovdebito, codmovafecta"
        StrSql = StrSql & ") VALUES ('" & CodMovimiento & "', '" & CodMovimiento & "', -1, 0)"
        objConn.Execute StrSql, , adExecuteNoRecords
        NroMovimiento = getLastIdentity(objConn, "wella_cod_mov")
        Flog.writeline "Codigo de Movimiento " & CodMovimiento & " insertado."
    Else
        NroMovimiento = rs_codmov!codmovnro
    End If
    rs_codmov.Close
    
'================== ingreso los datos en la tabla de facturacion
    StrSql = "SELECT * FROM periodo " & _
            " WHERE pliqnro = " & Pliqnro
    OpenRecordset StrSql, rs_Periodo
    If rs_Periodo.EOF Then
        Flog.writeline "No existe el periodo de liquidacion Nro: " & Pliqnro
        InsertaError 6, 13
        Exit Sub
    Else
        StrSql = "SELECT * FROM wella_facturacion " & _
                " WHERE pliqnro = " & Pliqnro & _
                " AND zonnro = " & NroZona & _
                " AND factcomprnro = '" & NroComprobante & "'" & _
                " AND factletra = '" & LetraComp & "'" & _
                " AND codmovnro = " & NroMovimiento & _
                " AND factfecha = " & FechaFact
        OpenRecordset StrSql, rs_facturacion
        If rs_facturacion.EOF Then
            StrSql = "INSERT INTO wella_facturacion ("
            StrSql = StrSql & "pliqnro, zonnro, factcomprnro, codmovnro, factletra, factfecha, factimporte"
            StrSql = StrSql & ") VALUES ( " & _
                    "" & Pliqnro & ", " & _
                    "" & NroZona & ", " & _
                    "'" & NroComprobante & "', " & _
                    "" & NroMovimiento & ", " & _
                    "'" & LetraComp & "', " & _
                    "" & FechaFact & ", " & _
                    "" & ImporteStr & ") "
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline "Linea Insertada."
        Else
            StrSql = "UPDATE wella_facturacion " & _
                    " SET factimporte = " & ImporteStr & _
                    " WHERE pliqnro = " & Pliqnro & _
                    " AND zonnro = " & NroZona & _
                    " AND factcomprnro = '" & NroComprobante & "'" & _
                    " AND factletra = '" & LetraComp & "'" & _
                    " AND codmovnro = " & NroMovimiento & _
                    " AND factfecha = " & FechaFact
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline "Linea Modificada. Importe Ant: " & rs_facturacion!factimporte & " Nuevo: " & importe
        End If
        
    End If
    rs_Periodo.Close

'cierro y libero
If rs_zona.State = adStateOpen Then rs_zona.Close
If rs_codmov.State = adStateOpen Then rs_codmov.Close

Set rs_zona = Nothing
Set rs_codmov = Nothing

End Sub


Public Sub LineaModelo_216(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta en acu_age. Modelo para Citrusvil
'              El formato es:
'              CUIL; Acunro; Monto; catidad; año,mes
' Autor      : FGZ
' Fecha      : 29/07/2004
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
Dim I As Long

Dim Tercero As Long
Dim Cuil As String
'Dim AcuNro As Long
Dim Monto As Single
Dim Rem_Total As Single
Dim Remu5 As Single

Dim Cantidad As Single
Dim Anio As Long
Dim Mes As Long
Dim Pliqnro As Long

Dim rs_CUIL As New ADODB.Recordset
'Dim rs_Empleado As New adodb.Recordset
Dim rs_Acumulador As New ADODB.Recordset
Dim rs_Acu_Age As New ADODB.Recordset
Dim rs_Periodo As New ADODB.Recordset
Dim rs_Confrep As New ADODB.Recordset

' El formato es:
' CUIL; Acunro; Monto; catidad; año,mes

    'CUIL
    pos1 = 1
    pos2 = 12
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        Cuil = Mid$(strLinea, pos1, pos2 - pos1)
        Cuil = Left$(Cuil, 2) & "-" & Mid$(Cuil, 3, Len(Cuil) - 3) & "-" & Right$(Cuil, 1)
    Else
        InsertaError 1, 8
        Exit Sub
    End If
    
    'Monto
    'Rem total
    pos1 = 70
    pos2 = 78
    Rem_Total = CSng(Replace(Mid(strLinea, pos1, pos2 - pos1), SeparadorDecimal, "."))
               
    'Remu5
    pos1 = 298
    pos2 = 306
    Remu5 = CSng(Replace(Mid(strLinea, pos1, pos2 - pos1), SeparadorDecimal, "."))
               
    Monto = Rem_Total + Remu5
    
    'Parametros fijos ------------------------------------
    'Acumulador
'    AcuNro = 1
    'se sacó del confrep afuera del este procedimiento
    StrSql = "SELECT * FROM confrep where confrep.repnro = 118 AND confrep.confnrocol = 1"
    OpenRecordset StrSql, rs_Confrep
    If rs_Confrep.EOF Then
       Flog.writeline Espacios(Tabulador * 1) & "Falta configurar el acumulador en el reporte 86 columna 1"
       FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": Falta configurar el acumulador en el reporte 86 columna 1"
       InsertaError 0, 106
       HuboError = True
       Exit Sub
    Else
        acuNro = rs_Confrep!Confval
    End If
    
    
    'Cantidad
    Cantidad = 0
    
    'Mes y año
    If Month(Date) = 1 Then
        Mes = 12
        Anio = Year(Date) - 1
    Else
        Mes = Month(Date) - 1
        Anio = Year(Date)
    End If
    
' ====================================================================

'   Validar los parametros Levantados
    ' Buscar el CUIL
    StrSql = " SELECT * from ter_doc cuil " & _
             " WHERE tidnro = 10 AND cuil.nrodoc = '" & Cuil & "'"
    OpenRecordset StrSql, rs_CUIL
    If Not rs_CUIL.EOF Then
        Tercero = rs_CUIL!Ternro
    Else
        Flog.writeline "No se encontró el tercero correspopndiente al cuil " & Cuil
        InsertaError 1, 8
        Exit Sub
    End If

''Valido el acumulador
'StrSql = "SELECT * FROM acumulador WHERE acunro = " & AcuNro
'OpenRecordset StrSql, rs_Acumulador
'If rs_Acumulador.EOF Then
'    Flog.writeline "El Acumulador no existe " & AcuNro
'    InsertaError 2, 35
'    Exit Sub
'End If

'Que el monto sea valido
If Not IsNumeric(Monto) Then
    Flog.writeline "El monto no es numerico " & Monto
    InsertaError 3, 5
    Exit Sub
End If

''Que la cantidad sea valida
'If Not IsNumeric(Cantidad) Then
'    Flog.writeline "La cantidad no es numerico " & Cantidad
'    InsertaError 4, 5
'    Exit Sub
'End If
'
''Que el año sea valido
'If Not IsNumeric(Anio) Then
'    Flog.writeline "El año no es numerico " & Anio
'    InsertaError 5, 5
'    Exit Sub
'End If
'
''Que el mes sea valido
'If Not IsNumeric(Mes) Then
'    Flog.writeline "El mes no es numerico " & Anio
'    InsertaError 6, 5
'    Exit Sub
'End If

'Busco el pliqnro correspondiente a ese año y mes
StrSql = "SELECT * FROM PERIODO WHERE pliqmes =" & Mes
StrSql = StrSql & " AND pliqanio =" & Anio
OpenRecordset StrSql, rs_Periodo
If rs_Periodo.EOF Then
    Flog.writeline "No existe periodo correspondiente al año " & Anio & " y mes  " & Mes
    InsertaError 6, 5
    Exit Sub
Else
    Pliqnro = rs_Periodo!Pliqnro
End If

'=============================================================
'Busco si existe el acu_age
StrSql = "SELECT * FROM acu_age " & _
         " WHERE acunro = " & acuNro & _
         " AND pliqnro = " & Pliqnro & _
         " AND empage = " & Tercero
OpenRecordset StrSql, rs_Acu_Age

If rs_Acu_Age.EOF Then
        StrSql = "INSERT INTO acu_age ("
        StrSql = StrSql & "acunro,acagmonto,acagcant,empage,pliqnro"
        StrSql = StrSql & ") VALUES (" & acuNro
        StrSql = StrSql & "," & Monto
        StrSql = StrSql & "," & Cantidad
        StrSql = StrSql & "," & Tercero
        StrSql = StrSql & "," & Pliqnro
        StrSql = StrSql & " )"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        Flog.writeline "Acumulador insertado "
Else
        'Piso los datos del ticket
        StrSql = "UPDATE acu_age SET acagmonto = " & Monto
        StrSql = StrSql & " , acagcant = " & Cantidad
        StrSql = StrSql & " WHERE acunro = " & acuNro
        StrSql = StrSql & " AND pliqnro = " & Pliqnro
        StrSql = StrSql & " AND empage = " & Tercero
        objConn.Execute StrSql, , adExecuteNoRecords
            
        Flog.writeline "Acumulador Actualizado "
End If

'cierro y libero
If rs_CUIL.State = adStateOpen Then rs_CUIL.Close
If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
If rs_Acu_Age.State = adStateOpen Then rs_Acu_Age.Close
If rs_Acumulador.State = adStateOpen Then rs_Acumulador.Close

Set rs_CUIL = Nothing
Set rs_Periodo = Nothing
Set rs_Acu_Age = Nothing
Set rs_Acumulador = Nothing

End Sub

Public Sub LineaModelo_226(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Procedimiento de incorporacion de postulantes. Version Estandar
' Autor      : Lisandro Moro
' Fecha      : 24/11/2004
' Ultima Mod.: FGZ - 17/08/2005
' Descripcion:
' ---------------------------------------------------------------------------------------------
    Dim datos() As String
    Dim Ternro As Long
    Dim NroDom As Long
    Dim a As Long
    Dim Xconst As Long
    Dim ActPasos As Boolean
    Dim tempString As String
    
    Dim rs_Ter As New ADODB.Recordset
    Dim rs_Aux As New ADODB.Recordset
    Dim I As Long
    
    
    Flog.writeline "procesando linea " & strLinea
    
    'Si ocurre un error antes de insertar el tercero se aborta el postulante
    On Error GoTo Manejador_De_Error:
    
    datos = Split("0" & separador & strLinea, separador)
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I
    '--Documentos--
    datos(1) = TraerCodTipoDocumento(CStr(datos(1)))  'tipoDocumento
    datos(2) = StrToStr(CStr(datos(2)), 30) 'numeroDocumento
    datos(2) = Replace(datos(2), ".", "") 'elimino puntos y comas
    datos(2) = Replace(datos(2), ",", "")
    
    '--Tercero
    datos(3) = StrToStr(datos(3), 25) 'ternom
    datos(4) = StrToStr(datos(4), 25)  'ternom2
    datos(5) = StrToStr(datos(5), 25) 'terape
    datos(6) = StrToStr(datos(6), 25) 'terape2
    datos(7) = ConvFecha(CDate(datos(7))) 'terfecnac
    'If UCase(Datos(8)) = "MASCULINO" Then Datos(8) = -1 Else Datos(8) = 0 'tersex
    If (UCase(datos(8)) = "M") Or (UCase(datos(8)) = "-1") Or (UCase(datos(8)) = "MASCULINO") Then
        datos(8) = -1
    Else
        datos(8) = 0
    End If

    datos(23) = StrToStr(datos(23), 100) ' teremail
    datos(13) = TraerCodNacionalidad(CStr(datos(13))) ' nacionalnro
    datos(9) = StrToStr(TraerCodEstadoCivil(CStr(datos(9))), 8) 'estcivnro
    If datos(14) = "" Then
        datos(14) = "''"
    Else
        datos(14) = ConvFecha(CDate(datos(14))) 'fechaingresopais
    End If
    datos(11) = StrToStr(datos(11), 25) 'tercasape
    If datos(10) = "" Then
        datos(10) = "NULL"
    Else
        datos(10) = ConvFecha(CDate(datos(10))) 'terfecestciv
    End If
    datos(12) = TraerCodPais(CStr(datos(12))) 'paisnro


    'FGZ - 06/04/2005
    StrSql = "SELECT * FROM ter_doc  "
    StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
    StrSql = StrSql & " AND nrodoc = '" & datos(2) & "'"
    OpenRecordset StrSql, rs_Ter

    If rs_Ter.EOF Then
        StrSql = " INSERT INTO tercero (ternom, ternom2, terape, terape2, terfecnac, tersex, teremail, nacionalnro, estcivnro, terfecing, tercasape,terfecestciv, paisnro ) VALUES ("
        StrSql = StrSql & "'" & datos(3) & "'"      'ternom
        StrSql = StrSql & ",'" & datos(4) & "'"     'ternom2
        StrSql = StrSql & ",'" & datos(5) & "'"      'terape
        StrSql = StrSql & ",'" & datos(6) & "'"     'terape2
        StrSql = StrSql & "," & datos(7)            'terfecnac
        StrSql = StrSql & "," & CLng(datos(8))      'tersex
        StrSql = StrSql & ",'" & datos(23) & "'"    'teremail
        StrSql = StrSql & "," & CLng(datos(13))     'nacionalnro
        StrSql = StrSql & ",'" & datos(9) & "'"     'estcivnro
        StrSql = StrSql & "," & datos(14)           'fechaingresopais
        StrSql = StrSql & ",'" & datos(11) & "'"    'tercasape
        StrSql = StrSql & "," & datos(10)           'terfecestciv
        StrSql = StrSql & "," & datos(12)           'paisnro
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Inserto en la tabla de tercero"
    
        '--Obtengo el ternro--
        Ternro = getLastIdentity(objConn, "tercero")
        Flog.writeline "-----------------------------------------------"
        Flog.writeline "Codigo de Tercero = " & Ternro
    
        '--Inserto el Registro correspondiente en ter_tip--
        StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & Ternro & ",14)"
        objConn.Execute StrSql, , adExecuteNoRecords
        'Flog.Writeline "Inserto el tipo de tercero 14 en ter_tip"
        
        'Desactivo el manejador de erorres
        On Error GoTo 0
        
        
        'Cualquier error que ocurra de aquí en adelante sigue adelante
        ' tratando de insertar la mayor cantidad de datos posible
        On Error Resume Next
        'HuboError = False
        
        StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
        StrSql = StrSql & " VALUES(" & Ternro & "," & datos(1) & ",'" & datos(2) & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        '--------------------------------------------------------------------------------
        '--Inserto el Domicilio--
        StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
        StrSql = StrSql & " VALUES(1," & Ternro & ",-1,2)"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "inserto el Domicilio"
    
        '--Obtengo el numero de domicilio en la tabla--
        NroDom = CLng(getLastIdentity(objConn, "cabdom"))
    
        '--Si no tiene algun dato le agregamos unos ficticios--
        datos(24) = StrToStr(datos(24), 30) 'dirCalle
        datos(25) = StrToStr(datos(25), 8) 'dirNumero
        datos(26) = StrToStr(datos(26), 8) 'dirPiso
        datos(27) = StrToStr(datos(27), 8) 'dirDepto
        datos(28) = StrToStr(datos(28), 8) 'dirTorre
        datos(29) = StrToStr(datos(29), 8) 'dirManzana
        datos(30) = StrToStr(datos(30), 8) 'dirSector
        datos(31) = StrToStr(datos(31), 12) 'dirCP
        datos(32) = TraerCodLocalidad(CStr(datos(32))) 'dirLocalidad
        datos(33) = TraerCodProvincia(CStr(datos(33)))   'dirProvincia
        datos(34) = TraerCodPartido(CStr(datos(34)))  'dirPartido
        datos(35) = TraerCodZona(CStr(datos(35)), CLng(datos(33)))  'dirZona
            If datos(35) = "" Then datos(35) = "NULL"
        datos(36) = TraerCodPais(CStr(datos(36))) 'dirPais
    
        StrSql = " INSERT INTO detdom (domnro,calle,nro,sector,torre,piso,oficdepto,manzana,codigopostal,"
        StrSql = StrSql & "locnro,provnro,paisnro, zonanro, partnro) "
        StrSql = StrSql & " VALUES ("
        StrSql = StrSql & NroDom
        StrSql = StrSql & ",'" & datos(24) & "'"
        StrSql = StrSql & ",'" & datos(25) & "'"
        StrSql = StrSql & ",'" & datos(30) & "'"
        StrSql = StrSql & ",'" & datos(28) & "'"
        StrSql = StrSql & ",'" & datos(26) & "'"
        StrSql = StrSql & ",'" & datos(27) & "'"
        StrSql = StrSql & ",'" & datos(29) & "'"
        StrSql = StrSql & ",'" & datos(31) & "'"
        StrSql = StrSql & "," & datos(32)
        StrSql = StrSql & "," & datos(33)
        StrSql = StrSql & "," & datos(36)
        StrSql = StrSql & "," & datos(35)
        StrSql = StrSql & "," & datos(34)
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Err.Clear
        Else
            Flog.writeline "Inserte el domicilio "
        End If
       
        Flog.writeline "Inserto el Domicilio "
    
        '--Telefonos-Personal--
        datos(21) = validatelefono(StrToStr(datos(21), 20))
        If datos(21) <> "" Then
            StrSql = " INSERT INTO telefono "
            'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
            StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
            StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0,1 ) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
            Else
                Flog.writeline "Inserte el telefono"
            End If
        End If
        
        '--Telefonos-Celular--
        'FGZ 11/04/2005 - quieren que lo cargue como telefono comun
        datos(22) = validatelefono(StrToStr(datos(22), 20))
        If datos(22) <> "" Then
            StrSql = " INSERT INTO telefono "
            'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
            StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
            StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0,2 ) "
            objConn.Execute StrSql, , adExecuteNoRecords
            'Flog.Writeline " Inserto el telefono calular "
            'Flog.Writeline " Inserto el segundo telefono "
            If Err Then
                Err.Clear
            Else
                Flog.writeline "Inserte el telefono2 "
            End If
        End If
    
        '--Complemento--
        If datos(15) = "" Then
            datos(15) = 0
        Else
            datos(15) = CLng(StrToInt(datos(15))) 'cantidadHijos
        End If
        datos(16) = StrToStr(datos(16), 60) 'imagen
        If datos(17) = "" Then
            datos(17) = "NULL"
        Else
            datos(17) = ConvFecha(CDate(datos(17))) 'fechaIngresoCV
        End If
        datos(18) = StrToStr(datos(18), 250) 'referencias
        If datos(19) = "" Then
            datos(19) = TraerCodProcedencia("Web Deloitte") 'procedencia
        Else
            datos(19) = TraerCodProcedencia(CStr(datos(19))) 'procedencia
        End If
        If datos(20) = "" Then
            datos(20) = 0
        Else
            datos(20) = CDbl(StrToDbl(datos(20))) 'remuneracionPretendida
        End If
        
        'StrSql = " INSERT INTO pos_postulante "
        'StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro) "
        'StrSql = StrSql & " VALUES (" & ternro & " ," & CDbl(Datos(20)) & ", " & CLng(Datos(15)) & ", '" & Datos(16) & "', " & Datos(17) & ",'" & Datos(18) & "', " & Datos(19) & ") "
        'objConn.Execute StrSql, , adExecuteNoRecords
        'If Err Then
        '    Flog.Writeline "Error al inserte el Complemento: " & Err.Description
        '    Flog.Writeline "SQL ejecutada: " & StrSql
        '    Err.Clear
        'Else
        '    Flog.Writeline "Inserte el Complemento "
        'End If
        
        'JMH - 07/03/2006 Se agrego el estposnro = 4 (postulantre activo)
        StrSql = " INSERT INTO pos_postulante "
        StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro,estposnro) "
        StrSql = StrSql & " VALUES (" & Ternro & " ," & CDbl(datos(20)) & ", " & CLng(datos(15)) & ", '" & datos(16) & "', " & datos(17) & ",'" & datos(18) & "', " & datos(19) & ",4) "
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el Complemento: " & Err.Description
            Flog.writeline "SQL ejecutada: " & StrSql
            Err.Clear
        Else
            Flog.writeline "Inserte el Complemento "
        End If
    
        '--Estudios-formales--(49)licho por aca
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 37) <> "" Then
                datos(Xconst + 37) = TraerCodNivelEstudio(datos(Xconst + 37))   'EFnivel8
                'FGZ - 29/08/2005
                'If Datos(Xconst + 38) = "Graduado" Then Datos(Xconst + 38) = -1 Else Datos(Xconst + 38) = 0
                If datos(Xconst + 38) = -1 Then datos(Xconst + 38) = -1 Else datos(Xconst + 38) = 0
                    'Datos(Xconst + 38) = Datos(Xconst + 38)   'EFcompleto8
                datos(Xconst + 39) = TraerCodTitulo(CStr(datos(Xconst + 39)), CLng(datos(Xconst + 37)))   'EFtitulo8
                datos(Xconst + 40) = TraerCodInstitucionAbreviada(CStr(datos(Xconst + 40)))   'EFinstitucion8
                datos(Xconst + 41) = TraerCodCarrera(CStr(datos(Xconst + 41)))    'EFcarrera8
                If datos(Xconst + 42) <> "" Then
                    datos(Xconst + 42) = ConvFecha(CDate(datos(Xconst + 42)))   'EFfechaDesde8
                Else
                    datos(Xconst + 42) = "NULL"
                End If
                If datos(Xconst + 43) <> "" Then
                    datos(Xconst + 43) = ConvFecha(CDate(datos(Xconst + 43)))   'EFfechaHasta8
                Else
                    datos(Xconst + 43) = "NULL"
                End If
                datos(Xconst + 44) = StrToStr(datos(Xconst + 44), 30)   'EFpromedio8
                datos(Xconst + 45) = StrToStr(datos(Xconst + 45), 60)   'EFrango8
                If datos(Xconst + 46) <> "" And UCase(datos(Xconst + 46)) <> "NO" Then
                    datos(Xconst + 46) = -1  'EFestudiaActualmente8
                Else
                    datos(Xconst + 46) = 0  'EFestudiaActualmente8
                End If
        
                StrSql = " INSERT INTO cap_estformal "
                StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
                StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 37)) & ", " & Ternro & " ," & datos(Xconst + 39) & "," & datos(Xconst + 40) & "," & datos(Xconst + 41) & "," & datos(Xconst + 42) & " ," & datos(Xconst + 43) & "," & datos(Xconst + 38) & "," & datos(Xconst + 46) & ",'" & datos(Xconst + 45) & "','" & datos(Xconst + 44) & "' ) "
                'StrSql = StrSql & " Go "
                Err.Clear
                objConn.Execute StrSql, , adExecuteNoRecords
'                StrSql = " INSERT INTO cap_estformal "
'                StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
'                StrSql = StrSql & " VALUES ("
'                StrSql = StrSql & CLng(Datos(Xconst + 37))
'                StrSql = StrSql & ", " & ternro
'                StrSql = StrSql & " ," & Datos(Xconst + 39)
'                StrSql = StrSql & "," & Datos(Xconst + 40)
'                StrSql = StrSql & "," & Datos(Xconst + 41)
'                StrSql = StrSql & "," & Datos(Xconst + 42)
'                StrSql = StrSql & " ," & Datos(Xconst + 43)
'                StrSql = StrSql & "," & Datos(Xconst + 38)
'                StrSql = StrSql & "," & Datos(Xconst + 46)
'                StrSql = StrSql & ",'" & Datos(Xconst + 45)
'                StrSql = StrSql & "','" & Datos(Xconst + 44)
'                StrSql = StrSql & "' ) "
'                objConn.Execute StrSql, , adExecuteNoRecords
                
                If Err Then
                    Flog.writeline "Error al inserte el estudio formal: " & Err.Description
                    Flog.writeline "SQL ejecutada: " & StrSql
                    Err.Clear
                Else
                    Flog.writeline "Inserte el estudio formal " & datos(Xconst + 37)
                    ActPasos = True
                End If
            End If
            Xconst = Xconst + 10
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 49)
        End If
        ActPasos = False
        
        
        '--Experiencia-Laboral----Empleos Anteriores--57
        'reemplazos
        '117 x 77
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 78) <> "" And datos(Xconst + 77) <> "" Then
                datos(Xconst + 77) = TraerCodCargo(CStr(datos(Xconst + 77)))    'ELcargoAnterior16
                datos(Xconst + 78) = TraerCodListaEmpresa(CStr(datos(Xconst + 78)))   'ELempresa16 lempnro
                datos(Xconst + 79) = StrToStr(datos(Xconst + 79), 200) 'ELtareaDesempenada16
                If datos(Xconst + 80) <> "" Then
                    datos(Xconst + 80) = ConvFecha(CDate(datos(Xconst + 80)))  'ELfechaDesde16
                Else
                    datos(Xconst + 80) = "NULL"
                End If
                If datos(Xconst + 81) <> "" Then
                    datos(Xconst + 81) = ConvFecha(CDate(datos(Xconst + 81)))  'ELfechaHasta16
                Else
                    datos(Xconst + 81) = "NULL"
                End If
                If datos(Xconst + 82) = "" Then
                    datos(Xconst + 82) = 0
                Else
                    datos(Xconst + 82) = StrToDbl(datos(Xconst + 82))   'ELremuneracion16
                End If
                If datos(Xconst + 83) <> "" Then
                    datos(Xconst + 83) = TraerCodCausa(CStr(datos(Xconst + 83)))   'ELcausaBaja16
                Else
                    datos(Xconst + 83) = "NULL"
                End If
            
                StrSql = " INSERT INTO empant "
                'FGZ - 29/08/2005
                'cambié los nombres de los campos donde inserta las fechas desde y hasta
                'StrSql = StrSql & " ( empleado, empatareas, lempnro, empadesde, emmpahasta, carnro, emparemu ) "
                StrSql = StrSql & " ( empleado, empatareas, lempnro, empaini, empafin, carnro, emparemu, caunro ) "
                StrSql = StrSql & " VALUES (" & Ternro & ", '" & datos(Xconst + 79) & "' ," & datos(Xconst + 78) & "," & datos(Xconst + 80) & "," & datos(Xconst + 81) & "," & datos(Xconst + 77) & "," & datos(Xconst + 82) & "," & datos(Xconst + 83) & "  ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al inserte el Empleo Anterior: " & Err.Description
                    Flog.writeline "SQL ejecutada: " & StrSql
                    Err.Clear
                Else
                    Flog.writeline "Inserto los datos del Empleo Anterior"
                    ActPasos = True
                End If
            End If
            Xconst = Xconst + 7
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 57)
        End If
        ActPasos = False
    
        '--Idiomas--53
        'reemplazos
        '229 x 105
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 105) <> "" Then
                If datos(Xconst + 106) <> "" Or datos(Xconst + 107) <> "" Or datos(Xconst + 108) <> "" Then
                    datos(Xconst + 105) = TraerCodIdioma(CStr(datos(Xconst + 105))) 'idioma1
                    datos(Xconst + 106) = TraerCodIdiNivel(CStr(datos(Xconst + 106))) 'idiomaLee1
                    datos(Xconst + 107) = TraerCodIdiNivel(CStr(datos(Xconst + 107))) 'idiomaHabla1
                    datos(Xconst + 108) = TraerCodIdiNivel(CStr(datos(Xconst + 108))) 'idiomaEscribe1
                    
                    If Not TieneIdioma(Ternro, CLng(datos(Xconst + 105))) Then
                        StrSql = " INSERT INTO emp_idi "
                        StrSql = StrSql & " (idinro, empleado, empidlee, empidhabla, empidescr) "
                        StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 105)) & ", " & Ternro & " ," & datos(Xconst + 106) & ", " & datos(Xconst + 107) & ", " & datos(Xconst + 108) & " ) "
                    Else
                        StrSql = " UPDATE emp_idi SET "
                        StrSql = StrSql & " empidlee = " & datos(Xconst + 106)
                        StrSql = StrSql & ", empidhabla = " & datos(Xconst + 107)
                        StrSql = StrSql & ", empidescr = " & datos(Xconst + 108)
                        StrSql = StrSql & " where empleado = " & Ternro & " and idinro = " & CLng(datos(Xconst + 105))
                    End If
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al inserte el Idioma " & datos(Xconst + 105) & "-" & Err.Description
                        Flog.writeline "SQL ejecutada: " & StrSql
                        Err.Clear
                    Else
                        Flog.writeline "Inserte el Idioma " & datos(Xconst + 105)
                        ActPasos = True
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 53)
        End If
        ActPasos = False
    
        
        '--Estudios-Informales--50
        'Reemplazos
        ' 249 x 121
        ActPasos = False
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 121) <> "" Then
                tempString = StrToStr(datos(121 + Xconst), 50) ''descCurso  estinfdesabr
                datos(121 + Xconst) = datos(121 + Xconst) ''descCurso  estinfdesabr
                datos(122 + Xconst) = TraerCodTipoCurso(StrToStr(datos(122 + Xconst), 50)) 'tipoCurso tipcurnro
                If datos(123 + Xconst) <> "" Then
                    datos(123 + Xconst) = ConvFecha(datos(123 + Xconst)) 'fechaCurso  estinffecha
                Else
                    datos(123 + Xconst) = ConvFecha(Date)
                End If
                datos(124 + Xconst) = TraerCodInstitucion(CStr(datos(124 + Xconst))) 'institucionCurso instnro
                If datos(121 + Xconst) = "" Or datos(122 + Xconst) = "" Or datos(124 + Xconst) = "" Then
                    Flog.writeline "Error al insertar el estudio informal por falta de datos "
                Else
                    StrSql = " INSERT INTO cap_estinformal "
                    StrSql = StrSql & " (ternro, estinfdesabr, estinffecha, tipcurnro, instnro) "
                    StrSql = StrSql & " VALUES (" & Ternro & " , '" & tempString & "'," & datos(123 + Xconst) & "," & CLng(datos(122 + Xconst)) & "," & CLng(datos(124 + Xconst)) & ")"
                    Err.Clear
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al insertar el estudio informal: " & Err.Description
                        Flog.writeline "SQL ejecutada: " & StrSql
                        Err.Clear
                    Else
                        Flog.writeline "Inserto los datos del estudio informal "
                        ActPasos = True
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 50)
        End If
        ActPasos = False
        
        
        '--Especializaciones--51
        'reemplazos
        '253 x 137
        Xconst = 0
        ActPasos = False
        For a = 0 To 3
            If datos(Xconst + 139) <> "" Then
                datos(Xconst + 137) = TraerCodEspecializacion(CStr(datos(Xconst + 137))) 'tipo
                datos(Xconst + 138) = TraerCodEltoana(CStr(datos(Xconst + 138)), CLng(datos(Xconst + 137))) 'elemento
                datos(Xconst + 139) = TraerCodNivelEspecializacion(CStr(datos(Xconst + 139))) 'nivel
                
                StrSql = " INSERT INTO especemp "
                StrSql = StrSql & " (eltananro, ternro, espnivnro ) "
                StrSql = StrSql & " VALUES (" & datos(Xconst + 138) & ", " & Ternro & " ," & datos(Xconst + 139) & ") "
'                StrSql = StrSql & " VALUES (" & datosEltoAna(0, a) & ", " & ternro & " ," & Datos(Xconst + 139) & ") "
                Err.Clear
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al insertar la especialidad: " & Err.Description
                    Flog.writeline "SQL ejecutada: " & StrSql
                    Err.Clear
                Else
                    Flog.writeline "Inserto los datos de la especialidad."
                    ActPasos = True
                End If
            Else
                Flog.writeline "Error al insertar la especialidad por falta de datos."
            End If
            Xconst = Xconst + 3
        Next a
        If ActPasos Then
           Flog.writeline "Inserto los datos de la especialidad"
           Call InsertarPaso(Ternro, 51)
           ActPasos = False
        End If
    Else
        Ternro = rs_Ter!Ternro
        Flog.writeline "-----------------------------------------------"
        Flog.writeline "Codigo de Tercero = " & Ternro
        
        'FGZ - 27/07/2005
        'si el tercereo existe pero es de tipo empleado ==> no se hace nada
        '1       Empleado
        '2       Empleado Agencia
        StrSql = " SELECT * FROM ter_tip"
        StrSql = StrSql & " WHERE ternro = " & Ternro
        StrSql = StrSql & " AND tipnro = 1"
        'StrSql = StrSql & " AND (tipnro = 1 OR tipnro = 2)"
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If Not rs_Aux.EOF Then
            Flog.writeline "El Postulante ya es empleado." & datos(5) & " " & datos(3) & " " & datos(4) & "No se procesará."
            Exit Sub
        End If
        
        'Actualizar los datos
        StrSql = " UPDATE tercero SET "
        StrSql = StrSql & " ternom = " & "'" & datos(3) & "'"
        StrSql = StrSql & ", ternom2 = " & "'" & datos(4) & "'"
        StrSql = StrSql & ", terape = " & "'" & datos(5) & "'"
        StrSql = StrSql & ", terape2 = " & "'" & datos(6) & "'"
        StrSql = StrSql & ", terfecnac = " & datos(7)
        StrSql = StrSql & ", tersex = " & CLng(datos(8))
        StrSql = StrSql & ", teremail =" & "'" & datos(23) & "'"
        StrSql = StrSql & ", nacionalnro =" & CLng(datos(13))
        StrSql = StrSql & ", estcivnro =" & "'" & datos(9) & "'"
        StrSql = StrSql & ", terfecing =" & datos(14)
        StrSql = StrSql & ", tercasape =" & "'" & datos(11) & "'"
        StrSql = StrSql & ",terfecestciv =" & datos(10)
        StrSql = StrSql & ", paisnro =" & datos(12)
        StrSql = StrSql & " WHERE ternro = " & Ternro
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Tercero Actualizado"
    
        'Desactivo el manejador de erorres
        On Error GoTo 0
        
        'Cualquier error que ocurra de aquí en adelante sigue adelante
        ' tratando de insertar la mayor cantidad de datos posible
        On Error Resume Next
        
        StrSql = "SELECT * FROM ter_doc  "
        StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
        StrSql = StrSql & " AND ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
            StrSql = StrSql & " VALUES(" & Ternro & "," & datos(1) & ",'" & datos(2) & "')"
        Else
            StrSql = "UPDATE ter_doc SET "
            StrSql = StrSql & " nrodoc = '" & datos(2) & "'"
            StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
            StrSql = StrSql & " AND ternro = " & Ternro
        End If
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Documento Actualizado"
        
        
        '--------------------------------------------------------------------------------
        '--Inserto el Domicilio--
        StrSql = "SELECT * FROM cabdom  "
        StrSql = StrSql & " WHERE tipnro = 1"
        StrSql = StrSql & " AND ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
            StrSql = StrSql & " VALUES(1," & Ternro & ",-1,2)"
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline "inserto el Domicilio"
    
            '--Obtengo el numero de domicilio en la tabla--
            NroDom = CLng(getLastIdentity(objConn, "cabdom"))
        
            '--Si no tiene algun dato le agregamos unos ficticios--
            datos(24) = StrToStr(datos(24), 30) 'dirCalle
            datos(25) = StrToStr(datos(25), 8) 'dirNumero
            datos(26) = StrToStr(datos(26), 8) 'dirPiso
            datos(27) = StrToStr(datos(27), 8) 'dirDepto
            datos(28) = StrToStr(datos(28), 8) 'dirTorre
            datos(29) = StrToStr(datos(29), 8) 'dirManzana
            datos(30) = StrToStr(datos(30), 8) 'dirSector
            datos(31) = StrToStr(datos(31), 12) 'dirCP
            datos(32) = TraerCodLocalidad(CStr(datos(32))) 'dirLocalidad
            datos(33) = TraerCodProvincia(CStr(datos(33)))   'dirProvincia
            datos(34) = TraerCodPartido(CStr(datos(34)))  'dirPartido
            datos(35) = TraerCodZona(CStr(datos(35)), CLng(datos(33)))  'dirZona
                If datos(35) = "" Then datos(35) = "NULL"
            datos(36) = TraerCodPais(CStr(datos(36))) 'dirPais
        
            StrSql = " INSERT INTO detdom (domnro,calle,nro,sector,torre,piso,oficdepto,manzana,codigopostal,"
            StrSql = StrSql & "locnro,provnro,paisnro, zonanro, partnro) "
            StrSql = StrSql & " VALUES ("
            StrSql = StrSql & NroDom
            StrSql = StrSql & ",'" & datos(24) & "'"
            StrSql = StrSql & ",'" & datos(25) & "'"
            StrSql = StrSql & ",'" & datos(30) & "'"
            StrSql = StrSql & ",'" & datos(28) & "'"
            StrSql = StrSql & ",'" & datos(26) & "'"
            StrSql = StrSql & ",'" & datos(27) & "'"
            StrSql = StrSql & ",'" & datos(29) & "'"
            StrSql = StrSql & ",'" & datos(31) & "'"
            StrSql = StrSql & "," & datos(32)
            StrSql = StrSql & "," & datos(33)
            StrSql = StrSql & "," & datos(36)
            StrSql = StrSql & "," & datos(35)
            StrSql = StrSql & "," & datos(34)
            StrSql = StrSql & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
            Else
                Flog.writeline "Inserte el domicilio "
            End If
            Flog.writeline "Inserto el Domicilio "
        Else
            NroDom = rs_Aux!domnro
        
            '--Si no tiene algun dato le agregamos unos ficticios--
            datos(24) = StrToStr(datos(24), 30) 'dirCalle
            datos(25) = StrToStr(datos(25), 8) 'dirNumero
            datos(26) = StrToStr(datos(26), 8) 'dirPiso
            datos(27) = StrToStr(datos(27), 8) 'dirDepto
            datos(28) = StrToStr(datos(28), 8) 'dirTorre
            datos(29) = StrToStr(datos(29), 8) 'dirManzana
            datos(30) = StrToStr(datos(30), 8) 'dirSector
            datos(31) = StrToStr(datos(31), 12) 'dirCP
            datos(32) = TraerCodLocalidad(CStr(datos(32))) 'dirLocalidad
            datos(33) = TraerCodProvincia(CStr(datos(33)))   'dirProvincia
            datos(34) = TraerCodPartido(CStr(datos(34)))  'dirPartido
            datos(35) = TraerCodZona(CStr(datos(35)), CLng(datos(33)))  'dirZona
            If datos(35) = "" Then datos(35) = "NULL"
            datos(36) = TraerCodPais(CStr(datos(36))) 'dirPais
        
            StrSql = " UPDATE detdom SET "
            StrSql = StrSql & " calle =" & "'" & datos(24) & "'"
            StrSql = StrSql & ",nro =" & "'" & datos(25) & "'"
            StrSql = StrSql & ",sector =" & "'" & datos(30) & "'"
            StrSql = StrSql & ",torre =" & "'" & datos(28) & "'"
            StrSql = StrSql & ",piso =" & "'" & datos(26) & "'"
            StrSql = StrSql & ",oficdepto =" & "'" & datos(27) & "'"
            StrSql = StrSql & ",manzana =" & "'" & datos(29) & "'"
            StrSql = StrSql & ",codigopostal =" & "'" & datos(31) & "'"
            StrSql = StrSql & ",locnro =" & datos(32)
            StrSql = StrSql & ",provnro =" & datos(33)
            StrSql = StrSql & ",paisnro =" & datos(36)
            StrSql = StrSql & ", zonanro =" & datos(35)
            StrSql = StrSql & ", partnro = " & datos(34)
            StrSql = StrSql & " WHERE domnro = " & NroDom
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
                Flog.writeline "Domicilio NO actualizado"
                Flog.writeline "SQL ejecutada: " & StrSql
            Else
                Flog.writeline "Domicilio actualizado"
            End If
        End If
        
        
        '--Telefonos-Personal--
        datos(21) = validatelefono(StrToStr(datos(21), 20))
        If datos(21) <> "" Then
            StrSql = "SELECT * FROM telefono  "
            StrSql = StrSql & " WHERE domnro = " & NroDom
            StrSql = StrSql & " AND telnro = " & "'" & datos(21) & "'"
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO telefono "
                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
                StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0,1 ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Err.Clear
                    Flog.writeline "Error Insertando el telefono " & datos(21)
                    Flog.writeline "SQL ejecutada: " & StrSql
                Else
                    Flog.writeline "Inserte el telefono"
                End If
            End If
        End If
        
        '--Telefonos-segundo--
        datos(22) = validatelefono(StrToStr(datos(22), 20))
        If datos(22) <> "" Then
            StrSql = "SELECT * FROM telefono  "
            StrSql = StrSql & " WHERE domnro = " & NroDom
            StrSql = StrSql & " AND telnro = " & "'" & datos(22) & "'"
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO telefono "
                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
                StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0,2 ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Err.Clear
                    Flog.writeline "Error Insertando el telefono " & datos(22)
                    Flog.writeline "SQL ejecutada: " & StrSql
                Else
                    Flog.writeline "Inserte el telefono2 "
                End If
            End If
        End If
    
    
        '--Complemento--
        If datos(15) = "" Then
            datos(15) = 0
        Else
            datos(15) = CLng(StrToInt(datos(15))) 'cantidadHijos
        End If
        datos(16) = StrToStr(datos(16), 60) 'imagen
        If datos(17) = "" Then
            datos(17) = "NULL"
        Else
            datos(17) = ConvFecha(CDate(datos(17))) 'fechaIngresoCV
        End If
        datos(18) = StrToStr(datos(18), 250) 'referencias
        If datos(19) = "" Then
            datos(19) = TraerCodProcedencia("Web Deloitte") 'procedencia
        Else
            datos(19) = TraerCodProcedencia(CStr(datos(19))) 'procedencia
        End If
        If datos(20) = "" Then
            datos(20) = 0
        Else
            datos(20) = CDbl(StrToDbl(datos(20))) 'remuneracionPretendida
        End If
        
        StrSql = "SELECT * FROM pos_postulante  "
        StrSql = StrSql & " WHERE ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            'StrSql = " INSERT INTO pos_postulante "
            'StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro) "
            'StrSql = StrSql & " VALUES (" & ternro & " ," & CDbl(Datos(20)) & ", " & CLng(Datos(15)) & ", '" & Datos(16) & "', " & Datos(17) & ",'" & Datos(18) & "', " & Datos(19) & ") "
            
            'JMH - 07/03/2006 Se agrego el estposnro = 4 (postulantre activo)
            StrSql = " INSERT INTO pos_postulante "
            StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro,estposnro) "
            StrSql = StrSql & " VALUES (" & Ternro & " ," & CDbl(datos(20)) & ", " & CLng(datos(15)) & ", '" & datos(16) & "', " & datos(17) & ",'" & datos(18) & "', " & datos(19) & ",4) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al inserte el Complemento: " & Err.Description
                Flog.writeline "SQL ejecutada: " & StrSql
                Err.Clear
            Else
                Flog.writeline "Inserte el Complemento "
            End If
        Else
            StrSql = "UPDATE pos_postulante SET "
            StrSql = StrSql & " posrempre = " & CDbl(datos(20))
            StrSql = StrSql & ", poscanhijos =" & CLng(datos(15))
            StrSql = StrSql & ", posfoto =" & "'" & datos(16) & "'"
            StrSql = StrSql & ", posfecpres =" & datos(17)
            StrSql = StrSql & ", posref =" & "'" & datos(18) & "'"
            StrSql = StrSql & ", procnro =" & datos(19)
            StrSql = StrSql & " WHERE ternro = " & Ternro
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al actualizar el Complemento: " & Err.Description
                Flog.writeline "SQL ejecutada: " & StrSql
                Err.Clear
            Else
                Flog.writeline "Complemento actualizado"
            End If
        End If
        
        '--Estudios-formales--(49)licho por aca
        Xconst = 0
        For a = 0 To 3
            If UBound(datos) > (Xconst + 37) Then
                If datos(Xconst + 37) <> "" Then
                    datos(Xconst + 37) = TraerCodNivelEstudio(datos(Xconst + 37))   'EFnivel8
                    'FGZ - 29/08/2005
                    'If Datos(Xconst + 38) = "Graduado" Then Datos(Xconst + 38) = -1 Else Datos(Xconst + 38) = 0
                    If datos(Xconst + 38) = -1 Then datos(Xconst + 38) = -1 Else datos(Xconst + 38) = 0
                        'Datos(Xconst + 38) = Datos(Xconst + 38)   'EFcompleto8
                    datos(Xconst + 39) = TraerCodTitulo(CStr(datos(Xconst + 39)), CLng(datos(Xconst + 37)))   'EFtitulo8
                    datos(Xconst + 40) = TraerCodInstitucionAbreviada(CStr(datos(Xconst + 40)))   'EFinstitucion8
                    datos(Xconst + 41) = TraerCodCarrera(CStr(datos(Xconst + 41)))    'EFcarrera8
                    If datos(Xconst + 42) <> "" Then
                        datos(Xconst + 42) = ConvFecha(CDate(datos(Xconst + 42)))   'EFfechaDesde8
                    Else
                        datos(Xconst + 42) = "NULL"
                    End If
                    If datos(Xconst + 43) <> "" Then
                        datos(Xconst + 43) = ConvFecha(CDate(datos(Xconst + 43)))   'EFfechaHasta8
                    Else
                        datos(Xconst + 43) = "NULL"
                    End If
                    datos(Xconst + 44) = StrToStr(datos(Xconst + 44), 30)   'EFpromedio8
                    datos(Xconst + 45) = StrToStr(datos(Xconst + 45), 60)   'EFrango8
                    If datos(Xconst + 46) <> "" And UCase(datos(Xconst + 46)) <> "NO" Then
                        datos(Xconst + 46) = -1  'EFestudiaActualmente8
                    Else
                        datos(Xconst + 46) = 0  'EFestudiaActualmente8
                    End If
            
                    'actualizo
                    StrSql = "SELECT * FROM cap_estformal  "
                    StrSql = StrSql & " WHERE nivnro = " & CLng(datos(Xconst + 37))
                    StrSql = StrSql & " AND ternro = " & Ternro
                    StrSql = StrSql & " AND titnro = " & datos(Xconst + 39)
                    StrSql = StrSql & " AND instnro = " & datos(Xconst + 40)
                    StrSql = StrSql & " AND carredunro = " & datos(Xconst + 41)
                    If rs_Aux.State = adStateOpen Then rs_Aux.Close
                    OpenRecordset StrSql, rs_Aux
                    If rs_Aux.EOF Then
                        StrSql = " INSERT INTO cap_estformal "
                        StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
                        StrSql = StrSql & " VALUES ("
                        StrSql = StrSql & CLng(datos(Xconst + 37))          'nivnro
                        StrSql = StrSql & "," & Ternro                      'ternro
                        StrSql = StrSql & "," & datos(Xconst + 39)          'titnro
                        StrSql = StrSql & "," & datos(Xconst + 40)          'instnro
                        StrSql = StrSql & "," & datos(Xconst + 41)          'carredunro
                        StrSql = StrSql & "," & datos(Xconst + 42)          'capfecdes
                        StrSql = StrSql & "," & datos(Xconst + 43)          'capfechas
                        StrSql = StrSql & "," & datos(Xconst + 38)          'capcomp
                        StrSql = StrSql & "," & datos(Xconst + 46)          'capestact
                        StrSql = StrSql & ",'" & datos(Xconst + 45) & "'"   'caprango
                        StrSql = StrSql & ",'" & datos(Xconst + 44) & "'"   'capprom
                        StrSql = StrSql & ")"
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte el estudio formal: " & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Inserte el estudio formal " & datos(Xconst + 37)
                            ActPasos = True
                        End If
                    Else
                        StrSql = "UPDATE  cap_estformal SET "
                        StrSql = StrSql & " capfecdes = " & datos(Xconst + 42)
                        StrSql = StrSql & ", capfechas =" & datos(Xconst + 43)
                        StrSql = StrSql & ", capcomp =" & datos(Xconst + 38)
                        StrSql = StrSql & ", capestact =" & datos(Xconst + 46)
                        StrSql = StrSql & ", caprango =" & "'" & datos(Xconst + 45) & "'"
                        StrSql = StrSql & ", capprom =" & "'" & datos(Xconst + 44) & "'"
                        StrSql = StrSql & " WHERE nivnro = " & CLng(datos(Xconst + 37))
                        StrSql = StrSql & " AND ternro = " & Ternro
                        StrSql = StrSql & " AND titnro = " & datos(Xconst + 39)
                        StrSql = StrSql & " AND instnro = " & datos(Xconst + 40)
                        StrSql = StrSql & " AND carredunro = " & datos(Xconst + 41)
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte Al actualizar studio formal: " & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Estudio formal " & datos(Xconst + 37) & " actualizado"
                            ActPasos = False
                        End If
                    End If
                End If
            Else
            End If
            Xconst = Xconst + 10
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 49)
        End If
        ActPasos = False
        
        
        '--Experiencia-Laboral----Empleos Anteriores--57
        Xconst = 0
        For a = 0 To 3
            If UBound(datos) > (Xconst + 77) Then
                If datos(Xconst + 78) <> "" And datos(Xconst + 77) <> "" Then
                    datos(Xconst + 77) = TraerCodCargo(CStr(datos(Xconst + 77)))    'ELcargoAnterior16
                    datos(Xconst + 78) = TraerCodListaEmpresa(CStr(datos(Xconst + 78)))   'ELempresa16 lempnro
                    datos(Xconst + 79) = StrToStr(datos(Xconst + 79), 200) 'ELtareaDesempenada16
                    If datos(Xconst + 80) <> "" Then
                        datos(Xconst + 80) = ConvFecha(CDate(datos(Xconst + 80)))  'ELfechaDesde16
                    Else
                        datos(Xconst + 80) = "NULL"
                    End If
                    If datos(Xconst + 81) <> "" Then
                        datos(Xconst + 81) = ConvFecha(CDate(datos(Xconst + 81)))  'ELfechaHasta16
                    Else
                        datos(Xconst + 81) = "NULL"
                    End If
                    If datos(Xconst + 82) = "" Then
                        datos(Xconst + 82) = 0
                    Else
                        datos(Xconst + 82) = StrToDbl(datos(Xconst + 82))   'ELremuneracion16
                    End If
                    If datos(Xconst + 83) <> "" Then
                        datos(Xconst + 83) = TraerCodCausa(CStr(datos(Xconst + 83)))   'ELcausaBaja16
                    Else
                        datos(Xconst + 83) = "NULL"
                    End If
                
                    StrSql = "SELECT * FROM empant  "
                    StrSql = StrSql & " WHERE empleado = " & Ternro
                    StrSql = StrSql & " AND empatareas = " & "'" & datos(Xconst + 79) & "'"
                    StrSql = StrSql & " AND lempnro = " & datos(Xconst + 78)
                    StrSql = StrSql & " AND carnro = " & datos(Xconst + 77)
                    If rs_Aux.State = adStateOpen Then rs_Aux.Close
                    OpenRecordset StrSql, rs_Aux
                    If rs_Aux.EOF Then
                        StrSql = " INSERT INTO empant "
                        'FGZ - 29/08/2005
                        'cambié los nombres de los campos donde inserta las fechas desde y hasta
                        'StrSql = StrSql & " ( empleado, empatareas, lempnro, empadesde, emmpahasta, carnro, emparemu ) "
                        StrSql = StrSql & " ( empleado, empatareas, lempnro, empaini, empafin, carnro, emparemu, caunro ) "
                        StrSql = StrSql & " VALUES (" & Ternro & ", '" & datos(Xconst + 79) & "' ," & datos(Xconst + 78) & "," & datos(Xconst + 80) & "," & datos(Xconst + 81) & "," & datos(Xconst + 77) & "," & datos(Xconst + 82) & "," & datos(Xconst + 83) & "  ) "
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte el Empleo Anterior: " & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Inserto los datos del Empleo Anterior"
                            ActPasos = True
                        End If
                    Else
                        StrSql = "UPDATE empant SET "
                        'FGZ - 29/08/2005
'                        StrSql = StrSql & " empadesde =" & Datos(Xconst + 120)
'                        StrSql = StrSql & ", emmpahasta =" & (Datos(Xconst + 121))
                        StrSql = StrSql & " empaini =" & datos(Xconst + 80)
                        StrSql = StrSql & ", empafin =" & (datos(Xconst + 81))
                        StrSql = StrSql & ", emparemu = " & datos(Xconst + 82)
                        StrSql = StrSql & ", caunro = " & datos(Xconst + 83)
                        StrSql = StrSql & " WHERE empantnro = " & rs_Aux!Empantnro
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al actualizar el Empleo Anterior: " & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Actualizo los datos del Empleo Anterior"
                            ActPasos = False
                        End If
                    End If
                Else
                End If
            End If
            Xconst = Xconst + 7
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 57)
        End If
        ActPasos = False
    
    
        '--Idiomas--53
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If UBound(datos) > (Xconst + 105) Then
                If datos(Xconst + 105) <> "" Then
                    If datos(Xconst + 106) <> "" Or datos(Xconst + 107) <> "" Or datos(Xconst + 108) <> "" Then
                        datos(Xconst + 105) = TraerCodIdioma(CStr(datos(Xconst + 105))) 'idioma1
                        datos(Xconst + 106) = TraerCodIdiNivel(CStr(datos(Xconst + 106))) 'idiomaLee1
                        datos(Xconst + 107) = TraerCodIdiNivel(CStr(datos(Xconst + 107))) 'idiomaHabla1
                        datos(Xconst + 108) = TraerCodIdiNivel(CStr(datos(Xconst + 108))) 'idiomaEscribe1
                        
                        If Not TieneIdioma(Ternro, CLng(datos(Xconst + 105))) Then
                            StrSql = " INSERT INTO emp_idi "
                            StrSql = StrSql & " (idinro, empleado, empidlee, empidhabla, empidescr) "
                            StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 105)) & ", " & Ternro & " ," & datos(Xconst + 230) & ", " & datos(Xconst + 231) & ", " & datos(Xconst + 232) & " ) "
                        Else
                            StrSql = " UPDATE emp_idi SET "
                            StrSql = StrSql & " empidlee = " & datos(Xconst + 106)
                            StrSql = StrSql & ", empidhabla = " & datos(Xconst + 107)
                            StrSql = StrSql & ", empidescr = " & datos(Xconst + 108)
                            StrSql = StrSql & " where empleado = " & Ternro & " and idinro = " & CLng(datos(Xconst + 105))
                        End If
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte el Idioma " & datos(Xconst + 229) & "-" & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Inserte el Idioma " & datos(Xconst + 229)
                            ActPasos = True
                        End If
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 53)
        End If
        ActPasos = False
    
        
        '--Estudios-Informales--50
        ActPasos = False
        
        tempString = StrToStr(datos(249), 50) ''descCurso  estinfdesabr
        datos(249) = datos(249) ''descCurso  estinfdesabr
        datos(250) = TraerCodTipoCurso(StrToStr(datos(250), 50)) 'tipoCurso tipcurnro
        If datos(251) <> "" Then
            datos(251) = ConvFecha(datos(251)) 'fechaCurso  estinffecha
        Else
            datos(251) = ConvFecha(Date)
        End If
        datos(252) = TraerCodInstitucion(CStr(datos(252))) 'institucionCurso instnro
        If datos(249) = "" Or datos(250) = "" Or datos(252) = "" Then
            Flog.writeline "Error al insertar el estudio informal por falta de datos "
        Else
            'Reviso
            StrSql = "SELECT * FROM cap_estinformal  "
            StrSql = StrSql & " WHERE tipcurnro = " & CLng(datos(250))
            StrSql = StrSql & " AND ternro = " & Ternro
            StrSql = StrSql & " AND instnro = " & CLng(datos(252))
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO cap_estinformal "
                StrSql = StrSql & " (ternro, estinfdesabr, estinffecha, tipcurnro, instnro) "
                StrSql = StrSql & " VALUES (" & Ternro & " , '" & tempString & "'," & datos(251) & "," & CLng(datos(250)) & "," & CLng(datos(252)) & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al insertar el estudio informal: " & Err.Description
                    Flog.writeline "SQL ejecutada: " & StrSql
                    Err.Clear
                Else
                    Flog.writeline "Inserto los datos del estudio informal "
                    ActPasos = True
                End If
            Else
                StrSql = "UPDATE cap_estinformal SET "
                StrSql = StrSql & " estinfdesabr = '" & tempString & "'"
                StrSql = StrSql & ", estinffecha =" & (datos(251))
                StrSql = StrSql & " WHERE tipcurnro = " & CLng(datos(250))
                StrSql = StrSql & " AND ternro = " & Ternro
                StrSql = StrSql & " AND instnro = " & CLng(datos(252))
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al actualizar el estudio informal: " & Err.Description
                    Flog.writeline "SQL ejecutada: " & StrSql
                    Err.Clear
                Else
                    Flog.writeline "Actualizo los datos del estudio informal "
                    ActPasos = False
                End If
            End If
        End If
        If ActPasos Then
           Call InsertarPaso(Ternro, 50)
           ActPasos = False
        End If
        
        '--Especializaciones--51
        Xconst = 0
        ActPasos = False
        For a = 0 To 3
            If datos(Xconst + 139) <> "" Then
                datos(Xconst + 137) = TraerCodEspecializacion(CStr(datos(Xconst + 137))) 'tipo
                datos(Xconst + 138) = TraerCodEltoana(CStr(datos(Xconst + 138)), CLng(datos(Xconst + 137))) 'elemento
                datos(Xconst + 139) = TraerCodNivelEspecializacion(CStr(datos(Xconst + 139))) 'nivel
                
                'REVISO
                StrSql = "SELECT * FROM especemp  "
                StrSql = StrSql & " WHERE espnivnro = " & datos(Xconst + 139)
                StrSql = StrSql & " AND ternro = " & Ternro
                StrSql = StrSql & " AND eltananro = " & datos(Xconst + 138)
                If rs_Aux.State = adStateOpen Then rs_Aux.Close
                OpenRecordset StrSql, rs_Aux
                If rs_Aux.EOF Then
                    StrSql = " INSERT INTO especemp "
                    StrSql = StrSql & " (eltananro, ternro, espnivnro ) "
                    StrSql = StrSql & " VALUES (" & datos(Xconst + 138) & ", " & Ternro & " ," & datos(Xconst + 139) & ") "
    '                StrSql = StrSql & " VALUES (" & datosEltoAna(0, a) & ", " & ternro & " ," & Datos(Xconst + 139) & ") "
                
                    Err.Clear
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al insertar la especialidad: " & Err.Description
                        Flog.writeline "SQL ejecutada: " & StrSql
                        Err.Clear
                    Else
                        Flog.writeline "Actualizo los datos de la especialidad."
                        ActPasos = True
                    End If
                End If
            Else
            End If
            Xconst = Xconst + 3
        Next a
        If ActPasos Then
           'Flog.Writeline "Inserto los datos de la especialidad"
           Call InsertarPaso(Ternro, 51)
           ActPasos = False
        End If
    End If
Fin:
Exit Sub

Manejador_De_Error:
    HuboError = True
    Flog.writeline "SQL ejecutada: " & StrSql
    Texto = ": " & Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    'Fue error de Consulta de SQL
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub



Public Sub LineaModelo_239(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Procedimiento de incorporacion de postulantes
' Autor      : Lisandro Moro
' Fecha      : 24/11/2004
' Ultima Mod.: FGZ - 12/04/2005
' Descripcion: Interface Deloitte
' ---------------------------------------------------------------------------------------------
' Interfaces Customisadas

    Dim datos() As String
    'ReDim Datos(600) As String
    'Dim StrSql As String
    Dim Ternro As Long
    Dim NroDom As Long
    Dim a As Long
    Dim Xconst As Long
    Dim ActPasos As Boolean
    Dim tempString As String
    
    Dim rs_Ter As New ADODB.Recordset
    Dim rs_Aux As New ADODB.Recordset
    
    Flog.writeline "procesando linea " & strLinea
    
    'Si ocurre un error antes de insertar el tercero se aborta el postulante
    On Error GoTo Manejador_De_Error:
    
    datos = Split(strLinea, separador)
    
    '--Documentos--
    datos(1) = TraerCodTipoDocumento(CStr(datos(1)))  'tipoDocumento
    datos(2) = StrToStr(CStr(datos(2)), 30) 'numeroDocumento
    datos(2) = Replace(datos(2), ".", "") 'elimino puntos y comas
    datos(2) = Replace(datos(2), ",", "")
    
    '--Tercero
    datos(3) = StrToStr(datos(3), 25) 'ternom
    datos(4) = StrToStr(datos(4), 25)  'ternom2
    datos(5) = StrToStr(datos(5), 25) 'terape
    datos(6) = StrToStr(datos(6), 25) 'terape2
    datos(7) = ConvFecha(CDate(datos(7))) 'terfecnac
    'If UCase(Datos(8)) = "MASCULINO" Then Datos(8) = -1 Else Datos(8) = 0 'tersex
    If (UCase(datos(8)) = "M") Or (UCase(datos(8)) = "-1") Or (UCase(datos(8)) = "MASCULINO") Then
        datos(8) = -1
    Else
        datos(8) = 0
    End If
    
    datos(23) = StrToStr(datos(23), 100) ' teremail
    datos(13) = TraerCodNacionalidad(CStr(datos(13))) ' nacionalnro
    datos(9) = StrToStr(TraerCodEstadoCivil(CStr(datos(9))), 8) 'estcivnro
    If datos(14) = "" Then
        datos(14) = "''"
    Else
        datos(14) = ConvFecha(CDate(datos(14))) 'fechaingresopais
    End If
    datos(11) = StrToStr(datos(11), 25) 'tercasape
    If datos(10) = "" Then
        datos(10) = "NULL"
    Else
        datos(10) = ConvFecha(CDate(datos(10))) 'terfecestciv
    End If
    datos(12) = TraerCodPais(CStr(datos(12))) 'paisnro


    'FGZ - 06/04/2005
    StrSql = "SELECT * FROM ter_doc  "
    StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
    StrSql = StrSql & " AND nrodoc = '" & datos(2) & "'"
    OpenRecordset StrSql, rs_Ter

    If rs_Ter.EOF Then
        StrSql = " INSERT INTO tercero (ternom, ternom2, terape, terape2, terfecnac, tersex, teremail, nacionalnro, estcivnro, terfecing, tercasape,terfecestciv, paisnro ) VALUES ("
        StrSql = StrSql & "'" & datos(3) & "'"      'ternom
        StrSql = StrSql & ",'" & datos(4) & "'"     'ternom2
        StrSql = StrSql & ",'" & datos(5) & "'"      'terape
        StrSql = StrSql & ",'" & datos(6) & "'"     'terape2
        StrSql = StrSql & "," & datos(7)            'terfecnac
        StrSql = StrSql & "," & CLng(datos(8))      'tersex
        StrSql = StrSql & ",'" & datos(23) & "'"    'teremail
        StrSql = StrSql & "," & CLng(datos(13))     'nacionalnro
        StrSql = StrSql & ",'" & datos(9) & "'"     'estcivnro
        StrSql = StrSql & "," & datos(14)           'fechaingresopais
        StrSql = StrSql & ",'" & datos(11) & "'"    'tercasape
        StrSql = StrSql & "," & datos(10)           'terfecestciv
        StrSql = StrSql & "," & datos(12)           'paisnro
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Inserto en la tabla de tercero"
    
        '--Obtengo el ternro--
        Ternro = getLastIdentity(objConn, "tercero")
        Flog.writeline "-----------------------------------------------"
        Flog.writeline "Codigo de Tercero = " & Ternro
    
        '--Inserto el Registro correspondiente en ter_tip--
        StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & Ternro & ",14)"
        objConn.Execute StrSql, , adExecuteNoRecords
        'Flog.Writeline "Inserto el tipo de tercero 14 en ter_tip"
        
        'Desactivo el manejador de erorres
        On Error GoTo 0
        
        
        'Cualquier error que ocurra de aquí en adelante sigue adelante
        ' tratando de insertar la mayor cantidad de datos posible
        On Error Resume Next
        'HuboError = False
        
        StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
        StrSql = StrSql & " VALUES(" & Ternro & "," & datos(1) & ",'" & datos(2) & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        '--------------------------------------------------------------------------------
        '--Inserto el Domicilio--
        StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
        StrSql = StrSql & " VALUES(1," & Ternro & ",-1,2)"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "inserto el Domicilio"
    
        '--Obtengo el numero de domicilio en la tabla--
        NroDom = CLng(getLastIdentity(objConn, "cabdom"))
    
        '--Si no tiene algun dato le agregamos unos ficticios--
        datos(24) = StrToStr(datos(24), 30) 'dirCalle
        datos(25) = StrToStr(datos(25), 8) 'dirNumero
        datos(26) = StrToStr(datos(26), 8) 'dirPiso
        datos(27) = StrToStr(datos(27), 8) 'dirDepto
        datos(28) = StrToStr(datos(28), 8) 'dirTorre
        datos(29) = StrToStr(datos(29), 8) 'dirManzana
        datos(30) = StrToStr(datos(30), 8) 'dirSector
        datos(31) = StrToStr(datos(31), 12) 'dirCP
        datos(32) = TraerCodLocalidad(CStr(datos(32))) 'dirLocalidad
        datos(33) = TraerCodProvincia(CStr(datos(33)))   'dirProvincia
        datos(34) = TraerCodPartido(CStr(datos(34)))  'dirPartido
        datos(35) = TraerCodZona(CStr(datos(35)), CLng(datos(33)))  'dirZona
            If datos(35) = "" Then datos(35) = "NULL"
        datos(36) = TraerCodPais(CStr(datos(36))) 'dirPais
    
        StrSql = " INSERT INTO detdom (domnro,calle,nro,sector,torre,piso,oficdepto,manzana,codigopostal,"
        StrSql = StrSql & "locnro,provnro,paisnro, zonanro, partnro) "
        StrSql = StrSql & " VALUES ("
        StrSql = StrSql & NroDom
        StrSql = StrSql & ",'" & datos(24) & "'"
        StrSql = StrSql & ",'" & datos(25) & "'"
        StrSql = StrSql & ",'" & datos(30) & "'"
        StrSql = StrSql & ",'" & datos(28) & "'"
        StrSql = StrSql & ",'" & datos(26) & "'"
        StrSql = StrSql & ",'" & datos(27) & "'"
        StrSql = StrSql & ",'" & datos(29) & "'"
        StrSql = StrSql & ",'" & datos(31) & "'"
        StrSql = StrSql & "," & datos(32)
        StrSql = StrSql & "," & datos(33)
        StrSql = StrSql & "," & datos(36)
        StrSql = StrSql & "," & datos(35)
        StrSql = StrSql & "," & datos(34)
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Err.Clear
        Else
            Flog.writeline "Inserte el domicilio "
        End If
       
        Flog.writeline "Inserto el Domicilio "
    
        '--Telefonos-Personal--
        datos(21) = validatelefono(StrToStr(datos(21), 20))
        If datos(21) <> "" Then
            StrSql = " INSERT INTO telefono "
            'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
            StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
            StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0,1 ) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
            Else
                Flog.writeline "Inserte el telefono"
            End If
        End If
        
        '--Telefonos-Celular--
        'FGZ 11/04/2005 - quieren que lo cargue como telefono comun
        datos(22) = validatelefono(StrToStr(datos(22), 20))
        If datos(22) <> "" Then
            StrSql = " INSERT INTO telefono "
            'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
            StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
            StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0,2 ) "
            objConn.Execute StrSql, , adExecuteNoRecords
            'Flog.Writeline " Inserto el telefono calular "
            'Flog.Writeline " Inserto el segundo telefono "
            If Err Then
                Err.Clear
            Else
                Flog.writeline "Inserte el telefono2 "
            End If
        End If
    
        '--Complemento--
        If datos(15) = "" Then
            datos(15) = 0
        Else
            datos(15) = CLng(StrToInt(datos(15))) 'cantidadHijos
        End If
        datos(16) = StrToStr(datos(16), 60) 'imagen
        If datos(17) = "" Then
            datos(17) = "NULL"
        Else
            datos(17) = ConvFecha(CDate(datos(17))) 'fechaIngresoCV
        End If
        datos(18) = StrToStr(datos(18), 250) 'referencias
        If datos(19) = "" Then
            datos(19) = TraerCodProcedencia("Web Deloitte") 'procedencia
        Else
            datos(19) = TraerCodProcedencia(CStr(datos(19))) 'procedencia
        End If
        If datos(20) = "" Then
            datos(20) = 0
        Else
            datos(20) = CDbl(StrToDbl(datos(20))) 'remuneracionPretendida
        End If
        
        'StrSql = " INSERT INTO pos_postulante "
        'StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro) "
        'StrSql = StrSql & " VALUES (" & ternro & " ," & CDbl(Datos(20)) & ", " & CLng(Datos(15)) & ", '" & Datos(16) & "', " & Datos(17) & ",'" & Datos(18) & "', " & Datos(19) & ") "
        'objConn.Execute StrSql, , adExecuteNoRecords
        'If Err Then
        '    Flog.Writeline "Error al inserte el Complemento: " & Err.Description
        '    Err.Clear
        'Else
        '    Flog.Writeline "Inserte el Complemento "
        'End If
        
        'JMH - 07/03/2006 Se agrego el estposnro = 4 (postulantre activo)
        StrSql = " INSERT INTO pos_postulante "
        StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro,estposnro) "
        StrSql = StrSql & " VALUES (" & Ternro & " ," & CDbl(datos(20)) & ", " & CLng(datos(15)) & ", '" & datos(16) & "', " & datos(17) & ",'" & datos(18) & "', " & datos(19) & ",4) "
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el Complemento: " & Err.Description
            Flog.writeline "SQL ejecutada: " & StrSql
            Err.Clear
        Else
            Flog.writeline "Inserte el Complemento "
        End If
    
        '--Estudios-formales--(49)licho por aca
        Xconst = 0
        For a = 0 To 7
            If datos(Xconst + 37) <> "" Then
                datos(Xconst + 37) = TraerCodNivelEstudio(datos(Xconst + 37))   'EFnivel8
                If datos(Xconst + 38) = "Graduado" Then datos(Xconst + 38) = -1 Else datos(Xconst + 38) = 0
                    'Datos(Xconst + 38) = Datos(Xconst + 38)   'EFcompleto8
                datos(Xconst + 39) = TraerCodTitulo(CStr(datos(Xconst + 39)), CLng(datos(Xconst + 37)))   'EFtitulo8
                datos(Xconst + 40) = TraerCodInstitucionAbreviada(CStr(datos(Xconst + 40)))   'EFinstitucion8
                datos(Xconst + 41) = TraerCodCarrera(CStr(datos(Xconst + 41)))    'EFcarrera8
                If datos(Xconst + 42) <> "" Then
                    datos(Xconst + 42) = ConvFecha(CDate(datos(Xconst + 42)))   'EFfechaDesde8
                Else
                    datos(Xconst + 42) = "NULL"
                End If
                If datos(Xconst + 43) <> "" Then
                    datos(Xconst + 43) = ConvFecha(CDate(datos(Xconst + 43)))   'EFfechaHasta8
                Else
                    datos(Xconst + 43) = "NULL"
                End If
                datos(Xconst + 44) = StrToStr(datos(Xconst + 44), 30)   'EFpromedio8
                datos(Xconst + 45) = StrToStr(datos(Xconst + 45), 60)   'EFrango8
                If datos(Xconst + 46) <> "" And UCase(datos(Xconst + 46)) <> "NO" Then
                    datos(Xconst + 46) = -1  'EFestudiaActualmente8
                Else
                    datos(Xconst + 46) = 0  'EFestudiaActualmente8
                End If
        
                StrSql = " INSERT INTO cap_estformal "
                StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
                StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 37)) & ", " & Ternro & " ," & datos(Xconst + 39) & "," & datos(Xconst + 40) & "," & datos(Xconst + 41) & "," & datos(Xconst + 42) & " ," & datos(Xconst + 43) & "," & datos(Xconst + 38) & "," & datos(Xconst + 46) & ",'" & datos(Xconst + 45) & "','" & datos(Xconst + 44) & "' ) "
                'StrSql = StrSql & " Go "
                objConn.Execute StrSql, , adExecuteNoRecords
'                StrSql = " INSERT INTO cap_estformal "
'                StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
'                StrSql = StrSql & " VALUES ("
'                StrSql = StrSql & CLng(Datos(Xconst + 37))
'                StrSql = StrSql & ", " & ternro
'                StrSql = StrSql & " ," & Datos(Xconst + 39)
'                StrSql = StrSql & "," & Datos(Xconst + 40)
'                StrSql = StrSql & "," & Datos(Xconst + 41)
'                StrSql = StrSql & "," & Datos(Xconst + 42)
'                StrSql = StrSql & " ," & Datos(Xconst + 43)
'                StrSql = StrSql & "," & Datos(Xconst + 38)
'                StrSql = StrSql & "," & Datos(Xconst + 46)
'                StrSql = StrSql & ",'" & Datos(Xconst + 45)
'                StrSql = StrSql & "','" & Datos(Xconst + 44)
'                StrSql = StrSql & "' ) "
'                objConn.Execute StrSql, , adExecuteNoRecords
                
                If Err Then
                    Flog.writeline "Error al inserte el estudio formal: " & Err.Description
                    Err.Clear
                Else
                    Flog.writeline "Inserte el estudio formal " & datos(Xconst + 37)
                    ActPasos = True
                End If
            End If
            Xconst = Xconst + 10
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 49)
        End If
        ActPasos = False
        
        
        '--Experiencia-Laboral----Empleos Anteriores--57
        Xconst = 0
        For a = 0 To 15
            If datos(Xconst + 118) <> "" And datos(Xconst + 117) <> "" Then
                datos(Xconst + 117) = TraerCodCargo(CStr(datos(Xconst + 117)))    'ELcargoAnterior16
                datos(Xconst + 118) = TraerCodListaEmpresa(CStr(datos(Xconst + 118)))   'ELempresa16 lempnro
                datos(Xconst + 119) = StrToStr(datos(Xconst + 119), 200) 'ELtareaDesempenada16
                If datos(Xconst + 120) <> "" Then
                    datos(Xconst + 120) = ConvFecha(CDate(datos(Xconst + 120)))  'ELfechaDesde16
                Else
                    datos(Xconst + 120) = "NULL"
                End If
                If datos(Xconst + 121) <> "" Then
                    datos(Xconst + 121) = ConvFecha(CDate(datos(Xconst + 121)))  'ELfechaHasta16
                Else
                    datos(Xconst + 121) = "NULL"
                End If
                If datos(Xconst + 122) = "" Then
                    datos(Xconst + 122) = 0
                Else
                    datos(Xconst + 122) = StrToDbl(datos(Xconst + 122))   'ELremuneracion16
                End If
                If datos(Xconst + 123) <> "" Then
                    datos(Xconst + 123) = TraerCodCausa(CStr(datos(Xconst + 123)))   'ELcausaBaja16
                Else
                    datos(Xconst + 123) = "NULL"
                End If
            
                StrSql = " INSERT INTO empant "
                StrSql = StrSql & " ( empleado, empatareas, lempnro, empadesde, emmpahasta, carnro, emparemu ) "
                StrSql = StrSql & " VALUES (" & Ternro & ", '" & datos(Xconst + 119) & "' ," & datos(Xconst + 118) & "," & datos(Xconst + 120) & "," & datos(Xconst + 121) & "," & datos(Xconst + 117) & "," & datos(Xconst + 122) & "  ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al inserte el Empleo Anterior: " & Err.Description
                    Err.Clear
                Else
                    Flog.writeline "Inserto los datos del Empleo Anterior"
                    ActPasos = True
                End If
            End If
            Xconst = Xconst + 7
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 57)
        End If
        ActPasos = False
    
        '--Idiomas--53
        ActPasos = False
        Xconst = 0
        For a = 0 To 4
            If datos(Xconst + 229) <> "" Then
                If datos(Xconst + 230) <> "" Or datos(Xconst + 231) <> "" Or datos(Xconst + 232) <> "" Then
                    datos(Xconst + 229) = TraerCodIdioma(CStr(datos(Xconst + 229))) 'idioma1
                    datos(Xconst + 230) = TraerCodIdiNivel(CStr(datos(Xconst + 230))) 'idiomaLee1
                    datos(Xconst + 231) = TraerCodIdiNivel(CStr(datos(Xconst + 231))) 'idiomaHabla1
                    datos(Xconst + 232) = TraerCodIdiNivel(CStr(datos(Xconst + 232))) 'idiomaEscribe1
                    
                    If Not TieneIdioma(Ternro, CLng(datos(Xconst + 229))) Then
                        StrSql = " INSERT INTO emp_idi "
                        StrSql = StrSql & " (idinro, empleado, empidlee, empidhabla, empidescr) "
                        StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 229)) & ", " & Ternro & " ," & datos(Xconst + 230) & ", " & datos(Xconst + 231) & ", " & datos(Xconst + 232) & " ) "
                    Else
                        StrSql = " UPDATE emp_idi SET "
                        StrSql = StrSql & ", empidlee = " & datos(Xconst + 230)
                        StrSql = StrSql & ", empidhabla = " & datos(Xconst + 231)
                        StrSql = StrSql & ", empidescr = " & datos(Xconst + 232)
                        StrSql = StrSql & " where empleado = " & Ternro & " and idinro = " & CLng(datos(Xconst + 229))
                    End If
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al inserte el Idioma " & datos(Xconst + 229) & "-" & Err.Description
                        Err.Clear
                    Else
                        Flog.writeline "Inserte el Idioma " & datos(Xconst + 229)
                        ActPasos = True
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 53)
        End If
        ActPasos = False
    
        
        '--Estudios-Informales--50
        ActPasos = False
        
        tempString = StrToStr(datos(249), 50) ''descCurso  estinfdesabr
        datos(249) = datos(249) ''descCurso  estinfdesabr
        datos(250) = TraerCodTipoCurso(StrToStr(datos(250), 50)) 'tipoCurso tipcurnro
        If datos(251) <> "" Then
            datos(251) = ConvFecha(datos(251)) 'fechaCurso  estinffecha
        Else
            datos(251) = ConvFecha(Date)
        End If
        datos(252) = TraerCodInstitucion(CStr(datos(252))) 'institucionCurso instnro
        If datos(249) = "" Or datos(250) = "" Or datos(252) = "" Then
            Flog.writeline "Error al insertar el estudio informal por falta de datos "
        Else
            StrSql = " INSERT INTO cap_estinformal "
            StrSql = StrSql & " (ternro, estinfdesabr, estinffecha, tipcurnro, instnro) "
            StrSql = StrSql & " VALUES (" & Ternro & " , '" & tempString & "'," & datos(251) & "," & CLng(datos(250)) & "," & CLng(datos(252)) & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al insertar el estudio informal: " & Err.Description
                Err.Clear
            Else
                Flog.writeline "Inserto los datos del estudio informal "
                ActPasos = True
            End If
        End If
        If ActPasos Then
           Call InsertarPaso(Ternro, 50)
           ActPasos = False
        End If
        
        '--Especializaciones--51
        Xconst = 0
        ActPasos = False
        For a = 0 To 113
            If datos(Xconst + 255) <> "" Then
                'Datos(Xconst + 253) = TraerCodEspecializacion(CStr(Datos(Xconst + 253))) 'tipo
                'Datos(Xconst + 254) = TraerCodEltoana(CStr(Datos(Xconst + 254)), Datos(Xconst + 253)) 'elemento
                datos(Xconst + 255) = TraerCodNivelEspecializacion(CStr(datos(Xconst + 255))) 'nivel
                
                StrSql = " INSERT INTO especemp "
                StrSql = StrSql & " (eltananro, ternro, espnivnro ) "
                StrSql = StrSql & " VALUES (" & datosEltoAna(0, a) & ", " & Ternro & " ," & datos(Xconst + 255) & ") "
                Err.Clear
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al insertar la especialidad: " & Err.Description
                    Err.Clear
                Else
                    'Flog.Writeline "Inserto los datos de la especialidad"
                    ActPasos = True
                End If
            Else
                'Flog.Writeline "Error al insertar la especialidad por falta de datos. "
            End If
            Xconst = Xconst + 3
        Next a
        If ActPasos Then
           Flog.writeline "Inserto los datos de la especialidad"
           Call InsertarPaso(Ternro, 51)
           ActPasos = False
        End If
    Else
        Ternro = rs_Ter!Ternro
        Flog.writeline "-----------------------------------------------"
        Flog.writeline "Codigo de Tercero = " & Ternro
        
        'FGZ - 27/07/2005
        'si el tercereo existe pero es de tipo empleado ==> no se hace nada
        '1       Empleado
        '2       Empleado Agencia
        StrSql = " SELECT * FROM ter_tip"
        StrSql = StrSql & " WHERE ternro = " & Ternro
        StrSql = StrSql & " AND tipnro = 1"
        'StrSql = StrSql & " AND (tipnro = 1 OR tipnro = 2)"
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If Not rs_Aux.EOF Then
            Flog.writeline "El Postulante ya es empleado." & "No se procesará."
            Exit Sub
        End If
        
        'Actualizar los datos
        StrSql = " UPDATE tercero SET "
        StrSql = StrSql & " ternom = " & "'" & datos(3) & "'"
        StrSql = StrSql & ", ternom2 = " & "'" & datos(4) & "'"
        StrSql = StrSql & ", terape = " & "'" & datos(5) & "'"
        StrSql = StrSql & ", terape2 = " & "'" & datos(6) & "'"
        StrSql = StrSql & ", terfecnac = " & datos(7)
        StrSql = StrSql & ", tersex = " & CLng(datos(8))
        StrSql = StrSql & ", teremail =" & "'" & datos(23) & "'"
        StrSql = StrSql & ", nacionalnro =" & CLng(datos(13))
        StrSql = StrSql & ", estcivnro =" & "'" & datos(9) & "'"
        StrSql = StrSql & ", terfecing =" & datos(14)
        StrSql = StrSql & ", tercasape =" & "'" & datos(11) & "'"
        StrSql = StrSql & ",terfecestciv =" & datos(10)
        StrSql = StrSql & ", paisnro =" & datos(12)
        StrSql = StrSql & " WHERE ternro = " & Ternro
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Tercero Actualizado"
    
        'Desactivo el manejador de erorres
        On Error GoTo 0
        
        'Cualquier error que ocurra de aquí en adelante sigue adelante
        ' tratando de insertar la mayor cantidad de datos posible
        On Error Resume Next
        
        StrSql = "SELECT * FROM ter_doc  "
        StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
        StrSql = StrSql & " AND ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
            StrSql = StrSql & " VALUES(" & Ternro & "," & datos(1) & ",'" & datos(2) & "')"
        Else
            StrSql = "UPDATE ter_doc SET "
            StrSql = StrSql & " nrodoc = '" & datos(2) & "'"
            StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
            StrSql = StrSql & " AND ternro = " & Ternro
        End If
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Documento Actualizado"
        
        
        '--------------------------------------------------------------------------------
        '--Inserto el Domicilio--
        StrSql = "SELECT * FROM cabdom  "
        StrSql = StrSql & " WHERE tipnro = 1"
        StrSql = StrSql & " AND ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
            StrSql = StrSql & " VALUES(1," & Ternro & ",-1,2)"
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline "inserto el Domicilio"
    
            '--Obtengo el numero de domicilio en la tabla--
            NroDom = CLng(getLastIdentity(objConn, "cabdom"))
        
            '--Si no tiene algun dato le agregamos unos ficticios--
            datos(24) = StrToStr(datos(24), 30) 'dirCalle
            datos(25) = StrToStr(datos(25), 8) 'dirNumero
            datos(26) = StrToStr(datos(26), 8) 'dirPiso
            datos(27) = StrToStr(datos(27), 8) 'dirDepto
            datos(28) = StrToStr(datos(28), 8) 'dirTorre
            datos(29) = StrToStr(datos(29), 8) 'dirManzana
            datos(30) = StrToStr(datos(30), 8) 'dirSector
            datos(31) = StrToStr(datos(31), 12) 'dirCP
            datos(32) = TraerCodLocalidad(CStr(datos(32))) 'dirLocalidad
            datos(33) = TraerCodProvincia(CStr(datos(33)))   'dirProvincia
            datos(34) = TraerCodPartido(CStr(datos(34)))  'dirPartido
            datos(35) = TraerCodZona(CStr(datos(35)), CLng(datos(33)))  'dirZona
                If datos(35) = "" Then datos(35) = "NULL"
            datos(36) = TraerCodPais(CStr(datos(36))) 'dirPais
        
            StrSql = " INSERT INTO detdom (domnro,calle,nro,sector,torre,piso,oficdepto,manzana,codigopostal,"
            StrSql = StrSql & "locnro,provnro,paisnro, zonanro, partnro) "
            StrSql = StrSql & " VALUES ("
            StrSql = StrSql & NroDom
            StrSql = StrSql & ",'" & datos(24) & "'"
            StrSql = StrSql & ",'" & datos(25) & "'"
            StrSql = StrSql & ",'" & datos(30) & "'"
            StrSql = StrSql & ",'" & datos(28) & "'"
            StrSql = StrSql & ",'" & datos(26) & "'"
            StrSql = StrSql & ",'" & datos(27) & "'"
            StrSql = StrSql & ",'" & datos(29) & "'"
            StrSql = StrSql & ",'" & datos(31) & "'"
            StrSql = StrSql & "," & datos(32)
            StrSql = StrSql & "," & datos(33)
            StrSql = StrSql & "," & datos(36)
            StrSql = StrSql & "," & datos(35)
            StrSql = StrSql & "," & datos(34)
            StrSql = StrSql & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
            Else
                Flog.writeline "Inserte el domicilio "
            End If
            Flog.writeline "Inserto el Domicilio "
        Else
            NroDom = rs_Aux!domnro
        
            '--Si no tiene algun dato le agregamos unos ficticios--
            datos(24) = StrToStr(datos(24), 30) 'dirCalle
            datos(25) = StrToStr(datos(25), 8) 'dirNumero
            datos(26) = StrToStr(datos(26), 8) 'dirPiso
            datos(27) = StrToStr(datos(27), 8) 'dirDepto
            datos(28) = StrToStr(datos(28), 8) 'dirTorre
            datos(29) = StrToStr(datos(29), 8) 'dirManzana
            datos(30) = StrToStr(datos(30), 8) 'dirSector
            datos(31) = StrToStr(datos(31), 12) 'dirCP
            datos(32) = TraerCodLocalidad(CStr(datos(32))) 'dirLocalidad
            datos(33) = TraerCodProvincia(CStr(datos(33)))   'dirProvincia
            datos(34) = TraerCodPartido(CStr(datos(34)))  'dirPartido
            datos(35) = TraerCodZona(CStr(datos(35)), CLng(datos(33)))  'dirZona
            If datos(35) = "" Then datos(35) = "NULL"
            datos(36) = TraerCodPais(CStr(datos(36))) 'dirPais
        
            StrSql = " UPDATE detdom SET "
            StrSql = StrSql & " calle =" & "'" & datos(24) & "'"
            StrSql = StrSql & ",nro =" & "'" & datos(25) & "'"
            StrSql = StrSql & ",sector =" & "'" & datos(30) & "'"
            StrSql = StrSql & ",torre =" & "'" & datos(28) & "'"
            StrSql = StrSql & ",piso =" & "'" & datos(26) & "'"
            StrSql = StrSql & ",oficdepto =" & "'" & datos(27) & "'"
            StrSql = StrSql & ",manzana =" & "'" & datos(29) & "'"
            StrSql = StrSql & ",codigopostal =" & "'" & datos(31) & "'"
            StrSql = StrSql & ",locnro =" & datos(32)
            StrSql = StrSql & ",provnro =" & datos(33)
            StrSql = StrSql & ",paisnro =" & datos(36)
            StrSql = StrSql & ", zonanro =" & datos(35)
            StrSql = StrSql & ", partnro = " & datos(34)
            StrSql = StrSql & " WHERE domnro = " & NroDom
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
                Flog.writeline "Domicilio NO actualizado"
            Else
                Flog.writeline "Domicilio actualizado"
            End If
        End If
        
        
        '--Telefonos-Personal--
        datos(21) = validatelefono(StrToStr(datos(21), 20))
        If datos(21) <> "" Then
            StrSql = "SELECT * FROM telefono  "
            StrSql = StrSql & " WHERE domnro = " & NroDom
            StrSql = StrSql & " AND telnro = " & "'" & datos(21) & "'"
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO telefono "
                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
                StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0,1 ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Err.Clear
                    Flog.writeline "Error Insertando el telefono " & datos(21)
                Else
                    Flog.writeline "Inserte el telefono"
                End If
            End If
        End If
        
        '--Telefonos-segundo--
        datos(22) = validatelefono(StrToStr(datos(22), 20))
        If datos(22) <> "" Then
            StrSql = "SELECT * FROM telefono  "
            StrSql = StrSql & " WHERE domnro = " & NroDom
            StrSql = StrSql & " AND telnro = " & "'" & datos(22) & "'"
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO telefono "
                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
                StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0,2 ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Err.Clear
                    Flog.writeline "Error Insertando el telefono " & datos(22)
                Else
                    Flog.writeline "Inserte el telefono2 "
                End If
            End If
        End If
    
    
        '--Complemento--
        If datos(15) = "" Then
            datos(15) = 0
        Else
            datos(15) = CLng(StrToInt(datos(15))) 'cantidadHijos
        End If
        datos(16) = StrToStr(datos(16), 60) 'imagen
        If datos(17) = "" Then
            datos(17) = "NULL"
        Else
            datos(17) = ConvFecha(CDate(datos(17))) 'fechaIngresoCV
        End If
        datos(18) = StrToStr(datos(18), 250) 'referencias
        If datos(19) = "" Then
            datos(19) = TraerCodProcedencia("Web Deloitte") 'procedencia
        Else
            datos(19) = TraerCodProcedencia(CStr(datos(19))) 'procedencia
        End If
        If datos(20) = "" Then
            datos(20) = 0
        Else
            datos(20) = CDbl(StrToDbl(datos(20))) 'remuneracionPretendida
        End If
        
        
        
        
        StrSql = "SELECT * FROM pos_postulante  "
        StrSql = StrSql & " WHERE ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            'StrSql = " INSERT INTO pos_postulante "
            'StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro) "
            'StrSql = StrSql & " VALUES (" & ternro & " ," & CDbl(Datos(20)) & ", " & CLng(Datos(15)) & ", '" & Datos(16) & "', " & Datos(17) & ",'" & Datos(18) & "', " & Datos(19) & ") "
            
            'JMH - 07/03/2006 Se agrego el estposnro = 4 (postulantre activo)
            StrSql = " INSERT INTO pos_postulante "
            StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro,estposnro) "
            StrSql = StrSql & " VALUES (" & Ternro & " ," & CDbl(datos(20)) & ", " & CLng(datos(15)) & ", '" & datos(16) & "', " & datos(17) & ",'" & datos(18) & "', " & datos(19) & ",4) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al inserte el Complemento: " & Err.Description
                Err.Clear
            Else
                Flog.writeline "Inserte el Complemento "
            End If
        Else
            StrSql = "UPDATE pos_postulante SET "
            StrSql = StrSql & " posrempre = " & CDbl(datos(20))
            StrSql = StrSql & ", poscanhijos =" & CLng(datos(15))
            StrSql = StrSql & ", posfoto =" & "'" & datos(16) & "'"
            StrSql = StrSql & ", posfecpres =" & datos(17)
            StrSql = StrSql & ", posref =" & "'" & datos(18) & "'"
            StrSql = StrSql & ", procnro =" & datos(19)
            StrSql = StrSql & " WHERE ternro = " & Ternro
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al actualizar el Complemento: " & Err.Description
                Err.Clear
            Else
                Flog.writeline "Complemento actualizado"
            End If
        End If
        
        '--Estudios-formales--(49)licho por aca
        Xconst = 0
        For a = 0 To 7
            If UBound(datos) > (Xconst + 37) Then
                If datos(Xconst + 37) <> "" Then
                    datos(Xconst + 37) = TraerCodNivelEstudio(datos(Xconst + 37))   'EFnivel8
                    If datos(Xconst + 38) = "Graduado" Then datos(Xconst + 38) = -1 Else datos(Xconst + 38) = 0
                        'Datos(Xconst + 38) = Datos(Xconst + 38)   'EFcompleto8
                    datos(Xconst + 39) = TraerCodTitulo(CStr(datos(Xconst + 39)), CLng(datos(Xconst + 37)))   'EFtitulo8
                    datos(Xconst + 40) = TraerCodInstitucionAbreviada(CStr(datos(Xconst + 40)))   'EFinstitucion8
                    datos(Xconst + 41) = TraerCodCarrera(CStr(datos(Xconst + 41)))    'EFcarrera8
                    If datos(Xconst + 42) <> "" Then
                        datos(Xconst + 42) = ConvFecha(CDate(datos(Xconst + 42)))   'EFfechaDesde8
                    Else
                        datos(Xconst + 42) = "NULL"
                    End If
                    If datos(Xconst + 43) <> "" Then
                        datos(Xconst + 43) = ConvFecha(CDate(datos(Xconst + 43)))   'EFfechaHasta8
                    Else
                        datos(Xconst + 43) = "NULL"
                    End If
                    datos(Xconst + 44) = StrToStr(datos(Xconst + 44), 30)   'EFpromedio8
                    datos(Xconst + 45) = StrToStr(datos(Xconst + 45), 60)   'EFrango8
                    If datos(Xconst + 46) <> "" And UCase(datos(Xconst + 46)) <> "NO" Then
                        datos(Xconst + 46) = -1  'EFestudiaActualmente8
                    Else
                        datos(Xconst + 46) = 0  'EFestudiaActualmente8
                    End If
            
                    'actualizo
                    StrSql = "SELECT * FROM cap_estformal  "
                    StrSql = StrSql & " WHERE nivnro = " & CLng(datos(Xconst + 37))
                    StrSql = StrSql & " AND ternro = " & Ternro
                    StrSql = StrSql & " AND titnro = " & datos(Xconst + 39)
                    StrSql = StrSql & " AND instnro = " & datos(Xconst + 40)
                    StrSql = StrSql & " AND carredunro = " & datos(Xconst + 41)
                    If rs_Aux.State = adStateOpen Then rs_Aux.Close
                    OpenRecordset StrSql, rs_Aux
                    If rs_Aux.EOF Then
                        StrSql = " INSERT INTO cap_estformal "
                        StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
                        StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 37)) & ", " & Ternro & " ," & datos(Xconst + 39) & "," & datos(Xconst + 40) & "," & datos(Xconst + 41) & "," & datos(Xconst + 42) & " ," & datos(Xconst + 43) & "," & datos(Xconst + 38) & "," & datos(Xconst + 46) & ",'" & datos(Xconst + 45) & "','" & datos(Xconst + 44) & "' ) "
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte el estudio formal: " & Err.Description
                            Err.Clear
                        Else
                            Flog.writeline "Inserte el estudio formal " & datos(Xconst + 37)
                            ActPasos = True
                        End If
                    Else
                        StrSql = "UPDATE  cap_estformal SET "
                        StrSql = StrSql & " capfecdes = " & datos(Xconst + 42)
                        StrSql = StrSql & ", capfechas =" & datos(Xconst + 43)
                        StrSql = StrSql & ", capcomp =" & datos(Xconst + 38)
                        StrSql = StrSql & ", capestact =" & datos(Xconst + 46)
                        StrSql = StrSql & ", caprango =" & "'" & datos(Xconst + 45) & "'"
                        StrSql = StrSql & ", capprom =" & "'" & datos(Xconst + 44) & "'"
                        StrSql = StrSql & " WHERE nivnro = " & CLng(datos(Xconst + 37))
                        StrSql = StrSql & " AND ternro = " & Ternro
                        StrSql = StrSql & " AND titnro = " & datos(Xconst + 39)
                        StrSql = StrSql & " AND instnro = " & datos(Xconst + 40)
                        StrSql = StrSql & " AND carredunro = " & datos(Xconst + 41)
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte Al actualizar studio formal: " & Err.Description
                            Err.Clear
                        Else
                            Flog.writeline "Estudio formal " & datos(Xconst + 37) & " actualizado"
                            ActPasos = False
                        End If
                    End If
                End If
            Else
            End If
            Xconst = Xconst + 10
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 49)
        End If
        ActPasos = False
        
        
        '--Experiencia-Laboral----Empleos Anteriores--57
        Xconst = 0
        For a = 0 To 15
            If UBound(datos) > (Xconst + 117) Then
                If datos(Xconst + 118) <> "" And datos(Xconst + 117) <> "" Then
                    datos(Xconst + 117) = TraerCodCargo(CStr(datos(Xconst + 117)))    'ELcargoAnterior16
                    datos(Xconst + 118) = TraerCodListaEmpresa(CStr(datos(Xconst + 118)))   'ELempresa16 lempnro
                    datos(Xconst + 119) = StrToStr(datos(Xconst + 119), 200) 'ELtareaDesempenada16
                    If datos(Xconst + 120) <> "" Then
                        datos(Xconst + 120) = ConvFecha(CDate(datos(Xconst + 120)))  'ELfechaDesde16
                    Else
                        datos(Xconst + 120) = "NULL"
                    End If
                    If datos(Xconst + 121) <> "" Then
                        datos(Xconst + 121) = ConvFecha(CDate(datos(Xconst + 121)))  'ELfechaHasta16
                    Else
                        datos(Xconst + 121) = "NULL"
                    End If
                    If datos(Xconst + 122) = "" Then
                        datos(Xconst + 122) = 0
                    Else
                        datos(Xconst + 122) = StrToDbl(datos(Xconst + 122))   'ELremuneracion16
                    End If
                    If datos(Xconst + 123) <> "" Then
                        datos(Xconst + 123) = TraerCodCausa(CStr(datos(Xconst + 123)))   'ELcausaBaja16
                    Else
                        datos(Xconst + 123) = "NULL"
                    End If
                
                    StrSql = "SELECT * FROM empant  "
                    StrSql = StrSql & " WHERE empleado = " & Ternro
                    StrSql = StrSql & " AND empatareas = " & "'" & datos(Xconst + 119) & "'"
                    StrSql = StrSql & " AND lempnro = " & datos(Xconst + 118)
                    StrSql = StrSql & " AND carnro = " & datos(Xconst + 117)
                    If rs_Aux.State = adStateOpen Then rs_Aux.Close
                    OpenRecordset StrSql, rs_Aux
                    If rs_Aux.EOF Then
                        StrSql = " INSERT INTO empant "
                        StrSql = StrSql & " ( empleado, empatareas, lempnro, empadesde, emmpahasta, carnro, emparemu ) "
                        StrSql = StrSql & " VALUES (" & Ternro & ", '" & datos(Xconst + 119) & "' ," & datos(Xconst + 118) & "," & datos(Xconst + 120) & "," & datos(Xconst + 121) & "," & datos(Xconst + 117) & "," & datos(Xconst + 122) & "  ) "
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte el Empleo Anterior: " & Err.Description
                            Err.Clear
                        Else
                            Flog.writeline "Inserto los datos del Empleo Anterior"
                            ActPasos = True
                        End If
                    Else
                        StrSql = "UPDATE empant SET "
                        StrSql = StrSql & " empadesde =" & datos(Xconst + 120)
                        StrSql = StrSql & ", emmpahasta =" & (datos(Xconst + 121))
                        StrSql = StrSql & ", emparemu = " & datos(Xconst + 122)
                        StrSql = StrSql & " WHERE empantnro = " & rs_Aux!Empantnro
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al actualizar el Empleo Anterior: " & Err.Description
                            Err.Clear
                        Else
                            Flog.writeline "Actualizo los datos del Empleo Anterior"
                            ActPasos = False
                        End If
                    End If
                Else
                End If
            End If
            Xconst = Xconst + 7
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 57)
        End If
        ActPasos = False
    
    
        '--Idiomas--53
        ActPasos = False
        Xconst = 0
        For a = 0 To 4
            If UBound(datos) > (Xconst + 229) Then
                If datos(Xconst + 229) <> "" Then
                    If datos(Xconst + 230) <> "" Or datos(Xconst + 231) <> "" Or datos(Xconst + 232) <> "" Then
                        datos(Xconst + 229) = TraerCodIdioma(CStr(datos(Xconst + 229))) 'idioma1
                        datos(Xconst + 230) = TraerCodIdiNivel(CStr(datos(Xconst + 230))) 'idiomaLee1
                        datos(Xconst + 231) = TraerCodIdiNivel(CStr(datos(Xconst + 231))) 'idiomaHabla1
                        datos(Xconst + 232) = TraerCodIdiNivel(CStr(datos(Xconst + 232))) 'idiomaEscribe1
                        
                        If Not TieneIdioma(Ternro, CLng(datos(Xconst + 229))) Then
                            StrSql = " INSERT INTO emp_idi "
                            StrSql = StrSql & " (idinro, empleado, empidlee, empidhabla, empidescr) "
                            StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 229)) & ", " & Ternro & " ," & datos(Xconst + 230) & ", " & datos(Xconst + 231) & ", " & datos(Xconst + 232) & " ) "
                        Else
                            StrSql = " UPDATE emp_idi SET "
                            StrSql = StrSql & ", empidlee = " & datos(Xconst + 230)
                            StrSql = StrSql & ", empidhabla = " & datos(Xconst + 231)
                            StrSql = StrSql & ", empidescr = " & datos(Xconst + 232)
                            StrSql = StrSql & " where empleado = " & Ternro & " and idinro = " & CLng(datos(Xconst + 229))
                        End If
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte el Idioma " & datos(Xconst + 229) & "-" & Err.Description
                            Err.Clear
                        Else
                            Flog.writeline "Inserte el Idioma " & datos(Xconst + 229)
                            ActPasos = True
                        End If
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 53)
        End If
        ActPasos = False
    
        
        '--Estudios-Informales--50
        ActPasos = False
        
        tempString = StrToStr(datos(249), 50) ''descCurso  estinfdesabr
        datos(249) = datos(249) ''descCurso  estinfdesabr
        datos(250) = TraerCodTipoCurso(StrToStr(datos(250), 50)) 'tipoCurso tipcurnro
        If datos(251) <> "" Then
            datos(251) = ConvFecha(datos(251)) 'fechaCurso  estinffecha
        Else
            datos(251) = ConvFecha(Date)
        End If
        datos(252) = TraerCodInstitucion(CStr(datos(252))) 'institucionCurso instnro
        If datos(249) = "" Or datos(250) = "" Or datos(252) = "" Then
            Flog.writeline "Error al insertar el estudio informal por falta de datos "
        Else
            'Reviso
            StrSql = "SELECT * FROM cap_estinformal  "
            StrSql = StrSql & " WHERE tipcurnro = " & CLng(datos(250))
            StrSql = StrSql & " AND ternro = " & Ternro
            StrSql = StrSql & " AND instnro = " & CLng(datos(252))
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO cap_estinformal "
                StrSql = StrSql & " (ternro, estinfdesabr, estinffecha, tipcurnro, instnro) "
                StrSql = StrSql & " VALUES (" & Ternro & " , '" & tempString & "'," & datos(251) & "," & CLng(datos(250)) & "," & CLng(datos(252)) & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al insertar el estudio informal: " & Err.Description
                    Err.Clear
                Else
                    Flog.writeline "Inserto los datos del estudio informal "
                    ActPasos = True
                End If
            Else
                StrSql = "UPDATE cap_estinformal SET "
                StrSql = StrSql & " estinfdesabr = '" & tempString & "'"
                StrSql = StrSql & ", estinffecha =" & (datos(251))
                StrSql = StrSql & " WHERE tipcurnro = " & CLng(datos(250))
                StrSql = StrSql & " AND ternro = " & Ternro
                StrSql = StrSql & " AND instnro = " & CLng(datos(252))
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al actualizar el estudio informal: " & Err.Description
                    Err.Clear
                Else
                    Flog.writeline "Actualizo los datos del estudio informal "
                    ActPasos = False
                End If
            End If
        End If
        If ActPasos Then
           Call InsertarPaso(Ternro, 50)
           ActPasos = False
        End If
        
        '--Especializaciones--51
        Xconst = 0
        ActPasos = False
        For a = 0 To 113
            If UBound(datos) > (Xconst + 255) Then
                If datos(Xconst + 255) <> "" Then
                    'Datos(Xconst + 253) = TraerCodEspecializacion(CStr(Datos(Xconst + 253))) 'tipo
                    'Datos(Xconst + 254) = TraerCodEltoana(CStr(Datos(Xconst + 254)), Datos(Xconst + 253)) 'elemento
                    datos(Xconst + 255) = TraerCodNivelEspecializacion(CStr(datos(Xconst + 255))) 'nivel
                    
                    'REVISO
                    StrSql = "SELECT * FROM especemp  "
                    StrSql = StrSql & " WHERE espnivnro = " & datos(Xconst + 255)
                    StrSql = StrSql & " AND ternro = " & Ternro
                    StrSql = StrSql & " AND eltananro = " & datosEltoAna(0, a)
                    If rs_Aux.State = adStateOpen Then rs_Aux.Close
                    OpenRecordset StrSql, rs_Aux
                    If rs_Aux.EOF Then
                        StrSql = " INSERT INTO especemp "
                        StrSql = StrSql & " (eltananro, ternro, espnivnro ) "
                        StrSql = StrSql & " VALUES (" & datosEltoAna(0, a) & ", " & Ternro & " ," & datos(Xconst + 255) & ") "
                        Err.Clear
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al insertar la especialidad: " & Err.Description
                            Err.Clear
                        Else
                            ActPasos = True
                        End If
                    End If
                Else
                    'Flog.Writeline "Error al insertar la especialidad por falta de datos. "
                End If
            Else
            End If
            Xconst = Xconst + 3
        Next a
        If ActPasos Then
           Flog.writeline "Inserto los datos de la especialidad"
           Call InsertarPaso(Ternro, 51)
           ActPasos = False
        End If
    End If
Fin:
Exit Sub

Manejador_De_Error:
    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub



Public Sub LineaModelo_240(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Desliquidacion
' Autor      : FGZ
'              El formato es:
'              Legajo; Proceso
' Fecha      : 25/11/2004
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long

Dim Proceso As Long
Dim Periodo As Long
Dim Desliquida As Boolean
Dim Aux

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Proceso As New ADODB.Recordset
Dim rs_cabliq As New ADODB.Recordset

' El formato es:
' Legajo; proceso; Agrega a Proceso
    
    On Error GoTo Manejador_De_Error
    
    'Nro de Legajo
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        Flog.writeline Espacios(Tabulador * 1) & "El legajo no es numerico "
        InsertaError 1, 8
        Exit Sub
    End If
    
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    Proceso = Mid(strLinea, pos1, pos2 - pos1)
    
    'Proceso
    pos1 = pos2 + 1
    pos2 = Len(strLinea)
    Aux = Mid(strLinea, pos1, pos2)
    Desliquida = IIf(UCase(Aux) = "SI", False, True)

' ====================================================================
'   Validar los parametros Levantados

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "No se encontro el legajo " & NroLegajo
    InsertaError 1, 8
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If


'Que exista el proceso
StrSql = "SELECT * FROM proceso WHERE pronro = " & Proceso
OpenRecordset StrSql, rs_Proceso
If rs_Proceso.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "No se encontro el Proceso " & Proceso
    InsertaError 2, 10
    Exit Sub
Else
    Periodo = rs_Proceso!Pliqnro
End If

'=============================================================
If Desliquida Then
    StrSql = "SELECT * FROM cabliq " & _
             " WHERE pronro =" & Proceso & _
             " AND empleado =" & Tercero
    OpenRecordset StrSql, rs_cabliq

    If Not rs_cabliq.EOF Then
        Call Liqpro04(rs_cabliq!cliqnro, Tercero, Proceso, Periodo, False)
        Flog.writeline Espacios(Tabulador * 1) & "Empleado desliquidado"
        
        StrSql = "DELETE FROM cabliq WHERE cliqnro =" & rs_cabliq!cliqnro
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline Espacios(Tabulador * 1) & "Empleado eliminado del proceso"
    Else
        Flog.writeline Espacios(Tabulador * 1) & "No se encontró la cabecera del empleado para el proceso"
    End If
Else
    StrSql = "SELECT * FROM cabliq " & _
             " WHERE pronro =" & Proceso & _
             " AND empleado =" & Tercero
    OpenRecordset StrSql, rs_cabliq
             
    If rs_cabliq.EOF Then
        StrSql = "INSERT INTO cabliq (pronro, empleado) VALUES (" & _
        Proceso & _
        "," & Tercero & _
        ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline Espacios(Tabulador * 1) & "Empleado agregado al proceso"
    Else
        Flog.writeline Espacios(Tabulador * 1) & "No se agregó. El empleado ya existe en el proceso"
    End If
End If
    

Fin:
'Cierro todo y libero
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Proceso.State = adStateOpen Then rs_Proceso.Close
If rs_cabliq.State = adStateOpen Then rs_cabliq.Close

Set rs_Proceso = Nothing
Set rs_Empleado = Nothing
Set rs_cabliq = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub
Public Sub LineaModelo_241(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Procedimiento de incorporacion de postulantes
' Autor      : Lisandro Moro
' Fecha      : 29/11/2004
' Ultima Mod.:
' Descripcion: Interface Dabra
' ---------------------------------------------------------------------------------------------
' Interfaces Customisadas

    Dim datos() As String
    Dim StrSql As String
    Dim Ternro As Long
    Dim NroDom As Long
    Dim a As Long
    Dim Xconst As Long
    Dim ActPasos As Boolean
    Dim tempString As String

    datos = Split(strLinea, separador)

    '--Tercero
    datos(2) = StrToStr(datos(2), 25) 'ternom
    datos(3) = StrToStr(datos(3), 25) 'ternom2
    datos(4) = StrToStr(datos(4), 25) 'terape
    datos(5) = StrToStr(datos(5), 25) 'terape2
    datos(22) = ConvFecha(CDate(datos(22))) 'terfecnac
    'If UCase(Datos(23)) = "M" Then Datos(23) = -1 Else Datos(23) = 0 'tersex
    If (UCase(datos(23)) = "M") Or (UCase(datos(23)) = "-1") Or (UCase(datos(23)) = "MASCULINO") Then
        datos(23) = -1
    Else
        datos(23) = 0
    End If
    
    datos(11) = StrToStr(datos(11), 100) ' teremail
    datos(9) = StrToStr(TraerCodNacionalidad(CStr(datos(9))), 20) ' nacionalnro
    datos(8) = StrToStr(TraerCodEstadoCivil(datos(8)), 30) 'estcivnro

    StrSql = " INSERT INTO tercero (ternom, ternom2, terape, terape2, terfecnac, tersex, teremail, nacionalnro, estcivnro ) VALUES ("
    StrSql = StrSql & "'" & datos(2) & "'"
    StrSql = StrSql & ",'" & datos(3) & "'"
    StrSql = StrSql & ",'" & datos(4) & "'"
    StrSql = StrSql & ",'" & datos(5) & "'"
    StrSql = StrSql & "," & datos(22)
    StrSql = StrSql & "," & CLng(datos(23))
    StrSql = StrSql & ",'" & datos(11) & "'"
    StrSql = StrSql & "," & CLng(datos(9))
    StrSql = StrSql & ",'" & datos(8) & "'"
    StrSql = StrSql & " )"
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline "Inserto en la tabla de tercero"

    '--Obtengo el ternro--
    Ternro = getLastIdentity(objConn, "tercero")
    Flog.writeline "-----------------------------------------------"
    Flog.writeline " Codigo de Tercero = " & Ternro
    
    On Error Resume Next
    
    '--Inserto el Registro correspondiente en ter_tip--
    StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & Ternro & ",14)"
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline "Inserto el tipo de tercero 14 en ter_tip"
    If Err Then
        Flog.writeline "Error al inserte el tipo de tercero: " & Err.Description
        Err.Clear
    Else
        Flog.writeline "Inserto el tipo de tercero "
    End If

    '--Documentos--
    If Not IsNull(datos(1)) Then
        datos(0) = TraerCodTipoDocumento(CStr(datos(0)))  'tipoDocumento
        datos(1) = StrToStr(CStr(datos(1)), 30) 'numeroDocumento
        datos(1) = Replace(datos(1), ".", "") 'elimino puntos y comas
        datos(1) = Replace(datos(1), ",", "")
    
        StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
        StrSql = StrSql & " VALUES(" & Ternro & "," & datos(0) & ",'" & datos(1) & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el Documento "
            Err.Clear
        Else
           Flog.writeline "Inserte el Documento " & datos(1)
        End If
    
        '--Inserto el Domicilio--
        StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
        StrSql = StrSql & " VALUES(1," & Ternro & ",-1,2)"
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el Domicilio: " & Err.Description
            Err.Clear
        Else
            Flog.writeline "Inserto el Domicilio "
        End If
    End If
    
    '--Obtengo el numero de domicilio en la tabla--
    NroDom = CLng(getLastIdentity(objConn, "cabdom"))

    '--Domicilios--
    If Not (IsNull(datos(16)) Or IsNull(datos(17)) Or IsNull(datos(18))) Then
        datos(12) = StrToStr(datos(12), 30) 'dirCalle
        datos(13) = StrToStr(datos(13), 8) 'dirNumero
        datos(14) = StrToStr(datos(14), 8) 'dirPiso
        datos(15) = StrToStr(datos(15), 8) 'dirDepto
        datos(21) = StrToStr(datos(21), 12) 'dirCP
        datos(16) = StrToStr(TraerCodLocalidad(CStr(datos(16))), 30) 'dirLocalidad
        datos(17) = TraerCodProvincia(CStr(datos(17)))   'dirProvincia
        datos(19) = TraerCodPartido(CStr(datos(19)))  'dirPartido
        datos(20) = TraerCodZona(CStr(datos(20)), CLng(datos(17))) 'dirZona
        datos(18) = TraerCodPais(CStr(datos(18))) 'dirPais
    
        StrSql = " INSERT INTO detdom (domnro,calle,nro,piso,oficdepto,codigopostal,"
        StrSql = StrSql & "locnro,provnro,paisnro, zonanro, partnro) "
        StrSql = StrSql & " VALUES ("
        StrSql = StrSql & NroDom
        StrSql = StrSql & ",'" & datos(12) & "'"
        StrSql = StrSql & ",'" & datos(13) & "'"
        StrSql = StrSql & ",'" & datos(14) & "'"
        StrSql = StrSql & ",'" & datos(15) & "'"
        StrSql = StrSql & ",'" & datos(21) & "'"
        StrSql = StrSql & "," & datos(16)
        StrSql = StrSql & "," & datos(17)
        StrSql = StrSql & "," & datos(18)
        StrSql = StrSql & "," & datos(20) & ""
        StrSql = StrSql & "," & datos(19) & ""
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el Domicilio: " & Err.Description
            Err.Clear
        Else
            Flog.writeline "Inserto los datos del Domicilio "
        End If
    Else
        Flog.writeline "Error al inserte el Domicilio por falta de datos "
    End If

    '--Telefonos-Personal--
    datos(6) = validatelefono(StrToStr(datos(6), 20))
    If datos(6) <> "" Then
        StrSql = " INSERT INTO telefono "
        'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
        StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
        StrSql = StrSql & " VALUES (" & NroDom & ", " & datos(6) & " ,0 , -1 ,0,1 ) "
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el telefono personal 1: " & Err.Description
            Err.Clear
        Else
            Flog.writeline "Inserto los datos del Telefono personal 1 "
        End If
    End If
    '--Telefonos-personal-2--
    datos(7) = validatelefono(StrToStr(datos(7), 20))
    If datos(7) <> "" Then
        StrSql = " INSERT INTO telefono "
        'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
        StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
        StrSql = StrSql & " VALUES (" & NroDom & ", " & datos(7) & " , 0, 0, 0,2 ) "
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el telefono personal 2: " & Err.Description
            Err.Clear
        Else
            Flog.writeline "Inserto los datos del Telefono personal 2 "
        End If
    End If

    '--Complemento--
    If Not IsNull(datos(10)) Then
        datos(10) = StrToDbl(datos(10)) 'remuneracionPretendida
        'JMH - 07/03/2006 Se agrego el estposnro = 4 (postulantre activo)
        StrSql = " INSERT INTO pos_postulante "
        StrSql = StrSql & " ( ternro, posrempre, estposnro ) "
        StrSql = StrSql & " VALUES (" & Ternro & " ," & datos(10) & ",4) "
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el Complemento: " & Err.Description
            Flog.writeline "SQL ejecutada: " & StrSql
            Err.Clear
        Else
            Flog.writeline "Inserte el Complemento "
        End If
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el Complemento: " & Err.Description
            Err.Clear
        Else
            Flog.writeline "Inserto los datos del Complemento "
        End If
    End If
    
    '--Estudios-formales--(49)
    Xconst = 0
    ActPasos = False
    For a = 0 To 2
        If datos(Xconst + 24) <> "" Then
            datos(Xconst + 24) = TraerCodNivelEstudio(datos(Xconst + 24))   'EFnivel8
            If datos(Xconst + 25) = -1 Then datos(Xconst + 25) = -1 Else datos(Xconst + 25) = 0
            datos(Xconst + 26) = TraerCodTituloSolo(CStr(datos(Xconst + 26)))    'EFtitulo8
            datos(Xconst + 27) = TraerCodInstitucion(CStr(datos(Xconst + 27)))   'EFinstitucion8
            datos(Xconst + 28) = TraerCodCarrera(CStr(datos(Xconst + 28)))    'EFcarrera8
            datos(Xconst + 29) = ConvFecha(CDate(datos(Xconst + 29)))   'EFfechaDesde8
            datos(Xconst + 30) = ConvFecha(CDate(datos(Xconst + 30)))   'EFfechaHasta8
            datos(Xconst + 31) = Replace(StrToStr(datos(Xconst + 31), 30), ",", ".") 'EFpromedio8
    
            StrSql = " INSERT INTO cap_estformal "
            StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capprom) "
            StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 24)) & ", " & Ternro & " ," & datos(Xconst + 26) & "," & datos(Xconst + 27) & "," & datos(Xconst + 28) & "," & datos(Xconst + 29) & " ," & datos(Xconst + 30) & "," & datos(Xconst + 25) & ",'" & datos(Xconst + 31) & "' ) "
            'StrSql = StrSql & " Go "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al inserte los estudios formales: " & Err.Description
                Err.Clear
            Else
                Flog.writeline "Inserto los datos del estudio formal "
                ActPasos = True
            End If
        Else
            Flog.writeline "Error al inserte los estudios formales por falta de datos "
        End If
        Xconst = Xconst + 8
    Next a
    If ActPasos Then
       Call InsertarPaso(Ternro, 49)
       ActPasos = False
    End If


    '--Experiencia-Laboral----Empleos Anteriores--57
    Xconst = 0
    ActPasos = False
    For a = 0 To 2
        datos(Xconst + 48) = CLng(TraerCodCargo(CStr(datos(Xconst + 48))))   'ELcargoAnterior16
        datos(Xconst + 49) = CLng(TraerCodListaEmpresa(CStr(datos(Xconst + 49))))   'ELempresa16 lempnro
        datos(Xconst + 50) = StrToStr(datos(Xconst + 50), 200) 'ELtareaDesempenada16
        datos(Xconst + 51) = ConvFecha(CDate(datos(Xconst + 51)))  'ELfechaDesde16
        datos(Xconst + 52) = ConvFecha(CDate(datos(Xconst + 52)))  'ELfechaHasta16
        datos(Xconst + 53) = StrToDbl(datos(Xconst + 53))   'ELremuneracion16
        If datos(Xconst + 54) <> "" Then datos(Xconst + 54) = TraerCodCausa(CStr(datos(Xconst + 54)))   'ELcausaBaja16

        StrSql = " INSERT INTO empant "
        StrSql = StrSql & " ( empleado, empatareas, lempnro, empadesde, emmpahasta, carnro, emparemu, caunro ) "
        StrSql = StrSql & " VALUES (" & Ternro & ", '" & datos(Xconst + 50) & "' ," & datos(Xconst + 49) & "," & datos(Xconst + 51) & "," & datos(Xconst + 52) & "," & datos(Xconst + 48) & "," & datos(Xconst + 53) & "," & datos(Xconst + 54) & " ) "
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al insertar la experiencia laboral: " & Err.Description
            Err.Clear
        Else
            Flog.writeline "Inserto los datos de la experiencia laboral "
            ActPasos = True
        End If
        Xconst = Xconst + 7
    Next a
    If ActPasos Then
       Call InsertarPaso(Ternro, 57)
       ActPasos = False
    End If

    '--Idiomas--53
    Xconst = 0
    ActPasos = False
    For a = 0 To 2
        If Not IsNull(datos(Xconst + 69)) Then
            datos(Xconst + 69) = TraerCodIdioma(CStr(datos(Xconst + 69))) 'idioma1
            If datos(Xconst + 70) = "" Then datos(Xconst + 70) = "NULL" Else datos(Xconst + 70) = TraerCodIdiNivel(CStr(datos(70))) 'idiomaLee1
            If datos(Xconst + 71) = "" Then datos(Xconst + 71) = "NULL" Else datos(Xconst + 71) = TraerCodIdiNivel(CStr(datos(71))) 'idiomaHabla1
            If datos(Xconst + 72) = "" Then datos(Xconst + 72) = "NULL" Else datos(Xconst + 72) = TraerCodIdiNivel(CStr(datos(72)))  'idiomaEscribe1
            
            If Not TieneIdioma(CLng(Ternro), CLng(datos(Xconst + 69))) Then
                StrSql = " INSERT INTO emp_idi "
                StrSql = StrSql & " (idinro, empleado, empidlee, empidhabla, empidescr) "
                StrSql = StrSql & " VALUES (" & datos(Xconst + 69) & ", " & Ternro & " , " & datos(Xconst + 70) & "," & datos(Xconst + 71) & "," & datos(Xconst + 72) & " )"
            Else
                StrSql = " UPDATE emp_idi SET "
                StrSql = StrSql & " empidhabla = " & datos(Xconst + 70)
                StrSql = StrSql & " ,empidhabla = " & datos(Xconst + 71)
                StrSql = StrSql & " ,empidhabla = " & datos(Xconst + 72)
                StrSql = StrSql & " where empleado = " & Ternro & " and idinro = " & datos(Xconst + 69)
            End If
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al insertar el idioma: " & Err.Description
                Err.Clear
            Else
                Flog.writeline "Inserto los datos del idioma "
                ActPasos = True
            End If
        Else
            Flog.writeline "Error al insertar el idioma por falta de datos"
        End If
    Xconst = Xconst + 4
    Next a
    If ActPasos Then
       Call InsertarPaso(Ternro, 53)
       ActPasos = False
    End If



    '--Estudios-Informales--50
    Xconst = 0
    ActPasos = False
    For a = 0 To 2
        tempString = StrToStr(datos(Xconst + 81), 50)
        datos(Xconst + 82) = TraerCodTipoCurso(StrToStr(datos(Xconst + 82), 50))
        datos(Xconst + 81) = TraerCodCurso(StrToStr(datos(Xconst + 81), 50), CLng(datos(Xconst + 82)))
        datos(Xconst + 83) = datos(Xconst + 83)
        datos(Xconst + 84) = TraerCodInstitucion(CStr(datos(Xconst + 84)))
        If Not IsNull(tempString) And Not IsNull(datos(Xconst + 81)) And Not IsNull(datos(Xconst + 83)) And Not IsNull(datos(Xconst + 84)) Then
            StrSql = " INSERT INTO cap_estinformal "
            StrSql = StrSql & " (ternro, estinfdesabr, estinffecha, tipcurnro, instnro) "
            StrSql = StrSql & " VALUES (" & Ternro & " , '" & tempString & "'," & ConvFecha(datos(Xconst + 83)) & "," & CLng(datos(Xconst + 82)) & "," & CLng(datos(Xconst + 84)) & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al insertar el estudio informal: " & Err.Description
                Err.Clear
            Else
                Flog.writeline "Inserto los datos del estudio informal "
                ActPasos = True
            End If
        Else
            Flog.writeline "Error al insertar el estudio informal por falta de datos "
        End If
        Xconst = Xconst + 4
    Next a
    If ActPasos Then
       Call InsertarPaso(Ternro, 50)
       ActPasos = False
    End If

    
    '--Especialidades--51
    Xconst = 0
    ActPasos = False
    For a = 0 To 2
        If Not IsNull(datos(Xconst + 94)) And Not IsNull(datos(Xconst + 95)) Then
            datos(Xconst + 93) = TraerCodEspecializacion(CStr(datos(Xconst + 93))) 'codespec
            datos(Xconst + 94) = TraerCodEltoana(CStr(datos(Xconst + 94)), CLng(datos(Xconst + 93))) 'elemento
            datos(Xconst + 95) = TraerCodNivelEspecializacion(CStr(datos(Xconst + 95))) 'nivel
            
            StrSql = " INSERT INTO especemp "
            StrSql = StrSql & " (eltananro, ternro, espnivnro, espmeses, espfecha) "
            StrSql = StrSql & " VALUES (" & datos(Xconst + 94) & ", " & Ternro & " ," & datos(Xconst + 95) & ", NULL, NULL ) "
            Err.Clear
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al insertar la especialidad: " & Err.Description
                Err.Clear
            Else
                Flog.writeline "Inserto los datos de la especialidad"
                ActPasos = True
            End If
        Else
            Flog.writeline "Error al insertar la especialidad por falta de datos. "
        End If
        Xconst = Xconst + 3
    Next a
    If ActPasos Then
       Call InsertarPaso(Ternro, 51)
       ActPasos = False
    End If
    
End Sub

Public Sub LineaModelo_247(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Acumulados Horas
' Autor      : JMH
' Fecha      : 02/02/2005
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim datos() As String
Dim Tercero As Long
Dim NroLegajo As Long

Dim Fecha As String

Dim TipoHora As String
Dim Campania As Long
Dim achdnro As Long
Dim Tenro As Long

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Confrep As New ADODB.Recordset
Dim rs_TipoHora As New ADODB.Recordset
Dim rs_Gti_ADiario As New ADODB.Recordset
Dim rs_Gti_Achdiario As New ADODB.Recordset
Dim rs_gti_achdiario_Estr As New ADODB.Recordset
Dim rs_Estructura As New ADODB.Recordset

Dim I As Long

On Error GoTo Manejador_De_Error
    
datos = Split(strLinea, separador)

'Trae el legajo del empleado
NroLegajo = datos(0) 'empleg

'Trae la fecha
Fecha = ConvFecha(CDate(datos(6)))
Campania = CLng(datos(3))
    
' ====================================================================
'   Validar los parametros Levantados

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "No se encontro el legajo " & NroLegajo
    FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": No se encontro el legajo " & NroLegajo
    InsertaError 1, 8
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'Controlo que la campania sea valida
StrSql = "SELECT * FROM estructura WHERE estrnro = " & Campania

OpenRecordset StrSql, rs_Estructura

If rs_Estructura.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "No se encontro la campaña " & Campania
    FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": No se encontro la campaña " & Campania
    InsertaError 1, 8
    HuboError = True
    Exit Sub
Else
    Tenro = rs_Estructura!Tenro
End If


'Que las horas intruducidas sean numéricas
For I = 7 To UBound(datos)
    If Not IsNumeric(datos(I)) Then
        Flog.writeline "El valor de la hora no es numerico " & datos(I)
        InsertaError CStr(I), 5
        HuboError = True
        Exit Sub
    End If
Next
    

'Que los tipos de horas sean correctos
 StrSql = "SELECT * FROM confrep where confrep.repnro = 118 AND confrep.confnrocol > 1 ORDER BY confrep.confnrocol "
 OpenRecordset StrSql, rs_Confrep
 If rs_Confrep.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "No se encontro el Reporte de Configuración " & NroLegajo
    FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": No se encontro el Reporte de Configuración 118"
    InsertaError 0, 106
    HuboError = True
    Exit Sub
 Else
     I = 7
     Do While rs_Confrep
         
        TipoHora = rs_Confrep!Confval 'tipo hora
          
        StrSql = "SELECT * FROM tiphora where tiphora.thnro = " & TipoHora
        OpenRecordset StrSql, rs_TipoHora
        If rs_TipoHora.EOF Then
             Flog.writeline Espacios(Tabulador * 1) & "No se encontro el Tipo de Hora " & TipoHora
             FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": No se encontro el Tipo de Hora " & TipoHora
             InsertaError CStr(I), 37
             HuboError = True
             If rs_TipoHora.State = adStateOpen Then rs_TipoHora.Close
             Set rs_TipoHora = Nothing
             Exit Sub
        Else: I = I + 1
              If rs_TipoHora.State = adStateOpen Then rs_TipoHora.Close
              Set rs_TipoHora = Nothing
              rs_Confrep.MoveNext
        End If
     Loop
    End If

'=============================================================
StrSql = "SELECT * FROM confrep where confrep.repnro = 118 AND confrep.confnrocol > 1 ORDER BY confrep.confnrocol "
OpenRecordset StrSql, rs_Confrep
 
I = 7
Do While rs_Confrep
         
    TipoHora = rs_Confrep!Confval 'tipo hora
    
    'Busco si existe el gti_acumdiario
    StrSql = "SELECT * FROM gti_acumdiario "
    StrSql = StrSql & " WHERE ternro = " & Tercero
    StrSql = StrSql & " AND thnro = " & TipoHora
    StrSql = StrSql & " AND adfecha = " & Fecha
    OpenRecordset StrSql, rs_Gti_ADiario

    If rs_Gti_Achdiario.EOF Then
        StrSql = "INSERT INTO gti_acumdiario ("
        StrSql = StrSql & " adcanthoras, adfecha, admanual, ternro, thnro, advalido"
        StrSql = StrSql & ") VALUES (" & datos(I)
        StrSql = StrSql & "," & Fecha
        StrSql = StrSql & ", -1 "
        StrSql = StrSql & "," & Tercero
        StrSql = StrSql & "," & TipoHora
        StrSql = StrSql & ", -1 "
        StrSql = StrSql & " )"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        Flog.writeline "Acumulado Diario insertado "
    Else
        
        StrSql = "UPDATE gti_acumdiario SET "
        StrSql = StrSql & " adcanthoras = adcanthoras + " & datos(I)
        StrSql = StrSql & " WHERE ternro = " & Tercero
        StrSql = StrSql & " AND thnro = " & TipoHora
        StrSql = StrSql & " AND adfecha = " & Fecha
        
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Flog.writeline "Acumulado Diario actualizado "
    End If
    
    'Busco si existe el gti_achdiario
    StrSql = "SELECT * FROM gti_achdiario "
    StrSql = StrSql & " WHERE ternro = " & Tercero
    StrSql = StrSql & " AND thnro = " & TipoHora
    StrSql = StrSql & " AND achdfecha = " & Fecha
    OpenRecordset StrSql, rs_Gti_Achdiario

    If rs_Gti_Achdiario.EOF Then
        StrSql = "INSERT INTO gti_achdiario ("
        StrSql = StrSql & " achdcanthoras,achdfecha,achdmanual,ternro,thnro"
        StrSql = StrSql & ") VALUES (" & datos(I)
        StrSql = StrSql & "," & Fecha
        StrSql = StrSql & ", -1 "
        StrSql = StrSql & "," & Tercero
        StrSql = StrSql & "," & TipoHora
        StrSql = StrSql & " )"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        Flog.writeline "Acumulador Horas insertado "
    Else
        achdnro = rs_Gti_Achdiario!achdnro
        
        StrSql = "UPDATE gti_achdiario SET "
        StrSql = StrSql & " achdcanthoras = achdcanthoras + " & datos(I)
        StrSql = StrSql & " WHERE ternro = " & Tercero
        StrSql = StrSql & " AND thnro = " & TipoHora
        StrSql = StrSql & " AND achdfecha = " & Fecha
        
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Flog.writeline "Acumulador Horas actualizado "
    End If
    
    'Busco si la campania ya se encuentra
    StrSql = "SELECT * FROM gti_achdiario_estr "
    StrSql = StrSql & " WHERE estrnro = " & Campania
    StrSql = StrSql & " AND achdnro = " & achdnro
    StrSql = StrSql & " AND achdfecha = " & Fecha
    
    OpenRecordset StrSql, rs_gti_achdiario_Estr
    
    If rs_gti_achdiario_Estr.EOF Then
        StrSql = "INSERT INTO gti_achdiario_estr ("
        StrSql = StrSql & " achdnro,achdfecha,tenro,estrnro"
        StrSql = StrSql & ") VALUES (" & achdnro
        StrSql = StrSql & "," & Fecha
        StrSql = StrSql & "," & Tenro
        StrSql = StrSql & "," & Campania
        StrSql = StrSql & " )"
        
        objConn.Execute StrSql, , adExecuteNoRecords
    
        Flog.writeline "Estructura insertada "
    End If
              
    rs_Confrep.MoveNext
    I = I + 1
              
Loop

'cierro y libero
If rs_Gti_ADiario.State = adStateOpen Then rs_Gti_ADiario.Close
If rs_Gti_Achdiario.State = adStateOpen Then rs_Gti_Achdiario.Close
If rs_gti_achdiario_Estr.State = adStateOpen Then rs_gti_achdiario_Estr.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Confrep.State = adStateOpen Then rs_Confrep.Close
If rs_Estructura.State = adStateOpen Then rs_Estructura.Close

Set rs_Empleado = Nothing
Set rs_Estructura = Nothing
Set rs_Confrep = Nothing
Set rs_Gti_ADiario = Nothing
Set rs_Gti_Achdiario = Nothing
Set rs_gti_achdiario_Estr = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
End Sub

Public Sub Liqpro04(ByVal Cabecera As Long, ByVal nro_ter As Long, ByVal nro_proceso As Long, ByVal nro_periodo As Long, ByVal Excluye_Liq As Boolean)
' --------------------------------------------------------------------------
' Descripcion:  Desmarca los registros generados por el liquidador.
'               Usado para reliquidaciones y para excluir empleados
'               de un proceso de Liquidación.
' Autor:        14/06/1998  JMH
' Traducción:   FGZ
' Fecha:        08/09/2003
' Ultima Mod:
' --------------------------------------------------------------------------
Dim Contador As Long
Dim Aux_Valor As Single

' Registros
Dim rs_Periodo As New ADODB.Recordset
Dim rs_Detliq As New ADODB.Recordset
Dim rs_Acu_Liq As New ADODB.Recordset
Dim rs_Acu_Mes As New ADODB.Recordset
Dim rs_ImpPro As New ADODB.Recordset
Dim rs_ImpMes As New ADODB.Recordset
Dim rs_Prestamos As New ADODB.Recordset
Dim rs_Embargos As New ADODB.Recordset
Dim rs_Emp_Lic As New ADODB.Recordset


Principal:
    StrSql = "SELECT * FROM periodo WHERE pliqnro =" & nro_periodo
    OpenRecordset StrSql, rs_Periodo

    If Not rs_Periodo.EOF Then
        ' Marcar datos generados de la liquidacion para REUSAR
        StrSql = "SELECT * FROM detliq WHERE cliqnro =" & Cabecera
        OpenRecordset StrSql, rs_Detliq
        
        Do While Not rs_Detliq.EOF
            'Ajuste retroactivo, debe volver los valores de los meses anteriores
            If CBool(rs_Detliq!dliretro) And CBool(rs_Detliq!ajustado) Then
                Call Liqpro16(nro_ter, rs_Detliq!ConcNro, Cabecera)
            End If
            
            rs_Detliq.MoveNext
        Loop
        ' Elimino los detliq
        StrSql = "DELETE FROM detliq WHERE cliqnro = " & Cabecera
        objConn.Execute StrSql, , adExecuteNoRecords
        
        
        StrSql = "SELECT * FROM acu_liq " & _
                 " INNER JOIN acumulador ON acu_liq.acunro = acumulador.acunro " & _
                 " WHERE cliqnro =" & Cabecera
        OpenRecordset StrSql, rs_Acu_Liq
        Do While Not rs_Acu_Liq.EOF
            If CBool(rs_Acu_Liq!acumes) Then
                'RESTAR AL ACUMULADOR MENSUAL
                StrSql = "SELECT * FROM acu_mes " & _
                         " WHERE amanio =" & rs_Periodo!pliqanio & _
                         " AND ternro =" & nro_ter & _
                         " AND ammes =" & rs_Periodo!pliqmes & _
                         " AND acunro =" & rs_Acu_Liq!acuNro
                OpenRecordset StrSql, rs_Acu_Mes
                
                If Not rs_Acu_Mes.EOF Then
                    StrSql = "UPDATE acu_mes SET ammontoreal = ammontoreal - " & rs_Acu_Liq!almontoreal & ", ammonto = ammonto - " & rs_Acu_Liq!almonto & _
                             " ,amcant = amcant - " & rs_Acu_Liq!alcant & _
                             " WHERE amanio =" & rs_Periodo!pliqanio & _
                             " AND ternro =" & nro_ter & _
                             " AND ammes =" & rs_Periodo!pliqmes & _
                             " AND acunro =" & rs_Acu_Liq!acuNro
                    objConn.Execute StrSql, , adExecuteNoRecords
                End If
                
            End If 'Es Acumulador Mensual
            
            'ES IMPONIBLE
            If CBool(rs_Acu_Liq!acuimponible) Or CBool(rs_Acu_Liq!acuimpcont) Then
                'RESTAR DE LAS ESTRUCTURAS DE IMPONIBLE
                StrSql = "SELECT * FROM impproarg " & _
                         " WHERE cliqnro =" & Cabecera & _
                         " AND acunro =" & rs_Acu_Liq!acuNro
                OpenRecordset StrSql, rs_ImpPro
            
                Do While Not rs_ImpPro.EOF  'por cada imponible
                    StrSql = "SELECT * FROM impmesarg " & _
                             " WHERE imaanio =" & rs_Periodo!pliqanio & _
                             " AND ternro =" & nro_ter & _
                             " AND imames =" & rs_Periodo!pliqmes & _
                             " AND tconnro =" & rs_ImpPro!tconnro & _
                             " AND acunro =" & rs_Acu_Liq!acuNro
                    OpenRecordset StrSql, rs_ImpMes
                    
                    If Not rs_ImpMes.EOF Then
                        'Actualizo
                        StrSql = "UPDATE impmesarg SET imamonto = imamonto - " & rs_ImpPro!ipamonto & _
                                 " ,imacant = imacant - " & rs_ImpPro!ipacant & _
                             " WHERE imaanio =" & rs_Periodo!pliqanio & _
                             " AND ternro =" & nro_ter & _
                             " AND imames =" & rs_Periodo!pliqmes & _
                             " AND tconnro =" & rs_ImpPro!tconnro & _
                             " AND acunro =" & rs_Acu_Liq!acuNro
                        objConn.Execute StrSql, , adExecuteNoRecords
                        
                        StrSql = "UPDATE impproarg SET ipamonto = 0 , ipacant = 0 " & _
                             " WHERE cliqnro =" & Cabecera & _
                             " AND tconnro =" & rs_ImpPro!tconnro & _
                             " AND acunro =" & rs_Acu_Liq!acuNro
                        objConn.Execute StrSql, , adExecuteNoRecords
                        
                        If Excluye_Liq Then
                            'No es una reliquidacion, sino que se excluye de la misma.
                            'En la Reliq. 99% de probabilidad que se vuelva a generar, sino queda en cero.
                            StrSql = "DELETE FROM impproarg " & _
                                 " WHERE imaanio =" & rs_Periodo!pliqanio & _
                                 " AND ternro =" & nro_ter & _
                                 " AND imames =" & rs_Periodo!pliqmes & _
                                 " AND tconnro =" & rs_ImpPro!tconnro & _
                                 " AND acunro =" & rs_Acu_Liq!acuNro
                            objConn.Execute StrSql, , adExecuteNoRecords
                        End If
                    End If
                    rs_ImpPro.MoveNext
                Loop 'por cada imponible
            End If 'ES IMPONIBLE
            
            rs_Acu_Liq.MoveNext
        Loop
        
        'Borro el acu_liq
        StrSql = "DELETE FROM acu_liq " & _
                 " WHERE cliqnro =" & Cabecera
        objConn.Execute StrSql, , adExecuteNoRecords
        
                
        'BORRA LOS DATOS GENERADOS DE GANANCIAS
        StrSql = "DELETE FROM fichaded " & _
                 " WHERE pronro =" & nro_proceso & _
                 " AND empleado =" & nro_ter
        objConn.Execute StrSql, , adExecuteNoRecords
        
                
        StrSql = "DELETE FROM desliq " & _
                 " WHERE pronro =" & nro_proceso & _
                 " AND empleado =" & nro_ter
        objConn.Execute StrSql, , adExecuteNoRecords
                
                
        StrSql = "DELETE FROM ficharem " & _
                 " WHERE pronro =" & nro_proceso & _
                 " AND empleado =" & nro_ter
        objConn.Execute StrSql, , adExecuteNoRecords
        
        
        StrSql = "DELETE FROM ficharet " & _
                 " WHERE pronro =" & nro_proceso & _
                 " AND empleado =" & nro_ter
        objConn.Execute StrSql, , adExecuteNoRecords
        
' Todavia no estan las tablas ... CUOTAS, PRESTAMO, etc
'-----------------------------------------------
        'BORRA LAS CUOTAS DE PRESTAMOS GENERADOS POR EL PROCESO
        
        StrSql = "SELECT * FROM prestamo " & _
                 "INNER JOIN pre_cuota ON prestamo.prenro = pre_cuota.prenro" & _
                 " WHERE prestamo.ternro = " & nro_ter & _
                 " AND pre_cuota.pronro =" & nro_proceso & _
                 " AND pre_cuota.cuocancela = -1"
        OpenRecordset StrSql, rs_Prestamos

        Do While Not rs_Prestamos.EOF
            StrSql = "UPDATE pre_cuota SET pronro = null, cuocancela = 0 " & _
                     " WHERE pronro =" & nro_proceso & _
                     " AND prenro =" & rs_Prestamos!Prenro & _
                     " AND cuonro =" & rs_Prestamos!cuonro
            objConn.Execute StrSql, , adExecuteNoRecords

            If rs_Prestamos!EstNro = 6 Then
                ' Lo apruebo para re-liq la cuota
                StrSql = "UPDATE prestamo SET estnro = 3 " & _
                         " WHERE ternro = " & rs_Prestamos!Ternro & _
                         " AND prenro =" & rs_Prestamos!Prenro
                 objConn.Execute StrSql, , adExecuteNoRecords
            End If
            
            rs_Prestamos.MoveNext
        Loop
''-----------------------------------------------
'
'
'        'BORRA LAS CUOTAS DE EMBARGO GENERADAS POR EL PROCESO
'        strsql = "SELECT * FROM embargo" & _
'                 " INNER JOIN tipoemb ON embargo.tpenro = tipoemb.tpenro" & _
'                 " INNER JOIN embcuota ON embargo.embnro = embcuota.embnro" & _
'                 " WHERE embargo.ternro =" & nro_ter & _
'                 " AND embcuota.pronro =" & Nro_Proceso
'        OpenRecordset strsql, rs_Embargos
'
'        Do While Not rs_Embargos.EOF
'            Aux_Valor = IIf(CBool(rs_Embargos!tpemonto), rs_Embargos!embcimp, 0)
'
'            strsql = "UPDATE embcuota SET embccancela = 0 " & _
'                     " , embcimp = " & Aux_Valor & _
'                     " , embcimpreal = 0" & _
'                     " WHERE embnro =" & rs_Embargos!embnro & _
'                     " AND pronro =" & Nro_Proceso
'             objConn.Execute strsql, , adExecuteNoRecords
'
'            rs_Embargos.MoveNext
'        Loop
        
        'Desmarco LOS VALES PAGADOS POR EL PROCESO
        StrSql = "UPDATE vales SET pronro = null " & _
                 " WHERE pronro = " & nro_proceso
        objConn.Execute StrSql, , adExecuteNoRecords

        'Desmarco LOS DIAS DE LAS LICENCIAS PAGADAS POR EL PROCESO
        StrSql = "SELECT * FROM emp_lic " & _
                 " WHERE empleado = " & nro_ter & _
                 " AND tdnro = 2"
        OpenRecordset StrSql, rs_Emp_Lic
        
        Do While Not rs_Emp_Lic.EOF
            
            StrSql = "UPDATE vacpagdesc SET pronro = null" & _
                     " WHERE pronro =" & nro_proceso & _
                     " AND ternro = " & nro_ter
            objConn.Execute StrSql, , adExecuteNoRecords
        
            rs_Emp_Lic.MoveNext
        Loop
        
        'FGZ - 14/01/2004
        'Desmarco las licencias Marcadas por el Proceso
        StrSql = "UPDATE emp_lic SET pronro = null " & _
                 " WHERE pronro = " & nro_proceso
        objConn.Execute StrSql, , adExecuteNoRecords
        'Fin FGZ - 14/01/2004
        
        
        StrSql = "DELETE FROM hisnovemp " & _
                 " WHERE empleado = " & nro_ter & _
                 " AND pronro = " & nro_proceso
        objConn.Execute StrSql, , adExecuteNoRecords
        
        
        If Excluye_Liq Then
            StrSql = "DELETE FROM cabliq " & _
                     " WHERE cliqnro = " & Cabecera
            objConn.Execute StrSql, , adExecuteNoRecords
        End If
        
        'Limpia la traza
        Call LimpiarTraza(Cabecera)
        
    End If


End Sub




Public Sub Liqpro16(ByVal Nro_empleado As Long, ByVal nro_concepto As Long, ByVal Cabecera_liq As Long)
' --------------------------------------------------------------------------
' Descripcion:  Realiza el proceso de ajuste de retroactivo para la liquidacion que se deshace.
' Autor:        13/08/2003 JMH
' Traducción:   FGZ
' Fecha:        10/09/2003
' Ultima Mod:
' --------------------------------------------------------------------------
Dim Mes_Aux As Long

' Registros
Dim rs_Hisretroactivo As New ADODB.Recordset
Dim rs_Acu_Mes As New ADODB.Recordset

'RECORRE LOS REGISTROS HISTORICOS DE LOS ACUMULADORES DEL CONCEPTO QUE REQUIERE SER AJUSTADO

StrSql = "SELECT * FROM hisretroactivo " & _
         " WHERE cliqnro = " & Cabecera_liq & _
         " AND concnro = " & nro_concepto
OpenRecordset StrSql, rs_Hisretroactivo

'FGZ
'lo cambié porque no tengo cosas como acu_mes.ammonto[mes_aux]
Do While Not rs_Hisretroactivo.EOF
    ' Mes por Mes
    For Mes_Aux = 1 To 12
        StrSql = "SELECT * FROM acu_mes " & _
                 " WHERE ternro = " & Nro_empleado & _
                 " AND acunro = " & rs_Hisretroactivo!acuNro & _
                 " AND amanio = " & rs_Hisretroactivo!amanio & _
                 " AND ammes = " & Mes_Aux
        OpenRecordset StrSql, rs_Acu_Mes
        
        If Not rs_Acu_Mes.EOF Then
            StrSql = "UPDATE acu_mes SET ammonto = ammonto - " & rs_Hisretroactivo!dlimonto & _
                     " WHERE ternro = " & Nro_empleado & _
                     " AND acunro = " & rs_Hisretroactivo!acuNro & _
                     " AND amanio = " & rs_Hisretroactivo!amanio & _
                     " AND ammes = " & Mes_Aux
            objConn.Execute StrSql, , adExecuteNoRecords
            
            'Que pasa con dlicant???????
            ' el Update debería ser:
            'strsql = "UPDATE acu_mes SET ammonto = ammonto - " & rs_Hisretroactivo!dlimonto & _
            '         " ,amcant = amcant - " & rs_Hisretroactivo!dlicant & _
            '         " WHERE ternro = " & Nro_empleado & _
            '         " AND acunro = " & rs_Hisretroactivo!acunro & _
            '         " AND amanio = " & rs_Hisretroactivo!amanio & _
            '         " AND ammes = " & Mes_Aux

        Else
            'Nunca deberia fallar, salvo que hayan borrado el acumulador
        End If
            
    Next Mes_Aux

    rs_Hisretroactivo.MoveNext
Loop

End Sub


Public Sub LimpiarTraza(ByVal Cabecera As Long)
' ---------------------------------------------------------------------------------------------
' Descripcion: Limpia la Traza para un empleado/concepto.
' Autor      : FGZ
' Fecha      : 08/09/2003
' Ultima Mod :
' Descripcion:
' ---------------------------------------------------------------------------------------------
    
    
    StrSql = "DELETE FROM traza WHERE cliqnro = " & Cabecera
    'StrSql = "EXEC Eliminar_traza " & cabecera
    objConn.Execute StrSql, , adExecuteNoRecords

End Sub

Public Sub Cargar_datos_deloitte()
    
    On Error GoTo MError
    
    'Se inicializa el arreglo de la especializaciones
    Flog.writeline Espacios(Tabulador * 2) & "Se inicializa el arreglo de la especializaciones"
    
    datosEsp(0) = TraerCodEspecializacion("base de datos")
    datosEsp(1) = TraerCodEspecializacion("CRM")
    datosEsp(2) = TraerCodEspecializacion("ERP y Planeamiento")
    datosEsp(3) = TraerCodEspecializacion("hardware")
    datosEsp(4) = TraerCodEspecializacion("herramientas backoffice")
    datosEsp(5) = TraerCodEspecializacion("herramientas de diseño e internet")
    datosEsp(6) = TraerCodEspecializacion("lenguajes de programación")
    datosEsp(7) = TraerCodEspecializacion("redes, conectividad e internet")
    datosEsp(8) = TraerCodEspecializacion("sistemas operativos")
    datosEsp(9) = TraerCodEspecializacion("otros")
    
    'Se inicializa el arreglo de los elementos de análisis
    Flog.writeline Espacios(Tabulador * 2) & "Se inicializa el arreglo de los elementos de análisis"
    
    datosEltoAna(0, 0) = TraerCodEltoana("db2", datosEsp(0))
    datosEltoAna(1, 0) = datosEsp(0)
    datosEltoAna(0, 1) = TraerCodEltoana("mssqlserver", datosEsp(0))
    datosEltoAna(1, 1) = datosEsp(0)
    datosEltoAna(0, 2) = TraerCodEltoana("oracle", datosEsp(0))
    datosEltoAna(1, 2) = datosEsp(0)
    datosEltoAna(0, 3) = TraerCodEltoana("informix", datosEsp(0))
    datosEltoAna(1, 3) = datosEsp(0)
    datosEltoAna(0, 4) = TraerCodEltoana("mysql", datosEsp(0))
    datosEltoAna(1, 4) = datosEsp(0)
    datosEltoAna(0, 5) = TraerCodEltoana("posgresql", datosEsp(0))
    datosEltoAna(1, 5) = datosEsp(0)
    datosEltoAna(0, 6) = TraerCodEltoana("msaccess", datosEsp(0))
    datosEltoAna(1, 6) = datosEsp(0)
    datosEltoAna(0, 7) = TraerCodEltoana("odbc", datosEsp(0))
    datosEltoAna(1, 7) = datosEsp(0)
    datosEltoAna(0, 8) = TraerCodEltoana("sybase", datosEsp(0))
    datosEltoAna(1, 8) = datosEsp(0)
    datosEltoAna(0, 9) = TraerCodEltoana("baan", datosEsp(1))
    datosEltoAna(1, 9) = datosEsp(1)
    datosEltoAna(0, 10) = TraerCodEltoana("oracle", datosEsp(1))
    datosEltoAna(1, 10) = datosEsp(1)
    datosEltoAna(0, 11) = TraerCodEltoana("tango", datosEsp(1))
    datosEltoAna(1, 11) = datosEsp(1)
    datosEltoAna(0, 12) = TraerCodEltoana("larify", datosEsp(1))
    datosEltoAna(1, 12) = datosEsp(1)
    datosEltoAna(0, 13) = TraerCodEltoana("sap", datosEsp(1))
    datosEltoAna(1, 13) = datosEsp(1)
    datosEltoAna(0, 14) = TraerCodEltoana("trilogy", datosEsp(1))
    datosEltoAna(1, 14) = datosEsp(1)
    datosEltoAna(0, 15) = TraerCodEltoana("lotusbriefcase", datosEsp(1))
    datosEltoAna(1, 15) = datosEsp(1)
    datosEltoAna(0, 16) = TraerCodEltoana("siebel", datosEsp(1))
    datosEltoAna(1, 16) = datosEsp(1)
    datosEltoAna(0, 17) = TraerCodEltoana("vantive", datosEsp(1))
    datosEltoAna(1, 17) = datosEsp(1)
    datosEltoAna(0, 18) = TraerCodEltoana("altamira", datosEsp(2))
    datosEltoAna(1, 18) = datosEsp(2)
    datosEltoAna(0, 19) = TraerCodEltoana("meta4", datosEsp(2))
    datosEltoAna(1, 19) = datosEsp(2)
    datosEltoAna(0, 20) = TraerCodEltoana("sap", datosEsp(2))
    datosEltoAna(1, 20) = datosEsp(2)
    datosEltoAna(0, 21) = TraerCodEltoana("tango", datosEsp(2))
    datosEltoAna(1, 21) = datosEsp(2)
    datosEltoAna(0, 22) = TraerCodEltoana("baan", datosEsp(2))
    datosEltoAna(1, 22) = datosEsp(2)
    datosEltoAna(0, 23) = TraerCodEltoana("oraclefinancials", datosEsp(2))
    datosEltoAna(1, 23) = datosEsp(2)
    datosEltoAna(0, 24) = TraerCodEltoana("siebel", datosEsp(2))
    datosEltoAna(1, 24) = datosEsp(2)
    datosEltoAna(0, 25) = TraerCodEltoana("jdedwards", datosEsp(2))
    datosEltoAna(1, 25) = datosEsp(2)
    datosEltoAna(0, 26) = TraerCodEltoana("peoplesoft", datosEsp(2))
    datosEltoAna(1, 26) = datosEsp(2)
    datosEltoAna(0, 27) = TraerCodEltoana("stradivarius", datosEsp(2))
    datosEltoAna(1, 27) = datosEsp(2)
    datosEltoAna(0, 28) = TraerCodEltoana("as400", datosEsp(3))
    datosEltoAna(1, 28) = datosEsp(3)
    datosEltoAna(0, 29) = TraerCodEltoana("reparacion", datosEsp(3))
    datosEltoAna(1, 29) = datosEsp(3)
    datosEltoAna(0, 30) = TraerCodEltoana("mac", datosEsp(3))
    datosEltoAna(1, 30) = datosEsp(3)
    datosEltoAna(0, 31) = TraerCodEltoana("mainframe", datosEsp(3))
    datosEltoAna(1, 31) = datosEsp(3)
    datosEltoAna(0, 32) = TraerCodEltoana("arcserver", datosEsp(4))
    datosEltoAna(1, 32) = datosEsp(4)
    datosEltoAna(0, 33) = TraerCodEltoana("hpopenview", datosEsp(4))
    datosEltoAna(1, 33) = datosEsp(4)
    datosEltoAna(0, 34) = TraerCodEltoana("msexchange", datosEsp(4))
    datosEltoAna(1, 34) = datosEsp(4)
    datosEltoAna(0, 35) = TraerCodEltoana("omniback", datosEsp(4))
    datosEltoAna(1, 35) = datosEsp(4)
    datosEltoAna(0, 36) = TraerCodEltoana("backupexec", datosEsp(4))
    datosEltoAna(1, 36) = datosEsp(4)
    datosEltoAna(0, 37) = TraerCodEltoana("legato", datosEsp(4))
    datosEltoAna(1, 37) = datosEsp(4)
    datosEltoAna(0, 38) = TraerCodEltoana("mssms", datosEsp(4))
    datosEltoAna(1, 38) = datosEsp(4)
    datosEltoAna(0, 39) = TraerCodEltoana("patrol", datosEsp(4))
    datosEltoAna(1, 39) = datosEsp(4)
    datosEltoAna(0, 40) = TraerCodEltoana("dollaruniverse", datosEsp(4))
    datosEltoAna(1, 40) = datosEsp(4)
    datosEltoAna(0, 41) = TraerCodEltoana("lotusnotes", datosEsp(4))
    datosEltoAna(1, 41) = datosEsp(4)
    datosEltoAna(0, 42) = TraerCodEltoana("maestro", datosEsp(4))
    datosEltoAna(1, 42) = datosEsp(4)
    datosEltoAna(0, 43) = TraerCodEltoana("3dstudio", datosEsp(5))
    datosEltoAna(1, 43) = datosEsp(5)
    datosEltoAna(0, 44) = TraerCodEltoana("director", datosEsp(5))
    datosEltoAna(1, 44) = datosEsp(5)
    datosEltoAna(0, 45) = TraerCodEltoana("flash", datosEsp(5))
    datosEltoAna(1, 45) = datosEsp(5)
    datosEltoAna(0, 46) = TraerCodEltoana("toolbook", datosEsp(5))
    datosEltoAna(1, 46) = datosEsp(5)
    datosEltoAna(0, 47) = TraerCodEltoana("autocad", datosEsp(5))
    datosEltoAna(1, 47) = datosEsp(5)
    datosEltoAna(0, 48) = TraerCodEltoana("dreamweaver", datosEsp(5))
    datosEltoAna(1, 48) = datosEsp(5)
    datosEltoAna(0, 49) = TraerCodEltoana("illustrator", datosEsp(5))
    datosEltoAna(1, 49) = datosEsp(5)
    datosEltoAna(0, 50) = TraerCodEltoana("coreldraw", datosEsp(5))
    datosEltoAna(1, 50) = datosEsp(5)
    datosEltoAna(0, 51) = TraerCodEltoana("fireworks", datosEsp(5))
    datosEltoAna(1, 51) = datosEsp(5)
    datosEltoAna(0, 52) = TraerCodEltoana("photoshop", datosEsp(5))
    datosEltoAna(1, 52) = datosEsp(5)
    datosEltoAna(0, 53) = TraerCodEltoana("asp", datosEsp(6))
    datosEltoAna(1, 53) = datosEsp(6)
    datosEltoAna(0, 54) = TraerCodEltoana("assembler", datosEsp(6))
    datosEltoAna(1, 54) = datosEsp(6)
    datosEltoAna(0, 55) = TraerCodEltoana("delphi", datosEsp(6))
    datosEltoAna(1, 55) = datosEsp(6)
    datosEltoAna(0, 56) = TraerCodEltoana("java", datosEsp(6))
    datosEltoAna(1, 56) = datosEsp(6)
    datosEltoAna(0, 57) = TraerCodEltoana("pascal", datosEsp(6))
    datosEltoAna(1, 57) = datosEsp(6)
    datosEltoAna(0, 58) = TraerCodEltoana("powerbuilder", datosEsp(6))
    datosEltoAna(1, 58) = datosEsp(6)
    datosEltoAna(0, 59) = TraerCodEltoana("script", datosEsp(6))
    datosEltoAna(1, 59) = datosEsp(6)
    datosEltoAna(0, 60) = TraerCodEltoana("xml", datosEsp(6))
    datosEltoAna(1, 60) = datosEsp(6)
    datosEltoAna(0, 61) = TraerCodEltoana("abap", datosEsp(6))
    datosEltoAna(1, 61) = datosEsp(6)
    datosEltoAna(0, 62) = TraerCodEltoana("c", datosEsp(6))
    datosEltoAna(1, 62) = datosEsp(6)
    datosEltoAna(0, 63) = TraerCodEltoana("fortran", datosEsp(6))
    datosEltoAna(1, 63) = datosEsp(6)
    datosEltoAna(0, 64) = TraerCodEltoana("javascript", datosEsp(6))
    datosEltoAna(1, 64) = datosEsp(6)
    datosEltoAna(0, 65) = TraerCodEltoana("perl", datosEsp(6))
    datosEltoAna(1, 65) = datosEsp(6)
    datosEltoAna(0, 66) = TraerCodEltoana("prolog", datosEsp(6))
    datosEltoAna(1, 66) = datosEsp(6)
    datosEltoAna(0, 67) = TraerCodEltoana("smalltalk", datosEsp(6))
    datosEltoAna(1, 67) = datosEsp(6)
    datosEltoAna(0, 68) = TraerCodEltoana("ada", datosEsp(6))
    datosEltoAna(1, 68) = datosEsp(6)
    datosEltoAna(0, 69) = TraerCodEltoana("cobol", datosEsp(6))
    datosEltoAna(1, 69) = datosEsp(6)
    datosEltoAna(0, 70) = TraerCodEltoana("html", datosEsp(6))
    datosEltoAna(1, 70) = datosEsp(6)
    datosEltoAna(0, 71) = TraerCodEltoana("ml", datosEsp(6))
    datosEltoAna(1, 71) = datosEsp(6)
    datosEltoAna(0, 72) = TraerCodEltoana("php", datosEsp(6))
    datosEltoAna(1, 72) = datosEsp(6)
    datosEltoAna(0, 73) = TraerCodEltoana("sql", datosEsp(6))
    datosEltoAna(1, 73) = datosEsp(6)
    datosEltoAna(0, 74) = TraerCodEltoana("vb", datosEsp(6))
    datosEltoAna(1, 74) = datosEsp(6)
    datosEltoAna(0, 75) = TraerCodEltoana("cableado", datosEsp(7))
    datosEltoAna(1, 75) = datosEsp(7)
    datosEltoAna(0, 76) = TraerCodEltoana("fibraoptica", datosEsp(7))
    datosEltoAna(1, 76) = datosEsp(7)
    datosEltoAna(0, 77) = TraerCodEltoana("hubs", datosEsp(7))
    datosEltoAna(1, 77) = datosEsp(7)
    datosEltoAna(0, 78) = TraerCodEltoana("proxyservers", datosEsp(7))
    datosEltoAna(1, 78) = datosEsp(7)
    datosEltoAna(0, 79) = TraerCodEltoana("ibmsna", datosEsp(7))
    datosEltoAna(1, 79) = datosEsp(7)
    datosEltoAna(0, 80) = TraerCodEltoana("vpn", datosEsp(7))
    datosEltoAna(1, 80) = datosEsp(7)
    datosEltoAna(0, 81) = TraerCodEltoana("wap", datosEsp(7))
    datosEltoAna(1, 81) = datosEsp(7)
    datosEltoAna(0, 82) = TraerCodEltoana("chatservers", datosEsp(7))
    datosEltoAna(1, 82) = datosEsp(7)
    datosEltoAna(0, 83) = TraerCodEltoana("firewalls", datosEsp(7))
    datosEltoAna(1, 83) = datosEsp(7)
    datosEltoAna(0, 84) = TraerCodEltoana("ipxspx", datosEsp(7))
    datosEltoAna(1, 84) = datosEsp(7)
    datosEltoAna(0, 85) = TraerCodEltoana("netbios", datosEsp(7))
    datosEltoAna(1, 85) = datosEsp(7)
    datosEltoAna(0, 86) = TraerCodEltoana("radioenlaces", datosEsp(7))
    datosEltoAna(1, 86) = datosEsp(7)
    datosEltoAna(0, 87) = TraerCodEltoana("tcpip", datosEsp(7))
    datosEltoAna(1, 87) = datosEsp(7)
    datosEltoAna(0, 88) = TraerCodEltoana("vsat", datosEsp(7))
    datosEltoAna(1, 88) = datosEsp(7)
    datosEltoAna(0, 89) = TraerCodEltoana("webservers", datosEsp(7))
    datosEltoAna(1, 89) = datosEsp(7)
    datosEltoAna(0, 90) = TraerCodEltoana("ftpservers", datosEsp(7))
    datosEltoAna(1, 90) = datosEsp(7)
    datosEltoAna(0, 91) = TraerCodEltoana("framerelay", datosEsp(7))
    datosEltoAna(1, 91) = datosEsp(7)
    datosEltoAna(0, 92) = TraerCodEltoana("mailservers", datosEsp(7))
    datosEltoAna(1, 92) = datosEsp(7)
    datosEltoAna(0, 93) = TraerCodEltoana("netbeui", datosEsp(7))
    datosEltoAna(1, 93) = datosEsp(7)
    datosEltoAna(0, 94) = TraerCodEltoana("routers", datosEsp(7))
    datosEltoAna(1, 94) = datosEsp(7)
    datosEltoAna(0, 95) = TraerCodEltoana("telefonia", datosEsp(7))
    datosEltoAna(1, 95) = datosEsp(7)
    datosEltoAna(0, 96) = TraerCodEltoana("voiceip", datosEsp(7))
    datosEltoAna(1, 96) = datosEsp(7)
    datosEltoAna(0, 97) = TraerCodEltoana("x25x400", datosEsp(7))
    datosEltoAna(1, 97) = datosEsp(7)
    datosEltoAna(0, 98) = TraerCodEltoana("aix", datosEsp(8))
    datosEltoAna(1, 98) = datosEsp(8)
    datosEltoAna(0, 99) = TraerCodEltoana("macos", datosEsp(8))
    datosEltoAna(1, 99) = datosEsp(8)
    datosEltoAna(0, 100) = TraerCodEltoana("os400", datosEsp(8))
    datosEltoAna(1, 100) = datosEsp(8)
    datosEltoAna(0, 101) = TraerCodEltoana("win31", datosEsp(8))
    datosEltoAna(1, 101) = datosEsp(8)
    datosEltoAna(0, 102) = TraerCodEltoana("winnt", datosEsp(8))
    datosEltoAna(1, 102) = datosEsp(8)
    datosEltoAna(0, 103) = TraerCodEltoana("hpux", datosEsp(8))
    datosEltoAna(1, 103) = datosEsp(8)
    datosEltoAna(0, 104) = TraerCodEltoana("novellnetware", datosEsp(8))
    datosEltoAna(1, 104) = datosEsp(8)
    datosEltoAna(0, 105) = TraerCodEltoana("palmos", datosEsp(8))
    datosEltoAna(1, 105) = datosEsp(8)
    datosEltoAna(0, 106) = TraerCodEltoana("win9x", datosEsp(8))
    datosEltoAna(1, 106) = datosEsp(8)
    datosEltoAna(0, 107) = TraerCodEltoana("linux", datosEsp(8))
    datosEltoAna(1, 107) = datosEsp(8)
    datosEltoAna(0, 108) = TraerCodEltoana("os2", datosEsp(8))
    datosEltoAna(1, 108) = datosEsp(8)
    datosEltoAna(0, 109) = TraerCodEltoana("solaris", datosEsp(8))
    datosEltoAna(1, 109) = datosEsp(8)
    datosEltoAna(0, 110) = TraerCodEltoana("winme", datosEsp(8))
    datosEltoAna(1, 110) = datosEsp(8)
    datosEltoAna(0, 111) = TraerCodEltoana("msproject", datosEsp(9))
    datosEltoAna(1, 111) = datosEsp(9)
    datosEltoAna(0, 112) = TraerCodEltoana("oop", datosEsp(9))
    datosEltoAna(1, 112) = datosEsp(9)
    datosEltoAna(0, 113) = TraerCodEltoana("uml", datosEsp(9))
    datosEltoAna(1, 113) = datosEsp(9)
    
    'Se inicializa el arreglo de los idiomas
    
'    For I = 1 To 5
'        Select Case I
'          Case 1
'
'            datosIdioma(0) = TraerCodIdioma("inglés")
'          Case 2
'
'            datosIdioma(1) = TraerCodIdioma("francés")
'          Case 3
'
'            datosIdioma(2) = TraerCodIdioma("portugués")
'          Case 4
'
'            datosIdioma(3) = TraerCodIdioma("alemán")
'          Case 5
'
'            datosIdioma(4) = TraerCodIdioma(Datos(245))
'        End Select
'    Next
Exit Sub

MError:
    Flog.writeline Espacios(Tabulador * 2) & "Error :" & Err.Description

End Sub
Public Sub LineaModelo_268(ByVal strReg As String, ByRef OK As Boolean)
' ---------------------------------------------------------------------------------------------
' Descripcion: Migracion de Empleados para Deloitte
' Autor      : JMH
' Fecha      : 24/10/2005
' Ultima Mod.:
' ---------------------------------------------------------------------------------------------
Dim pos1            As Long
Dim pos2            As Long

Dim Legajo          As String   'LEGAJO                   -- empleado.empleg
Dim Apellido        As String   'APELLIDO                 -- empleado.terape y tercero.terape
Dim nombre          As String   'NOMBRE                   -- empleado.ternom y tercero.ternom
Dim Tdocu           As String   'Tipo Documento           -- ter_dpc.tidnro (DU)
Dim Ndocu           As String   'Nro. Documento           -- ter_doc.nrodoc
Dim Email           As String   'Email                    -- empleado.empemail
Dim categoria       As String   'Categoria                -- his_estructura.estrnro
Dim Departamento    As String   'Departamento             -- his_estructura.estrnro
Dim Antiguedad      As String   'Antiguedad               -- his_estructura.estrnro
Dim Graduado        As String   'Graduado                 -- his_estructura.estrnro
Dim FAlta           As String   'Fecha de Alta            -- fases.altfec
Dim Fnac            As String   'Fecha de Nacimiento      -- tercero.terfecnac
Dim PaisNac         As String   'Pais Nacimiento          -- tercero.paisnro
Dim Nacionalidad    As String   'Nacionalidad             -- tercero.nacnro
Dim Sexo            As String   'Sexo                     -- tercero.tersex

Dim ter_sexo        As String
Dim F_Baja          As String
Dim Reporta_a       As String
Dim Nro_Reporta_a   As Long
Dim Motivo          As Long

Dim Ternro As Long

Dim NroTercero          As Long

Dim Nro_Legajo          As Long
Dim Nro_TDocumento      As Long

Dim nro_categoria       As Long
Dim nro_departamento    As Long
Dim nro_graduado        As Long
Dim nro_antiguedad      As Long
Dim nro_paisnac         As Long
Dim nro_nacionalidad      As Long

Dim F_Alta              As String
Dim F_Nac               As String
Dim F_Nacimiento        As String

Dim Inserto_estr        As Boolean

Dim rs As New ADODB.Recordset
Dim rs_Sql As New ADODB.Recordset
Dim rs_Empleado As New ADODB.Recordset
Dim rs_Tel As New ADODB.Recordset
Dim rs_repl As New ADODB.Recordset


Dim CatDesc             As Boolean   'Categoria                -- his_estructura
Dim DepDesc             As Boolean   'Departamento             -- his_estructura
Dim GraDesc             As Boolean   'Graduado                 -- his_estructura
Dim AntDesc             As Boolean   'Antiguedad               -- his_estructura

Dim rs_tdoc As New ADODB.Recordset
Dim rs_emp  As New ADODB.Recordset
Dim rs_tpl  As New ADODB.Recordset
Dim rs_leg  As New ADODB.Recordset

Dim Sigue As Boolean
Dim ExisteLeg As Boolean
Dim CalculaLegajo As Boolean

    On Error GoTo SaltoLinea

    ' True indica que se hace por Descripcion. False por Codigo Externo

    CatDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    DepDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    AntDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    GraDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
        
    Sigue = True 'Indica que si en el archivo viene mas de una vez un empleado, le crea las fases
    ExisteLeg = False
    'RegLeidos = RegLeidos + 1
    LineaCarga = LineaCarga + 1
    
    Flog.writeline
    FlogE.writeline
    FlogP.writeline
    
    'Legajo
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = 1
    pos2 = InStr(pos1, strReg, separador) - 1
    Legajo = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
     
    If Legajo = "" And Obligatorio Then
        Texto = ": " & " - Debe Ingresar un Legajo."
        NroColumna = 1
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    Else
        StrSql = "SELECT * FROM empleado WHERE empleado.empleg = " & Legajo
        OpenRecordset StrSql, rs_emp
        If (Not rs_emp.EOF) Then
            Texto = ": " & " - El Empleado ya Existe."
             NroColumna = 1
             Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
             NroTercero = rs_emp!Ternro
             ExisteLeg = True
        End If
    End If
    
    'Apellido
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Apellido = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If Apellido = "" And Obligatorio Then
        Texto = ": " & " - Debe Ingresar el Apellido."
        NroColumna = 2
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
        
    'Nombre
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    nombre = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If nombre = "" And Obligatorio Then
        Texto = ": " & " - Debe Ingresar el Nombre."
        NroColumna = 3
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    
    'Tipo de Doc
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Tdocu = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        
    If Tdocu = "" And Obligatorio Then
        Texto = ": " & " - Debe Ingresar el Tipo de Documento."
        NroColumna = 4
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    Else
        StrSql = " SELECT tidnro FROM tipodocu WHERE UPPER(tidsigla) = '" & UCase(Tdocu) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            Nro_TDocumento = rs_Sql!tidnro
        Else
            Texto = ": " & " - El Tipo de Documento no Existe."
            NroColumna = 4
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            RegError = RegError + 1
            Exit Sub
            
        End If
    End If
    
    'Nro de Documento
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Ndocu = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If Ndocu = "" And Obligatorio Then
        Texto = ": " & " - Debe Ingresar el Número de Documento."
        NroColumna = 5
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    Else
       StrSql = "SELECT * FROM empleado "
       StrSql = StrSql & " INNER JOIN ter_doc ON ter_doc.ternro = empleado.ternro "
       StrSql = StrSql & " WHERE ter_doc.tidnro = " & Nro_TDocumento
       StrSql = StrSql & " AND ter_doc.nrodoc = '" & Ndocu & "'"
       StrSql = StrSql & " AND empleado.ternro <> " & NroTercero
       
       OpenRecordset StrSql, rs_tdoc
       If (Not rs_tdoc.EOF) Then
          NroTercero = rs_tdoc!Ternro
          ExisteLeg = True
          Texto = ": " & " - Empleado: " & Legajo & " - Ese Tipo y Numero de Documento estan Asignados a otro Empleado."
          NroColumna = 5
          Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
       End If
    End If
    
    'Departamento
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Departamento = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If Departamento = "" And Obligatorio Then
        Texto = ": " & " - Debe ingresar el Departamento."
        NroColumna = 6
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    
    'Validacion del Departamento
    If Departamento <> "" Then
        If DepDesc Then
            Call ValidarEstructura(9, Departamento, nro_departamento)
            If nro_departamento = 0 Then
               Texto = ": " & " - El Departamento no existe."
               NroColumna = 6
               Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
               RegError = RegError + 1
               Exit Sub
            End If
        Else
            Call ValidarEstructuraCodExt(9, Departamento, nro_departamento)
            If nro_departamento = 0 Then
               Texto = ": " & " - El Departamento no existe."
               NroColumna = 6
               Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
               RegError = RegError + 1
               Exit Sub
            End If
        End If
    End If
    
    'Fecha de alta
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    FAlta = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If FAlta = "" Then
        F_Alta = "Null"
        Texto = ": " & " - La Fecha de Alta es Obligatoria."
        NroColumna = 7
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        'Ok = False
        RegError = RegError + 1
        Exit Sub
    Else
        If IsDate(FAlta) = False Then
           Texto = ": " & " - La Fecha de Alta esta mal ingresada."
           NroColumna = 7
           Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
           RegError = RegError + 1
           Exit Sub
        Else
           F_Alta = ConvFecha(FAlta)
        End If
    End If
   
    'Categoria
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    categoria = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If categoria = "" And Obligatorio Then
        Texto = ": " & " - Debe ingresar la Categoría."
        NroColumna = 8
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    
    'Validacion de la Categoria
    If (categoria <> "") Then
        If CatDesc Then
            Call ValidarEstructura(3, categoria, nro_categoria)
            If nro_categoria = 0 Then
               Texto = ": " & " - La Categoría no existe."
               NroColumna = 8
               Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
               RegError = RegError + 1
               Exit Sub
            End If
        Else
            Call ValidarEstructuraCodExt(3, categoria, nro_categoria)
            If nro_categoria = 0 Then
               Texto = ": " & " - La Categoría no existe."
               NroColumna = 8
               Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
               RegError = RegError + 1
               Exit Sub
            End If
        End If
    End If
    
    'Antiguedad
    NroColumna = NroColumna + 1
    Obligatorio = False
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    'Email
    NroColumna = NroColumna + 1
    Obligatorio = False
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Email = Left(Trim(Mid(strReg, pos1, pos2 - pos1 + 1)), 100)
    
    If Email = "" And Obligatorio Then
        Texto = ": " & " - Debe ingresar el Mail."
        NroColumna = 10
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
            
    'Reporta_a  campo empleado.empreporta va el tercero
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    
    Reporta_a = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If Reporta_a = "" And Obligatorio Then
        Texto = ": " & " - Debe ingresar el Reporta a."
        NroColumna = 11
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
        
    If IsNumeric(Reporta_a) Then
       StrSql = "SELECT * FROM empleado WHERE empleado.empleg = " & Reporta_a
       If rs_emp.State = adStateOpen Then rs_emp.Close
       OpenRecordset StrSql, rs_emp
       If (Not rs_emp.EOF) Then
           Nro_Reporta_a = rs_emp!Ternro
       Else
           Texto = ": " & " - Debe ingresar el Reporta a."
           NroColumna = 11
           Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
           RegError = RegError + 1
           Exit Sub
       End If
    Else
        Texto = ": " & " - El valor no es numérico."
        NroColumna = 11
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If

    'Graduado
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Graduado = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If Graduado = "" And Obligatorio Then
        Texto = ": " & " - Debe ingresar la Estructura Graduado."
        NroColumna = 12
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    
    'Validacion de la estructura graduado
    If Graduado <> "" Then
        If GraDesc Then
            Call ValidarEstructura(1, Graduado, nro_graduado)
            If nro_graduado = 0 Then
               Texto = ": " & " - El Graduado no existe."
               NroColumna = 12
               Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
               RegError = RegError + 1
               Exit Sub
            End If
        Else
            Call ValidarEstructura(1, Graduado, nro_graduado)
            If nro_graduado = 0 Then
               Texto = ": " & " - El Graduado no existe."
               NroColumna = 12
               Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
               RegError = RegError + 1
               Exit Sub
            End If
        End If
    End If
    
    'Fecha de nacimiento
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Fnac = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If Fnac = "" And Obligatorio Then
       Texto = ": " & " - La Fecha de Nacimiento es Obligatoria."
       NroColumna = 13
       Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
       RegError = RegError + 1
       Exit Sub
    Else
        If IsDate(Fnac) = False Then
           Texto = ": " & " - La Fecha de Nacimiento esta mal ingresada."
           NroColumna = 13
           Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
           RegError = RegError + 1
           Exit Sub
        Else
           F_Nacimiento = ConvFecha(Fnac)
        End If
    End If
    
    'Pais de Nacimiento
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    PaisNac = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If PaisNac = "" And Obligatorio Then
       Texto = ": " & " - El País de Nacimiento es Obligatorio."
       NroColumna = 14
       Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
       RegError = RegError + 1
       Exit Sub
    Else
        StrSql = " SELECT paisnro FROM pais WHERE UPPER(paisdesc) = '" & UCase(PaisNac) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_paisnac = rs_Sql!Paisnro
        Else
            Texto = ": " & " - El País de Nacimiento no Existe."
            NroColumna = 14
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        End If
    End If
    
    'Nacionalidad
    NroColumna = NroColumna + 1
    Obligatorio = True
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Nacionalidad = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If Nacionalidad = "" And Obligatorio Then
       Texto = ": " & " - La Nacionalidad es Obligatoria."
       NroColumna = 15
       Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
       RegError = RegError + 1
       Exit Sub
    Else
        StrSql = " SELECT nacionalnro FROM nacionalidad WHERE UPPER(nacionaldes) = '" & UCase(Nacionalidad) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_nacionalidad = rs_Sql!nacionalnro
        Else
            Texto = ": " & " - La Nacionalidad no Existe."
            NroColumna = 15
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        End If
    End If
    
    'Sexo
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Sexo"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    
    If pos2 > 0 Then
        Sexo = UCase(Trim(Mid(strReg, pos1, pos2 - pos1 + 1)))
    Else
        pos2 = Len(strReg)
        Sexo = UCase(Trim(Mid(strReg, pos1, pos2 - pos1 + 1)))
    End If
    
    If Sexo = "" And Obligatorio Then
       Texto = ": " & " - El Sexo es Obligatorio."
       NroColumna = 16
       Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
       RegError = RegError + 1
       Exit Sub
    Else
       If (Sexo = "M") Or (Sexo = "-1") Or (Sexo = "MASCULINO") Then
          ter_sexo = -1
       Else
          ter_sexo = 0
       End If
    End If
    
    If rs_emp.State = adStateOpen Then rs_emp.Close
    
'Fin lectura de campos
' =====================================================================================================


  If Not ExisteLeg Then
     StrSql = " INSERT INTO tercero(ternom,terape,estcivnro,terfecnac,paisnro, nacionalnro,tersex)"
     StrSql = StrSql & " VALUES('" & nombre & "','" & Apellido & "',1," & F_Nacimiento & ","
     StrSql = StrSql & nro_paisnac & "," & nro_nacionalidad & "," & Sexo & ")"
             
     objConn.Execute StrSql, , adExecuteNoRecords

     NroTercero = getLastIdentity(objConn, "tercero")
        
     Texto = ": " & "Codigo de Tercero = " & NroTercero
     Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
  Else
     If Pisa = True Then
        StrSql = " UPDATE tercero SET "
        StrSql = StrSql & " ternom = " & "'" & nombre & "'"
        StrSql = StrSql & ", terape = " & "'" & Apellido & "'"
        StrSql = StrSql & ", terfecnac = " & F_Nacimiento
        StrSql = StrSql & ", paisnro = " & nro_paisnac
        StrSql = StrSql & ", nacionalnro = " & nro_nacionalidad
        StrSql = StrSql & ", tersex = " & ter_sexo
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Texto = ": " & " - Empleado: " & Legajo & " - Ese Empleado ya existe en la base. Datos de tercero actualizados"
        NroColumna = 1
        Call Escribir_Log("flogp", LineaCarga, NroColumna, Texto, Tabs, strReg)
     End If
  End If
    
  If Not ExisteLeg Then
     StrSql = " INSERT INTO empleado(empleg,empfaltagr, "
     StrSql = StrSql & "ternro,terape,ternom,empemail "
     If Nro_Reporta_a <> 0 Then
        StrSql = StrSql & ",empreporta"
     End If
     StrSql = StrSql & ") VALUES("
     StrSql = StrSql & Legajo & "," & F_Alta & ","
     StrSql = StrSql & NroTercero & ",'" & Apellido & "','"
     StrSql = StrSql & nombre & "','" & Email & "'"
     If Nro_Reporta_a <> 0 Then
        StrSql = StrSql & "," & Nro_Reporta_a
     End If
     StrSql = StrSql & ")"
     objConn.Execute StrSql, , adExecuteNoRecords
        
     Texto = ": " & "Empleado insertado - " & Legajo & " - " & Apellido & " - " & nombre
     Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
  Else
     If Pisa = True Then
        StrSql = " UPDATE empleado SET "
        StrSql = StrSql & " empleg = " & Legajo
        StrSql = StrSql & " ,empfaltagr = " & F_Alta
        StrSql = StrSql & " ,terape = " & "'" & Apellido & "'"
        StrSql = StrSql & " ,ternom = " & "'" & nombre & "'"
        StrSql = StrSql & " ,empemail = " & "'" & Email & "'"
        If Nro_Reporta_a <> 0 Then
           StrSql = StrSql & ", empreporta =" & Nro_Reporta_a
        End If
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Texto = ": " & "Empleado Actualizado - " & Legajo & " - " & Apellido & " - " & nombre
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
     
     End If
  End If
    
  ' Inserto el Registro correspondiente en ter_tip
  If Not ExisteLeg Then
     StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & NroTercero & ",1)"
     objConn.Execute StrSql, , adExecuteNoRecords
  End If

  ' Inserto los Documentos
  If Not ExisteLeg Then
     If Nro_TDocumento <> 0 Then
        StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
        StrSql = StrSql & " VALUES(" & NroTercero & "," & Nro_TDocumento & ",'" & Ndocu & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = ": " & "Inserte el Documento - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
     End If
  Else
     If Nro_TDocumento <> 0 Then
        StrSql = "SELECT * FROM ter_doc WHERE ternro = " & NroTercero
        StrSql = StrSql & " AND tidnro = " & Nro_TDocumento
        If rs.State = adStateOpen Then rs.Close
           OpenRecordset StrSql, rs
           If rs.EOF Then
              StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
              StrSql = StrSql & " VALUES(" & NroTercero & "," & Nro_TDocumento & ",'" & Ndocu & "')"
              objConn.Execute StrSql, , adExecuteNoRecords
                
              Texto = ": " & "Inserte el Documento - "
              Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
           Else
              If Pisa = True Then
                 StrSql = " UPDATE ter_doc SET "
                 StrSql = StrSql & " nrodoc = '" & Ndocu & "'"
                 StrSql = StrSql & " WHERE ternro = " & NroTercero
                 StrSql = StrSql & " AND tidnro = " & Nro_TDocumento
                 objConn.Execute StrSql, , adExecuteNoRecords
                 
                 Texto = ": " & "Documento actualizado - "
                 Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
              End If
              
           End If
        End If
  End If
  
  'Inserto las fases
  StrSql = "SELECT * FROM fases WHERE estado = -1 AND sueldo = -1 AND vacaciones = -1 AND indemnizacion = -1 AND real = -1 AND empleado = " & NroTercero
  OpenRecordset StrSql, rs
  If rs.EOF Then
     StrSql = " INSERT INTO fases(empleado,altfec,bajfec,caunro,estado,sueldo,vacaciones,indemnizacion,real,fasrecofec)"
     StrSql = StrSql & " VALUES( " & NroTercero & "," & F_Alta & ",null,"
     StrSql = StrSql & "null,-1,-1,-1,-1,-1,-1)"
     objConn.Execute StrSql, , adExecuteNoRecords
  Else
     If Pisa = True Then
        Do While Not rs.EOF
           StrSql = " DELETE FROM fases WHERE fases.fasnro = " & rs!fasnro
           objConn.Execute StrSql, , adExecuteNoRecords
         
           rs.MoveNext
        Loop
        StrSql = " INSERT INTO fases(empleado,altfec,bajfec,caunro,estado,sueldo,vacaciones,indemnizacion,real,fasrecofec)"
        StrSql = StrSql & " VALUES( " & NroTercero & "," & F_Alta & ",null,"
        StrSql = StrSql & "null,-1,-1,-1,-1,-1,-1)"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        Texto = ": " & "Fase Actualizada - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
     End If
  End If
    
  'Inserto las Estructuras
  F_Baja = "null"
  
  'Busco el tipo motivo por default
  StrSql = "SELECT tipmotnro FROM tipomotivo WHERE tipmotdef = -1 "
  
  If rs.State = adStateOpen Then rs.Close
  OpenRecordset StrSql, rs
  
  If rs.EOF Then
     Texto = ": " & " - No existe ningun Tipo de Motivo por Default."
     NroColumna = 1
     Call Escribir_Log("flogp", LineaCarga, NroColumna, Texto, Tabs, strReg)
  Else
     nro_ModOrg = 0
     
     'DESCOMENTAR LAS PRIMERAS 3 LINEAS Y COMENTAR LAS OTRAS 3 CUANDO SE INSTALE
     'LO DE TIPO DE MOTIVO
     'Call ActualizarEstructura(3, nro_categoria, NroTercero, F_Alta, F_Baja, rs!tipmotnro)
     'Call ActualizarEstructura(9, nro_departamento, NroTercero, F_Alta, F_Baja, rs!tipmotnro)
     'Call ActualizarEstructura(1, nro_graduado, NroTercero, F_Alta, F_Baja)
     
     Call AsignarEstructura_NEW(3, nro_categoria, NroTercero, F_Alta, F_Baja)
     Call AsignarEstructura_NEW(9, nro_departamento, NroTercero, F_Alta, F_Baja)
     Call AsignarEstructura_NEW(1, nro_graduado, NroTercero, F_Alta, F_Baja)
  End If
  
  Texto = ": " & "Linea procesada correctamente "
  Call Escribir_Log("flogp", LineaCarga, NroColumna, Texto, Tabs + 1, strReg)
  OK = True
         
FinLinea:
 If rs.State = adStateOpen Then
    rs.Close
 End If
 Exit Sub

SaltoLinea:
 Texto = ": " & " - Error:" & Err.Description
 NroColumna = 1
 Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
 MyRollbackTrans
 OK = False
 GoTo FinLinea
 
End Sub


Public Sub LineaModelo_272(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Novedad segun formato
' Autor      : FGZ
' Fecha      : 28/12/2005
' Formato    : Legajo  ==> numerico(9)
'              conccod ==> numerico(5)
'              valor   ==> numerico(5).decimales(2)
'
'              Ej: 00000000601228+00005.75
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As String
Dim fornro As Long

Dim tpanro As Long
Dim Aux_Monto As String
Dim Monto As Single
Dim FechaDesde As String
Dim FechaHasta As String

Dim TieneVigencia As Boolean
Dim EsRetroactivo As Boolean
Dim PeriodoDesde
Dim PeriodoHasta

Dim Aux As String
Dim Encontro As Boolean

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim rs_TipoPar As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_Periodo As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset

    
    On Error GoTo Manejador_De_Error
    Tabs = 1
    
    TieneVigencia = False
    EsRetroactivo = False

    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    'Nro de Legajo
    NroColumna = 1
    pos1 = 1
    'pos2 = InStr(pos1, strlinea, Separador)
    pos2 = pos1 + 9
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
    'Concepto
    NroColumna = NroColumna + 1
    pos1 = pos2
    pos2 = pos1 + 5
    ConcCod = Mid(strLinea, pos1, pos2 - pos1)

    'Valor
    NroColumna = NroColumna + 1
    pos1 = pos2
    pos2 = pos1 + 9
    Aux_Monto = Mid(strLinea, pos1, pos2)
    Monto = CSng(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))

    
    'Asigno los valores pasados por parametros
    TieneVigencia = Vigencia
    EsRetroactivo = False
    
    'Fecha desde
    FechaDesde = Vigencia_Desde

    'Fecha Hasta
    FechaHasta = Vigencia_Hasta
    


' ====================================================================
'   Validar los parametros Levantados

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'Que exista el concepto
StrSql = "SELECT * FROM concepto WHERE conccod = '" & ConcCod & "'"
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
    fornro = rs_Concepto!fornro
End If


'Resuelvo automaticamente el Parametro
'Busco el primero parametro que se resuelva por novedad individual
'de la primer formula asociada al concepto
StrSql = "SELECT * FROM con_for_tpa "
StrSql = StrSql & " INNER JOIN cft_resumen ON con_for_tpa.tpanro = cft_resumen.tpanro AND cft_resumen.concnro = " & ConcNro
StrSql = StrSql & " WHERE con_for_tpa.cftauto = 0 "
StrSql = StrSql & " AND con_for_tpa.concnro = " & ConcNro
StrSql = StrSql & " AND cft_resumen.carind = -1"
StrSql = StrSql & " ORDER BY con_for_tpa.concnro,con_for_tpa.fornro,con_for_tpa.tpanro,con_for_tpa.nivel,con_for_tpa.selecc"
OpenRecordset StrSql, rs_con_for_tpa
If rs_con_for_tpa.EOF Then
    Texto = ": " & "No se encontro el ningun Parametro que se resuelva por novedad para el concepto " & ConcCod
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
Else
    Encontro = True
    tpanro = rs_con_for_tpa!tpanro
    
    Texto = "parametro " & tpanro & " asociado al concepto " & ConcCod
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
End If


'=============================================================
'Busco si existe la Novedad

If Not TieneVigencia Then

    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
    StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
    StrSql = StrSql & " ORDER BY nevigencia "
    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
    OpenRecordset StrSql, rs_NovEmp

    If Not rs_NovEmp.EOF Then

        If CBool(rs_NovEmp!nevigencia) Then
            Texto = ": " & "No se puede insertar la novedad poqrue ya existe una con Vigencia"
            NroColumna = 1
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 94)
            HuboError = True
            Exit Sub
        Else

            'Existe una novedad pero sin vigencia ==> Actualizo
            If PisaNovedad Then 'Actualizo la Novedad

                If Not EsRetroactivo Then
                    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
                             " WHERE concnro = " & ConcNro & _
                             " AND tpanro = " & tpanro & _
                             " AND empleado = " & Tercero
                Else
                    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
                             " , nepliqdesde =  " & PeriodoDesde & _
                             " , nepliqhasta =  " & PeriodoHasta & _
                             " WHERE concnro = " & ConcNro & _
                             " AND tpanro = " & tpanro & _
                             " AND empleado = " & Tercero
                End If
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Novedad Actualizada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                'Flog.Writeline Espacios(Tabulador * 1) & "Novedad Actualizada "
            Else
                Texto = "No se insertó la novedad. Ya existe y no se pisa."
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            End If
        End If
    Else

        'Inserto
        If Not EsRetroactivo Then

            StrSql = "INSERT INTO novemp (" & _
                     "empleado,concnro,tpanro,nevalor,nevigencia" & _
                     ") VALUES (" & Tercero & _
                     "," & ConcNro & _
                     "," & tpanro & _
                     "," & Monto & _
                     ",0" & _
                     " )"
        Else

            StrSql = "INSERT INTO novemp (" & _
                     "empleado,concnro,tpanro,nevalor,nevigencia,nepliqdesde,nepliqhasta " & _
                     ") VALUES (" & Tercero & _
                     "," & ConcNro & _
                     "," & tpanro & _
                     "," & Monto & _
                     "," & CLng(TieneVigencia) & _
                     "," & PeriodoDesde & _
                     "," & PeriodoHasta & _
                     " )"
        End If
        objConn.Execute StrSql, , adExecuteNoRecords
        'Flog.Writeline Espacios(Tabulador * 1) & "Novedad insertada "
        Texto = "Novedad insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If
Else 'Tiene Vigencia
    'Reviso que no se pise
    

    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
    StrSql = StrSql & " AND (nevigencia = 0 "
    StrSql = StrSql & " OR (nevigencia = -1 "
    If Not EsNulo(FechaHasta) Then

        StrSql = StrSql & " AND (nedesde <= " & ConvFecha(FechaHasta)
        StrSql = StrSql & " AND nehasta >= " & ConvFecha(FechaDesde) & ")"
        StrSql = StrSql & " OR  (nedesde <= " & ConvFecha(FechaHasta)
        StrSql = StrSql & " AND nehasta is null )))"
    Else

        StrSql = StrSql & " AND nehasta is null OR nehasta >= " & ConvFecha(FechaDesde) & "))"
    End If

    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
    OpenRecordset StrSql, rs_NovEmp

    If Not rs_NovEmp.EOF Then
        Texto = ": " & "No se puede insertar la novedad, las vigencias se superponen"
        NroColumna = 1
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 1, 95
        HuboError = True
        Exit Sub
    Else
        If Not EsRetroactivo Then
            StrSql = "INSERT INTO novemp ("
            StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & ",nehasta"
            End If
            StrSql = StrSql & ") VALUES (" & Tercero
            StrSql = StrSql & "," & ConcNro
            StrSql = StrSql & "," & tpanro
            StrSql = StrSql & "," & Monto
            StrSql = StrSql & ",-1"
            StrSql = StrSql & "," & ConvFecha(FechaDesde)
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & "," & ConvFecha(FechaHasta)
            End If
            StrSql = StrSql & " )"
        Else

            StrSql = "INSERT INTO novemp ("
            StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & ",nehasta"
            End If
            StrSql = StrSql & ",nepliqdesde,nepliqhasta"
            StrSql = StrSql & ") VALUES (" & Tercero
            StrSql = StrSql & "," & ConcNro
            StrSql = StrSql & "," & tpanro
            StrSql = StrSql & "," & Monto
            StrSql = StrSql & ",-1"

            StrSql = StrSql & "," & ConvFecha(FechaDesde)
            If Not EsNulo(FechaHasta) Then

                StrSql = StrSql & "," & ConvFecha(FechaHasta)
            End If

            StrSql = StrSql & "," & PeriodoDesde
            StrSql = StrSql & "," & PeriodoHasta
            StrSql = StrSql & " )"
        End If

        objConn.Execute StrSql, , adExecuteNoRecords
        'Flog.Writeline Espacios(Tabulador * 1) & "Novedad insertada "
        Texto = "Novedad insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If
End If

Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close
If rs_TipoPar.State = adStateOpen Then rs_TipoPar.Close
If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
If rs_con_for_tpa.State = adStateOpen Then rs_con_for_tpa.Close

Set rs_NovEmp = Nothing
Set rs_Empleado = Nothing
Set rs_Concepto = Nothing
Set rs_TipoPar = Nothing
Set rs_Periodo = Nothing
Set rs_con_for_tpa = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_279(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Acumulados Diarios segun formato
' Autor      : FAF
'              El formato es:
'               Fecha;Cant. horas;Tipo de hora;Legajo;Cta contable;Proyecto
' Fecha      : 26/04/2007
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Integer
Dim pos2 As Integer
    
Dim Tercero As Long
Dim NroLegajo As Long
Dim thnro As Long
Dim Cantidad As Double
Dim FechaAD As Date
Dim FechaAD_aux As String
Dim Cantidad_aux As String
Dim cta_contable_aux As String
Dim proyecto_aux As String
Dim final_aux As String

Dim rs_Empleado As New ADODB.Recordset
Dim rs_TipHora As New ADODB.Recordset
Dim rs_GTI_AcumDiario As New ADODB.Recordset


    On Error GoTo Manejador_De_Error
    
    Tabs = 1
    
    'Fecha
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    FechaAD_aux = Mid(strLinea, pos1, pos2 - pos1)

    'Cantidad
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    Cantidad_aux = Mid(strLinea, pos1, pos2 - pos1)

    'Tipo de Hora
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    thnro = Mid(strLinea, pos1, pos2 - pos1)

    'Nro de Legajo
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        InsertaError 4, 8
        GoTo Fin
    End If
    
    ' Cta. Contable
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    cta_contable_aux = Mid(strLinea, pos1, pos2 - pos1)
    
    ' Proyecto
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
'    pos2 = Len(strLinea)
    proyecto_aux = Mid(strLinea, pos1, pos2 - pos1)
    
    ' Linea sin importancia
    pos1 = pos2 + 1
    pos2 = Len(strLinea)
    final_aux = Mid(strLinea, pos1, pos2)
    
'====================================================================
' Validar los parametros Levantados

    'Que exista el legajo
    StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
    OpenRecordset StrSql, rs_Empleado
    If rs_Empleado.EOF Then
        NroColumna = 1
        Texto = "No se encontro el legajo --> " & NroLegajo
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 4, 8
        GoTo Fin
    Else
        Tercero = rs_Empleado!Ternro
    End If
    
    'Que la fecha sea valida
    If Not IsDate(FechaAD_aux) Then
        NroColumna = 2
        Texto = "Fecha no válida --> " & FechaAD_aux
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 1, 4
        GoTo Fin
    Else
        FechaAD = CDate(FechaAD_aux)
    End If
    
    'Que exista el tipo de hora
    StrSql = "SELECT * FROM tiphora WHERE thnro = " & thnro
    OpenRecordset StrSql, rs_TipHora
    If rs_TipHora.EOF Then
        NroColumna = 3
        Texto = "No se encontro el tipo de hora --> " & thnro
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 3, 37
        GoTo Fin
    End If
    
    'Que sea numerico la cantidad
    If Not IsNumeric(Cantidad_aux) Then
        NroColumna = 4
        Texto = "La cantidad no es numérica --> " & Cantidad_aux
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 2, 38
        GoTo Fin
    Else
        Cantidad = CDbl(Cantidad_aux)
    End If
    
'=============================================================
'Busco si existe
    StrSql = "SELECT * FROM gti_acumdiario WHERE " & _
             " thnro = " & thnro & _
             " AND ternro = " & Tercero & _
             " AND adfecha = " & ConvFecha(FechaAD)
    OpenRecordset StrSql, rs_GTI_AcumDiario
    
    If rs_GTI_AcumDiario.EOF Then
            StrSql = "INSERT INTO gti_acumdiario (" & _
                     "ternro,thnro,adfecha,adcanthoras,admanual,advalido,adestado,adctaasiento,adproyecto" & _
                     ") VALUES (" & Tercero & _
                     "," & thnro & _
                     "," & ConvFecha(FechaAD) & _
                     "," & Cantidad & _
                     ",0,-1,'T'" & _
                     ",'" & cta_contable_aux & "'" & _
                     ",'" & proyecto_aux & "'" & _
                     " )"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Acum Diario insertado "
        Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Else
        StrSql = "SELECT * FROM gti_acumdiario WHERE " & _
                 " thnro = " & thnro & _
                 " AND ternro = " & Tercero & _
                 " AND admanual = 0 AND adValido = -1 AND adestado = 'T'"
        If rs_GTI_AcumDiario.State = adStateOpen Then rs_GTI_AcumDiario.Close
        OpenRecordset StrSql, rs_GTI_AcumDiario
        
        If Not rs_GTI_AcumDiario.EOF Then
                StrSql = "UPDATE gti_acumdiario SET adcanthoras = " & Cantidad & _
                         " WHERE thnro = " & thnro & _
                         " AND ternro = " & Tercero & _
                         " AND admanual = 0 AND adValido = -1 AND adestado = 'T'" & _
                         " AND adctaasiento = '" & cta_contable_aux & "' AND adproyecto = '" & proyecto_aux & "'"
            objConn.Execute StrSql, , adExecuteNoRecords
            Texto = "Acum Diario Actualizado."
            Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Else
            Texto = "El Acum Diario ya existe."
            Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            InsertaError 1, 54
        End If
    End If

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_TipHora.State = adStateOpen Then rs_TipHora.Close
If rs_GTI_AcumDiario.State = adStateOpen Then rs_GTI_AcumDiario.Close

Set rs_Empleado = Nothing
Set rs_TipHora = Nothing
Set rs_GTI_AcumDiario = Nothing

Fin:
Exit Sub

Manejador_De_Error:
    HuboError = True
'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Descripción: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub






Public Sub LineaModelo_300(ByVal strReg As String, ByRef OK As Boolean)
' ---------------------------------------------------------------------------------------------
' Descripcion: Migracion de Empleados para Teleperformance
' Autor      : FGZ
' Fecha      : 21/01/2005
' Ultima Mod.: 27/04/2005 - FGZ - Estandarizacion del proceso
'              27/06/2005 - FGZ - Fecha fin de contrato.
' ---------------------------------------------------------------------------------------------
Dim pos1            As Long
Dim pos2            As Long

Dim Legajo          As String   'LEGAJO                   -- empleado.empleg
Dim Apellido        As String   'APELLIDO                 -- empleado.terape y tercero.terape
Dim nombre          As String   'NOMBRE                   -- empleado.ternom y tercero.ternom
Dim Fnac            As String   'FNAC                     -- tercero.terfecna
Dim Nacionalidad    As String   'Nacionalidad             -- tercero.nacionalnro
Dim PaisNac         As String   'Pais de Nacimiento       -- tercero.paisnro
Dim Fing            As String   'Fec.Ingreso al Pais      -- terecro.terfecing
Dim EstCivil        As String   'Est.Civil                -- tercero.estcivnro
Dim Sexo            As String   'Sexo                     -- tercero.tersex
Dim FAlta           As String   'Fec. de Alta             -- empleado.empfaltagr y fases.altfec
Dim Estudio         As String   'Estudia                  -- empleado.empestudia
Dim NivEst          As String   'Nivel de Estudio         -- empleado.nivnro
Dim Tdocu           As String   'Tipo Documento           -- ter_dpc.tidnro (DU)
Dim Ndocu           As String   'Nro. Documento           -- ter_doc.nrodoc
Dim Cuil            As String   'CUIL                     -- ter_doc.nrodoc (10)
Dim Calle           As String   'Calle                    -- detdom.calle
Dim Nro             As String   'Número                   -- detdom.nro
Dim Piso            As String   'Piso                     -- detdom.piso
Dim Depto           As String   'Depto                    -- detdom.depto
Dim Torre           As String   'Torre                    -- detdom.torre
Dim Manzana         As String   'Manzana                  -- detdom.manzana
Dim Cpostal         As String   'Cpostal                  -- detdom.codigopostal
Dim Entre           As String   'Entre Calles             -- detdom.entrecalles
Dim Barrio          As String   'Barrio                   -- detdom.barrio
Dim Localidad       As String   'Localidad                -- detdom.locnro
Dim Partido         As String   'Partido                  -- detdom.partnro
Dim Zona            As String   'Zona                     -- detdom.zonanro
Dim Provincia       As String   'Provincia                -- detdom.provnro
Dim Pais            As String   'Pais                     -- detdom.paisnro
Dim Telefono        As String   'Telefono                 -- telefono.telnro
Dim TelLaboral        As String   'Telefono                 -- telefono.telnro
Dim TelCelular        As String   'Telefono                 -- telefono.telnro
Dim Email           As String   'E-mail                   -- empleado.empemail
Dim Sucursal        As String   'Sucursal                 -- his_estructura.estrnro
Dim Sector          As String   'Sector                   -- his_estructura.estrnro
Dim categoria       As String   'Categoria                -- his_estructura.estrnro
Dim Puesto          As String   'Puesto                   -- his_estructura.estrnro
Dim CCosto          As String   'C.Costo                  -- his_estructura.estrnro
Dim Gerencia        As String   'Gerencia                 -- his_estructura.estrnro
Dim Departamento    As String   'Departamento             -- his_estructura.estrnro
Dim Direccion       As String   'Direccion                -- his_estructura.estrnro
Dim CajaJub         As String   'Caja de Jubilacion       -- his_estructura.estrnro
Dim Sindicato       As String   'Sindicato                -- his_estructura.estrnro
Dim OSocialLey         As String   'Obra Social              -- his_estructura.estrnro
Dim PlanOSLey          As String   'Plan OS                  -- his_estructura.estrnro
Dim OSocialElegida         As String   'Obra Social              -- his_estructura.estrnro
Dim PlanOSElegida          As String   'Plan OS                  -- his_estructura.estrnro
Dim Contrato        As String   'Contrato                 -- his_estructura.estrnro
Dim Convenio        As String   'Convenio                 -- his_estructura.estrnro
Dim LPago           As String   'Lugar de Pago            -- his_estructura.estrnro
Dim RegHorario      As String   'Regimen Horario          -- his_estructura.estrnro
Dim FormaLiq        As String   'Forma de Liquidacion     -- his_estructura.estrnro
Dim FormaPago       As String   'Forma de Pago            -- formapago.fpagdescabr
Dim SucBanco        As String   'Sucursal del Banco       -- ctabancaria.ctabsuc
Dim BancoPago       As String   'Banco Pago               -- his_estructura.estrnro, formapago.fpagbanc (siempre y cuando el Banco sea <> 0) y ctabancaria.banco
Dim NroCuenta       As String   'Nro. Cuenta              -- ctabancario.ctabnro
Dim NroCuentaAcreditacionE As String
Dim Actividad       As String   'Actividad                -- his_estructura.estrnro
Dim CondSIJP        As String   'Condicion SIJP           -- his_estructura.estrnro
Dim SitRev          As String   'Sit. de Revista SIJP     -- his_estructura.estrnro
Dim ModCont         As String   'Mod. de Contrat. SIJP    -- his_estructura.estrnro
Dim ART             As String   'ART                      -- his_estructura.estrnro
Dim Estado          As String   'Estado                   -- empleado.empest y fases.estado
Dim CausaBaja       As String   'Causa de Baja            -- fases.caunro
Dim FBaja           As String   'Fecha de Baja            -- fases.bajfec
Dim Empresa         As String   'Empresa                  -- his_estructura.estrnro
Dim ModOrg          As String   'Empresa                  -- his_estructura.estrnro
Dim OSL             As String   'Empresa                  -- his_estructura.estrnro
Dim OSE             As String   'Empresa                  -- his_estructura.estrnro
Dim PlanOdon        As String   'Empresa                  -- his_estructura.estrnro
Dim Locacion        As String   'Empresa                  -- his_estructura.estrnro
Dim Area            As String   'Empresa                  -- his_estructura.estrnro
Dim SubDepto        As String   'Empresa                  -- his_estructura.estrnro
Dim NroCBU          As String   'Empresa                  -- his_estructura.estrnro
Dim Empremu         As String   'Remuneración del empleado
Dim GrupoSeguridad  As String   'Grupo de Seguridad
Dim Nro_GrupoSeguridad  As Long 'Grupo de Seguridad       -- his_estructura.estrnro
Dim FFinContrato    As String
Dim Fecha_FinContrato As String
Dim Reporta_a       As String
Dim Nro_Reporta_a   As Long

Dim Ternro As Long

Dim NroTercero          As Long

Dim Nro_Legajo          As Long
Dim Nro_TDocumento      As Long
Dim nro_nivest          As Long
Dim nro_estudio         As Long

Dim Nro_Nrodom          As String

Dim Nro_Barrio          As Long
Dim Nro_Localidad       As Long
Dim Nro_Partido         As Long
Dim Nro_Zona            As Long
Dim Nro_Provincia       As Long
Dim Nro_Pais            As Long
Dim nro_paisnac         As Long

Dim nro_sucursal        As Long
Dim nro_sector          As Long
Dim nro_categoria       As Long
Dim nro_puesto          As Long
Dim nro_ccosto          As Long
Dim nro_gerencia        As Long
Dim nro_cajajub         As Long
Dim nro_sindicato       As Long
Dim nro_osocial_ley     As Long
Dim nro_planos_ley      As Long
Dim nro_osocial_elegida As Long
Dim nro_planos_elegida  As Long
Dim nro_contrato        As Long
Dim nro_convenio        As Long
Dim nro_reghorario      As Long
Dim nro_formaliq        As Long
Dim nro_bancopago       As Long
Dim nro_actividad       As Long
Dim nro_sitrev          As Long
Dim nro_modcont         As Long
Dim nro_art             As Long
Dim nro_departamento    As Long
Dim nro_direccion       As Long
Dim nro_lpago           As Long
Dim nro_condsijp        As Long
Dim nro_formapago       As Long
Dim nro_causabaja       As Long
Dim nro_empresa         As Long
Dim NroDom              As Long
Dim nro_osl             As Long
Dim nro_odon            As Long
Dim nro_ose             As Long
Dim nro_locacion        As Long
Dim nro_area            As Long
Dim nro_SubDepto        As Long
Dim nro_empremu         As Long

Dim nro_estcivil        As Long
Dim nro_nacionalidad    As Long

Dim F_Nacimiento        As String
Dim F_Fallecimiento     As String
Dim F_Alta              As String
Dim F_Baja              As String
Dim F_Ingreso           As String

Dim Inserto_estr        As Boolean

Dim ter_sucursal        As Long
Dim Ter_Empresa         As Long
Dim ter_cajajub         As Long
Dim ter_sindicato       As Long
Dim ter_osocial_ley         As Long
Dim ter_osocial_elegida         As Long
Dim ter_bancopago       As Long
Dim ter_art             As Long
Dim ter_sexo            As Long
Dim ter_estudio         As Long
Dim ter_estado          As Long

Dim fpgo_bancaria       As Long

Dim rs As New ADODB.Recordset
Dim rs_Sql As New ADODB.Recordset
Dim rs_Empleado As New ADODB.Recordset
Dim rs_Tel As New ADODB.Recordset
Dim rs_repl As New ADODB.Recordset


Dim SucDesc             As Boolean   'Sucursal                 -- his_estructura
Dim SecDesc             As Boolean   'Sector                   -- his_estructura
Dim CatDesc             As Boolean   'Categoria                -- his_estructura
Dim PueDesc             As Boolean   'Puesto                   -- his_estructura
Dim CCoDesc             As Boolean   'C.Costo                  -- his_estructura
Dim GerDesc             As Boolean   'Gerencia                 -- his_estructura
Dim DepDesc             As Boolean   'Departamento             -- his_estructura
Dim DirDesc             As Boolean   'Direccion                -- his_estructura
Dim CaJDesc             As Boolean   'Caja de Jubilacion       --
Dim SinDesc             As Boolean   'Sindicato                -- his_estructura
Dim OSoElegidaDesc             As Boolean   'Obra Social              -- his_estructura
Dim PoSElegidaDesc             As Boolean   'Plan OS                  -- his_estructura
Dim OSoLeyDesc             As Boolean   'Obra Social              -- his_estructura
Dim PoSLeyDesc             As Boolean   'Plan OS                  -- his_estructura
Dim CotDesc             As Boolean   'Contrato                 -- his_estructura
Dim CovDesc             As Boolean   'Convenio                 -- his_estructura
Dim LPaDesc             As Boolean   'Lugar de Pago            -- his_estructura
Dim RegDesc             As Boolean   'Regimen Horario          -- his_estructura
Dim FLiDesc             As Boolean   'Forma de Liquidacion     -- his_estructura
Dim FPaDesc             As Boolean      'Forma de Pago            -- his_estructura
Dim BcoDesc             As Boolean      'Banco Pago               --
Dim ActDesc             As Boolean      'Actividad                --
Dim CSJDesc             As Boolean      'Condicion SIJP           --
Dim SReDesc             As Boolean      'Sit. de Revista SIJP     --
Dim MCoDesc             As Boolean      'Mod. de Contrat. SIJP    --
Dim ARTDesc             As Boolean      'ART                      --
Dim SubCatDesc          As Boolean      ' Subcategoria
Dim PuestoCDesc         As Boolean      'Puesto contable
Dim EmpDesc             As Boolean      'Empresa                  --
Dim OSLDesc             As Boolean      'Empresa                  --
Dim POdoDesc             As Boolean     'Empresa                  --
Dim OSEDesc             As Boolean      'Empresa                  --
Dim LocDesc             As Boolean      'Empresa                  --
Dim AreaDesc             As Boolean     'Empresa                  --
Dim SubDepDesc             As Boolean   'Empresa                  --

Dim IngresoDom          As Boolean

Dim rs_tdoc As New ADODB.Recordset
Dim rs_emp  As New ADODB.Recordset
Dim rs_tpl  As New ADODB.Recordset
Dim rs_leg  As New ADODB.Recordset

Dim Nroadtemplate As Long
Dim Nro_Institucion As Long

Dim Sigue As Boolean
Dim ExisteLeg As Boolean
Dim CalculaLegajo As Boolean

'FGZ - 21/01/2005
Dim Subcategoria As String
Dim Nro_Subcategoria As Long
Dim Ter_Subcategoria As Long
Dim PuestoContable As String
Dim Nro_PuestoContable As Long
Dim Ter_PuestoContable As Long

    On Error GoTo SaltoLinea

    ' True indica que se hace por Descripcion. False por Codigo Externo

    SucDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SecDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CatDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    PueDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CCoDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    GerDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    DepDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    DirDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CaJDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SinDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    OSoElegidaDesc = True ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    PoSElegidaDesc = True ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    OSoLeyDesc = True   ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    PoSLeyDesc = True   ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CotDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CovDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    LPaDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    RegDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    FLiDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    FPaDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    BcoDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    ActDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CSJDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SReDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    MCoDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    ARTDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    EmpDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    OSLDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    POdoDesc = True     ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    OSEDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    LocDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    AreaDesc = True     ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SubDepDesc = True   ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SubCatDesc = True
    PuestoCDesc = True
    
    Sigue = True 'Indica que si en el archivo viene mas de una vez un empleado, le crea las fases
    ExisteLeg = False
    'RegLeidos = RegLeidos + 1
    LineaCarga = LineaCarga + 1
    
    Flog.writeline
    FlogE.writeline
    FlogP.writeline
    
    'Legajo
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Legajo"
    pos1 = 1
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Legajo = Aux
    'Legajo = Mid(strReg, pos1, pos2 - pos1 + 1)
    If Legajo = "N/A" Or EsNulo(Legajo) Then
        CalculaLegajo = True
    Else
        StrSql = "SELECT * FROM empleado WHERE empleado.empleg = " & Legajo
        OpenRecordset StrSql, rs_emp
        If (Not rs_emp.EOF) Then
            If (Not Sigue) Then
                Texto = ": " & " - El Empleado ya Existe."
                NroColumna = 1
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                OK = False
                Exit Sub
            Else
                NroTercero = rs_emp!Ternro
                ExisteLeg = True
            End If
        End If
    End If
    
    'Apellido
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Apellido"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Apellido = Left(Aux, 25)
    
    'Nombre
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Nombre"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    nombre = Left(Aux, 25)
    If (Apellido = "" Or Apellido = "N/A") And (nombre = "" Or nombre = "N/A") Then
        Texto = ": " & " - Debe Ingresar un Nombre y Apellido."
        NroColumna = 2
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        OK = False
        Exit Sub
    End If
    
    
    'Fecha de Nacimiento
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Fecha de Nacimiento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Fnac = Aux
    If Fnac = "N/A" Then
       F_Nacimiento = "Null"
    Else
       F_Nacimiento = ConvFecha(Fnac)
    End If
    
    'Pais de Nacimiento
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Pais de Nacimiento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    PaisNac = Aux
    If PaisNac <> "N/A" Then
        StrSql = " SELECT paisnro FROM pais WHERE UPPER(paisdesc) = '" & UCase(PaisNac) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_paisnac = rs_Sql!Paisnro
        Else
            StrSql = " INSERT INTO pais(paisdesc,paisdef) VALUES ('" & UCase(PaisNac) & "',0)"
            objConn.Execute StrSql, , adExecuteNoRecords
            nro_paisnac = getLastIdentity(objConn, "pais")
        End If
    Else
        nro_paisnac = 0
    End If
    
    'Nacionalidad
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Nacionalidad"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Nacionalidad = Aux
    If Nacionalidad <> "N/A" Then
        StrSql = " SELECT nacionalnro FROM nacionalidad WHERE UPPER(nacionaldes) = '" & UCase(Nacionalidad) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_nacionalidad = rs_Sql!nacionalnro
        Else
            StrSql = " INSERT INTO nacionalidad(nacionaldes) VALUES ('" & UCase(Nacionalidad) & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            nro_nacionalidad = getLastIdentity(objConn, "nacionalidad")
        End If
    Else
        nro_nacionalidad = 0
    End If
    If nro_nacionalidad = 0 Then
        Texto = ": " & " - La Nacionalidad no Existe."
        NroColumna = 6
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        OK = False
        Exit Sub
    End If
    
    
    'Fecha de Ingreso al Pais
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Fecha de Ingreso al Pais"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Fing = Aux
    If (Fing = "N/A") Or EsNulo(Fing) Then
        F_Ingreso = "Null"
    Else
        F_Ingreso = ConvFecha(Fing)
    End If
    
    'Estado Civil
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Estado Civil"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    EstCivil = Left(Aux, 30)
    If EstCivil <> "N/A" And Not EsNulo(EstCivil) Then
        StrSql = " SELECT estcivnro FROM estcivil WHERE UPPER(estcivdesabr) = '" & UCase(EstCivil) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_estcivil = rs_Sql!estcivnro
        Else
            StrSql = " INSERT INTO estcivil(estcivdesabr) VALUES ('" & UCase(EstCivil) & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            nro_estcivil = getLastIdentity(objConn, "estcivil")
        End If
    Else
        nro_estcivil = 0
    End If
    If nro_estcivil = 0 Then
        Texto = ": " & " - El Estado Civil no Existe."
        NroColumna = 8
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        OK = False
        Exit Sub
    End If
    
    'Sexo
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Sexo"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Sexo = UCase(Aux)
    If (Sexo = "M") Or (Sexo = "-1") Or (Sexo = "MASCULINO") Then
        ter_sexo = -1
    Else
        ter_sexo = 0
    End If
                                                            
    'Fecha de alta
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Fecha de alta"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    FAlta = Aux
    If FAlta = "N/A" Or EsNulo(FAlta) Then
        F_Alta = "Null"
        Texto = ": " & " - La Fecha de Alta es Obligatoria."
        NroColumna = 10
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        OK = False
        Exit Sub
    Else
        F_Alta = ConvFecha(FAlta)
    End If
   
    'Estudia?
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Estudia?"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Estudio = UCase(Aux)
    If Estudio <> "N/A" And Estudio <> "NO" Then
        If Estudio = "SI" Then
            ter_estudio = -1
        Else
            ter_estudio = 0
        End If
    Else
        ter_estudio = 0
    End If
    
    'Nivel de estudio
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Nivel de estudio"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    NivEst = Left(Aux, 40)
    If NivEst <> "N/A" Then
        StrSql = " SELECT nivnro FROM nivest WHERE UPPER(nivdesc) = '" & UCase(NivEst) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_nivest = rs_Sql!nivnro
        Else
            StrSql = " INSERT INTO nivest(nivdesc,nivsist,nivobligatorio,nivestfli) VALUES ('" & UCase(NivEst) & "',-1,0,-1)"
            objConn.Execute StrSql, , adExecuteNoRecords
            nro_nivest = getLastIdentity(objConn, "nivest")
        End If
    Else
        nro_nivest = 0
    End If
    
    'Tipo de Doc
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Tipo de Doc"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Tdocu = Left(Aux, 8)
    If Tdocu <> "N/A" Then
        StrSql = " SELECT tidnro FROM tipodocu WHERE UPPER(tidsigla) = '" & UCase(Tdocu) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            Nro_TDocumento = rs_Sql!tidnro
        Else
            'busco la primera institucion, si no existe la creo
            StrSql = " SELECT * FROM institucion "
            If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                Nro_Institucion = rs!InstNro
            Else
                'creo una
                StrSql = " INSERT INTO institucion (instdes,instabre) VALUES ('NACIONAL','NAC')"
                objConn.Execute StrSql, , adExecuteNoRecords
                Nro_Institucion = getLastIdentity(objConn, "institucion")
            End If
            'creo el tipo de documento
            StrSql = " INSERT INTO tipodocu(tidnom,tidsigla,tidsist,instnro,tidunico) VALUES ('" & UCase(Tdocu) & "','" & UCase(Tdocu) & "',0," & Nro_Institucion & ",0)"
            objConn.Execute StrSql, , adExecuteNoRecords
            Nro_TDocumento = getLastIdentity(objConn, "tipodocu")
        End If
    Else
        Nro_TDocumento = 0
    End If
    If Nro_TDocumento = 0 Then
        Texto = ": " & " - El Tipo de Documento no Existe."
        NroColumna = 13
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        OK = False
        Exit Sub
    End If
    
    'Nro de Documento
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Nro de Documento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Ndocu = Left(Aux, 30)
    If Ndocu = "N/A" Then
        Ndocu = ""
    End If
    
    StrSql = "SELECT * FROM empleado "
    StrSql = StrSql & " INNER JOIN ter_doc ON ter_doc.ternro = empleado.ternro "
    StrSql = StrSql & " WHERE ter_doc.tidnro = " & Nro_TDocumento & " AND ter_doc.nrodoc = '" & Ndocu & "'"
    OpenRecordset StrSql, rs_tdoc
    If (Not rs_tdoc.EOF) Then
            Texto = ": " & " - Ese Tipo y Numero de Documento estan Asignados a otro Empleado."
            NroColumna = 14
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            OK = False
            Exit Sub
    End If
    
    'CUIL
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "CUIL"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        'Exit Sub
    End If
    Cuil = Replace(Left(Aux, 30), "-", "")
    If Cuil = "N/A" Or EsNulo(Cuil) Then
        Cuil = Generar_Cuil(Ndocu, CBool(ter_sexo))
        'Cuil = CalcularCUIL(Ndocu)
        If Cuil = 0 Then
            Texto = ": " & " - Campo " & Campoetiqueta & " no se pudo generar automaticamente " & Ndocu
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        End If
    Else
        OK = Cuil_Valido(Cuil, Texto)
        If Not OK Then
            Texto = "El CUIL no es valido"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            'Cuil = CalcularCUIL(Ndocu)
            Cuil = Generar_Cuil(Ndocu, CBool(ter_sexo))
        End If
    End If
    Cuil = Left(Cuil, 2) & "-" & Mid(Cuil, 3, 8) & "-" & Right(Cuil, 1)
    
    'Hasta Aqui los Datos Obligatorios del Empleado
    IngresoDom = True
        
    'Calle
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Direccion.Calle"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Calle = Left(Aux, 250)
    
    If Calle = "N/A" Then
        Calle = ""
        IngresoDom = False
    End If
    
    'Nro
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Direccion.Nro"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Nro = Left(Aux, 8)
    If (Nro <> "N/A") Then
        Nro_Nrodom = Nro
    Else
        Nro_Nrodom = 0
    End If
    
    'Piso
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Direccion.Piso"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Piso = Left(Aux, 8)
    If Piso = "N/A" Then
        Piso = ""
    End If
    
    'Departamento
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Direccion.Departamento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Depto = Left(Aux, 8)
    If Depto = "N/A" Then
        Depto = ""
    End If

    'Torre
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Direccion.Torre"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Torre = Left(Aux, 8)
    If Torre = "N/A" Then
        Torre = ""
    End If
    
    'Manzana
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Direccion.Manzana"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Manzana = Left(Aux, 8)
    If Manzana = "N/A" Then
        Manzana = ""
    End If

    'Codigo Postal
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Codigo Postal"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Cpostal = Left(Aux, 12)
    If Cpostal = "N/A" Then
        Cpostal = ""
    End If

    'Entre calles
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Entre calles"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Entre = Left(Aux, 80)
    If Entre = "N/A" Then
        Entre = ""
    End If

    'Barrio
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Barrio"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Barrio = Left(Aux, 30)
    If Barrio = "N/A" Then
        Barrio = ""
    End If

    'Localidad
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Localidad"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Localidad = Left(Aux, 60)
    
    'Partido
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Partido"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Partido = Left(Aux, 30)
    
    'Zona
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Zona"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Zona = Left(Aux, 60)
    
    'Provincia
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Provincia"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Provincia = Left(Aux, 20)
    
    'Pais
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Pais"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Pais = Left(Aux, 20)
    If Pais <> "N/A" Then
        Call ValidarPais(Pais, Nro_Pais)
    Else
        Nro_Pais = 0
    End If
    If Provincia <> "N/A" Then
        Call ValidarProvincia(Provincia, Nro_Provincia, Nro_Pais)
    Else
        Nro_Provincia = 0
    End If
    If Localidad <> "N/A" Then
        Call ValidarLocalidad(Localidad, Nro_Localidad, Nro_Pais, Nro_Provincia)
    Else
        Nro_Localidad = 0
    End If
    If Partido <> "N/A" Then
        Call ValidarPartido(Partido, Nro_Partido)
    Else
        Nro_Partido = 0
    End If
    If Zona <> "N/A" Then
        Call ValidarZona(Zona, Nro_Zona, Nro_Provincia)
    Else
        Nro_Zona = 0
    End If
    If (IngresoDom = True) And (Nro_Localidad = 0) Then
        Texto = ": " & " - Debe Ingresar la Localidad."
        NroColumna = 25
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        OK = False
        Exit Sub
    End If
    If (IngresoDom = True) And (Nro_Provincia = 0) Then
        Texto = ": " & " - Debe Ingresar la Provincia."
        NroColumna = 28
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        OK = False
        Exit Sub
    End If
    If (IngresoDom = True) And (Nro_Pais = 0) Then
        Texto = ": " & " - Debe Ingresar la Pais."
        NroColumna = 29
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        OK = False
        Exit Sub
    End If
    
    'Tel Particular
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Tel Particular"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Telefono = Left(Aux, 20)
    If Telefono = "N/A" Then
        Telefono = ""
    End If
    
    'Tel Laboral
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Tel Laboral"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    TelLaboral = Left(Aux, 20)
    If TelLaboral = "N/A" Then
        TelLaboral = ""
    End If
    
    'Tel Celular
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Tel Celular"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    TelCelular = Left(Aux, 20)
    If TelCelular = "N/A" Then
        TelCelular = ""
    End If
    
    'Email
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Email"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Email = Left(Aux, 100)
    If Email = "N/A" Then
        Email = ""
    End If
    
    'Sucursal
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Sucursal"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Sucursal = Aux
    ' Validacion y Creacion de la Sucursal (junto con sus Complementos)
    If Sucursal <> "N/A" Then
        If SucDesc Then
            Call ValidaEstructura(1, Sucursal, nro_sucursal, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(1, Sucursal, nro_sucursal, Inserto_estr)
        End If
        Call CreaTercero(10, Sucursal, ter_sucursal)
        
        If Inserto_estr Then
            Call CreaComplemento(1, ter_sucursal, nro_sucursal, Sucursal)
            Inserto_estr = False
        End If
    Else
        nro_sucursal = 0
    End If
    
    'Sector
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Sector"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Sector = Aux
    ' Validacion y Creacion del Sector
    If Sector <> "N/A" Then
        If SecDesc Then
            Call ValidaEstructura(2, Sector, nro_sector, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(2, Sector, nro_sector, Inserto_estr)
        End If
    Else
        nro_sector = 0
    End If


    'Convenio
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Convenio"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Convenio = Aux
    ' Validacion, Creacion del Convenio
    If Convenio <> "N/A" Then
        If CovDesc Then
            Call ValidaEstructura(19, Convenio, nro_convenio, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(19, Convenio, nro_convenio, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(19, 0, nro_convenio, Convenio)
            Inserto_estr = False
        End If
    Else
        nro_convenio = 0
    End If
    
    
    'Categoria
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Categoria"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    categoria = Aux
    ' Validacion, Creacion de la Categoria
    If (categoria <> "N/A" And nro_convenio <> 0) Then
        If CatDesc Then
            'Call ValidaEstructura(3, categoria, nro_categoria, Inserto_estr)
            Call ValidaCategoria(3, categoria, nro_convenio, nro_categoria, Inserto_estr)
            
        Else
            'Call ValidaEstructuraCodExt(3, categoria, nro_categoria, Inserto_estr)
            Call ValidaCategoriaCodExt(3, categoria, nro_convenio, nro_categoria, Inserto_estr)
        End If
    Else
        nro_categoria = 0
    End If
    
    'Puesto
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Puesto"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Puesto = Aux
    'Validacion y Creacion del Puesto (junto con sus Complementos)
    If Puesto <> "N/A" Then
        If PueDesc Then
            Call ValidaEstructura(4, Puesto, nro_puesto, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(4, Puesto, nro_puesto, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(4, 0, nro_puesto, Puesto)
            Inserto_estr = False
        End If
    Else
        nro_puesto = 0
    End If

    'Puesto Contable
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Puesto Contable"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    PuestoContable = Aux
    'Validacion y Creacion del Puesto (junto con sus Complementos)
    If PuestoContable <> "N/A" Then
        If PuestoCDesc Then
            Call ValidaEstructura(48, PuestoContable, Nro_PuestoContable, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(48, PuestoContable, Nro_PuestoContable, Inserto_estr)
        End If
        If Inserto_estr Then
            Call CreaComplemento(48, 0, Nro_PuestoContable, PuestoContable)
            Inserto_estr = False
        End If
    Else
        Nro_PuestoContable = 0
    End If

    'Centro de Costo
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Centro de Costo"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    CCosto = Aux
    ' Validacion y Creacion del Centro de Costo
    If CCosto <> "N/A" Then
        If CCoDesc Then
            Call ValidaEstructura(5, CCosto, nro_ccosto, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(5, CCosto, nro_ccosto, Inserto_estr)
        End If
    Else
        nro_ccosto = 0
    End If

    'Gerencia
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Gerencia"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Gerencia = Aux
    ' Validacion y Creacion de la Gerencia
    If Gerencia <> "N/A" Then
        If GerDesc Then
            Call ValidaEstructura(6, Gerencia, nro_gerencia, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(6, Gerencia, nro_gerencia, Inserto_estr)
        End If
    Else
        nro_gerencia = 0
    End If

    
    'Departamento
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Departamento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Departamento = Aux
    ' Validacion y Creacion del Departamento
    If Departamento <> "N/A" Then
        If DepDesc Then
            Call ValidaEstructura(9, Departamento, nro_departamento, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(9, Departamento, nro_departamento, Inserto_estr)
        End If
    Else
        nro_departamento = 0
    End If

    'Direccion
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Direccion"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Direccion = Aux
    ' Validacion y Creacion de direccion
    If Direccion <> "N/A" Then
        If DirDesc Then
            Call ValidaEstructura(35, Direccion, nro_direccion, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(35, Direccion, nro_direccion, Inserto_estr)
        End If
    Else
        nro_direccion = 0
    End If
    
    
    'Caja de Jubilacion
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Caja de Jubilacion"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    CajaJub = Aux
    ' Validacion y Creacion de la Caja de Jubilacion
    If CajaJub <> "N/A" Then
        If CaJDesc Then
            Call ValidaEstructura(15, CajaJub, nro_cajajub, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(15, CajaJub, nro_cajajub, Inserto_estr)
        End If
        Call CreaTercero(6, CajaJub, ter_cajajub)
        
        If Inserto_estr Then
            Call CreaComplemento(15, ter_cajajub, nro_cajajub, CajaJub)
        End If
    Else
        nro_cajajub = 0
    End If

    'Sindicato
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Sindicato"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Sindicato = Aux
    ' Validacion y Creacion del Sindicato
    If Sindicato <> "N/A" Then
        If SinDesc Then
            Call ValidaEstructura(16, Sindicato, nro_sindicato, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(16, Sindicato, nro_sindicato, Inserto_estr)
        End If
        Call CreaTercero(5, Sindicato, ter_sindicato)
        
        If Inserto_estr Then
            Call CreaComplemento(16, ter_sindicato, nro_sindicato, Sindicato)
        End If
    Else
        nro_sindicato = 0
    End If
    
    
    'Obra social por Ley
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Obra social por Ley"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    OSocialLey = Aux
    ' Validacion y Creacion de la Obra Social por Ley
    If OSocialLey <> "N/A" Then
        If OSoLeyDesc Then
            Call ValidaEstructura(24, OSocialLey, nro_osocial_ley, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(24, OSocialLey, nro_osocial_ley, Inserto_estr)
        End If
        Call CreaTercero(4, OSocialLey, ter_osocial_ley)
        
        If Inserto_estr Then
            Call CreaComplemento(24, ter_osocial_ley, nro_osocial_ley, OSocialLey)
        Else
            StrSql = " SELECT origen FROM replica_estr WHERE estrnro = " & nro_osocial_ley
            OpenRecordset StrSql, rs_repl
            
            If Not rs_repl.EOF Then
                ter_osocial_ley = rs_repl!Origen
                rs_repl.Close
            End If
            
        End If
    Else
        nro_osocial_ley = 0
    End If


    'Plan de OS por Ley
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Plan de Obra social por Ley"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    PlanOSLey = Aux
    ' Validacion y Creacion del Plan de Obra Social por Ley
    If (PlanOSLey <> "N/A" And nro_osocial_ley <> 0) Then
        If PoSLeyDesc Then
            Call ValidaEstructura(25, PlanOSLey, nro_planos_ley, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(25, PlanOSLey, nro_planos_ley, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(25, ter_osocial_ley, nro_planos_ley, PlanOSLey)
            Inserto_estr = False
        End If
    Else
        nro_planos_ley = 0
    End If
    
    'OS Elegida
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Obra Social elegida"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    OSocialElegida = Aux
    ' Validacion y Creacion de la Obra Social Elegida
    If OSocialElegida <> "N/A" Then
        If OSoElegidaDesc Then
            Call ValidaEstructura(17, OSocialElegida, nro_osocial_elegida, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(17, OSocialElegida, nro_osocial_elegida, Inserto_estr)
        End If
        Call CreaTercero(4, OSocialElegida, ter_osocial_elegida)
        
        If Inserto_estr Then
            Call CreaComplemento(17, ter_osocial_elegida, nro_osocial_elegida, OSocialElegida)
        Else
            StrSql = " SELECT origen FROM replica_estr WHERE estrnro = " & nro_osocial_elegida
            OpenRecordset StrSql, rs_Sql
            ter_osocial_elegida = rs_Sql!Origen
            rs_Sql.Close
        End If
    Else
        nro_osocial_elegida = 0
    End If

    'Plan de OS Elegida
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Plan Obra Social elegida"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    PlanOSElegida = Aux
    ' Validacion y Creacion del Plan de Obra Social Elegida
    If (PlanOSElegida <> "N/A" And nro_osocial_elegida <> 0) Then
        If PoSElegidaDesc Then
            Call ValidaEstructura(23, PlanOSElegida, nro_planos_elegida, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(23, PlanOSElegida, nro_planos_elegida, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(23, ter_osocial_elegida, nro_planos_elegida, PlanOSElegida)
            Inserto_estr = False
        End If
    Else
        nro_planos_elegida = 0
    End If
    
    
    'Contrato
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Contrato"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Contrato = Aux
    ' Validacion y Creacion del Contrato
    If Contrato <> "N/A" Then
        If CotDesc Then
            Call ValidaEstructura(18, Contrato, nro_contrato, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(18, Contrato, nro_contrato, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(18, 0, nro_contrato, Contrato)
            Inserto_estr = False
        End If
    Else
        nro_contrato = 0
    End If
    
    'Fecha de fin de contrato
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Fecha de fin de contrato"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    FFinContrato = Aux
    If FFinContrato = "N/A" Or EsNulo(FFinContrato) Then
        Fecha_FinContrato = "Null"
    Else
        Fecha_FinContrato = ConvFecha(FFinContrato)
    End If
    
    'Lugar de pago
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Lugar de pago"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    LPago = Aux
    ' Validacion y Creacion del Lugar de Pago
    If LPago <> "N/A" Then
        If LPaDesc Then
            Call ValidaEstructura(20, LPago, nro_lpago, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(20, LPago, nro_lpago, Inserto_estr)
        End If
    Else
        nro_lpago = 0
    End If

    'Regimen Horario
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Regimen Horario"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    RegHorario = Aux
    If RegHorario <> "N/A" Then
        If RegDesc Then
            Call ValidaEstructura(21, RegHorario, nro_reghorario, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(21, RegHorario, nro_reghorario, Inserto_estr)
        End If
    Else
        nro_reghorario = 0
    End If

    'Forma de Liquidacion
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Forma de Liquidacion"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    FormaLiq = Aux
    If FormaLiq <> "N/A" Then
        If FLiDesc Then
            Call ValidaEstructura(22, FormaLiq, nro_formaliq, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(22, FormaLiq, nro_formaliq, Inserto_estr)
        End If
    Else
        nro_formaliq = 0
    End If

    'Forma de Pago
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Forma de Pago"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    FormaPago = Aux
    If FormaPago <> "N/A" Then
        StrSql = " SELECT fpagnro FROM formapago WHERE fpagdescabr = '" & FormaPago & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_formapago = rs_Sql!fpagnro
        Else
            StrSql = " INSERT INTO formapago(fpagdescabr,fpagbanc,acunro,monnro) VALUES ('" & FormaPago & "',0,6,1)"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            nro_formapago = getLastIdentity(objConn, "formapago")
        End If
    Else
        nro_formapago = 0
    End If
    
    'Banco de Pago
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Banco de Pago"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    BancoPago = Aux
    If BancoPago <> "N/A" Then
        If BcoDesc Then
            Call ValidaEstructura(41, BancoPago, nro_bancopago, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(41, BancoPago, nro_bancopago, Inserto_estr)
        End If
        Call CreaTercero(13, BancoPago, ter_bancopago)
        
        If Inserto_estr Then
            Call CreaComplemento(41, ter_bancopago, nro_bancopago, BancoPago)
        End If
        fpgo_bancaria = -1
    Else
        nro_bancopago = 0
        fpgo_bancaria = 0
    End If
    
    'Nro de cuenta
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Nro de cuenta"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    NroCuenta = Aux
    If NroCuenta = "N/A" Then
        NroCuenta = ""
    End If
    
    'CBU
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "CBU"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    NroCBU = Aux
    If NroCBU = "N/A" Then
        NroCBU = ""
    End If
    
    'Sucursal del banco
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Sucursal del banco"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    SucBanco = Aux
    If SucBanco = "N/A" Then
        SucBanco = ""
    End If


    'Nro de cuenta de acreditacion empresa
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Nro de cuenta de acreditacion empresa"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    NroCuentaAcreditacionE = Aux
    If NroCuentaAcreditacionE = "N/A" Or EsNulo(NroCuentaAcreditacionE) Then
        NroCuentaAcreditacionE = ""
    Else
        StrSql = "SELECT * FROM ctabancaria WHERE cbnro ='" & NroCuentaAcreditacionE & "'"
        If rs.State = adStateOpen Then rs.Close
        OpenRecordset StrSql, rs
        If rs.EOF Then
            Texto = ": " & " - Nro de cuenta de acreditacion empresa no existe."
            NroColumna = 59
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            NroCuentaAcreditacionE = ""
        End If
    End If
    
    'Actividad SIJP
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Actividad SIJP"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Actividad = Aux
    If Actividad <> "N/A" Then
        If ActDesc Then
            Call ValidaEstructura(29, Actividad, nro_actividad, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(29, Actividad, nro_actividad, Inserto_estr)
        End If
    Else
        nro_actividad = 0
    End If

    'Condicion SIJP
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Condicion SIJP"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    CondSIJP = Aux
    If CondSIJP <> "N/A" And Not EsNulo(CondSIJP) Then
        If CSJDesc Then
            Call ValidaEstructura(31, CondSIJP, nro_condsijp, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(31, CondSIJP, nro_condsijp, Inserto_estr)
        End If
    Else
        nro_condsijp = 0
    End If

    'Situacion de Revista SIJP
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Situacion de Revista SIJP"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    SitRev = Aux
    If SitRev <> "N/A" And Not EsNulo(SitRev) Then
        If SReDesc Then
            Call ValidaEstructura(30, SitRev, nro_sitrev, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(30, SitRev, nro_sitrev, Inserto_estr)
        End If
    Else
        nro_sitrev = 0
    End If
    
    
    'ART
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "ART"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    ART = Aux
    If ART <> "N/A" And Not EsNulo(ART) Then
        If ARTDesc Then
            Call ValidaEstructura(40, ART, nro_art, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(40, ART, nro_art, Inserto_estr)
        End If
        Call CreaTercero(8, ART, ter_art)
        
        If Inserto_estr Then
            Call CreaComplemento(40, ter_art, nro_art, ART)
        End If
    Else
        nro_art = 0
    End If
    
    'Estado del empleado
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Estado del empleado"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Estado = Aux
    If UCase(Estado) = "ACTIVO" Then
        ter_estado = -1
    Else
        ter_estado = 0
    End If
    
    'Causa de baja
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Causa de baja"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    CausaBaja = Aux
    If Not EsNulo(CausaBaja) And CausaBaja <> "N/A" Then
        StrSql = " SELECT caunro FROM causa WHERE caudes = '" & CausaBaja & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_causabaja = rs_Sql!caunro
        Else
            StrSql = " INSERT INTO causa(caudes,causist,caudesvin,empnro) VALUES ('" & CausaBaja & "',0,-1,1)"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            nro_causabaja = getLastIdentity(objConn, "causa")
        End If
    Else
        nro_causabaja = 0
    End If
    
    'Fecha de baja
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Fecha de baja"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    FBaja = Aux
    If EsNulo(FBaja) Or FBaja = "N/A" Then
        F_Baja = "Null"
    Else
        F_Baja = ConvFecha(FBaja)
    End If
    
    'Empresa
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Empresa"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    If pos2 > 0 Then
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        End If
        Empresa = Aux
    Else
        pos2 = Len(strReg)
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        End If
        Empresa = Aux
    End If
    If Empresa <> "N/A" Or EsNulo(Empresa) Then
        If EmpDesc Then
            Call ValidaEstructura(10, Empresa, nro_empresa, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(10, Empresa, nro_empresa, Inserto_estr)
        End If
        Call CreaTercero(10, Empresa, Ter_Empresa)
        
        If Inserto_estr Then
            Call CreaComplemento(10, Ter_Empresa, nro_empresa, Empresa)
        End If
    Else
        nro_empresa = 0
    End If
    
    'Remuneración del Empleado
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Remuneración del Empleado"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Empremu = Aux
    If Empremu = "N/A" Or EsNulo(Empremu) Then
        Empremu = "Null"
    End If
   
    'Subcategoria
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Remuneración del Empleado"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Exit Sub
    End If
    Subcategoria = Aux
    If Subcategoria <> "N/A" Then
        If SubCatDesc Then
            Call ValidaEstructura(44, Subcategoria, Nro_Subcategoria, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(44, Subcategoria, Nro_Subcategoria, Inserto_estr)
        End If
        If Inserto_estr Then
            Call CreaComplemento(44, 0, Nro_Subcategoria, Subcategoria)
            Inserto_estr = False
        End If
    Else
        Nro_Subcategoria = 0
    End If
   
    'Modelo de Organizacion
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Modelo de Organizacion"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    If pos2 > 0 Then
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        End If
        ModOrg = Aux
        'desde aca
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            RegError = RegError + 1
            Exit Sub
        End If
        ModOrg = Aux
        If ModOrg = "N/A" Or EsNulo(ModOrg) Then
            'agrego codigo sebastian stremel 15/09/2011
            StrSql = "SELECT * FROM adptemplate WHERE tplatedefault = -1"
            OpenRecordset StrSql, rs_tpl
            If Not rs_tpl.EOF Then
                nro_ModOrg = rs_tpl!tplatenro
            Else
                StrSql = "SELECT top 1 * FROM adptemplate"
                OpenRecordset StrSql, rs_tpl
                If rs_tpl.EOF Then
                    Texto = ": no hay modelos de organizacion"
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                    RegError = RegError + 1
                    Exit Sub
                Else
                    nro_ModOrg = rs_tpl!tplatenro
                End If
                
            End If
            
           
        Else
            StrSql = "SELECT * FROM adptemplate WHERE tplatedesabr = '" & ModOrg & "'"
            OpenRecordset StrSql, rs_tpl
            If rs_tpl.EOF Then
                StrSql = "INSERT INTO adptemplate (tplatedesabr,tplatedefault) VALUES ('" & ModOrg & "',-1)"
                objConn.Execute StrSql, , adExecuteNoRecords
                nro_ModOrg = getLastIdentity(objConn, "adptemplate")
            Else
                nro_ModOrg = rs_tpl!tplatenro
            End If
        End If
    Else
            StrSql = "SELECT * FROM adptemplate WHERE tplatedefault = -1"
            OpenRecordset StrSql, rs_tpl
            If Not rs_tpl.EOF Then
                nro_ModOrg = rs_tpl!tplatenro
            Else
                StrSql = "SELECT top 1 * FROM adptemplate"
                OpenRecordset StrSql, rs_tpl
                If rs_tpl.EOF Then
                    Texto = ": no hay modelos de organizacion"
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                    RegError = RegError + 1
                    Exit Sub
                Else
                    nro_ModOrg = rs_tpl!tplatenro
                End If
                
            End If

    End If
        
'        'hasta aca
'        If ModOrg = "N/A" Or EsNulo(ModOrg) Then
'            nro_ModOrg = 0
'        Else
'            StrSql = "SELECT * FROM adptemplate WHERE tplatedesabr = '" & ModOrg & "'"
'            OpenRecordset StrSql, rs_tpl
'            If rs_tpl.EOF Then
'                StrSql = "INSERT INTO adptemplate (tplatedesabr,tplatedefault) VALUES ('" & ModOrg & "',-1)"
'                objConn.Execute StrSql, , adExecuteNoRecords
'                nro_ModOrg = getLastIdentity(objConn, "adptemplate")
'            Else
'                nro_ModOrg = rs_tpl!tplatenro
'           End If
'        End If
'    Else
'        nro_ModOrg = 0
'    End If
'---------------------------------------------------------------------------------------------
    'Reporta_a  campo empleado.empreporta va el tercero
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Reporta_a"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    If pos2 > 0 Then
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        End If
        Reporta_a = Aux
        If Not EsNulo(Reporta_a) And Reporta_a <> "N/A" Then
            If IsNumeric(Reporta_a) Then
                StrSql = "SELECT * FROM empleado WHERE empleado.empleg = " & Reporta_a
                If rs_emp.State = adStateOpen Then rs_emp.Close
                OpenRecordset StrSql, rs_emp
                If (Not rs_emp.EOF) Then
                    Nro_Reporta_a = rs_emp!Ternro
                Else
                    Nro_Reporta_a = 0
                    Texto = ": " & "El Empleado " & Reporta_a & " no existe."
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                End If
            Else
                Nro_Reporta_a = 0
                Texto = "El valor no es numérico."
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            End If
        End If
    Else
        Nro_Reporta_a = 0
        'no es obligatorio
    End If
    If rs_emp.State = adStateOpen Then rs_emp.Close
    

    'Grupo de Seguridad
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Grupo de Seguridad"
    pos1 = pos2 + 2
    pos2 = Len(strReg) 'InStr(pos1, strReg, Separador) - 1
    If pos2 > 0 Then
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        End If
        GrupoSeguridad = Aux
        If GrupoSeguridad <> "N/A" And Not EsNulo(GrupoSeguridad) Then
            Call ValidaEstructura(7, GrupoSeguridad, Nro_GrupoSeguridad, Inserto_estr)
        Else
            Nro_GrupoSeguridad = 0
        End If
    Else
        Nro_GrupoSeguridad = 0
    End If
'Fin lectura de campos
' =====================================================================================================


  ' Inserto el Tercero
  If F_Nacimiento = "Null" Then
    F_Nacimiento = "''"
  End If
  If F_Ingreso = "Null" Then
    F_Ingreso = "''"
  End If
  
  If CalculaLegajo Then
    Call CalcularLegajo(nro_empresa, Legajo)
  End If

    If Not ExisteLeg Then
        StrSql = " INSERT INTO tercero(ternom,terape,terfecnac,tersex,terestciv,estcivnro,nacionalnro,paisnro,terfecing)"
        StrSql = StrSql & " VALUES('" & nombre & "','" & Apellido & "'," & F_Nacimiento & "," & ter_sexo & "," & nro_estcivil & "," & nro_estcivil & ","
        If nro_nacionalidad <> 0 Then
            StrSql = StrSql & nro_nacionalidad & ","
        Else
            StrSql = StrSql & "null,"
        End If
        If nro_paisnac <> 0 Then
            StrSql = StrSql & nro_paisnac & ","
        Else
            StrSql = StrSql & "null,"
        End If
        StrSql = StrSql & F_Ingreso & ")"
        objConn.Execute StrSql, , adExecuteNoRecords

        NroTercero = getLastIdentity(objConn, "tercero")
        
        Texto = ": " & "Codigo de Tercero = " & NroTercero
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    Else
        StrSql = " UPDATE tercero SET "
        StrSql = StrSql & " ternom = " & "'" & nombre & "'"
        StrSql = StrSql & ", terape = " & "'" & Apellido & "'"
        StrSql = StrSql & ", terfecnac = " & F_Nacimiento
        StrSql = StrSql & ", tersex = " & ter_sexo
        StrSql = StrSql & ", terestciv =" & nro_estcivil
        StrSql = StrSql & ", estcivnro =" & "'" & nro_estcivil & "'"
        If nro_nacionalidad <> 0 Then
            StrSql = StrSql & ", nacionalnro =" & nro_nacionalidad
        End If
        StrSql = StrSql & ", terfecing =" & F_Ingreso
        If nro_paisnac <> 0 Then
            StrSql = StrSql & ", paisnro =" & nro_paisnac
        End If
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        objConn.Execute StrSql, , adExecuteNoRecords
      
        Texto = ": " & " - Empleado: " & Legajo & " - Ese Empleado ya existe en la base. Datos de tercero actualizados"
        NroColumna = 1
        Call Escribir_Log("flogp", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    
    If Not ExisteLeg Then
        StrSql = " INSERT INTO empleado(empleg,empfecalta,empfecbaja,empest,empfaltagr,empfbajaprev,"
        StrSql = StrSql & "ternro,nivnro,empestudia,terape,ternom,empinterno,empemail,"
        StrSql = StrSql & "empnro,tplatenro,empremu"
        If Nro_Reporta_a <> 0 Then
            StrSql = StrSql & ",empreporta"
        End If
        StrSql = StrSql & ") VALUES("
        StrSql = StrSql & Legajo & "," & F_Alta & "," & F_Baja & "," & ter_estado & "," & F_Alta & "," & Fecha_FinContrato & ","
        StrSql = StrSql & NroTercero & "," & nro_nivest & "," & ter_estudio & ",'" & Apellido & "','"
        StrSql = StrSql & nombre & "',Null,'" & Email & "',1," & nro_ModOrg & "," & Empremu
        If Nro_Reporta_a <> 0 Then
            StrSql = StrSql & "," & Nro_Reporta_a
        End If
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Texto = ": " & "Empleado insertado - " & Legajo & " - " & Apellido & " - " & nombre
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    Else
        StrSql = " UPDATE empleado SET "
        StrSql = StrSql & " empleg = " & Legajo
        StrSql = StrSql & " ,empfecalta = " & F_Alta
        StrSql = StrSql & " ,empfecbaja = " & F_Baja
        StrSql = StrSql & " ,empfbajaprev = " & Fecha_FinContrato
        StrSql = StrSql & " ,empest = " & ter_estado
        StrSql = StrSql & " ,empfaltagr = " & F_Alta
        StrSql = StrSql & " ,nivnro = " & nro_nivest
        StrSql = StrSql & " ,empestudia = " & ter_estudio
        StrSql = StrSql & " ,terape = " & "'" & Apellido & "'"
        StrSql = StrSql & " ,ternom = " & "'" & nombre & "'"
        StrSql = StrSql & " ,empemail = " & "'" & Email & "'"
        StrSql = StrSql & " ,empnro = 1 "
        StrSql = StrSql & " ,tplatenro =" & nro_ModOrg
        StrSql = StrSql & " ,Empremu =" & Empremu
        If Nro_Reporta_a <> 0 Then
            StrSql = StrSql & ", empreporta =" & Nro_Reporta_a
        End If
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        objConn.Execute StrSql, , adExecuteNoRecords
    
        Texto = ": " & "Empleado Actualizado - " & Legajo & " - " & Apellido & " - " & nombre
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    End If
    
    ' Inserto el Registro correspondiente en ter_tip
    If Not ExisteLeg Then
        StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & NroTercero & ",1)"
        objConn.Execute StrSql, , adExecuteNoRecords
    End If

' Inserto los Documentos
    If Not ExisteLeg Then
        If Nro_TDocumento <> 0 Then
            StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
            StrSql = StrSql & " VALUES(" & NroTercero & "," & Nro_TDocumento & ",'" & Ndocu & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            Texto = ": " & "Inserte el Documento - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
        End If
    Else
        If Nro_TDocumento <> 0 Then
            StrSql = "SELECT * FROM ter_doc WHERE ternro = " & NroTercero
            StrSql = StrSql & " AND tidnro = " & Nro_TDocumento
            If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
            If rs.EOF Then
                StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
                StrSql = StrSql & " VALUES(" & NroTercero & "," & Nro_TDocumento & ",'" & Ndocu & "')"
                objConn.Execute StrSql, , adExecuteNoRecords
                
                Texto = ": " & "Inserte el Documento - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
            Else
                StrSql = " UPDATE ter_doc SET "
                StrSql = StrSql & " nrodoc = '" & Ndocu & "'"
                StrSql = StrSql & " WHERE ternro = " & NroTercero
                StrSql = StrSql & " AND tidnro = " & Nro_TDocumento
                objConn.Execute StrSql, , adExecuteNoRecords
                
                Texto = Texto = ": " & "Documento actualizado - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
            End If
        End If
    End If
  
    If Not ExisteLeg Then
        If Cuil <> "" Then
            StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
            StrSql = StrSql & " VALUES(" & NroTercero & ",10,'" & Cuil & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            Texto = ": " & "Inserte el CUIL - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
        End If
    Else
        If Cuil <> "" Then
            StrSql = "SELECT * FROM ter_doc WHERE ternro = " & NroTercero
            StrSql = StrSql & " AND tidnro = 10 "
            If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
            If rs.EOF Then
                StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
                StrSql = StrSql & " VALUES(" & NroTercero & ",10,'" & Cuil & "')"
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = ": " & "Inserte el CUIL - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
            Else
                StrSql = " UPDATE ter_doc SET "
                StrSql = StrSql & " nrodoc = '" & Cuil & "'"
                StrSql = StrSql & " WHERE ternro = " & NroTercero
                StrSql = StrSql & " AND tidnro = 10"
                objConn.Execute StrSql, , adExecuteNoRecords
                
                Texto = Texto = ": " & "CUIL actualizado - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
            End If
        End If
    End If

' Inserto el Domicilio
  If rs.State = adStateOpen Then
    rs.Close
  End If
  
  If Not ExisteLeg Then
    If (Nro_Localidad <> 0 And Nro_Provincia <> 0 And Nro_Pais <> 0) Then
        StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
        StrSql = StrSql & " VALUES(1," & NroTercero & ",-1,2)"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        NroDom = getLastIdentity(objConn, "cabdom")
      
        StrSql = " INSERT INTO detdom(domnro,calle,nro,piso,oficdepto,torre,manzana,codigopostal,entrecalles,"
        StrSql = StrSql & "locnro,provnro,paisnro,barrio,partnro,zonanro) "
        StrSql = StrSql & " VALUES (" & NroDom & ",'" & Calle & "','" & Nro_Nrodom & "','" & Piso & "','"
        StrSql = StrSql & Depto & "','" & Torre & "','" & Manzana & "','" & Cpostal & "','" & Entre & "'," & Nro_Localidad & ","
        StrSql = StrSql & Nro_Provincia & "," & Nro_Pais & ",'" & Barrio & "'," & Nro_Partido & "," & Nro_Zona & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
      
        Texto = ": " & "Inserte el Domicilio - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
        
        If Telefono <> "" Then
            'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
            StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
            StrSql = StrSql & " VALUES(" & NroDom & ",'" & Telefono & "',0,-1,0,1)"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            Texto = ": " & "Inserte el Telefono Principal - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
        End If
        If TelLaboral <> "" Then
            StrSql = "SELECT * FROM telefono "
            StrSql = StrSql & " WHERE domnro =" & NroDom
            StrSql = StrSql & " AND telnro ='" & TelLaboral & "'"
            If rs_Tel.State = adStateOpen Then rs_Tel.Close
            OpenRecordset StrSql, rs_Tel
            If rs_Tel.EOF Then
                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
                StrSql = StrSql & " VALUES(" & NroDom & ",'" & TelLaboral & "',0,0,0,3)"
                'le puse tipo 3 porque ne base 0 no existe el tipo de telefono laboral, se deberia agregar un tipo 4 en base 0 y luego modificar esto
                objConn.Execute StrSql, , adExecuteNoRecords
                  
                Texto = ": " & "Inserte el Telefono Laboral - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
            End If
        End If
        If TelCelular <> "" Then
            StrSql = "SELECT * FROM telefono "
            StrSql = StrSql & " WHERE domnro =" & NroDom
            StrSql = StrSql & " AND telnro ='" & TelCelular & "'"
            If rs_Tel.State = adStateOpen Then rs_Tel.Close
            OpenRecordset StrSql, rs_Tel
            If rs_Tel.EOF Then
                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
                StrSql = StrSql & " VALUES(" & NroDom & ",'" & TelCelular & "',0,0,-1,2)"
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = ": " & "Inserte el Telefono Celular - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
            End If
        End If
    End If
  Else
    If (Nro_Localidad <> 0 And Nro_Provincia <> 0 And Nro_Pais <> 0) Then
        StrSql = "SELECT * FROM cabdom  "
        StrSql = StrSql & " WHERE tipnro = 1"
        StrSql = StrSql & " AND ternro = " & NroTercero
        StrSql = StrSql & " AND domdefault = -1"
        StrSql = StrSql & " AND tidonro = 2"
        If rs.State = adStateOpen Then rs.Close
        OpenRecordset StrSql, rs
        If rs.EOF Then
          StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
          StrSql = StrSql & " VALUES(1," & NroTercero & ",-1,2)"
          objConn.Execute StrSql, , adExecuteNoRecords
          
          NroDom = getLastIdentity(objConn, "cabdom")
        
          StrSql = " INSERT INTO detdom(domnro,calle,nro,piso,oficdepto,torre,manzana,codigopostal,entrecalles,"
          StrSql = StrSql & "locnro,provnro,paisnro,barrio,partnro,zonanro) "
          StrSql = StrSql & " VALUES (" & NroDom & ",'" & Calle & "','" & Nro_Nrodom & "','" & Piso & "','"
          StrSql = StrSql & Depto & "','" & Torre & "','" & Manzana & "','" & Cpostal & "','" & Entre & "'," & Nro_Localidad & ","
          StrSql = StrSql & Nro_Provincia & "," & Nro_Pais & ",'" & Barrio & "'," & Nro_Partido & "," & Nro_Zona & ")"
          objConn.Execute StrSql, , adExecuteNoRecords
        
          Texto = ": " & "Inserte el Domicilio - "
          Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
          
          If Telefono <> "" Then
              'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
              StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
              StrSql = StrSql & " VALUES(" & NroDom & ",'" & Telefono & "',0,-1,0,1)"
              objConn.Execute StrSql, , adExecuteNoRecords

              Texto = ": " & "Inserte el Telefono Principal - "
              Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
          End If
          If TelLaboral <> "" Then
              StrSql = "SELECT * FROM telefono "
              StrSql = StrSql & " WHERE domnro =" & NroDom
              StrSql = StrSql & " AND telnro ='" & TelLaboral & "'"
              If rs_Tel.State = adStateOpen Then rs_Tel.Close
              OpenRecordset StrSql, rs_Tel
              If rs_Tel.EOF Then
                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                  StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
                  StrSql = StrSql & " VALUES(" & NroDom & ",'" & TelLaboral & "',0,0,0,3)"
                  objConn.Execute StrSql, , adExecuteNoRecords
                    
                  Texto = ": " & "Inserte el Telefono Laboral - "
                  Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
              End If
          End If
          If TelCelular <> "" Then
              StrSql = "SELECT * FROM telefono "
              StrSql = StrSql & " WHERE domnro =" & NroDom
              StrSql = StrSql & " AND telnro ='" & TelCelular & "'"
              If rs_Tel.State = adStateOpen Then rs_Tel.Close
              OpenRecordset StrSql, rs_Tel
              If rs_Tel.EOF Then
                  StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
                  StrSql = StrSql & " VALUES(" & NroDom & ",'" & TelCelular & "',0,0,-1,2)"
                  objConn.Execute StrSql, , adExecuteNoRecords
                  Texto = ": " & "Inserte el Telefono Celular - "
                  Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
              End If
          End If
        Else
            StrSql = " UPDATE detdom SET "
            StrSql = StrSql & " calle =" & "'" & Calle & "'"
            StrSql = StrSql & ",nro =" & "'" & Nro_Nrodom & "'"
            StrSql = StrSql & ",piso =" & "'" & Piso & "'"
            StrSql = StrSql & ",oficdepto =" & "'" & Depto & "'"
            StrSql = StrSql & ",torre =" & "'" & Torre & "'"
            StrSql = StrSql & ",manzana =" & "'" & Manzana & "'"
            StrSql = StrSql & ",codigopostal =" & "'" & Cpostal & "'"
            StrSql = StrSql & ",entrecalles =" & "'" & Entre & "'"
            StrSql = StrSql & ",locnro =" & Nro_Localidad
            StrSql = StrSql & ",provnro =" & Nro_Provincia
            StrSql = StrSql & ",paisnro =" & Nro_Pais
            StrSql = StrSql & ", partnro = " & Nro_Partido
            StrSql = StrSql & ", zonanro =" & Nro_Zona
            StrSql = StrSql & " WHERE domnro = " & rs!domnro
            objConn.Execute StrSql, , adExecuteNoRecords
        
            Texto = ": " & "Domicilio Actualizado - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
        
            If Telefono <> "" Then
                StrSql = "SELECT * FROM telefono "
                StrSql = StrSql & " WHERE domnro =" & rs!domnro
                StrSql = StrSql & " AND telnro ='" & Telefono & "'"
                If rs_Tel.State = adStateOpen Then rs_Tel.Close
                OpenRecordset StrSql, rs_Tel
                If rs_Tel.EOF Then
                    'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                    StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
                    StrSql = StrSql & " VALUES(" & rs!domnro & ",'" & Telefono & "',0,-1,0,1)"
                    objConn.Execute StrSql, , adExecuteNoRecords
                      
                    Texto = ": " & "Inserte el Telefono Principal - "
                    Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
                End If
            End If
            If TelLaboral <> "" Then
                StrSql = "SELECT * FROM telefono "
                StrSql = StrSql & " WHERE domnro =" & rs!domnro
                StrSql = StrSql & " AND telnro ='" & TelLaboral & "'"
                If rs_Tel.State = adStateOpen Then rs_Tel.Close
                OpenRecordset StrSql, rs_Tel
                If rs_Tel.EOF Then
                    'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                    StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
                    StrSql = StrSql & " VALUES(" & rs!domnro & ",'" & TelLaboral & "',0,0,0,3)"
                    objConn.Execute StrSql, , adExecuteNoRecords
                      
                    Texto = ": " & "Inserte el Telefono Laboral - "
                    Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
                End If
            End If
            If TelCelular <> "" Then
                StrSql = "SELECT * FROM telefono "
                StrSql = StrSql & " WHERE domnro =" & rs!domnro
                StrSql = StrSql & " AND telnro ='" & TelCelular & "'"
                If rs_Tel.State = adStateOpen Then rs_Tel.Close
                OpenRecordset StrSql, rs_Tel
                If rs_Tel.EOF Then
                    'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                    StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
                    StrSql = StrSql & " VALUES(" & rs!domnro & ",'" & TelCelular & "',0,0,-1,2)"
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = ": " & "Inserte el Telefono Celular - "
                    Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
                End If
            End If
        End If
    End If
  End If
  
  If Not ExisteLeg Then
    ' Inserto las Fases
    StrSql = " INSERT INTO fases(empleado,altfec,bajfec,caunro,estado,sueldo,vacaciones,indemnizacion,real,fasrecofec)"
    StrSql = StrSql & " VALUES( " & NroTercero & "," & F_Alta & "," & F_Baja & ","
    If nro_causabaja <> 0 Then
      StrSql = StrSql & nro_causabaja
    Else
      StrSql = StrSql & "null"
    End If
    StrSql = StrSql & "," & ter_estado & ",-1,-1,-1,-1,-1)"
    objConn.Execute StrSql, , adExecuteNoRecords
    
  Else
    StrSql = "SELECT * FROM fases WHERE estado = -1 AND sueldo = -1 AND vacaciones = -1 AND indemnizacion = -1 AND real = -1 AND empleado = " & NroTercero
    OpenRecordset StrSql, rs
    If rs.EOF Then
        StrSql = " INSERT INTO fases(empleado,altfec,bajfec,caunro,estado,sueldo,vacaciones,indemnizacion,real,fasrecofec)"
        StrSql = StrSql & " VALUES( " & NroTercero & "," & F_Alta & "," & F_Baja & ","
        If nro_causabaja <> 0 Then
          StrSql = StrSql & nro_causabaja
        Else
          StrSql = StrSql & "null"
        End If
        StrSql = StrSql & "," & ter_estado & ",-1,-1,-1,-1,-1)"
        objConn.Execute StrSql, , adExecuteNoRecords
    Else
        StrSql = " UPDATE fases SET "
        StrSql = StrSql & " altfec =" & F_Alta
        StrSql = StrSql & ",bajfec =" & F_Baja
        StrSql = StrSql & " WHERE fasnro = " & rs!fasnro
        objConn.Execute StrSql, , adExecuteNoRecords
    
        Texto = ": " & "Fase Actualizada - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
    End If
  End If
  
  'Inserto la cuenta bancaria
    If Not ExisteLeg Then
        If (nro_formapago <> 0 And nro_bancopago <> 0 And NroCuenta <> "") Then
                StrSql = " INSERT INTO ctabancaria (ternro,fpagnro,banco,ctabestado,"
                StrSql = StrSql & "ctabsuc,ctabnro,ctabporc,ctabcbu"
                If Not EsNulo(NroCuentaAcreditacionE) Then
                    StrSql = StrSql & ",ctabacred"
                End If
                StrSql = StrSql & ") VALUES ("
                StrSql = StrSql & NroTercero & "," & nro_formapago & "," & ter_bancopago & ","
                StrSql = StrSql & "-1,'" & SucBanco & "','" & NroCuenta & "',100,'" & NroCBU & "'"
                If Not EsNulo(NroCuentaAcreditacionE) Then
                    StrSql = StrSql & ",'" & NroCuentaAcreditacionE & "'"
                End If
                StrSql = StrSql & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = ": " & "Inserte la Cuenta Bancaria - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        End If
    Else
        If (nro_formapago <> 0 And nro_bancopago <> 0 And NroCuenta <> "") Then
            StrSql = "SELECT * FROM ctabancaria"
            StrSql = StrSql & " WHERE ctabancaria.ternro =" & NroTercero
            StrSql = StrSql & " AND ctabestado = -1 "
            StrSql = StrSql & " AND banco =" & nro_bancopago
            StrSql = StrSql & " AND fpagnro =" & nro_formapago
            If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
            If rs.EOF Then
                StrSql = " INSERT INTO ctabancaria (ternro,fpagnro,banco,ctabestado,"
                StrSql = StrSql & "ctabsuc,ctabnro,ctabporc,ctabcbu"
                If Not EsNulo(NroCuentaAcreditacionE) Then
                    StrSql = StrSql & ",ctabacred"
                End If
                StrSql = StrSql & ") VALUES ("
                StrSql = StrSql & NroTercero & "," & nro_formapago & "," & ter_bancopago & ","
                StrSql = StrSql & "-1,'" & SucBanco & "','" & NroCuenta & "',100,'" & NroCBU & "'"
                If Not EsNulo(NroCuentaAcreditacionE) Then
                    StrSql = StrSql & ",'" & NroCuentaAcreditacionE & "'"
                End If
                StrSql = StrSql & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = ": " & "Inserte la Cuenta Bancaria - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
            Else
                If rs!ctabnro = NroCuenta Then
                    StrSql = "UPDATE ctabancaria SET "
                    StrSql = StrSql & " ctabsuc = '" & SucBanco & "'"
                    'StrSql = StrSql & ", ctabacred = " & NroCuenta
                    StrSql = StrSql & ", ctabnro = " & "'" & NroCuenta & "'"
                    StrSql = StrSql & ", ctabporc = 100 "
                    StrSql = StrSql & ", ctabcbu = '" & NroCBU & "'"
                    StrSql = StrSql & " WHERE ctabancaria.ternro =" & NroTercero
                    StrSql = StrSql & " AND ctabestado = -1 "
                    StrSql = StrSql & " AND banco =" & nro_bancopago
                    StrSql = StrSql & " AND fpagnro =" & nro_formapago
                    objConn.Execute StrSql, , adExecuteNoRecords
                    
                    Texto = ": " & "Cuenta Bancaria actualizada- "
                    Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
                Else
                    'Desactivo la anterior
                    StrSql = " UPDATE ctabancaria SET "
                    StrSql = StrSql & " ctabestado = 0 "
                    StrSql = StrSql & " WHERE cbnro = " & rs!Cbnro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    
                    'inserto la nueva
                    StrSql = " INSERT INTO ctabancaria (ternro,fpagnro,banco,ctabestado,"
                    StrSql = StrSql & "ctabsuc,ctabnro,ctabporc,ctabcbu"
                    If Not EsNulo(NroCuentaAcreditacionE) Then
                        StrSql = StrSql & ",ctabacred"
                    End If
                    StrSql = StrSql & ") VALUES ("
                    StrSql = StrSql & NroTercero & "," & nro_formapago & "," & ter_bancopago & ","
                    StrSql = StrSql & "-1,'" & SucBanco & "','" & NroCuenta & "',100,'" & NroCBU & "'"
                    If Not EsNulo(NroCuentaAcreditacionE) Then
                        StrSql = StrSql & ",'" & NroCuentaAcreditacionE & "'"
                    End If
                    StrSql = StrSql & ")"
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = ": " & "Inserte la Cuenta Bancaria - "
                    Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
                End If
            End If
        End If
    End If
  
  'Inserto las Estructuras
  Call AsignarEstructura_NEW(1, nro_sucursal, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(2, nro_sector, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(3, nro_categoria, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(4, nro_puesto, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(5, nro_ccosto, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(6, nro_gerencia, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(7, Nro_GrupoSeguridad, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(9, nro_departamento, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(10, nro_empresa, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(15, nro_cajajub, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(16, nro_sindicato, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(17, nro_osocial_elegida, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(18, nro_contrato, NroTercero, F_Alta, F_Baja)
  'Call AsignarEstructura_NEW(18, nro_contrato, NroTercero, F_Alta, Fecha_FinContrato)
  Call AsignarEstructura_NEW(19, nro_convenio, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(20, nro_lpago, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(21, nro_reghorario, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(22, nro_formaliq, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(23, nro_planos_elegida, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(24, nro_osocial_ley, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(25, nro_planos_ley, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(29, nro_actividad, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(30, nro_sitrev, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(31, nro_condsijp, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(35, nro_direccion, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(40, nro_art, NroTercero, F_Alta, F_Baja)
  'Call AsignarEstructura_NEW(41, nro_bancopago, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(48, Nro_PuestoContable, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura_NEW(44, Nro_Subcategoria, NroTercero, F_Alta, F_Baja)
  
  
Texto = ": " & "Linea procesada correctamente "
Call Escribir_Log("flogp", LineaCarga, NroColumna, Texto, Tabs + 1, strReg)
OK = True
         
FinLinea:
If rs.State = adStateOpen Then
    rs.Close
End If
Exit Sub

SaltoLinea:
    Texto = ": " & " - Error:" & Err.Description
    NroColumna = 1
    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    'Resume Next
    MyRollbackTrans
    OK = False
    GoTo FinLinea
End Sub

Public Sub LineaModelo_300_old(ByVal strReg As String, ByRef OK As Boolean)
' ---------------------------------------------------------------------------------------------
' Descripcion: Migracion de Empleados para Teleperformance
' Autor      : FGZ
' Fecha      : 21/01/2005
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1            As Long
Dim pos2            As Long

Dim Legajo          As String   'LEGAJO                   -- empleado.empleg
Dim Apellido        As String   'APELLIDO                 -- empleado.terape y tercero.terape
Dim nombre          As String   'NOMBRE                   -- empleado.ternom y tercero.ternom
Dim Fnac            As String   'FNAC                     -- tercero.terfecna
Dim Nacionalidad    As String   'Nacionalidad             -- tercero.nacionalnro
Dim PaisNac         As String   'Pais de Nacimiento       -- tercero.paisnro
Dim Fing            As String   'Fec.Ingreso al Pais      -- terecro.terfecing
Dim EstCivil        As String   'Est.Civil                -- tercero.estcivnro
Dim Sexo            As String   'Sexo                     -- tercero.tersex
Dim FAlta           As String   'Fec. de Alta             -- empleado.empfaltagr y fases.altfec
Dim Estudio         As String   'Estudia                  -- empleado.empestudia
Dim NivEst          As String   'Nivel de Estudio         -- empleado.nivnro
Dim Tdocu           As String   'Tipo Documento           -- ter_dpc.tidnro (DU)
Dim Ndocu           As String   'Nro. Documento           -- ter_doc.nrodoc
Dim Cuil            As String   'CUIL                     -- ter_doc.nrodoc (10)
Dim Calle           As String   'Calle                    -- detdom.calle
Dim Nro             As String   'Número                   -- detdom.nro
Dim Piso            As String   'Piso                     -- detdom.piso
Dim Depto           As String   'Depto                    -- detdom.depto
Dim Torre           As String   'Torre                    -- detdom.torre
Dim Manzana         As String   'Manzana                  -- detdom.manzana
Dim Cpostal         As String   'Cpostal                  -- detdom.codigopostal
Dim Entre           As String   'Entre Calles             -- detdom.entrecalles
Dim Barrio          As String   'Barrio                   -- detdom.barrio
Dim Localidad       As String   'Localidad                -- detdom.locnro
Dim Partido         As String   'Partido                  -- detdom.partnro
Dim Zona            As String   'Zona                     -- detdom.zonanro
Dim Provincia       As String   'Provincia                -- detdom.provnro
Dim Pais            As String   'Pais                     -- detdom.paisnro
Dim Telefono        As String   'Telefono                 -- telefono.telnro
Dim TelLaboral        As String   'Telefono                 -- telefono.telnro
Dim TelCelular        As String   'Telefono                 -- telefono.telnro
Dim Email           As String   'E-mail                   -- empleado.empemail
Dim Sucursal        As String   'Sucursal                 -- his_estructura.estrnro
Dim Sector          As String   'Sector                   -- his_estructura.estrnro
Dim categoria       As String   'Categoria                -- his_estructura.estrnro
Dim Puesto          As String   'Puesto                   -- his_estructura.estrnro
Dim CCosto          As String   'C.Costo                  -- his_estructura.estrnro
Dim Gerencia        As String   'Gerencia                 -- his_estructura.estrnro
Dim Departamento    As String   'Departamento             -- his_estructura.estrnro
Dim Direccion       As String   'Direccion                -- his_estructura.estrnro
Dim CajaJub         As String   'Caja de Jubilacion       -- his_estructura.estrnro
Dim Sindicato       As String   'Sindicato                -- his_estructura.estrnro
Dim OSocialLey         As String   'Obra Social              -- his_estructura.estrnro
Dim PlanOSLey          As String   'Plan OS                  -- his_estructura.estrnro
Dim OSocialElegida         As String   'Obra Social              -- his_estructura.estrnro
Dim PlanOSElegida          As String   'Plan OS                  -- his_estructura.estrnro
Dim Contrato        As String   'Contrato                 -- his_estructura.estrnro
'Dim FechaFin_Contrato As Date
Dim FechaFin_Contrato As String
Dim Convenio        As String   'Convenio                 -- his_estructura.estrnro
Dim LPago           As String   'Lugar de Pago            -- his_estructura.estrnro
Dim RegHorario      As String   'Regimen Horario          -- his_estructura.estrnro
Dim FormaLiq        As String   'Forma de Liquidacion     -- his_estructura.estrnro
Dim FormaPago       As String   'Forma de Pago            -- formapago.fpagdescabr
Dim SucBanco        As String   'Sucursal del Banco       -- ctabancaria.ctabsuc
Dim BancoPago       As String   'Banco Pago               -- his_estructura.estrnro, formapago.fpagbanc (siempre y cuando el Banco sea <> 0) y ctabancaria.banco
Dim NroCuenta       As String   'Nro. Cuenta              -- ctabancario.ctabnro
Dim Actividad       As String   'Actividad                -- his_estructura.estrnro
Dim CondSIJP        As String   'Condicion SIJP           -- his_estructura.estrnro
Dim SitRev          As String   'Sit. de Revista SIJP     -- his_estructura.estrnro
Dim ModCont         As String   'Mod. de Contrat. SIJP    -- his_estructura.estrnro
Dim ART             As String   'ART                      -- his_estructura.estrnro
Dim Estado          As String   'Estado                   -- empleado.empest y fases.estado
Dim CausaBaja       As String   'Causa de Baja            -- fases.caunro
Dim FBaja           As String   'Fecha de Baja            -- fases.bajfec
Dim Empresa         As String   'Empresa                  -- his_estructura.estrnro
Dim ModOrg          As String   'Empresa                  -- his_estructura.estrnro
Dim OSL             As String   'Empresa                  -- his_estructura.estrnro
Dim OSE             As String   'Empresa                  -- his_estructura.estrnro
Dim PlanOdon        As String   'Empresa                  -- his_estructura.estrnro
Dim Locacion        As String   'Empresa                  -- his_estructura.estrnro
Dim Area            As String   'Empresa                  -- his_estructura.estrnro
Dim SubDepto        As String   'Empresa                  -- his_estructura.estrnro
Dim NroCBU          As String   'Empresa                  -- his_estructura.estrnro
Dim Empremu         As String   'Remuneración del empleado

Dim Ternro As Long

Dim NroTercero          As Long

Dim Nro_Legajo          As Long
Dim Nro_TDocumento      As Long
Dim nro_nivest          As Long
Dim nro_estudio         As Long

'Dim nro_nrodom          as long
Dim Nro_Nrodom          As String

Dim Nro_Barrio          As Long
Dim Nro_Localidad       As Long
Dim Nro_Partido         As Long
Dim Nro_Zona            As Long
Dim Nro_Provincia       As Long
Dim Nro_Pais            As Long
Dim nro_paisnac         As Long

Dim nro_sucursal        As Long
Dim nro_sector          As Long
Dim nro_categoria       As Long
Dim nro_puesto          As Long
Dim nro_ccosto          As Long
Dim nro_gerencia        As Long
Dim nro_cajajub         As Long
Dim nro_sindicato       As Long
Dim nro_osocial_ley     As Long
Dim nro_planos_ley      As Long
Dim nro_osocial_elegida As Long
Dim nro_planos_elegida  As Long
Dim nro_contrato        As Long
Dim nro_convenio        As Long
Dim nro_reghorario      As Long
Dim nro_formaliq        As Long
Dim nro_bancopago       As Long
Dim nro_actividad       As Long
Dim nro_sitrev          As Long
Dim nro_modcont         As Long
Dim nro_art             As Long
Dim nro_departamento    As Long
Dim nro_direccion       As Long
Dim nro_lpago           As Long
Dim nro_condsijp        As Long
Dim nro_formapago       As Long
Dim nro_causabaja       As Long
Dim nro_empresa         As Long
Dim NroDom              As Long
Dim nro_osl             As Long
Dim nro_odon            As Long
Dim nro_ose             As Long
Dim nro_locacion        As Long
Dim nro_area            As Long
Dim nro_SubDepto        As Long
Dim nro_empremu         As Long

Dim nro_estcivil        As Long
Dim nro_nacionalidad    As Long

Dim F_Nacimiento        As String
Dim F_Fallecimiento     As String
Dim F_Alta              As String
Dim F_Baja              As String
Dim F_Ingreso           As String

Dim Inserto_estr        As Boolean

Dim ter_sucursal        As Long
Dim Ter_Empresa         As Long
Dim ter_cajajub         As Long
Dim ter_sindicato       As Long
Dim ter_osocial_ley     As Long
Dim ter_osocial_elegida As Long
Dim ter_bancopago       As Long
Dim ter_art             As Long
Dim ter_sexo            As Long
Dim ter_estudio         As Long
Dim ter_estado          As Long

Dim fpgo_bancaria       As Long

Dim rs As New ADODB.Recordset
Dim rs_Sql As New ADODB.Recordset
Dim rs_Empleado As New ADODB.Recordset
Dim rs_Tel As New ADODB.Recordset
Dim rs_repl As New ADODB.Recordset


Dim SucDesc             As Boolean   'Sucursal                 -- his_estructura
Dim SecDesc             As Boolean   'Sector                   -- his_estructura
Dim CatDesc             As Boolean   'Categoria                -- his_estructura
Dim PueDesc             As Boolean   'Puesto                   -- his_estructura
Dim CCoDesc             As Boolean   'C.Costo                  -- his_estructura
Dim GerDesc             As Boolean   'Gerencia                 -- his_estructura
Dim DepDesc             As Boolean   'Departamento             -- his_estructura
Dim DirDesc             As Boolean   'Direccion                -- his_estructura
Dim CaJDesc             As Boolean   'Caja de Jubilacion       --
Dim SinDesc             As Boolean   'Sindicato                -- his_estructura
Dim OSoElegidaDesc             As Boolean   'Obra Social              -- his_estructura
Dim PoSElegidaDesc             As Boolean   'Plan OS                  -- his_estructura
Dim OSoLeyDesc             As Boolean   'Obra Social              -- his_estructura
Dim PoSLeyDesc             As Boolean   'Plan OS                  -- his_estructura
Dim CotDesc             As Boolean   'Contrato                 -- his_estructura
Dim CovDesc             As Boolean   'Convenio                 -- his_estructura
Dim LPaDesc             As Boolean   'Lugar de Pago            -- his_estructura
Dim RegDesc             As Boolean   'Regimen Horario          -- his_estructura
Dim FLiDesc             As Boolean   'Forma de Liquidacion     -- his_estructura
Dim FPaDesc             As Boolean      'Forma de Pago            -- his_estructura
Dim BcoDesc             As Boolean      'Banco Pago               --
Dim ActDesc             As Boolean      'Actividad                --
Dim CSJDesc             As Boolean      'Condicion SIJP           --
Dim SReDesc             As Boolean      'Sit. de Revista SIJP     --
Dim MCoDesc             As Boolean      'Mod. de Contrat. SIJP    --
Dim ARTDesc             As Boolean      'ART                      --
Dim SubCatDesc          As Boolean      ' Subcategoria
Dim PuestoCDesc         As Boolean      'Puesto contable
Dim EmpDesc             As Boolean      'Empresa                  --
Dim OSLDesc             As Boolean      'Empresa                  --
Dim POdoDesc             As Boolean     'Empresa                  --
Dim OSEDesc             As Boolean      'Empresa                  --
Dim LocDesc             As Boolean      'Empresa                  --
Dim AreaDesc             As Boolean     'Empresa                  --
Dim SubDepDesc             As Boolean   'Empresa                  --

Dim IngresoDom          As Boolean

Dim rs_tdoc As New ADODB.Recordset
Dim rs_emp  As New ADODB.Recordset
Dim rs_tpl  As New ADODB.Recordset
Dim rs_leg  As New ADODB.Recordset

Dim Nroadtemplate As Long

Dim Sigue As Boolean
Dim ExisteLeg As Boolean
Dim CalculaLegajo As Boolean
Dim Mensaje As String

'FGZ - 21/01/2005
Dim Subcategoria As String
Dim Nro_Subcategoria As Long
Dim Ter_Subcategoria As Long
Dim PuestoContable As String
Dim Nro_PuestoContable As Long
Dim Ter_PuestoContable As Long



    On Error GoTo SaltoLinea


    ' True indica que se hace por Descripcion. False por Codigo Externo

    SucDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SecDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CatDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    PueDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CCoDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    GerDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    DepDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    DirDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CaJDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SinDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    OSoElegidaDesc = True ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    PoSElegidaDesc = True ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    OSoLeyDesc = True   ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    PoSLeyDesc = True   ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CotDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CovDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    LPaDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    RegDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    FLiDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    FPaDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    BcoDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    ActDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    CSJDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SReDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    MCoDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    ARTDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SubCatDesc = True   ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    PuestoCDesc = True  ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    EmpDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    OSLDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    POdoDesc = True     ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    OSEDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    LocDesc = True      ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    AreaDesc = True     ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    SubDepDesc = True   ' Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    
    Sigue = True 'Indica que si en el archivo viene mas de una vez un empleado, le crea las fases
    ExisteLeg = False
    
    RegLeidos = RegLeidos + 1
    LineaCarga = LineaCarga + 1
    
    Flog.writeline "Numero de Linea = " & RegLeidos
    
    ' Recupero los Valores del Archivo
    
    pos1 = 1
    pos2 = InStr(pos1, strReg, separador) - 1
    Legajo = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If Legajo = "N/A" Or Legajo = "" Then
    
        CalculaLegajo = True
        
    Else
        StrSql = "SELECT * FROM empleado WHERE empleado.empleg = " & Legajo
        OpenRecordset StrSql, rs_emp
        If (Not rs_emp.EOF) Then
            If (Not Sigue) Then
                LineaError.writeline Mid(strReg, 1, Len(strReg))
                ErrCarga.writeline "Linea: " & LineaCarga & " - El Empleado ya Existe."
                OK = False
                Exit Sub
            Else
                NroTercero = rs_emp!Ternro
                ExisteLeg = True
            End If
        End If
    End If
    
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Apellido = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    nombre = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If (Apellido = "" Or Apellido = "N/A") And (nombre = "" Or nombre = "N/A") Then
        LineaError.writeline Mid(strReg, 1, Len(strReg))
        ErrCarga.writeline "Linea: " & LineaCarga & " - Debe Ingresar un Nombre y Apellido."
        OK = False
        Exit Sub
    End If
    
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Fnac = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If Fnac = "N/A" Then
       F_Nacimiento = "Null"
    Else
       F_Nacimiento = ConvFecha(Fnac)
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    PaisNac = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If PaisNac <> "N/A" Then
        StrSql = " SELECT paisnro FROM pais WHERE UPPER(paisdesc) = '" & UCase(PaisNac) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_paisnac = rs_Sql!Paisnro
        Else
            StrSql = " INSERT INTO pais(paisdesc,paisdef) VALUES ('" & UCase(PaisNac) & "',0)"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            nro_paisnac = getLastIdentity(objConn, "pais")
            
        End If
    Else
        nro_paisnac = 0
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Nacionalidad = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If Nacionalidad <> "N/A" Then
        StrSql = " SELECT nacionalnro FROM nacionalidad WHERE UPPER(nacionaldes) = '" & UCase(Nacionalidad) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_nacionalidad = rs_Sql!nacionalnro
        Else
            StrSql = " INSERT INTO nacionalidad(nacionaldes) VALUES ('" & UCase(Nacionalidad) & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            nro_nacionalidad = getLastIdentity(objConn, "nacionalidad")
            
        End If
    Else
        nro_nacionalidad = 0
    End If
    
    If nro_nacionalidad = 0 Then
        LineaError.writeline Mid(strReg, 1, Len(strReg))
        ErrCarga.writeline "Linea: " & LineaCarga & " - La Nacionalidad no Existe."
        OK = False
        Exit Sub
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Fing = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If (Fing = "N/A") Then
        F_Ingreso = "Null"
    Else
        F_Ingreso = ConvFecha(Fing)
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    EstCivil = Mid(strReg, pos1, pos2 - pos1 + 1)
    EstCivil = Mid(EstCivil, 1, 30)
    
    
    If EstCivil <> "N/A" Then
        StrSql = " SELECT estcivnro FROM estcivil WHERE UPPER(estcivdesabr) = '" & UCase(EstCivil) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_estcivil = rs_Sql!estcivnro
        Else
            StrSql = " INSERT INTO estcivil(estcivdesabr) VALUES ('" & UCase(EstCivil) & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            nro_estcivil = getLastIdentity(objConn, "estcivil")
            
        End If
    Else
        nro_estcivil = 0
    End If
    
    If nro_estcivil = 0 Then
        LineaError.writeline Mid(strReg, 1, Len(strReg))
        ErrCarga.writeline "Linea: " & LineaCarga & " - El Estado Civil no Existe."
        OK = False
        Exit Sub
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Sexo = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If (Sexo = "M") Or (Sexo = "Masculino") Or (Sexo = "-1") Or (Sexo = "MASCULINO") Then
        ter_sexo = -1
    Else
        ter_sexo = 0
    End If
                                                            
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    FAlta = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If FAlta = "N/A" Then
        F_Alta = "Null"
    Else
        F_Alta = ConvFecha(FAlta)
    End If
   
    If FAlta = "N/A" Then
        LineaError.writeline Mid(strReg, 1, Len(strReg))
        ErrCarga.writeline "Linea: " & LineaCarga & " - La Fecha de Alta es Obligatoria."
        OK = False
        Exit Sub
    End If
   
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Estudio = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If Estudio <> "N/A" Then
        If Estudio = "SI" Then
            ter_estudio = -1
        Else
            ter_estudio = 0
        End If
    Else
        ter_estudio = 0
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    NivEst = Mid(strReg, pos1, pos2 - pos1 + 1)
    NivEst = Mid(NivEst, 1, 40)
    
    If NivEst <> "N/A" Then
        StrSql = " SELECT nivnro FROM nivest WHERE UPPER(nivdesc) = '" & UCase(NivEst) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_nivest = rs_Sql!nivnro
        Else
            StrSql = " INSERT INTO nivest(nivdesc,nivsist,nivobligatorio,nivestfli) VALUES ('" & UCase(NivEst) & "',-1,0,-1)"
            objConn.Execute StrSql, , adExecuteNoRecords
            nro_nivest = getLastIdentity(objConn, "nivest")
        
        End If
    Else
        nro_nivest = 0
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Tdocu = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    Tdocu = Mid(Tdocu, 1, 8)
    
    If Tdocu <> "N/A" Then
        StrSql = " SELECT tidnro FROM tipodocu WHERE UPPER(tidsigla) = '" & UCase(Tdocu) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            Nro_TDocumento = rs_Sql!tidnro
        Else
            StrSql = " INSERT INTO tipodocu(tidnom,tidsigla,tidsist,instnro,tidunico) VALUES ('" & UCase(Tdocu) & "','" & UCase(Tdocu) & "',0,0,0)"
            objConn.Execute StrSql, , adExecuteNoRecords
            Nro_TDocumento = getLastIdentity(objConn, "tipodocu")
            
        End If
    Else
        Nro_TDocumento = 0
    End If
    
    If Nro_TDocumento = 0 Then
        LineaError.writeline Mid(strReg, 1, Len(strReg))
        ErrCarga.writeline "Linea: " & LineaCarga & " - El Tipo de Documento no Existe."
        OK = False
        Exit Sub
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Ndocu = Mid(strReg, pos1, pos2 - pos1 + 1)
    Ndocu = Mid(Ndocu, 1, 30)
    
    If Ndocu = "N/A" Then
        Ndocu = ""
    End If
    
    StrSql = "SELECT * FROM empleado "
    StrSql = StrSql & " INNER JOIN ter_doc ON ter_doc.ternro = empleado.ternro "
    StrSql = StrSql & " WHERE ter_doc.tidnro = " & Nro_TDocumento & " AND ter_doc.nrodoc = '" & Ndocu & "'"
    OpenRecordset StrSql, rs_tdoc
    
    If (Not rs_tdoc.EOF) Then
        If (Not Sigue) Then
            LineaError.writeline Mid(strReg, 1, Len(strReg))
            ErrCarga.writeline "Linea: " & LineaCarga & " - Ese Tipo y Numero de Documento estan Asignados a otro Empleado."
            OK = False
            Exit Sub
        Else
            NroTercero = rs_tdoc!Ternro
            ExisteLeg = True
            ErrCarga.writeline "Linea: " & LineaCarga & " - Empleado: " & Legajo & " - Ese Tipo y Numero de Documento estan Asignados a otro Empleado."
        End If
    End If
    
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Cuil = Mid(strReg, pos1, pos2 - pos1 + 1)
    Cuil = Mid(Cuil, 1, 30)
    
    If Cuil = "N/A" Then
        Cuil = Ndocu
        'CalcularCUIL (CUIL)
        If Cuil_Valido(Cuil, Mensaje) Then
            Flog.writeline Espacios(Tabulador * 1) & "CUIL no valido. Igualmente se insertó. Corregir "
            FlogE.writeline Espacios(Tabulador * 1) & "CUIL no valido. Igualmente se insertó. Corregir"
            InsertaError 15, 31
            HuboError = True
        End If
    End If
    
    ' Hasta Aqui los Datos Obligatorios del Empleado
    
    IngresoDom = True
        
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Calle = Mid(strReg, pos1, pos2 - pos1 + 1)
    Calle = Mid(Calle, 1, 250)
    
    If Calle = "N/A" Then
        Calle = ""
        IngresoDom = False
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Nro = Mid(strReg, pos1, pos2 - pos1 + 1)
    Nro = Mid(Nro, 1, 8)
    
    If (Nro <> "N/A") Then
        Nro_Nrodom = Nro
    Else
        Nro_Nrodom = 0
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Piso = Mid(strReg, pos1, pos2 - pos1 + 1)
    Piso = Mid(Piso, 1, 8)
    
    If Piso = "N/A" Then
        Piso = ""
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Depto = Mid(strReg, pos1, pos2 - pos1 + 1)
    Depto = Mid(Depto, 1, 8)

    If Depto = "N/A" Then
        Depto = ""
    End If

    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Torre = Mid(strReg, pos1, pos2 - pos1 + 1)
    Torre = Mid(Torre, 1, 8)
    
    If Torre = "N/A" Then
        Torre = ""
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Manzana = Mid(strReg, pos1, pos2 - pos1 + 1)
    Manzana = Mid(Manzana, 1, 8)
    
    If Manzana = "N/A" Then
        Manzana = ""
    End If

    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Cpostal = Mid(strReg, pos1, pos2 - pos1 + 1)
    Cpostal = Mid(Cpostal, 1, 12)

    If Cpostal = "N/A" Then
        Cpostal = ""
    End If

    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Entre = Mid(strReg, pos1, pos2 - pos1 + 1)
    Entre = Mid(Entre, 1, 80)

    If Entre = "N/A" Then
        Entre = ""
    End If

    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Barrio = Mid(strReg, pos1, pos2 - pos1 + 1)
    Barrio = Mid(Barrio, 1, 30)

    If Barrio = "N/A" Then
        Barrio = ""
    End If

    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Localidad = Mid(strReg, pos1, pos2 - pos1 + 1)
    Localidad = Mid(Localidad, 1, 60)
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Partido = Mid(strReg, pos1, pos2 - pos1 + 1)
    Partido = Mid(Partido, 1, 30)
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Zona = Mid(strReg, pos1, pos2 - pos1 + 1)
    Zona = Mid(Zona, 1, 60)
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Provincia = Mid(strReg, pos1, pos2 - pos1 + 1)
    Provincia = Mid(Provincia, 1, 20)
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Pais = Mid(strReg, pos1, pos2 - pos1 + 1)
    Pais = Mid(Pais, 1, 20)
    
    If Pais <> "N/A" Then
        Call ValidarPais(Pais, Nro_Pais)
    Else
        Nro_Pais = 0
    End If
    
    If Provincia <> "N/A" Then
        Call ValidarProvincia(Provincia, Nro_Provincia, Nro_Pais)
    Else
        Nro_Provincia = 0
    End If
    
    If Localidad <> "N/A" Then
        Call ValidarLocalidad(Localidad, Nro_Localidad, Nro_Pais, Nro_Provincia)
    Else
        Nro_Localidad = 0
    End If
    
    If Partido <> "N/A" Then
        Call ValidarPartido(Partido, Nro_Partido)
    Else
        Nro_Partido = 0
    End If
    
    If Zona <> "N/A" Then
        Call ValidarZona(Zona, Nro_Zona, Nro_Provincia)
    Else
        Nro_Zona = 0
    End If
    
    If (IngresoDom = True) And (Nro_Localidad = 0) Then
        LineaError.writeline Mid(strReg, 1, Len(strReg))
        ErrCarga.writeline "Linea: " & LineaCarga & " - Debe Ingresar la Localidad."
        OK = False
        Exit Sub
    End If
    
    If (IngresoDom = True) And (Nro_Provincia = 0) Then
        LineaError.writeline Mid(strReg, 1, Len(strReg))
        ErrCarga.writeline "Linea: " & LineaCarga & " - Debe Ingresar la Provincia."
        OK = False
        Exit Sub
    End If
    
    If (IngresoDom = True) And (Nro_Pais = 0) Then
        LineaError.writeline Mid(strReg, 1, Len(strReg))
        ErrCarga.writeline "Linea: " & LineaCarga & " - Debe Ingresar la Pais."
        OK = False
        Exit Sub
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Telefono = Mid(strReg, pos1, pos2 - pos1 + 1)
    Telefono = Mid(Telefono, 1, 20)
    
    If Telefono = "N/A" Then
        Telefono = ""
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    TelLaboral = Mid(strReg, pos1, pos2 - pos1 + 1)
    TelLaboral = Mid(TelLaboral, 1, 20)
    
    If TelLaboral = "N/A" Then
        TelLaboral = ""
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    TelCelular = Mid(strReg, pos1, pos2 - pos1 + 1)
    TelCelular = Mid(TelCelular, 1, 20)
    
    If TelCelular = "N/A" Then
        TelCelular = ""
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Email = Mid(strReg, pos1, pos2 - pos1 + 1)
    Email = Mid(Email, 1, 100)

    If Email = "N/A" Then
        Email = ""
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Sucursal = Mid(strReg, pos1, pos2 - pos1 + 1)

    ' Validacion y Creacion de la Sucursal (junto con sus Complementos)

    If Sucursal <> "N/A" Then
        If SucDesc Then
            Call ValidaEstructura(1, Sucursal, nro_sucursal, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(1, Sucursal, nro_sucursal, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaTercero(10, Sucursal, ter_sucursal)
            Call CreaComplemento(1, ter_sucursal, nro_sucursal, Sucursal)
            Inserto_estr = False
        End If
    Else
        nro_sucursal = 0
    End If
    
    ' Validacion y Creacion del Sector
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Sector = Mid(strReg, pos1, pos2 - pos1 + 1)

    If Sector <> "N/A" Then
        If SecDesc Then
            Call ValidaEstructura(2, Sector, nro_sector, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(2, Sector, nro_sector, Inserto_estr)
        End If
    Else
        nro_sector = 0
    End If

    ' Validacion, Creacion del Convenio
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Convenio = Mid(strReg, pos1, pos2 - pos1 + 1)

    If Convenio <> "N/A" Then
        If CovDesc Then
            Call ValidaEstructura(19, Convenio, nro_convenio, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(19, Convenio, nro_convenio, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(19, 0, nro_convenio, Convenio)
            Inserto_estr = False
        End If
    Else
        nro_convenio = 0
    End If
    
    ' Validacion y Creacion de la Categoria

    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    categoria = Mid(strReg, pos1, pos2 - pos1 + 1)

    If (categoria <> "N/A" And nro_convenio <> 0) Then
        If CatDesc Then
            'Call ValidaEstructura(3, categoria, nro_categoria, Inserto_estr)
            Call ValidaCategoria(3, categoria, nro_convenio, nro_categoria, Inserto_estr)
            
        Else
            'Call ValidaEstructuraCodExt(3, categoria, nro_categoria, Inserto_estr)
            Call ValidaCategoriaCodExt(3, categoria, nro_convenio, nro_categoria, Inserto_estr)
        End If
    Else
        nro_categoria = 0
    End If
    
    ' Validacion y Creacion del Puesto (junto con sus Complementos)

    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Puesto = Mid(strReg, pos1, pos2 - pos1 + 1)

    If Puesto <> "N/A" Then
        If PueDesc Then
            Call ValidaEstructura(4, Puesto, nro_puesto, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(4, Puesto, nro_puesto, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(4, 0, nro_puesto, Puesto)
            Inserto_estr = False
        End If
    Else
        nro_puesto = 0
    End If

    'Puesto Contable
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    PuestoContable = Mid(strReg, pos1, pos2 - pos1 + 1)
    If PuestoContable <> "N/A" Then
        If PuestoCDesc Then
            Call ValidaEstructura(48, PuestoContable, Nro_PuestoContable, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(48, PuestoContable, Nro_PuestoContable, Inserto_estr)
        End If
        If Inserto_estr Then
            Call CreaComplemento(48, 0, Nro_PuestoContable, PuestoContable)
            Inserto_estr = False
        End If
    Else
        Nro_PuestoContable = 0
    End If

    ' Validacion y Creacion del Centro de Costo
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    CCosto = Mid(strReg, pos1, pos2 - pos1 + 1)

    If CCosto <> "N/A" Then
        If CCoDesc Then
            Call ValidaEstructura(5, CCosto, nro_ccosto, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(5, CCosto, nro_ccosto, Inserto_estr)
        End If
    Else
        nro_ccosto = 0
    End If

    ' Validacion y Creacion de la Gerencia
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Gerencia = Mid(strReg, pos1, pos2 - pos1 + 1)

    If Gerencia <> "N/A" Then
        If GerDesc Then
            Call ValidaEstructura(6, Gerencia, nro_gerencia, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(6, Gerencia, nro_gerencia, Inserto_estr)
        End If
    Else
        nro_gerencia = 0
    End If

    ' Validacion y Creacion del Departamento
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Departamento = Mid(strReg, pos1, pos2 - pos1 + 1)

    If Departamento <> "N/A" Then
        If DepDesc Then
            Call ValidaEstructura(9, Departamento, nro_departamento, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(9, Departamento, nro_departamento, Inserto_estr)
        End If
    Else
        nro_departamento = 0
    End If

    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Direccion = Mid(strReg, pos1, pos2 - pos1 + 1)

    If Direccion <> "N/A" Then
        If DirDesc Then
            Call ValidaEstructura(35, Direccion, nro_direccion, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(35, Direccion, nro_direccion, Inserto_estr)
        End If
    Else
        nro_direccion = 0
    End If
    
    ' Validacion y Creacion de la Caja de Jubilacion
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    CajaJub = Mid(strReg, pos1, pos2 - pos1 + 1)

    If CajaJub <> "N/A" Then
        If CaJDesc Then
            Call ValidaEstructura(15, CajaJub, nro_cajajub, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(15, CajaJub, nro_cajajub, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaTercero(6, CajaJub, ter_cajajub)
            Call CreaComplemento(15, ter_cajajub, nro_cajajub, CajaJub)
        End If
    Else
        nro_cajajub = 0
    End If

    ' Validacion y Creacion del Sindicato
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Sindicato = Mid(strReg, pos1, pos2 - pos1 + 1)

    If Sindicato <> "N/A" Then
        If SinDesc Then
            Call ValidaEstructura(16, Sindicato, nro_sindicato, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(16, Sindicato, nro_sindicato, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaTercero(5, Sindicato, ter_sindicato)
            Call CreaComplemento(16, ter_sindicato, nro_sindicato, Sindicato)
        End If
    Else
        nro_sindicato = 0
    End If
    
    ' Validacion y Creacion de la Obra Social por Ley
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    OSocialLey = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))

    If OSocialLey <> "N/A" Then
        If OSoLeyDesc Then
            Call ValidaEstructura(24, OSocialLey, nro_osocial_ley, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(24, OSocialLey, nro_osocial_ley, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaTercero(4, OSocialLey, ter_osocial_ley)
            Call CreaComplemento(24, ter_osocial_ley, nro_osocial_ley, OSocialLey)
        Else
            StrSql = " SELECT origen FROM replica_estr WHERE estrnro = " & nro_osocial_ley
            OpenRecordset StrSql, rs_repl
            
            If Not rs_repl.EOF Then
                ter_osocial_ley = rs_repl!Origen
                rs_repl.Close
            End If
            
        End If
    Else
        nro_osocial_ley = 0
    End If

    ' Validacion y Creacion del Plan de Obra Social por Ley
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    PlanOSLey = Mid(strReg, pos1, pos2 - pos1 + 1)

    If (PlanOSLey <> "N/A" And nro_osocial_ley <> 0) Then
        If PoSLeyDesc Then
            Call ValidaEstructura(25, PlanOSLey, nro_planos_ley, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(25, PlanOSLey, nro_planos_ley, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(25, ter_osocial_ley, nro_planos_ley, PlanOSLey)
            Inserto_estr = False
        End If
    Else
        nro_planos_ley = 0
    End If
    
    ' Validacion y Creacion de la Obra Social Elegida
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    OSocialElegida = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    
    If OSocialElegida <> "N/A" Then
        If OSoElegidaDesc Then
            Call ValidaEstructura(17, OSocialElegida, nro_osocial_elegida, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(17, OSocialElegida, nro_osocial_elegida, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaTercero(4, OSocialElegida, ter_osocial_elegida)
            Call CreaComplemento(17, ter_osocial_elegida, nro_osocial_elegida, OSocialElegida)
        Else
            StrSql = " SELECT origen FROM replica_estr WHERE estrnro = " & nro_osocial_elegida
            OpenRecordset StrSql, rs_Sql
            ter_osocial_elegida = rs_Sql!Origen
            rs_Sql.Close
        End If
    Else
        nro_osocial_elegida = 0
    End If

    ' Validacion y Creacion del Plan de Obra Social Elegida
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    PlanOSElegida = Mid(strReg, pos1, pos2 - pos1 + 1)
    

    If (PlanOSElegida <> "N/A" And nro_osocial_elegida <> 0) Then
        If PoSElegidaDesc Then
            Call ValidaEstructura(23, PlanOSElegida, nro_planos_elegida, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(23, PlanOSElegida, nro_planos_elegida, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(23, ter_osocial_elegida, nro_planos_elegida, PlanOSElegida)
            Inserto_estr = False
        End If
    Else
        nro_planos_elegida = 0
    End If
    
    ' Validacion y Creacion del Contrato
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Contrato = Mid(strReg, pos1, pos2 - pos1 + 1)

    If Contrato <> "N/A" Then
        If CotDesc Then
            Call ValidaEstructura(18, Contrato, nro_contrato, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(18, Contrato, nro_contrato, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaComplemento(18, 0, nro_contrato, Contrato)
            Inserto_estr = False
        End If
    Else
        nro_contrato = 0
    End If
    
    
    'Fecha de Fin de Contrato
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    FechaFin_Contrato = Mid(strReg, pos1, pos2 - pos1 + 1)
    If FechaFin_Contrato = "N/A" Then
        FechaFin_Contrato = ""
    End If
    
    ' Validacion y Creacion del Lugar de Pago
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    LPago = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))

    If LPago <> "N/A" Then
        If LPaDesc Then
            Call ValidaEstructura(20, LPago, nro_lpago, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(20, LPago, nro_lpago, Inserto_estr)
        End If
    Else
        nro_lpago = 0
    End If

    ' Validacion y Creacion del Regimen Horario
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    RegHorario = Mid(strReg, pos1, pos2 - pos1 + 1)

    If RegHorario <> "N/A" Then
        If RegDesc Then
            Call ValidaEstructura(21, RegHorario, nro_reghorario, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(21, RegHorario, nro_reghorario, Inserto_estr)
        End If
    Else
        nro_reghorario = 0
    End If

    ' Validacion y Creacion de la Forma de Liquidacion
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    FormaLiq = Mid(strReg, pos1, pos2 - pos1 + 1)

    If FormaLiq <> "N/A" Then
        If FLiDesc Then
            Call ValidaEstructura(22, FormaLiq, nro_formaliq, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(22, FormaLiq, nro_formaliq, Inserto_estr)
        End If
    Else
        nro_formaliq = 0
    End If

    ' Validacion y Creacion de la Forma de Pago
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    FormaPago = Mid(strReg, pos1, pos2 - pos1 + 1)

    If FormaPago <> "N/A" Then
        StrSql = " SELECT fpagnro FROM formapago WHERE fpagdescabr = '" & FormaPago & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_formapago = rs_Sql!fpagnro
        Else
            StrSql = " INSERT INTO formapago(fpagdescabr,fpagbanc,acunro,monnro) VALUES ('" & FormaPago & "',0,6,1)"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            nro_formapago = getLastIdentity(objConn, "formapago")
            
        End If
    Else
        nro_formapago = 0
    End If
    
    ' Validacion y Creacion de los Bancos de Pago
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    BancoPago = Mid(strReg, pos1, pos2 - pos1 + 1)

    If BancoPago <> "N/A" Then
        If BcoDesc Then
            Call ValidaEstructura(41, BancoPago, nro_bancopago, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(41, BancoPago, nro_bancopago, Inserto_estr)
        End If
        Call CreaTercero(13, BancoPago, ter_bancopago)
        If Inserto_estr Then
            'Call CreaTercero(13, BancoPago, ter_bancopago)
            Call CreaComplemento(41, ter_bancopago, nro_bancopago, BancoPago)
        End If
        fpgo_bancaria = -1
    Else
        nro_bancopago = 0
        fpgo_bancaria = 0
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    NroCuenta = Mid(strReg, pos1, pos2 - pos1 + 1)
    If NroCuenta = "N/A" Then
        NroCuenta = ""
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    NroCBU = Mid(strReg, pos1, pos2 - pos1 + 1)
    If NroCBU = "N/A" Then
        NroCBU = ""
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    SucBanco = Mid(strReg, pos1, pos2 - pos1 + 1)
    If SucBanco = "N/A" Then
        SucBanco = ""
    End If

    ' Validacion y Creacion de la Actividad
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Actividad = Mid(strReg, pos1, pos2 - pos1 + 1)

    If Actividad <> "N/A" Then
        If ActDesc Then
            Call ValidaEstructura(29, Actividad, nro_actividad, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(29, Actividad, nro_actividad, Inserto_estr)
        End If
    Else
        nro_actividad = 0
    End If

    ' Validacion y Creacion de la Condicion SIJP
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    CondSIJP = Mid(strReg, pos1, pos2 - pos1 + 1)

    If CondSIJP <> "N/A" Then
        If CSJDesc Then
            Call ValidaEstructura(31, CondSIJP, nro_condsijp, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(31, CondSIJP, nro_condsijp, Inserto_estr)
        End If
    Else
        nro_condsijp = 0
    End If

    ' Validacion y Creacion de la Situacion de Revista
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    SitRev = Mid(strReg, pos1, pos2 - pos1 + 1)

    If SitRev <> "N/A" Then
        If SReDesc Then
            Call ValidaEstructura(30, SitRev, nro_sitrev, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(30, SitRev, nro_sitrev, Inserto_estr)
        End If
    Else
        nro_sitrev = 0
    End If
    
    ' Validacion y Creacion de la ART
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    ART = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If ART <> "N/A" Then
        If ARTDesc Then
            Call ValidaEstructura(40, ART, nro_art, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(40, ART, nro_art, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaTercero(8, ART, ter_art)
            Call CreaComplemento(40, ter_art, nro_art, ART)
        End If
    Else
        nro_art = 0
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Estado = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    If UCase(Estado) = "ACTIVO" Then
        ter_estado = -1
    Else
        ter_estado = 0
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    CausaBaja = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If Not EsNulo(CausaBaja) And CausaBaja <> "N/A" Then
        StrSql = " SELECT caunro FROM causa WHERE caudes = '" & CausaBaja & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            nro_causabaja = rs_Sql!caunro
        Else
            StrSql = " INSERT INTO causa(caudes,causist,caudesvin,empnro) VALUES ('" & CausaBaja & "',0,-1,1)"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            nro_causabaja = getLastIdentity(objConn, "causa")
            
        End If
    Else
        nro_causabaja = 0
    End If
    
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    FBaja = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If EsNulo(FBaja) Or FBaja = "N/A" Then
        F_Baja = "Null"
    Else
        F_Baja = ConvFecha(FBaja)
    End If
    
    ' Validacion y Creacion de la Empresa
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    If pos2 > 0 Then
        Empresa = Mid(strReg, pos1, pos2 - pos1 + 1)
    Else
        pos2 = Len(strReg)
        Empresa = Mid(strReg, pos1, pos2 - pos1 + 1)
    End If

    If Empresa <> "N/A" Then
        If EmpDesc Then
            Call ValidaEstructura(10, Empresa, nro_empresa, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(10, Empresa, nro_empresa, Inserto_estr)
        End If
        
        If Inserto_estr Then
            Call CreaTercero(10, Empresa, Ter_Empresa)
            Call CreaComplemento(10, Ter_Empresa, nro_empresa, Empresa)
        End If
    Else
        nro_empresa = 0
    End If
    
    'Remuneración del Empleado
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Empremu = Mid(strReg, pos1, pos2 - pos1 + 1)
    
    If Empremu = "N/A" Then
        Empremu = "Null"
    End If
   
    'Subcategoria
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Subcategoria = Mid(strReg, pos1, pos2 - pos1 + 1)
    If Subcategoria <> "N/A" Then
        If SubCatDesc Then
            Call ValidaEstructura(44, Subcategoria, Nro_Subcategoria, Inserto_estr)
        Else
            Call ValidaEstructuraCodExt(44, Subcategoria, Nro_Subcategoria, Inserto_estr)
        End If
        If Inserto_estr Then
            Call CreaComplemento(44, 0, Nro_Subcategoria, Subcategoria)
            Inserto_estr = False
        End If
    Else
        Nro_Subcategoria = 0
    End If
   
    ' Modelo de Organizacion
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    
    If pos2 > 0 Then
        ModOrg = Mid(strReg, pos1, pos2 - pos1 + 1)
        
        StrSql = "SELECT * FROM adptemplate WHERE tplatedesabr = '" & ModOrg & "'"
        OpenRecordset StrSql, rs_tpl
        
        If rs_tpl.EOF Then
        
            StrSql = "INSERT INTO adptemplate (tplatedesabr,tplatedefault) VALUES ('" & ModOrg & "',-1)"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            nro_ModOrg = getLastIdentity(objConn, "adptemplate")
            
        Else
        
            nro_ModOrg = rs_tpl!tplatenro
        
        End If
        
    Else
        nro_ModOrg = 0
    End If

  ' Inserto el Tercero
  If F_Nacimiento = "Null" Then
    F_Nacimiento = "''"
  End If
  If F_Ingreso = "Null" Then
    F_Ingreso = "''"
  End If
  
  If CalculaLegajo Then
    Call CalcularLegajo(nro_empresa, Legajo)
  End If

    If Not ExisteLeg Then

        StrSql = " INSERT INTO tercero(ternom,terape,terfecnac,tersex,terestciv,estcivnro,nacionalnro,paisnro,terfecing)"
        StrSql = StrSql & " VALUES('" & nombre & "','" & Apellido & "'," & F_Nacimiento & "," & ter_sexo & "," & nro_estcivil & "," & nro_estcivil & ","
        If nro_nacionalidad <> 0 Then
            StrSql = StrSql & nro_nacionalidad & ","
        Else
            StrSql = StrSql & "null,"
        End If
        If nro_paisnac <> 0 Then
            StrSql = StrSql & nro_paisnac & ","
        Else
            StrSql = StrSql & "null,"
        End If
        StrSql = StrSql & F_Ingreso & ")"
        objConn.Execute StrSql, , adExecuteNoRecords

        NroTercero = getLastIdentity(objConn, "tercero")
    Else
      ErrCarga.writeline "Linea: " & LineaCarga & " - Empleado: " & Legajo & " - Ese Empleado ya existe en la base."
    End If

    Flog.writeline "Codigo de Tercero = " & NroTercero

    If Not ExisteLeg Then

        StrSql = " INSERT INTO empleado(empleg,empfecalta,empfecbaja,empest,empfaltagr,"
        StrSql = StrSql & "ternro,nivnro,empestudia,terape,ternom,empinterno,empemail,"
        If Not EsNulo(FechaFin_Contrato) Then
            StrSql = StrSql & "empfbajaprev,"
        End If
        StrSql = StrSql & "empnro,tplatenro,empremu) VALUES("
        StrSql = StrSql & Legajo & "," & F_Alta & "," & F_Baja & "," & ter_estado & "," & F_Alta & ","
        StrSql = StrSql & NroTercero & "," & nro_nivest & "," & ter_estudio & ",'" & Apellido & "','" & nombre & "',Null,'" & Email & "'"
        If Not EsNulo(FechaFin_Contrato) Then
            StrSql = StrSql & "," & ConvFecha(FechaFin_Contrato)
        End If
        'StrSql = StrSql & "," & nombre & ",Null,'" & Email & "',1," & nro_ModOrg & "," & Empremu & ")"
        StrSql = StrSql & ",1," & nro_ModOrg & "," & Empremu & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
    End If

    Flog.writeline "Inserte el Empleado - " & Legajo & " - " & Apellido & " - " & nombre

    ' Inserto el Registro correspondiente en ter_tip
    
    If Not ExisteLeg Then
    
        StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & NroTercero & ",1)"
        objConn.Execute StrSql, , adExecuteNoRecords
        
    End If

' Inserto los Documentos
    
    If Not ExisteLeg Then
    
        If Nro_TDocumento <> 0 Then
            StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
            StrSql = StrSql & " VALUES(" & NroTercero & "," & Nro_TDocumento & ",'" & Ndocu & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline "Inserte el DU - "
        End If
        
    End If
  

    If Not ExisteLeg Then
    
        If Cuil <> "" Then
            StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
            StrSql = StrSql & " VALUES(" & NroTercero & ",10,'" & Cuil & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline "Inserte el CUIL - "
        End If
        
    End If

' Inserto el Domicilio

  If rs.State = adStateOpen Then
    rs.Close
  End If
  
  If Not ExisteLeg Then
  
    If (Nro_Localidad <> 0 And Nro_Provincia <> 0 And Nro_Pais <> 0) Then
        StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
        StrSql = StrSql & " VALUES(1," & NroTercero & ",-1,2)"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        NroDom = getLastIdentity(objConn, "cabdom")
      
        StrSql = " INSERT INTO detdom(domnro,calle,nro,piso,oficdepto,torre,manzana,codigopostal,entrecalles,"
        StrSql = StrSql & "locnro,provnro,paisnro,barrio,partnro,zonanro) "
        StrSql = StrSql & " VALUES (" & NroDom & ",'" & Calle & "','" & Nro_Nrodom & "','" & Piso & "','"
        StrSql = StrSql & Depto & "','" & Torre & "','" & Manzana & "','" & Cpostal & "','" & Entre & "'," & Nro_Localidad & ","
        StrSql = StrSql & Nro_Provincia & "," & Nro_Pais & ",'" & Barrio & "'," & Nro_Partido & "," & Nro_Zona & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
      
        Flog.writeline "Inserte el Domicilio - "
        
        If Telefono <> "" Then
          StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular) "
          StrSql = StrSql & " VALUES(" & NroDom & ",'" & Telefono & "',0,-1,0)"
          objConn.Execute StrSql, , adExecuteNoRecords
          Flog.writeline "Inserte el Telefono - "
        End If
        If TelLaboral <> "" Then
          StrSql = "SELECT * FROM telefono "
          StrSql = StrSql & " WHERE domnro =" & NroDom
          StrSql = StrSql & " AND telnro ='" & TelLaboral & "'"
          If rs_Tel.State = adStateOpen Then rs_Tel.Close
          OpenRecordset StrSql, rs_Tel
          If rs_Tel.EOF Then
              StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular) "
              StrSql = StrSql & " VALUES(" & NroDom & ",'" & TelLaboral & "',0,0,0)"
              objConn.Execute StrSql, , adExecuteNoRecords
              Flog.writeline "Inserte el Telefono Laboral - "
          End If
        End If
        If TelCelular <> "" Then
              StrSql = "SELECT * FROM telefono "
              StrSql = StrSql & " WHERE domnro =" & NroDom
              StrSql = StrSql & " AND telnro ='" & TelCelular & "'"
              If rs_Tel.State = adStateOpen Then rs_Tel.Close
              OpenRecordset StrSql, rs_Tel
              If rs_Tel.EOF Then
                  StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular) "
                  StrSql = StrSql & " VALUES(" & NroDom & ",'" & TelCelular & "',0,0,-1)"
                  objConn.Execute StrSql, , adExecuteNoRecords
                  Flog.writeline "Inserte el Telefono Celular - "
              End If
        End If
        
    End If
    
  End If
  
  If Not ExisteLeg Then
    ' Inserto las Fases
    StrSql = " INSERT INTO fases(empleado,altfec,bajfec,caunro,estado,sueldo,vacaciones,indemnizacion,real,fasrecofec)"
    StrSql = StrSql & " VALUES( " & NroTercero & "," & F_Alta & "," & F_Baja & ","
    If nro_causabaja <> 0 Then
      StrSql = StrSql & nro_causabaja
    Else
      StrSql = StrSql & "null"
    End If
    StrSql = StrSql & "," & ter_estado & ",-1,-1,-1,-1,-1)"
    objConn.Execute StrSql, , adExecuteNoRecords
  End If
  
  'Inserto la cuenta bancaria
    If Not ExisteLeg Then
  
        If (nro_formapago <> 0 And nro_bancopago <> 0 And NroCuenta <> "") Then
        
          StrSql = " INSERT INTO ctabancaria (ternro,fpagnro,banco,ctabestado,"
          StrSql = StrSql & "ctabsuc,ctabnro,ctabporc,ctabcbu) VALUES ("
          StrSql = StrSql & NroTercero & "," & nro_formapago & "," & ter_bancopago & ","
          StrSql = StrSql & "-1,'" & SucBanco & "','" & NroCuenta & "',100,'" & NroCBU & "')"
          objConn.Execute StrSql, , adExecuteNoRecords
          Flog.writeline "Inserte la Cuenta Bancaria - "
          
        End If
        
    End If
  ' Inserto las Estructuras

'
  Call AsignarEstructura(1, nro_sucursal, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(2, nro_sector, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(3, nro_categoria, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(4, nro_puesto, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(5, nro_ccosto, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(6, nro_gerencia, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(9, nro_departamento, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(10, nro_empresa, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(15, nro_cajajub, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(16, nro_sindicato, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(17, nro_osocial_elegida, NroTercero, F_Alta, F_Baja)
  If Not EsNulo(FechaFin_Contrato) Then
        Call AsignarEstructura(18, nro_contrato, NroTercero, F_Alta, ConvFecha(CDate(FechaFin_Contrato)))
  Else
        Call AsignarEstructura(18, nro_contrato, NroTercero, F_Alta, F_Baja)
  End If
  Call AsignarEstructura(19, nro_convenio, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(20, nro_lpago, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(21, nro_reghorario, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(22, nro_formaliq, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(23, nro_planos_elegida, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(24, nro_osocial_ley, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(25, nro_planos_ley, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(29, nro_actividad, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(30, nro_sitrev, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(31, nro_condsijp, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(35, nro_direccion, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(40, nro_art, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(41, nro_bancopago, NroTercero, F_Alta, F_Baja)
  'Nuevas estructuras
  Call AsignarEstructura(48, Nro_PuestoContable, NroTercero, F_Alta, F_Baja)
  Call AsignarEstructura(44, Nro_Subcategoria, NroTercero, F_Alta, F_Baja)
  
  LineaOK.writeline Mid(strReg, 1, Len(strReg))
  OK = True
         
  If rs.State = adStateOpen Then
      rs.Close
  End If

  Exit Sub

SaltoLinea:

    LineaError.writeline Mid(strReg, 1, Len(strReg))
    ErrCarga.writeline "Linea: " & LineaCarga & " - " & Err.Description
    'Resume Next
    MyRollbackTrans
    OK = False
End Sub



Public Sub LineaModelo_263(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Procedimiento de incorporacion de postulantes. Version CARSA.
' Autor      : FGZ
' Fecha      : 02/09/2005
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim Aux As String
Dim datos() As String
Dim Ternro As Long
Dim NroDom As Long
Dim a As Long
Dim Xconst As Long
Dim ActPasos As Boolean
Dim tempString As String
Dim Inserta As Boolean

Dim rs_Ter As New ADODB.Recordset
Dim rs_Aux As New ADODB.Recordset
Dim I As Long
    
    LineaCarga = LineaCarga + 1
    Tabs = 1

    Flog.writeline
    Flog.writeline "Procesando linea " & strLinea
    
    'Si ocurre un error antes de insertar el tercero se aborta el postulante
    On Error GoTo Manejador_De_Error:
    
    datos = Split("0" & separador & strLinea, separador)
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I
    
    '--Documentos--
    Obligatorio = True
    NroColumna = 1
    datos(1) = TraerCodTipoDocumento_2(CStr(datos(1)))  'tipoDocumento
'    Aux = TraerCodTipoDocumento(CStr(Datos(1)))  'tipoDocumento
'    If Aux <> CStr(Datos(1)) Then
'        Texto = ": " & "El Tipo de documento no existe " & Datos(1)
'        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strlinea)
'        RegError = RegError + 1
'        If Obligatorio Then
'            Exit Sub
'        End If
'    End If
    datos(2) = StrToStr(CStr(datos(2)), 30) 'numeroDocumento
    
    '--Tercero
    datos(3) = StrToStr(datos(3), 25) 'ternom
    datos(4) = StrToStr(datos(4), 25)  'ternom2
    datos(5) = StrToStr(datos(5), 25) 'terape
    datos(6) = StrToStr(datos(6), 25) 'terape2
    datos(7) = ConvFecha(CDate(datos(7))) 'terfecnac
    'If UCase(Datos(8)) = "MASCULINO" Then Datos(8) = -1 Else Datos(8) = 0 'tersex
    If (UCase(datos(8)) = "M") Or (UCase(datos(8)) = "-1") Or (UCase(datos(8)) = "MASCULINO") Then
        datos(8) = -1
    Else
        datos(8) = 0
    End If
    
    datos(23) = StrToStr(datos(23), 100) ' teremail
    
    'Nacionalidad
    Obligatorio = True
    NroColumna = 13
    Aux = TraerCodNacionalidad_2(CStr(datos(13))) ' nacionalnro
    If Aux <> CStr(datos(13)) Then
        Texto = ": " & "La Nacionalidad no existe " & datos(13)
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        If Obligatorio Then
            RegError = RegError + 1
            Flog.writeline
            Flog.writeline "Linea Abortada "
            Flog.writeline "*****************"
            Exit Sub
        End If
    End If
    
    'Estado Civil
    Obligatorio = True
    NroColumna = 9
    Aux = StrToStr(TraerCodEstadoCivil_2(CStr(datos(9))), 8) 'estcivnro
    If Aux <> CStr(datos(9)) Then
        Texto = ": " & "El Estado civil no existe " & datos(9)
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        If Obligatorio Then
            RegError = RegError + 1
            Flog.writeline
            Flog.writeline "Linea Abortada "
            Flog.writeline "*****************"
            Exit Sub
        End If
    End If
    
    
    If datos(14) = "" Then
        datos(14) = "''"
    Else
        datos(14) = ConvFecha(CDate(datos(14))) 'fechaingresopais
    End If
    datos(11) = StrToStr(datos(11), 25) 'tercasape
    If datos(10) = "" Then
        datos(10) = "NULL"
    Else
        datos(10) = ConvFecha(CDate(datos(10))) 'terfecestciv
    End If
    
    
    'Pais
    Obligatorio = True
    NroColumna = 12
    Aux = TraerCodPais_2(CStr(datos(NroColumna))) 'paisnro
    If Aux <> CStr(datos(NroColumna)) Then
        Texto = ": " & "El Pais no existe " & datos(NroColumna)
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        If Obligatorio Then
            RegError = RegError + 1
            Flog.writeline
            Flog.writeline "Linea Abortada "
            Flog.writeline "*****************"
            Exit Sub
        End If
    End If
    

    'FGZ - 06/04/2005
    StrSql = "SELECT * FROM ter_doc  "
    StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
    StrSql = StrSql & " AND nrodoc = '" & datos(2) & "'"
    OpenRecordset StrSql, rs_Ter

    If rs_Ter.EOF Then
        StrSql = " INSERT INTO tercero (ternom, ternom2, terape, terape2, terfecnac, tersex, teremail, nacionalnro, estcivnro, terfecing, tercasape,terfecestciv, paisnro ) VALUES ("
        StrSql = StrSql & "'" & datos(3) & "'"      'ternom
        StrSql = StrSql & ",'" & datos(4) & "'"     'ternom2
        StrSql = StrSql & ",'" & datos(5) & "'"      'terape
        StrSql = StrSql & ",'" & datos(6) & "'"     'terape2
        StrSql = StrSql & "," & datos(7)            'terfecnac
        StrSql = StrSql & "," & CLng(datos(8))      'tersex
        StrSql = StrSql & ",'" & datos(23) & "'"    'teremail
        StrSql = StrSql & "," & CLng(datos(13))     'nacionalnro
        StrSql = StrSql & ",'" & datos(9) & "'"     'estcivnro
        StrSql = StrSql & "," & datos(14)           'fechaingresopais
        StrSql = StrSql & ",'" & datos(11) & "'"    'tercasape
        StrSql = StrSql & "," & datos(10)           'terfecestciv
        StrSql = StrSql & "," & datos(12)           'paisnro
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Inserto en la tabla de tercero"
    
        '--Obtengo el ternro--
        Ternro = getLastIdentity(objConn, "tercero")
        Flog.writeline "-----------------------------------------------"
        Flog.writeline "Codigo de Tercero = " & Ternro
    
        '--Inserto el Registro correspondiente en ter_tip--
        StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & Ternro & ",14)"
        objConn.Execute StrSql, , adExecuteNoRecords
        'Flog.Writeline "Inserto el tipo de tercero 14 en ter_tip"
        
        'Desactivo el manejador de erorres
        On Error GoTo 0
        
        
        'Cualquier error que ocurra de aquí en adelante sigue adelante
        ' tratando de insertar la mayor cantidad de datos posible
        On Error Resume Next
        'HuboError = False
        
        StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
        StrSql = StrSql & " VALUES(" & Ternro & "," & datos(1) & ",'" & datos(2) & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        '--------------------------------------------------------------------------------
        '--Inserto el Domicilio--
        StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
        StrSql = StrSql & " VALUES(1," & Ternro & ",-1,2)"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "inserto el Domicilio"
    
        '--Obtengo el numero de domicilio en la tabla--
        NroDom = CLng(getLastIdentity(objConn, "cabdom"))
    
        '--Si no tiene algun dato le agregamos unos ficticios--
        datos(24) = StrToStr(datos(24), 30) 'dirCalle
        datos(25) = StrToStr(datos(25), 8) 'dirNumero
        datos(26) = StrToStr(datos(26), 8) 'dirPiso
        datos(27) = StrToStr(datos(27), 8) 'dirDepto
        datos(28) = StrToStr(datos(28), 8) 'dirTorre
        datos(29) = StrToStr(datos(29), 8) 'dirManzana
        datos(30) = StrToStr(datos(30), 8) 'dirSector
        datos(31) = StrToStr(datos(31), 12) 'dirCP
        
        
        'dirLocalidad
        Obligatorio = True
        NroColumna = 32
        Aux = TraerCodLocalidad_2(CStr(datos(NroColumna))) 'dirLocalidad
        If Aux <> CStr(datos(NroColumna)) Then
            Texto = ": " & "La localidad no existe " & datos(NroColumna)
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            If Obligatorio Then
                RegError = RegError + 1
                Flog.writeline
                Flog.writeline "Linea Abortada "
                Flog.writeline "*****************"
                Exit Sub
            End If
        End If
        
        'dirProvincia
        Obligatorio = True
        NroColumna = 33
        Aux = TraerCodProvincia_2(CStr(datos(NroColumna)))   'dirProvincia
        If Aux <> CStr(datos(NroColumna)) Then
            Texto = ": " & "La Provincia no existe " & datos(NroColumna)
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            If Obligatorio Then
                RegError = RegError + 1
                Flog.writeline
                Flog.writeline "Linea Abortada "
                Flog.writeline "*****************"
                Exit Sub
            End If
        End If
        
        'dirPartido
        Obligatorio = True
        NroColumna = 34
        Aux = TraerCodPartido_2(CStr(datos(NroColumna)))  'dirPartido
        If Aux <> CStr(datos(NroColumna)) Then
            Texto = ": " & "El partido no existe " & datos(NroColumna)
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            If Obligatorio Then
                RegWarnings = RegWarnings + 1
                datos(34) = "NULL"
            End If
        End If
        
        'dirZona
        Obligatorio = True
        NroColumna = 35
        Aux = TraerCodZona_2(CStr(datos(NroColumna)), CLng(datos(NroColumna)))  'dirZona
        If Aux <> CStr(datos(NroColumna)) Then
            Texto = ": " & "La zona no existe " & datos(NroColumna)
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            If Obligatorio Then
                RegWarnings = RegWarnings + 1
                datos(35) = "NULL"
            End If
        End If
        
        'Pais de Dir
        Obligatorio = True
        NroColumna = 36
        If Not EsNulo(CStr(datos(NroColumna))) Then
            Aux = TraerCodPais_2(CStr(datos(NroColumna))) 'dirPais
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "El Pais no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegWarnings = RegWarnings + 1
                    datos(NroColumna) = 1
                End If
            End If
        Else
            datos(NroColumna) = 1   'Default
        End If
        
        StrSql = " INSERT INTO detdom (domnro,calle,nro,sector,torre,piso,oficdepto,manzana,codigopostal,"
        StrSql = StrSql & "locnro,provnro,paisnro, zonanro, partnro) "
        StrSql = StrSql & " VALUES ("
        StrSql = StrSql & NroDom
        StrSql = StrSql & ",'" & datos(24) & "'"
        StrSql = StrSql & ",'" & datos(25) & "'"
        StrSql = StrSql & ",'" & datos(30) & "'"
        StrSql = StrSql & ",'" & datos(28) & "'"
        StrSql = StrSql & ",'" & datos(26) & "'"
        StrSql = StrSql & ",'" & datos(27) & "'"
        StrSql = StrSql & ",'" & datos(29) & "'"
        StrSql = StrSql & ",'" & datos(31) & "'"
        StrSql = StrSql & "," & datos(32)
        StrSql = StrSql & "," & datos(33)
        StrSql = StrSql & "," & datos(36)
        StrSql = StrSql & "," & datos(35)
        StrSql = StrSql & "," & datos(34)
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Err.Clear
            RegWarnings = RegWarnings + 1
            Texto = ": " & "Error insertando SQL " & StrSql
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            Texto = ": " & Err.Description
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        Else
            Flog.writeline "Inserte el domicilio "
        End If
    
        '--Telefonos-Personal--
        datos(21) = validatelefono(StrToStr(datos(21), 20))
        If datos(21) <> "" Then
            StrSql = " INSERT INTO telefono "
            'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
            StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
            StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0,1 ) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
                RegWarnings = RegWarnings + 1
                Texto = ": " & "Error insertando SQL " & StrSql
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Texto = ": " & Err.Description
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            Else
                Flog.writeline "Inserte el telefono"
            End If
        End If
        
        '--Telefonos-Celular--
        'FGZ 11/04/2005 - quieren que lo cargue como telefono comun
        datos(22) = validatelefono(StrToStr(datos(22), 20))
        If datos(22) <> "" Then
            StrSql = " INSERT INTO telefono "
            'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
            StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
            StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0,2 ) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
                RegWarnings = RegWarnings + 1
                Texto = ": " & "Error insertando SQL " & StrSql
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Texto = ": " & Err.Description
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            Else
                Flog.writeline "Inserte el telefono2 "
            End If
        End If
    
        '--Complemento--
        If datos(15) = "" Then
            datos(15) = 0
        Else
            datos(15) = CLng(StrToInt(datos(15))) 'cantidadHijos
        End If
        datos(16) = StrToStr(datos(16), 60) 'imagen
        If datos(17) = "" Then
            datos(17) = "NULL"
        Else
            datos(17) = ConvFecha(CDate(datos(17))) 'fechaIngresoCV
        End If
        datos(18) = StrToStr(datos(18), 250) 'referencias
        
        
        'procedencia
        Obligatorio = False
        NroColumna = 19
        If datos(NroColumna) = "" Then
            datos(NroColumna) = "NULL"
        End If
        Aux = TraerCodProcedencia_2(CStr(datos(NroColumna))) 'procedencia
        If Aux <> CStr(datos(NroColumna)) Then
            Texto = ": " & "La Procedencia no existe " & datos(NroColumna)
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            If Obligatorio Then
                Flog.writeline
                Flog.writeline "Linea Abortada "
                Flog.writeline "*****************"
                Exit Sub
            Else
                RegWarnings = RegWarnings + 1
            End If
        End If
        
        If datos(20) = "" Then
            datos(20) = 0
        Else
            datos(20) = CDbl(StrToDbl(datos(20))) 'remuneracionPretendida
        End If
        
        'StrSql = " INSERT INTO pos_postulante "
        'StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro) "
        'StrSql = StrSql & " VALUES (" & ternro & " ," & CDbl(Datos(20)) & ", " & CLng(Datos(15)) & ", '" & Datos(16) & "', " & Datos(17) & ",'" & Datos(18) & "', " & Datos(19) & ") "
        'objConn.Execute StrSql, , adExecuteNoRecords
        'If Err Then
        '    RegWarnings = RegWarnings + 1
        '    Texto = ": " & "Error insertando complemento SQL " & StrSql
        '    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strlinea)
        '    Texto = ": " & Err.Description
        '    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strlinea)
        '    Err.Clear
        'Else
        '    Flog.Writeline "Inserte el Complemento "
        'End If
        
        'JMH - 07/03/2006 Se agrego el estposnro = 4 (postulantre activo)
        StrSql = " INSERT INTO pos_postulante "
        StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro,estposnro) "
        StrSql = StrSql & " VALUES (" & Ternro & " ," & CDbl(datos(20)) & ", " & CLng(datos(15)) & ", '" & datos(16) & "', " & datos(17) & ",'" & datos(18) & "', " & datos(19) & ",4) "
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            RegWarnings = RegWarnings + 1
            Texto = ": " & "Error insertando complemento SQL " & StrSql
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            Texto = ": " & Err.Description
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        Else
            Flog.writeline "Inserte el Complemento "
        End If
    
        '--Estudios-formales--(49)licho por aca
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 37) <> "" Then
                'EFnivel8
                Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 37
                Aux = TraerCodNivelEstudio_2(datos(NroColumna))   'EFnivel8
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "El Nivel de estudio no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(Xconst + 37) = TraerCodNivelEstudio_2(Datos(Xconst + 37))   'EFnivel8
                                
                'Completo
                If datos(Xconst + 38) = -1 Then datos(Xconst + 38) = -1 Else datos(Xconst + 38) = 0

                'Titulo
                'Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 39
                Aux = TraerCodTitulo_2(CStr(datos(Xconst + 39)), CLng(datos(Xconst + 37)))   'EFtitulo8
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "El Titulo no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(Xconst + 39) = TraerCodTitulo_2(CStr(Datos(Xconst + 39)), clng(Datos(Xconst + 37)))   'EFtitulo8
                
                'Institucion
                'Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 40
                Aux = TraerCodInstitucionAbreviada_2(CStr(datos(Xconst + 40)))   'EFinstitucion8
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "La Institucion no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(Xconst + 40) = TraerCodInstitucionAbreviada_2(CStr(Datos(Xconst + 40)))   'EFinstitucion8
                
                'Carrera
                'Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 41
                Aux = TraerCodCarrera_2(CStr(datos(Xconst + 41)))    'EFcarrera8
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "La Carrera no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(Xconst + 41) = TraerCodCarrera_2(CStr(Datos(Xconst + 41)))    'EFcarrera8
                
                If datos(Xconst + 42) <> "" Then
                    datos(Xconst + 42) = ConvFecha(CDate(datos(Xconst + 42)))   'EFfechaDesde8
                Else
                    datos(Xconst + 42) = "NULL"
                End If
                If datos(Xconst + 43) <> "" Then
                    datos(Xconst + 43) = ConvFecha(CDate(datos(Xconst + 43)))   'EFfechaHasta8
                Else
                    datos(Xconst + 43) = "NULL"
                End If
                datos(Xconst + 44) = StrToStr(datos(Xconst + 44), 30)   'EFpromedio8
                datos(Xconst + 45) = StrToStr(datos(Xconst + 45), 60)   'EFrango8
                If datos(Xconst + 46) <> "" And UCase(datos(Xconst + 46)) <> "NO" Then
                    datos(Xconst + 46) = -1  'EFestudiaActualmente8
                Else
                    datos(Xconst + 46) = 0  'EFestudiaActualmente8
                End If
        
                If Inserta Then
                    StrSql = " INSERT INTO cap_estformal "
                    StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
                    StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 37)) & ", " & Ternro & " ," & datos(Xconst + 39) & "," & datos(Xconst + 40) & "," & datos(Xconst + 41) & "," & datos(Xconst + 42) & " ," & datos(Xconst + 43) & "," & datos(Xconst + 38) & "," & datos(Xconst + 46) & ",'" & datos(Xconst + 45) & "','" & datos(Xconst + 44) & "' ) "
                    Err.Clear
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        RegWarnings = RegWarnings + 1
                        Texto = ": " & "Error insertando Estudio Formal SQL " & StrSql
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        Texto = ": " & Err.Description
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        Err.Clear
                    Else
                        Flog.writeline "Inserte el estudio formal " & datos(Xconst + 37)
                        ActPasos = True
                    End If
                End If
            End If
            Xconst = Xconst + 10
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 49)
        End If
        ActPasos = False
        
        
        '--Experiencia-Laboral----Empleos Anteriores--57
        'reemplazos
        '117 x 77
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 78) <> "" And datos(Xconst + 77) <> "" Then
                'Cargo Anterior
                Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 77
                Aux = TraerCodCargo_2(CStr(datos(Xconst + 77)))    'ELcargoAnterior16
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "EL Cargo no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(Xconst + 77) = TraerCodCargo(CStr(Datos(Xconst + 77)))    'ELcargoAnterior16
                
                'Empresa
                'Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 78
                Aux = TraerCodListaEmpresa_2(CStr(datos(Xconst + 78)))   'ELempresa16 lempnro
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "La empresa no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(Xconst + 78) = TraerCodListaEmpresa(CStr(Datos(Xconst + 78)))   'ELempresa16 lempnro
                
                'Tarea desempeñada
                'Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 79
                Aux = StrToStr(datos(Xconst + 79), 200) 'ELtareaDesempenada16
                datos(Xconst + 79) = Aux
                'Datos(Xconst + 79) = StrToStr(Datos(Xconst + 79), 200) 'ELtareaDesempenada16
                
                If datos(Xconst + 80) <> "" Then
                    datos(Xconst + 80) = ConvFecha(CDate(datos(Xconst + 80)))  'ELfechaDesde16
                Else
                    datos(Xconst + 80) = "NULL"
                End If
                If datos(Xconst + 81) <> "" Then
                    datos(Xconst + 81) = ConvFecha(CDate(datos(Xconst + 81)))  'ELfechaHasta16
                Else
                    datos(Xconst + 81) = "NULL"
                End If
                If datos(Xconst + 82) = "" Then
                    datos(Xconst + 82) = 0
                Else
                    datos(Xconst + 82) = StrToDbl(datos(Xconst + 82))   'ELremuneracion16
                End If
                
                'Causa de baja
                'Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 83
                If datos(Xconst + 83) <> "" Then
                    Aux = TraerCodCausa_2(CStr(datos(Xconst + 83)))   'ELcausaBaja16
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "La Causa de baja no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                Else
                    datos(Xconst + 83) = "NULL"
                End If
'                If Datos(Xconst + 83) <> "" Then
'                    Datos(Xconst + 83) = TraerCodCausa(CStr(Datos(Xconst + 83)))   'ELcausaBaja16
'                Else
'                    Datos(Xconst + 83) = "NULL"
'                End If
            
                If Inserta Then
                    StrSql = " INSERT INTO empant "
                    StrSql = StrSql & " ( empleado, empatareas, lempnro, empaini, empafin, carnro, emparemu ) "
                    StrSql = StrSql & " VALUES (" & Ternro & ", '" & datos(Xconst + 79) & "' ," & datos(Xconst + 78) & "," & datos(Xconst + 80) & "," & datos(Xconst + 81) & "," & datos(Xconst + 77) & "," & datos(Xconst + 82) & "  ) "
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al inserte el Empleo Anterior: " & Err.Description
                        RegWarnings = RegWarnings + 1
                        Texto = ": " & "Error insertando Empleo anterior. SQL " & StrSql
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        Texto = ": " & Err.Description
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        Err.Clear
                    Else
                        Flog.writeline "Inserto los datos del Empleo Anterior"
                        ActPasos = True
                    End If
                End If
            End If
            Xconst = Xconst + 7
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 57)
        End If
        ActPasos = False
    
        '--Idiomas--53
        'reemplazos
        '229 x 105
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 105) <> "" Then
                If datos(Xconst + 106) <> "" Or datos(Xconst + 107) <> "" Or datos(Xconst + 108) <> "" Then
                    
                    'Idioma
                    Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 105
                    Aux = TraerCodIdioma_2(CStr(datos(Xconst + 105))) 'idioma1
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "EL Idioma no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 105) = TraerCodIdioma(CStr(Datos(Xconst + 105))) 'idioma1
                    
                    'Nivel Lee
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 106
                    Aux = TraerCodIdiNivel_2(CStr(datos(Xconst + 106))) 'idiomaLee1
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "EL nivel de Idioma no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 106) = TraerCodIdiNivel(CStr(Datos(Xconst + 106))) 'idiomaLee1
                    
                    'Nivel Habla
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 107
                    Aux = TraerCodIdiNivel_2(CStr(datos(Xconst + 107))) 'idiomaHabla1
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "EL nivel de Idioma no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 107) = TraerCodIdiNivel(CStr(Datos(Xconst + 107))) 'idiomaHabla1
                    
                    'Nivel escribe
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 108
                    Aux = TraerCodIdiNivel_2(CStr(datos(Xconst + 108))) 'idiomaEscribe1
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "EL nivel de Idioma no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 108) = TraerCodIdiNivel(CStr(Datos(Xconst + 108))) 'idiomaEscribe1
                    If Inserta Then
                        If Not TieneIdioma(Ternro, CLng(datos(Xconst + 105))) Then
                            StrSql = " INSERT INTO emp_idi "
                            StrSql = StrSql & " (idinro, empleado, empidlee, empidhabla, empidescr) "
                            StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 105)) & ", " & Ternro & " ," & datos(Xconst + 106) & ", " & datos(Xconst + 107) & ", " & datos(Xconst + 108) & " ) "
                        Else
                            StrSql = " UPDATE emp_idi SET "
                            StrSql = StrSql & "  empidlee = " & datos(Xconst + 106)
                            StrSql = StrSql & ", empidhabla = " & datos(Xconst + 107)
                            StrSql = StrSql & ", empidescr = " & datos(Xconst + 108)
                            StrSql = StrSql & " where empleado = " & Ternro & " and idinro = " & CLng(datos(Xconst + 105))
                        End If
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Texto = ": " & "Error insertando el Idioma SQL " & StrSql
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            Texto = ": " & Err.Description
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            RegWarnings = RegWarnings + 1
                            Err.Clear
                        Else
                            Flog.writeline "Inserte el Idioma " & datos(Xconst + 105)
                            ActPasos = True
                        End If
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 53)
        End If
        ActPasos = False
    
        
        '--Estudios-Informales--50
        'Reemplazos
        ' 249 x 121
        ActPasos = False
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 121) <> "" Then
                tempString = StrToStr(datos(121), 50) ''descCurso  estinfdesabr
                datos(121) = datos(121) ''descCurso  estinfdesabr
                
                'Tipo de Curso
                Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 122
                Aux = TraerCodTipoCurso_2(StrToStr(datos(122), 50)) 'tipoCurso tipcurnro
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "EL tipo de curso no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(122) = TraerCodTipoCurso(StrToStr(Datos(122), 50)) 'tipoCurso tipcurnro
                
                If datos(123) <> "" Then
                    datos(123) = ConvFecha(datos(123)) 'fechaCurso  estinffecha
                Else
                    datos(123) = ConvFecha(Date)
                End If
                
                'Institucion
                'Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 124
                Aux = TraerCodInstitucion_2(CStr(datos(124))) 'institucionCurso instnro
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "La Institucion no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(124) = TraerCodInstitucion(CStr(Datos(124))) 'institucionCurso instnro
                
                If Inserta Then
                    If datos(121) = "" Or datos(122) = "" Or datos(124) = "" Then
                        Flog.writeline "Error al insertar el estudio informal por falta de datos "
                    Else
                        StrSql = " INSERT INTO cap_estinformal "
                        StrSql = StrSql & " (ternro, estinfdesabr, estinffecha, tipcurnro, instnro) "
                        StrSql = StrSql & " VALUES (" & Ternro & " , '" & tempString & "'," & datos(123) & "," & CLng(datos(122)) & "," & CLng(datos(124)) & ")"
                        Err.Clear
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            RegWarnings = RegWarnings + 1
                            Texto = ": " & "Error insertando Estudio informal SQL " & StrSql
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            Texto = ": " & Err.Description
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            Err.Clear
                        Else
                            Flog.writeline "Inserto los datos del estudio informal "
                            ActPasos = True
                        End If
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 50)
        End If
        ActPasos = False
        
        
        '--Especializaciones--51
        'reemplazos
        '253 x 137
        Xconst = 0
        ActPasos = False
        For a = 0 To 3
            If datos(Xconst + 139) <> "" Then
                'Datos(Xconst + 253) = TraerCodEspecializacion(CStr(Datos(Xconst + 253))) 'tipo
                'Datos(Xconst + 254) = TraerCodEltoana(CStr(Datos(Xconst + 254)), Datos(Xconst + 253)) 'elemento
                
                'Especializacion
                Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 139
                Aux = TraerCodNivelEspecializacion_2(CStr(datos(Xconst + 139))) 'nivel
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "La Institucion no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(Xconst + 139) = TraerCodNivelEspecializacion(CStr(Datos(Xconst + 139))) 'nivel
                If Inserta Then
                    StrSql = " INSERT INTO especemp "
                    StrSql = StrSql & " (eltananro, ternro, espnivnro ) "
                    StrSql = StrSql & " VALUES (" & datosEltoAna(0, a) & ", " & Ternro & " ," & datos(Xconst + 139) & ") "
                    Err.Clear
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        RegWarnings = RegWarnings + 1
                        Texto = ": " & "Error insertando Especialidad SQL " & StrSql
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        Texto = ": " & Err.Description
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        Err.Clear
                    Else
                        'Flog.Writeline "Inserto los datos de la especialidad"
                        ActPasos = True
                    End If
                End If
            Else
                'Flog.Writeline "Error al insertar la especialidad por falta de datos. "
            End If
            Xconst = Xconst + 3
        Next a
        If ActPasos Then
           Flog.writeline "Inserto los datos de la especialidad"
           Call InsertarPaso(Ternro, 51)
           ActPasos = False
        End If
        
        '--Notas del Postulante --50

        ActPasos = False
        Xconst = 0
        For a = 0 To 4
            If datos(Xconst + 149) <> "" Then
                
                'Tipo de Nota
                Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 149
                Aux = TraerCodTipoNota_2(datos(NroColumna)) 'tnonro
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "EL tipo de Nota no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                
                datos(Xconst + 150) = StrToStr(datos(Xconst + 150), 50)   'notremitente
                datos(Xconst + 151) = StrToStr(datos(Xconst + 151), 50)   'notmotivo
                
                If datos(Xconst + 152) <> "" Then
                    datos(Xconst + 152) = ConvFecha(CDate(datos(Xconst + 152)))  'notfecalta
                Else
                    datos(Xconst + 152) = "NULL"
                End If
               
                datos(Xconst + 153) = StrToStr(datos(Xconst + 153), 4)      'nothoraalta
                datos(Xconst + 154) = StrToStr(datos(Xconst + 154), 1000)   'notatxt
                                
                If Inserta Then
                        StrSql = " INSERT INTO notas_ter "
                        StrSql = StrSql & " (ternro, tnonro, notatxt, notfecalta, nothoraalta, notremitente, notmotivo) "
                        StrSql = StrSql & " VALUES (" & Ternro & "," & CLng(datos(Xconst + 149)) & ",'" & datos(Xconst + 154) & "'," & datos(Xconst + 152) & ",'" & datos(Xconst + 153) & "','" & datos(Xconst + 150) & "','" & datos(Xconst + 151) & "')"
                        Err.Clear
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            RegWarnings = RegWarnings + 1
                            Texto = ": " & "Error insertando Notas de Postulantes SQL " & StrSql
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            Texto = ": " & Err.Description
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            Err.Clear
                        Else
                            Flog.writeline "Inserto los datos de Notas del Postulante "
                        End If
                End If
            End If
            Xconst = Xconst + 6
        Next a
        
        
        
    Else
        Ternro = rs_Ter!Ternro
        Flog.writeline "-----------------------------------------------"
        Flog.writeline "Codigo de Tercero = " & Ternro
        
        'FGZ - 27/07/2005
        'si el tercereo existe pero es de tipo empleado ==> no se hace nada
        '1       Empleado
        '2       Empleado Agencia
        StrSql = " SELECT * FROM ter_tip"
        StrSql = StrSql & " WHERE ternro = " & Ternro
        StrSql = StrSql & " AND tipnro = 1"
        'StrSql = StrSql & " AND (tipnro = 1 OR tipnro = 2)"
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If Not rs_Aux.EOF Then
            Flog.writeline "El Postulante ya es empleado." & "No se procesará."
            Flog.writeline
            Flog.writeline "Linea Abortada "
            Flog.writeline "*****************"
            Exit Sub
        End If
        
        'Actualizar los datos
        StrSql = " UPDATE tercero SET "
        StrSql = StrSql & " ternom = " & "'" & datos(3) & "'"
        StrSql = StrSql & ", ternom2 = " & "'" & datos(4) & "'"
        StrSql = StrSql & ", terape = " & "'" & datos(5) & "'"
        StrSql = StrSql & ", terape2 = " & "'" & datos(6) & "'"
        StrSql = StrSql & ", terfecnac = " & datos(7)
        StrSql = StrSql & ", tersex = " & CLng(datos(8))
        StrSql = StrSql & ", teremail =" & "'" & datos(23) & "'"
        StrSql = StrSql & ", nacionalnro =" & CLng(datos(13))
        StrSql = StrSql & ", estcivnro =" & "'" & datos(9) & "'"
        StrSql = StrSql & ", terfecing =" & datos(14)
        StrSql = StrSql & ", tercasape =" & "'" & datos(11) & "'"
        StrSql = StrSql & ",terfecestciv =" & datos(10)
        StrSql = StrSql & ", paisnro =" & datos(12)
        StrSql = StrSql & " WHERE ternro = " & Ternro
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Tercero Actualizado"
    
        'Desactivo el manejador de erorres
        On Error GoTo 0
        
        'Cualquier error que ocurra de aquí en adelante sigue adelante
        ' tratando de insertar la mayor cantidad de datos posible
        On Error Resume Next
        
        StrSql = "SELECT * FROM ter_doc  "
        StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
        StrSql = StrSql & " AND ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
            StrSql = StrSql & " VALUES(" & Ternro & "," & datos(1) & ",'" & datos(2) & "')"
        Else
            StrSql = "UPDATE ter_doc SET "
            StrSql = StrSql & " nrodoc = '" & datos(2) & "'"
            StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
            StrSql = StrSql & " AND ternro = " & Ternro
        End If
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Documento Actualizado"
        
        
        '--------------------------------------------------------------------------------
        '--Inserto el Domicilio--
        StrSql = "SELECT * FROM cabdom  "
        StrSql = StrSql & " WHERE tipnro = 1"
        StrSql = StrSql & " AND ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
            StrSql = StrSql & " VALUES(1," & Ternro & ",-1,2)"
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline "inserto el Domicilio"
    
            '--Obtengo el numero de domicilio en la tabla--
            NroDom = CLng(getLastIdentity(objConn, "cabdom"))
        
            '--Si no tiene algun dato le agregamos unos ficticios--
            datos(24) = StrToStr(datos(24), 30) 'dirCalle
            datos(25) = StrToStr(datos(25), 8) 'dirNumero
            datos(26) = StrToStr(datos(26), 8) 'dirPiso
            datos(27) = StrToStr(datos(27), 8) 'dirDepto
            datos(28) = StrToStr(datos(28), 8) 'dirTorre
            datos(29) = StrToStr(datos(29), 8) 'dirManzana
            datos(30) = StrToStr(datos(30), 8) 'dirSector
            datos(31) = StrToStr(datos(31), 12) 'dirCP
'            Datos(32) = TraerCodLocalidad(CStr(Datos(32))) 'dirLocalidad
'            Datos(33) = TraerCodProvincia(CStr(Datos(33)))   'dirProvincia
'            Datos(34) = TraerCodPartido(CStr(Datos(34)))  'dirPartido
'            Datos(35) = TraerCodZona(CStr(Datos(35)), clng(Datos(33)))  'dirZona
'                If Datos(35) = "" Then Datos(35) = "NULL"
'            Datos(36) = TraerCodPais(CStr(Datos(36))) 'dirPais
        
            'dirLocalidad
            Obligatorio = True
            NroColumna = 32
            Aux = TraerCodLocalidad_2(CStr(datos(NroColumna))) 'dirLocalidad
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "La localidad no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegError = RegError + 1
                    Flog.writeline
                    Flog.writeline "Linea Abortada "
                    Flog.writeline "*****************"
                    Exit Sub
                End If
            End If
            
            'dirProvincia
            Obligatorio = True
            NroColumna = 33
            Aux = TraerCodProvincia_2(CStr(datos(NroColumna)))   'dirProvincia
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "La Provincia no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegError = RegError + 1
                    Flog.writeline
                    Flog.writeline "Linea Abortada "
                    Flog.writeline "*****************"
                    Exit Sub
                End If
            End If
            
            'dirPartido
            Obligatorio = True
            NroColumna = 34
            Aux = TraerCodPartido_2(CStr(datos(NroColumna)))  'dirPartido
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "El partido no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegError = RegError + 1
                    Flog.writeline
                    Flog.writeline "Linea Abortada "
                    Flog.writeline "*****************"
                    Exit Sub
                End If
            End If
            
            'dirZona
            Obligatorio = True
            NroColumna = 35
            Aux = TraerCodZona_2(CStr(datos(NroColumna)), CLng(datos(NroColumna)))  'dirZona
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "La zona no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegWarnings = RegWarnings + 1
                    datos(35) = "NULL"
                End If
            End If
            
            'Pais de Dir
            Obligatorio = True
            NroColumna = 36
            Aux = TraerCodPais_2(CStr(datos(NroColumna))) 'dirPais
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "El Pais no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegError = RegError + 1
                    Flog.writeline
                    Flog.writeline "Linea Abortada "
                    Flog.writeline "*****************"
                    Exit Sub
                End If
            End If
        
            StrSql = " INSERT INTO detdom (domnro,calle,nro,sector,torre,piso,oficdepto,manzana,codigopostal,"
            StrSql = StrSql & "locnro,provnro,paisnro, zonanro, partnro) "
            StrSql = StrSql & " VALUES ("
            StrSql = StrSql & NroDom
            StrSql = StrSql & ",'" & datos(24) & "'"
            StrSql = StrSql & ",'" & datos(25) & "'"
            StrSql = StrSql & ",'" & datos(30) & "'"
            StrSql = StrSql & ",'" & datos(28) & "'"
            StrSql = StrSql & ",'" & datos(26) & "'"
            StrSql = StrSql & ",'" & datos(27) & "'"
            StrSql = StrSql & ",'" & datos(29) & "'"
            StrSql = StrSql & ",'" & datos(31) & "'"
            StrSql = StrSql & "," & datos(32)
            StrSql = StrSql & "," & datos(33)
            StrSql = StrSql & "," & datos(36)
            StrSql = StrSql & "," & datos(35)
            StrSql = StrSql & "," & datos(34)
            StrSql = StrSql & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                RegWarnings = RegWarnings + 1
                Texto = ": " & "Error insertando SQL " & StrSql
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Texto = ": " & Err.Description
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Err.Clear
            Else
                Flog.writeline "Inserte el domicilio "
            End If
            Flog.writeline "Inserto el Domicilio "
        Else
            NroDom = rs_Aux!domnro
        
            '--Si no tiene algun dato le agregamos unos ficticios--
            datos(24) = StrToStr(datos(24), 30) 'dirCalle
            datos(25) = StrToStr(datos(25), 8) 'dirNumero
            datos(26) = StrToStr(datos(26), 8) 'dirPiso
            datos(27) = StrToStr(datos(27), 8) 'dirDepto
            datos(28) = StrToStr(datos(28), 8) 'dirTorre
            datos(29) = StrToStr(datos(29), 8) 'dirManzana
            datos(30) = StrToStr(datos(30), 8) 'dirSector
            datos(31) = StrToStr(datos(31), 12) 'dirCP
'            Datos(32) = TraerCodLocalidad(CStr(Datos(32))) 'dirLocalidad
'            Datos(33) = TraerCodProvincia(CStr(Datos(33)))   'dirProvincia
'            Datos(34) = TraerCodPartido(CStr(Datos(34)))  'dirPartido
'            Datos(35) = TraerCodZona(CStr(Datos(35)), clng(Datos(33)))  'dirZona
'            If Datos(35) = "" Then Datos(35) = "NULL"
'            Datos(36) = TraerCodPais(CStr(Datos(36))) 'dirPais
        
            'dirLocalidad
            Obligatorio = True
            NroColumna = 32
            Aux = TraerCodLocalidad_2(CStr(datos(NroColumna))) 'dirLocalidad
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "La localidad no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegError = RegError + 1
                    Flog.writeline
                    Flog.writeline "Linea Abortada "
                    Flog.writeline "*****************"
                    Exit Sub
                End If
            End If
            
            'dirProvincia
            Obligatorio = True
            NroColumna = 33
            Aux = TraerCodProvincia_2(CStr(datos(NroColumna)))   'dirProvincia
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "La Provincia no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegError = RegError + 1
                    Flog.writeline
                    Flog.writeline "Linea Abortada "
                    Flog.writeline "*****************"
                    Exit Sub
                End If
            End If
            
            'dirPartido
            Obligatorio = False
            NroColumna = 34
            Aux = TraerCodPartido_2(CStr(datos(NroColumna)))  'dirPartido
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "El partido no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegWarnings = RegWarnings + 1
                    Flog.writeline
                    Flog.writeline "Linea Abortada "
                    Flog.writeline "*****************"
                    Exit Sub
                End If
            End If
            
            'dirZona
            Obligatorio = False
            NroColumna = 35
            Aux = TraerCodZona_2(CStr(datos(NroColumna)), CLng(datos(NroColumna)))  'dirZona
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "La zona no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegWarnings = RegWarnings + 1
                    datos(35) = "NULL"
                End If
            End If
            
            'Pais de Dir
            Obligatorio = True
            NroColumna = 36
            Aux = TraerCodPais_2(CStr(datos(NroColumna))) 'dirPais
            If Aux <> CStr(datos(NroColumna)) Then
                Texto = ": " & "El Pais no existe " & datos(NroColumna)
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                If Obligatorio Then
                    RegError = RegError + 1
                    Flog.writeline
                    Flog.writeline "Linea Abortada "
                    Flog.writeline "*****************"
                    Exit Sub
                End If
            End If
        
            StrSql = " UPDATE detdom SET "
            StrSql = StrSql & " calle =" & "'" & datos(24) & "'"
            StrSql = StrSql & ",nro =" & "'" & datos(25) & "'"
            StrSql = StrSql & ",sector =" & "'" & datos(30) & "'"
            StrSql = StrSql & ",torre =" & "'" & datos(28) & "'"
            StrSql = StrSql & ",piso =" & "'" & datos(26) & "'"
            StrSql = StrSql & ",oficdepto =" & "'" & datos(27) & "'"
            StrSql = StrSql & ",manzana =" & "'" & datos(29) & "'"
            StrSql = StrSql & ",codigopostal =" & "'" & datos(31) & "'"
            StrSql = StrSql & ",locnro =" & datos(32)
            StrSql = StrSql & ",provnro =" & datos(33)
            StrSql = StrSql & ",paisnro =" & datos(36)
            StrSql = StrSql & ", zonanro =" & datos(35)
            StrSql = StrSql & ", partnro = " & datos(34)
            StrSql = StrSql & " WHERE domnro = " & NroDom
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                RegWarnings = RegWarnings + 1
                Texto = ": " & "Error Actualizando Domicilio. SQL " & StrSql
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Texto = ": " & Err.Description
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Err.Clear
            Else
                Flog.writeline "Domicilio actualizado"
            End If
        End If
        
        
        '--Telefonos-Personal--
        datos(21) = validatelefono(StrToStr(datos(21), 20))
        If datos(21) <> "" Then
            StrSql = "SELECT * FROM telefono  "
            StrSql = StrSql & " WHERE domnro = " & NroDom
            StrSql = StrSql & " AND telnro = " & "'" & datos(21) & "'"
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO telefono "
                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
                StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0,1 ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    RegWarnings = RegWarnings + 1
                    Texto = ": " & "Error insertando Telefono. SQL " & StrSql
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    Texto = ": " & Err.Description
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    Err.Clear
                Else
                    Flog.writeline "Inserte el telefono"
                End If
            End If
        End If
        
        '--Telefonos-segundo--
        datos(22) = validatelefono(StrToStr(datos(22), 20))
        If datos(22) <> "" Then
            StrSql = "SELECT * FROM telefono  "
            StrSql = StrSql & " WHERE domnro = " & NroDom
            StrSql = StrSql & " AND telnro = " & "'" & datos(22) & "'"
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO telefono "
                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
                StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
                StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0,2 ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    RegWarnings = RegWarnings + 1
                    Texto = ": " & "Error insertando telefono. SQL " & StrSql
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    Texto = ": " & Err.Description
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    Err.Clear
                Else
                    Flog.writeline "Inserte el telefono2 "
                End If
            End If
        End If
    
    
        '--Complemento--
        If datos(15) = "" Then
            datos(15) = 0
        Else
            datos(15) = CLng(StrToInt(datos(15))) 'cantidadHijos
        End If
        datos(16) = StrToStr(datos(16), 60) 'imagen
        If datos(17) = "" Then
            datos(17) = "NULL"
        Else
            datos(17) = ConvFecha(CDate(datos(17))) 'fechaIngresoCV
        End If
        datos(18) = StrToStr(datos(18), 250) 'referencias
        
        'procedencia
        Obligatorio = False
        NroColumna = 19
        If datos(NroColumna) = "" Then
            datos(NroColumna) = "null"
        End If
        Aux = TraerCodProcedencia_2(CStr(datos(NroColumna))) 'procedencia
        If Aux <> CStr(datos(NroColumna)) Then
            Texto = ": " & "La Procedencia no existe " & datos(NroColumna)
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            If Obligatorio Then
                RegWarnings = RegWarnings + 1
                Flog.writeline
                Flog.writeline "Linea Abortada "
                Flog.writeline "*****************"
                Exit Sub
            End If
        End If
        
        If datos(20) = "" Then
            datos(20) = 0
        Else
            datos(20) = CDbl(StrToDbl(datos(20))) 'remuneracionPretendida
        End If
        
        StrSql = "SELECT * FROM pos_postulante  "
        StrSql = StrSql & " WHERE ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            'StrSql = " INSERT INTO pos_postulante "
            'StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro) "
            'StrSql = StrSql & " VALUES (" & ternro & " ," & CDbl(Datos(20)) & ", " & CLng(Datos(15)) & ", '" & Datos(16) & "', " & Datos(17) & ",'" & Datos(18) & "', " & Datos(19) & ") "
            
            'JMH - 07/03/2006 Se agrego el estposnro = 4 (postulantre activo)
            StrSql = " INSERT INTO pos_postulante "
            StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro,estposnro) "
            StrSql = StrSql & " VALUES (" & Ternro & " ," & CDbl(datos(20)) & ", " & CLng(datos(15)) & ", '" & datos(16) & "', " & datos(17) & ",'" & datos(18) & "', " & datos(19) & ",4) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                RegWarnings = RegWarnings + 1
                Texto = ": " & "Error insertando postulante. SQL " & StrSql
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Texto = ": " & Err.Description
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Err.Clear
            Else
                Flog.writeline "Inserte el Complemento "
            End If
        Else
            StrSql = "UPDATE pos_postulante SET "
            StrSql = StrSql & " posrempre = " & CDbl(datos(20))
            StrSql = StrSql & ", poscanhijos =" & CLng(datos(15))
            StrSql = StrSql & ", posfoto =" & "'" & datos(16) & "'"
            StrSql = StrSql & ", posfecpres =" & datos(17)
            StrSql = StrSql & ", posref =" & "'" & datos(18) & "'"
            StrSql = StrSql & ", procnro =" & datos(19)
            StrSql = StrSql & " WHERE ternro = " & Ternro
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                RegWarnings = RegWarnings + 1
                Texto = ": " & "Error Actualizando Postulante. SQL " & StrSql
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Texto = ": " & Err.Description
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                Err.Clear
            Else
                Flog.writeline "Complemento actualizado"
            End If
        End If
        
        '--Estudios-formales--(49)licho por aca
        Xconst = 0
        For a = 0 To 3
            If UBound(datos) > (Xconst + 37) Then
                If datos(Xconst + 37) <> "" Then
                    'EFnivel8
                    Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 37
                    Aux = TraerCodNivelEstudio_2(datos(NroColumna))   'EFnivel8
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "El Nivel de estudio no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 37) = TraerCodNivelEstudio_2(Datos(Xconst + 37))   'EFnivel8
                                    
                    'Completo
                    If datos(Xconst + 38) = -1 Then datos(Xconst + 38) = -1 Else datos(Xconst + 38) = 0
    
                    'Titulo
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 39
                    Aux = TraerCodTitulo_2(CStr(datos(Xconst + 39)), CLng(datos(Xconst + 37)))   'EFtitulo8
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "El Titulo no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 39) = TraerCodTitulo_2(CStr(Datos(Xconst + 39)), clng(Datos(Xconst + 37)))   'EFtitulo8
                    
                    'Institucion
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 40
                    Aux = TraerCodInstitucionAbreviada_2(CStr(datos(Xconst + 40)))   'EFinstitucion8
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "La Institucion no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 40) = TraerCodInstitucionAbreviada_2(CStr(Datos(Xconst + 40)))   'EFinstitucion8
                    
                    'Carrera
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 41
                    Aux = TraerCodCarrera_2(CStr(datos(Xconst + 41)))    'EFcarrera8
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "La Carrera no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 41) = TraerCodCarrera_2(CStr(Datos(Xconst + 41)))    'EFcarrera8
                    
                    If datos(Xconst + 42) <> "" Then
                        datos(Xconst + 42) = ConvFecha(CDate(datos(Xconst + 42)))   'EFfechaDesde8
                    Else
                        datos(Xconst + 42) = "NULL"
                    End If
                    If datos(Xconst + 43) <> "" Then
                        datos(Xconst + 43) = ConvFecha(CDate(datos(Xconst + 43)))   'EFfechaHasta8
                    Else
                        datos(Xconst + 43) = "NULL"
                    End If
                    datos(Xconst + 44) = StrToStr(datos(Xconst + 44), 30)   'EFpromedio8
                    datos(Xconst + 45) = StrToStr(datos(Xconst + 45), 60)   'EFrango8
                    If datos(Xconst + 46) <> "" And UCase(datos(Xconst + 46)) <> "NO" Then
                        datos(Xconst + 46) = -1  'EFestudiaActualmente8
                    Else
                        datos(Xconst + 46) = 0  'EFestudiaActualmente8
                    End If
            
                    If Inserta Then
                        'actualizo
                        StrSql = "SELECT * FROM cap_estformal  "
                        StrSql = StrSql & " WHERE nivnro = " & CLng(datos(Xconst + 37))
                        StrSql = StrSql & " AND ternro = " & Ternro
                        StrSql = StrSql & " AND titnro = " & datos(Xconst + 39)
                        StrSql = StrSql & " AND instnro = " & datos(Xconst + 40)
                        StrSql = StrSql & " AND carredunro = " & datos(Xconst + 41)
                        If rs_Aux.State = adStateOpen Then rs_Aux.Close
                        OpenRecordset StrSql, rs_Aux
                        If rs_Aux.EOF Then
                            StrSql = " INSERT INTO cap_estformal "
                            StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
                            StrSql = StrSql & " VALUES ("
                            StrSql = StrSql & CLng(datos(Xconst + 37))          'nivnro
                            StrSql = StrSql & "," & Ternro                      'ternro
                            StrSql = StrSql & "," & datos(Xconst + 39)          'titnro
                            StrSql = StrSql & "," & datos(Xconst + 40)          'instnro
                            StrSql = StrSql & "," & datos(Xconst + 41)          'carredunro
                            StrSql = StrSql & "," & datos(Xconst + 42)          'capfecdes
                            StrSql = StrSql & "," & datos(Xconst + 43)          'capfechas
                            StrSql = StrSql & "," & datos(Xconst + 38)          'capcomp
                            StrSql = StrSql & "," & datos(Xconst + 46)          'capestact
                            StrSql = StrSql & ",'" & datos(Xconst + 45) & "'"   'caprango
                            StrSql = StrSql & ",'" & datos(Xconst + 44) & "'"   'capprom
                            StrSql = StrSql & ")"
                            objConn.Execute StrSql, , adExecuteNoRecords
                            If Err Then
                                RegWarnings = RegWarnings + 1
                                Texto = ": " & "Error insertando Estudio Formal. SQL " & StrSql
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Texto = ": " & Err.Description
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Err.Clear
                            Else
                                Flog.writeline "Inserte el estudio formal " & datos(Xconst + 37)
                                ActPasos = True
                            End If
                        Else
                            StrSql = "UPDATE  cap_estformal SET "
                            StrSql = StrSql & " capfecdes = " & datos(Xconst + 42)
                            StrSql = StrSql & ", capfechas =" & datos(Xconst + 43)
                            StrSql = StrSql & ", capcomp =" & datos(Xconst + 38)
                            StrSql = StrSql & ", capestact =" & datos(Xconst + 46)
                            StrSql = StrSql & ", caprango =" & "'" & datos(Xconst + 45) & "'"
                            StrSql = StrSql & ", capprom =" & "'" & datos(Xconst + 44) & "'"
                            StrSql = StrSql & " WHERE nivnro = " & CLng(datos(Xconst + 37))
                            StrSql = StrSql & " AND ternro = " & Ternro
                            StrSql = StrSql & " AND titnro = " & datos(Xconst + 39)
                            StrSql = StrSql & " AND instnro = " & datos(Xconst + 40)
                            StrSql = StrSql & " AND carredunro = " & datos(Xconst + 41)
                            objConn.Execute StrSql, , adExecuteNoRecords
                            If Err Then
                                RegWarnings = RegWarnings + 1
                                Texto = ": " & "Error Actualizando Estudio Formal. SQL " & StrSql
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Texto = ": " & Err.Description
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Err.Clear
                            Else
                                Flog.writeline "Estudio formal " & datos(Xconst + 37) & " actualizado"
                                ActPasos = False
                            End If
                        End If
                    End If
                End If
            Else
            End If
            Xconst = Xconst + 10
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 49)
        End If
        ActPasos = False
        
        
        '--Experiencia-Laboral----Empleos Anteriores--57
        Xconst = 0
        For a = 0 To 3
            If UBound(datos) > (Xconst + 77) Then
                If datos(Xconst + 78) <> "" And datos(Xconst + 77) <> "" Then
                    'Cargo Anterior
                    Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 77
                    Aux = TraerCodCargo_2(CStr(datos(Xconst + 77)))    'ELcargoAnterior16
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "EL Cargo no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 77) = TraerCodCargo(CStr(Datos(Xconst + 77)))    'ELcargoAnterior16
                    
                    'Empresa
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 78
                    Aux = TraerCodListaEmpresa_2(CStr(datos(Xconst + 78)))   'ELempresa16 lempnro
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "La empresa no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 78) = TraerCodListaEmpresa(CStr(Datos(Xconst + 78)))   'ELempresa16 lempnro
                    
                    'Tarea desempeñada
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 79
                    Aux = StrToStr(datos(Xconst + 79), 200) 'ELtareaDesempenada16
                    datos(Xconst + 79) = Aux
                    'Datos(Xconst + 79) = StrToStr(Datos(Xconst + 79), 200) 'ELtareaDesempenada16
                    
                    If datos(Xconst + 80) <> "" Then
                        datos(Xconst + 80) = ConvFecha(CDate(datos(Xconst + 80)))  'ELfechaDesde16
                    Else
                        datos(Xconst + 80) = "NULL"
                    End If
                    If datos(Xconst + 81) <> "" Then
                        datos(Xconst + 81) = ConvFecha(CDate(datos(Xconst + 81)))  'ELfechaHasta16
                    Else
                        datos(Xconst + 81) = "NULL"
                    End If
                    If datos(Xconst + 82) = "" Then
                        datos(Xconst + 82) = 0
                    Else
                        datos(Xconst + 82) = StrToDbl(datos(Xconst + 82))   'ELremuneracion16
                    End If
                    
                    'Causa de baja
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 83
                    If datos(Xconst + 83) <> "" Then
                        Aux = TraerCodCausa_2(CStr(datos(Xconst + 83)))   'ELcausaBaja16
                        If Aux <> CStr(datos(NroColumna)) Then
                            Texto = ": " & "La Causa de baja no existe " & datos(NroColumna)
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            If Obligatorio Then
                                RegWarnings = RegWarnings + 1
                                Inserta = False
                            End If
                        End If
                    Else
                        datos(Xconst + 83) = "NULL"
                    End If
                
                    If Inserta Then
                        StrSql = "SELECT * FROM empant  "
                        StrSql = StrSql & " WHERE empleado = " & Ternro
                        StrSql = StrSql & " AND empatareas = " & "'" & datos(Xconst + 79) & "'"
                        StrSql = StrSql & " AND lempnro = " & datos(Xconst + 78)
                        StrSql = StrSql & " AND carnro = " & datos(Xconst + 77)
                        If rs_Aux.State = adStateOpen Then rs_Aux.Close
                        OpenRecordset StrSql, rs_Aux
                        If rs_Aux.EOF Then
                            StrSql = " INSERT INTO empant "
                            'FGZ - 29/08/2005
                            'cambié los nombres de los campos donde inserta las fechas desde y hasta
                            'StrSql = StrSql & " ( empleado, empatareas, lempnro, empadesde, emmpahasta, carnro, emparemu ) "
                            StrSql = StrSql & " ( empleado, empatareas, lempnro, empaini, empafin, carnro, emparemu ) "
                            StrSql = StrSql & " VALUES (" & Ternro & ", '" & datos(Xconst + 79) & "' ," & datos(Xconst + 78) & "," & datos(Xconst + 80) & "," & datos(Xconst + 81) & "," & datos(Xconst + 77) & "," & datos(Xconst + 82) & "  ) "
                            objConn.Execute StrSql, , adExecuteNoRecords
                            If Err Then
                                RegWarnings = RegWarnings + 1
                                Texto = ": " & "Error insertando Empleo anterior. SQL " & StrSql
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Texto = ": " & Err.Description
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Err.Clear
                            Else
                                Flog.writeline "Inserto los datos del Empleo Anterior"
                                ActPasos = True
                            End If
                        Else
                            StrSql = "UPDATE empant SET "
                            'FGZ - 29/08/2005
    '                        StrSql = StrSql & " empadesde =" & Datos(Xconst + 120)
    '                        StrSql = StrSql & ", emmpahasta =" & (Datos(Xconst + 121))
                            StrSql = StrSql & " empaini =" & datos(Xconst + 80)
                            StrSql = StrSql & ", empafin =" & (datos(Xconst + 81))
                            StrSql = StrSql & ", emparemu = " & datos(Xconst + 82)
                            StrSql = StrSql & " WHERE empantnro = " & rs_Aux!Empantnro
                            objConn.Execute StrSql, , adExecuteNoRecords
                            If Err Then
                                RegWarnings = RegWarnings + 1
                                Texto = ": " & "Error Actualizando Empleo Anterior. SQL " & StrSql
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Texto = ": " & Err.Description
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Err.Clear
                            Else
                                Flog.writeline "Actualizo los datos del Empleo Anterior"
                                ActPasos = False
                            End If
                        End If
                    End If
                Else
                End If
            End If
            Xconst = Xconst + 7
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 57)
        End If
        ActPasos = False
    
    
        '--Idiomas--53
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 105) <> "" Then
                If datos(Xconst + 106) <> "" Or datos(Xconst + 107) <> "" Or datos(Xconst + 108) <> "" Then
                    
                    'Idioma
                    Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 105
                    Aux = TraerCodIdioma_2(CStr(datos(Xconst + 105))) 'idioma1
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "EL Idioma no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 105) = TraerCodIdioma(CStr(Datos(Xconst + 105))) 'idioma1
                    
                    'Nivel Lee
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 106
                    Aux = TraerCodIdiNivel_2(CStr(datos(Xconst + 106))) 'idiomaLee1
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "EL nivel de Idioma no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 106) = TraerCodIdiNivel(CStr(Datos(Xconst + 106))) 'idiomaLee1
                    
                    'Nivel Habla
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 107
                    Aux = TraerCodIdiNivel_2(CStr(datos(Xconst + 107))) 'idiomaHabla1
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "EL nivel de Idioma no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 107) = TraerCodIdiNivel(CStr(Datos(Xconst + 107))) 'idiomaHabla1
                    
                    'Nivel escribe
                    'Inserta = True
                    Obligatorio = True
                    NroColumna = Xconst + 108
                    Aux = TraerCodIdiNivel_2(CStr(datos(Xconst + 108))) 'idiomaEscribe1
                    If Aux <> CStr(datos(NroColumna)) Then
                        Texto = ": " & "EL nivel de Idioma no existe " & datos(NroColumna)
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                        If Obligatorio Then
                            RegWarnings = RegWarnings + 1
                            Inserta = False
                        End If
                    End If
                    'Datos(Xconst + 108) = TraerCodIdiNivel(CStr(Datos(Xconst + 108))) 'idiomaEscribe1
                    If Inserta Then
                        
                        If Not TieneIdioma(Ternro, CLng(datos(Xconst + 105))) Then
                            StrSql = " INSERT INTO emp_idi "
                            StrSql = StrSql & " (idinro, empleado, empidlee, empidhabla, empidescr) "
                            StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 105)) & ", " & Ternro & " ," & datos(Xconst + 106) & ", " & datos(Xconst + 107) & ", " & datos(Xconst + 108) & " ) "
                        Else
                            StrSql = " UPDATE emp_idi SET "
                            StrSql = StrSql & "  empidlee = " & datos(Xconst + 106)
                            StrSql = StrSql & ", empidhabla = " & datos(Xconst + 107)
                            StrSql = StrSql & ", empidescr = " & datos(Xconst + 108)
                            StrSql = StrSql & " where empleado = " & Ternro & " and idinro = " & CLng(datos(Xconst + 105))
                        End If
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            RegWarnings = RegWarnings + 1
                            Texto = ": " & "Error Actualizando Idioma. SQL " & StrSql
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            Texto = ": " & Err.Description
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            Err.Clear
                        Else
                            Flog.writeline "Inserte el Idioma " & datos(Xconst + 105)
                            ActPasos = True
                        End If
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 53)
        End If
        ActPasos = False
    
        
        '--Estudios-Informales--50
        ActPasos = False
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 121) <> "" Then
                tempString = StrToStr(datos(121), 50) ''descCurso  estinfdesabr
                datos(121) = datos(121) ''descCurso  estinfdesabr
                
                'Tipo de Curso
                Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 122
                Aux = TraerCodTipoCurso_2(StrToStr(datos(122), 50)) 'tipoCurso tipcurnro
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "EL tipo de curso no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(122) = TraerCodTipoCurso(StrToStr(Datos(122), 50)) 'tipoCurso tipcurnro
                
                If datos(123) <> "" Then
                    datos(123) = ConvFecha(datos(123)) 'fechaCurso  estinffecha
                Else
                    datos(123) = ConvFecha(Date)
                End If
                
                'Institucion
                'Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 124
                Aux = TraerCodInstitucion_2(CStr(datos(124))) 'institucionCurso instnro
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "La Institucion no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(124) = TraerCodInstitucion(CStr(Datos(124))) 'institucionCurso instnro
                
                If Inserta Then
                    If datos(121) = "" Or datos(122) = "" Or datos(124) = "" Then
                        RegWarnings = RegWarnings + 1
                        Texto = ": " & "Error al insertar el estudio informal por falta de datos "
                        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    Else
                        'Reviso
                        StrSql = "SELECT * FROM cap_estinformal  "
                        StrSql = StrSql & " WHERE tipcurnro = " & CLng(datos(122))
                        StrSql = StrSql & " AND ternro = " & Ternro
                        StrSql = StrSql & " AND instnro = " & CLng(datos(124))
                        If rs_Aux.State = adStateOpen Then rs_Aux.Close
                        OpenRecordset StrSql, rs_Aux
                        If rs_Aux.EOF Then
                            StrSql = " INSERT INTO cap_estinformal "
                            StrSql = StrSql & " (ternro, estinfdesabr, estinffecha, tipcurnro, instnro) "
                            StrSql = StrSql & " VALUES (" & Ternro & " , '" & tempString & "'," & datos(123) & "," & CLng(datos(122)) & "," & CLng(datos(124)) & ")"
                            objConn.Execute StrSql, , adExecuteNoRecords
                            If Err Then
                                RegWarnings = RegWarnings + 1
                                Texto = ": " & "Error Actualizando Estudio Informal. SQL " & StrSql
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Texto = ": " & Err.Description
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Err.Clear
                            Else
                                Flog.writeline "Inserto los datos del estudio informal "
                                ActPasos = True
                            End If
                        Else
                            StrSql = "UPDATE cap_estinformal SET "
                            StrSql = StrSql & " estinfdesabr = '" & tempString & "'"
                            StrSql = StrSql & ", estinffecha =" & (datos(123))
                            StrSql = StrSql & " WHERE tipcurnro = " & CLng(datos(122))
                            StrSql = StrSql & " AND ternro = " & Ternro
                            StrSql = StrSql & " AND instnro = " & CLng(datos(124))
                            objConn.Execute StrSql, , adExecuteNoRecords
                            If Err Then
                                RegWarnings = RegWarnings + 1
                                Texto = ": " & "Error Actualizando Estudio Informal. SQL " & StrSql
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Texto = ": " & Err.Description
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Err.Clear
                            Else
                                Flog.writeline "Actualizo los datos del estudio informal "
                                ActPasos = False
                            End If
                        End If
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 50)
        End If
        ActPasos = False


        '--Especializaciones--51
        'reemplazos
        '253 x 137
        Xconst = 0
        ActPasos = False
        For a = 0 To 3
            If datos(Xconst + 139) <> "" Then
                'Datos(Xconst + 253) = TraerCodEspecializacion(CStr(Datos(Xconst + 253))) 'tipo
                'Datos(Xconst + 254) = TraerCodEltoana(CStr(Datos(Xconst + 254)), Datos(Xconst + 253)) 'elemento
                
                'Especializacion
                Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 139
                Aux = TraerCodNivelEspecializacion_2(CStr(datos(Xconst + 139))) 'nivel
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "La Institucion no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                'Datos(Xconst + 139) = TraerCodNivelEspecializacion(CStr(Datos(Xconst + 139))) 'nivel
                If Inserta Then
                    'REVISO
                    StrSql = "SELECT * FROM especemp  "
                    StrSql = StrSql & " WHERE espnivnro = " & datos(Xconst + 139)
                    StrSql = StrSql & " AND ternro = " & Ternro
                    StrSql = StrSql & " AND eltananro = " & datosEltoAna(0, a)
                    If rs_Aux.State = adStateOpen Then rs_Aux.Close
                    OpenRecordset StrSql, rs_Aux
                    If rs_Aux.EOF Then
                        StrSql = " INSERT INTO especemp "
                        StrSql = StrSql & " (eltananro, ternro, espnivnro ) "
                        StrSql = StrSql & " VALUES (" & datosEltoAna(0, a) & ", " & Ternro & " ," & datos(Xconst + 139) & ") "
                        Err.Clear
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            RegWarnings = RegWarnings + 1
                            Texto = ": " & "Error Actualizando Especialidad. SQL " & StrSql
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            Texto = ": " & Err.Description
                            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                            Err.Clear
                        Else
                            ActPasos = True
                        End If
                    End If
                End If
            Else
                'Flog.Writeline "Error al insertar la especialidad por falta de datos. "
            End If
            Xconst = Xconst + 3
        Next a
        If ActPasos Then
           Flog.writeline "Inserto los datos de la especialidad"
           Call InsertarPaso(Ternro, 51)
           ActPasos = False
        End If

        '--Notas del Postulante --50
        ActPasos = False
        Xconst = 0
        For a = 0 To 4
            If datos(Xconst + 149) <> "" Then
                
                'Tipo de Nota
                Inserta = True
                Obligatorio = True
                NroColumna = Xconst + 149
                Aux = TraerCodTipoNota_2(datos(NroColumna)) 'tnonro
                If Aux <> CStr(datos(NroColumna)) Then
                    Texto = ": " & "EL tipo de Nota no existe " & datos(NroColumna)
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                    If Obligatorio Then
                        RegWarnings = RegWarnings + 1
                        Inserta = False
                    End If
                End If
                
                datos(Xconst + 150) = StrToStr(datos(Xconst + 150), 50)   'notremitente
                datos(Xconst + 151) = StrToStr(datos(Xconst + 151), 50)   'notmotivo
                
                If datos(Xconst + 152) <> "" Then
                    datos(Xconst + 152) = ConvFecha(CDate(datos(Xconst + 152)))  'notfecalta
                Else
                    datos(Xconst + 152) = "NULL"
                End If
               
                datos(Xconst + 153) = StrToStr(datos(Xconst + 153), 4)      'nothoraalta
                datos(Xconst + 154) = StrToStr(datos(Xconst + 154), 1000)   'notatxt
                                
                If Inserta Then
                        StrSql = "SELECT * FROM notas_ter  "
                        StrSql = StrSql & " WHERE tnonro = " & CLng(datos(Xconst + 149))
                        StrSql = StrSql & " AND ternro = " & Ternro
                        StrSql = StrSql & " AND notatxt = '" & datos(Xconst + 154) & "'"
                        If rs_Aux.State = adStateOpen Then rs_Aux.Close
                        OpenRecordset StrSql, rs_Aux
                        If rs_Aux.EOF Then
                            StrSql = " INSERT INTO notas_ter "
                            StrSql = StrSql & " (ternro, tnonro, notatxt, notfecalta, nothoraalta, notremitente, notmotivo) "
                            StrSql = StrSql & " VALUES (" & Ternro & "," & CLng(datos(Xconst + 149)) & ",'" & datos(Xconst + 154) & "'," & datos(Xconst + 152) & ",'" & datos(Xconst + 153) & "','" & datos(Xconst + 150) & "','" & datos(Xconst + 151) & "')"
                            Err.Clear
                            objConn.Execute StrSql, , adExecuteNoRecords
                            If Err Then
                                RegWarnings = RegWarnings + 1
                                Texto = ": " & "Error insertando Notas de Postulantes SQL " & StrSql
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Texto = ": " & Err.Description
                                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                                Err.Clear
                            Else
                                Flog.writeline "Inserto los datos de Notas del Postulante "
                            End If
                        End If
                End If
            End If
            Xconst = Xconst + 6
        Next a


    End If
Fin:
    Flog.writeline Espacios(Tabulador * 0) & "Linea Procesada."
Exit Sub

Manejador_De_Error:
    HuboError = True
    Texto = ": " & Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    RegError = RegError + 1
    GoTo Fin
    
End Sub
Public Sub LineaModelo_303(ByVal strReg As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Migracion de Empleados para Halliburton
' Autor      : Fernando Favre
' Fecha      : 24/04/2006
' Ultima Mod.:
'
' ---------------------------------------------------------------------------------------------
Dim pos1            As Long
Dim pos2            As Long

Dim Legajo          As String   'LEGAJO                   -- empleado.empleg
Dim Apellido        As String   'APELLIDO                 -- empleado.terape y tercero.terape
Dim nombre          As String   'NOMBRE                   -- empleado.ternom y tercero.ternom
Dim Fnac            As String   'FNAC                     -- tercero.terfecna
Dim Nacionalidad    As String   'Nacionalidad             -- tercero.nacionalnro
Dim PaisNac         As String   'Pais de Nacimiento       -- tercero.paisnro
Dim EstCivil        As String   'Est.Civil                -- tercero.estcivnro
Dim Sexo            As String   'Sexo                     -- tercero.tersex
Dim FAlta           As String   'Fec. de Alta             -- empleado.empfaltagr y fases.altfec
Dim Tdocu           As String   'Tipo Documento           -- ter_dpc.tidnro (DU)
Dim Ndocu           As String   'Nro. Documento           -- ter_doc.nrodoc
Dim Cuil            As String   'CUIL                     -- ter_doc.nrodoc (10)
Dim Sucursal        As String   'Sucursal                 -- his_estructura.estrnro
Dim categoria       As String   'Categoria                -- his_estructura.estrnro
Dim Puesto          As String   'Puesto                   -- his_estructura.estrnro
Dim Agencia         As String   'Agencia

Dim NroTercero          As Long
Dim Nro_Legajo          As Long
Dim Nro_TDocumento      As Long
Dim Nro_Nrodom          As String
Dim nro_paisnac         As Long
Dim nro_sucursal        As Long
Dim nro_Agencia         As Long
Dim nro_categoria       As Long
Dim nro_puesto          As Long
Dim nro_estcivil        As Long
Dim nro_nacionalidad    As Long

Dim nacionalnro         As Integer
Dim F_Nacimiento        As String
Dim ter_sexo            As Long

Dim tplatenro           As Integer

Dim ExisteLeg           As Boolean
Dim ExisteDoc           As Boolean
Dim ExisteCuil          As Boolean

Dim nacionalcodext      As String
Dim NroColumna          As Byte

Dim cuil1               As String
Dim cuil2               As String
Dim cuil3               As String

Dim rs As New ADODB.Recordset

    On Error GoTo SaltoLinea

    ExisteLeg = False
    ExisteDoc = False
    ExisteCuil = False
    LineaCarga = LineaCarga + 1
    
'    Flog.Writeline
'    FlogE.Writeline
'    FlogP.Writeline
    
    'Legajo
    NroColumna = 1
    Obligatorio = True
    Campoetiqueta = "Legajo"
    pos1 = 1
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        If Not IsNumeric(Aux) Then
            Texto = " - Campo " & Campoetiqueta & " debe ser numérico. Valor '" & Aux & " '"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 3
            HuboError = True
            Exit Sub
        Else
            Legajo = Aux
            StrSql = "SELECT * FROM empleado WHERE empleado.empleg = " & Legajo
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                NroTercero = rs!Ternro
                ExisteLeg = True
            Else
                ExisteLeg = False
            End If
            rs.Close
        End If
    End If
    
    'Apellido
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Apellido"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    End If
    Apellido = EliminarCHInvalidos(Left(Aux, 25))
    
    'Nombre
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Nombre"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    End If
    nombre = EliminarCHInvalidos(Left(Aux, 25))
    
    'Agencia
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Agencia"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        Agencia = Aux
        If Not IsNumeric(Agencia) Then
            Texto = " - Campo " & Campoetiqueta & " con valor no numérico. Valor '" & Agencia & "'"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 3
            HuboError = True
            Exit Sub
        Else
            StrSql = " SELECT estructura.estrnro, tenro, tercero.ternro "
            StrSql = StrSql & " FROM tercero INNER JOIN agencia ON tercero.ternro = agencia.ternro "
            StrSql = StrSql & " INNER JOIN estructura ON agencia.estrnro = estructura.estrnro "
            StrSql = StrSql & " WHERE agencia.ternro = " & Agencia
            OpenRecordset StrSql, rs
                
            If Not rs.EOF Then
                If CInt(rs!Tenro) = 28 Then
                    nro_Agencia = rs!Estrnro
                Else
                    Texto = " - Campo " & Campoetiqueta & " no es una Agencia. No es del tipo de estructura 28"
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                    InsertaError NroColumna, 112
                    HuboError = True
                    Exit Sub
                End If
            Else
                Texto = " - Campo " & Campoetiqueta & " inexistente. No se encontro. Valor '" & Agencia & "'"
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                InsertaError NroColumna, 100
                HuboError = True
                Exit Sub
            End If
            rs.Close
        End If
    End If
    
    'Empleado de Agencia
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Empleado de Agencia"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    
    'Sucursal
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Sucursal"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        Sucursal = Aux
        If Not IsNumeric(Sucursal) Then
            Texto = " - Campo " & Campoetiqueta & " con valor no numérico. Valor '" & Sucursal & "'"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 3
            HuboError = True
            Exit Sub
        Else
            StrSql = " SELECT estructura.estrnro, tenro, tercero.ternro "
            StrSql = StrSql & " FROM tercero INNER JOIN sucursal ON tercero.ternro = sucursal.ternro "
            StrSql = StrSql & " INNER JOIN estructura ON sucursal.estrnro = estructura.estrnro "
            StrSql = StrSql & " WHERE sucursal.ternro = " & Sucursal
            OpenRecordset StrSql, rs
                
            If Not rs.EOF Then
                If CInt(rs!Tenro) = 1 Then
                    nro_sucursal = rs!Estrnro
                Else
                    Texto = " - Campo " & Campoetiqueta & " no es una Sucursal. No es del tipo de estructura 1"
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                    InsertaError NroColumna, 56
                    HuboError = True
                    Exit Sub
                End If
            Else
                Texto = " - Campo " & Campoetiqueta & " inexistente. No se encontro. Valor '" & Sucursal & "'"
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                InsertaError NroColumna, 100
                HuboError = True
                Exit Sub
            End If
            rs.Close
        End If
    End If
    
    'Fecha de alta
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Fecha de alta"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        FAlta = Aux
        If Not IsDate(FAlta) Then
            Texto = " - Campo " & Campoetiqueta & " no es un formato de fecha válida. Valor '" & FAlta & "'"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 4
            HuboError = True
            Exit Sub
        Else
            FAlta = ConvFecha(FAlta)
        End If
    End If
    
    'Fecha de nacimiento
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Fecha de nacimiento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        F_Nacimiento = Aux
        If Not IsDate(F_Nacimiento) Then
            Texto = " - Campo " & Campoetiqueta & " no es un formato de fecha válida. Valor '" & F_Nacimiento & "'"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 4
            HuboError = True
            Exit Sub
        Else
            F_Nacimiento = ConvFecha(F_Nacimiento)
        End If
    End If
    
    'Tipo de Doc
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Tipo de Documento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        Tdocu = Left(Aux, 8)
        StrSql = " SELECT tidnro FROM tipodocu WHERE UPPER(tidsigla) = '" & UCase(Tdocu) & "'"
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            Nro_TDocumento = rs!tidnro
        Else
            Texto = " - Campo " & Campoetiqueta & " inexistente. No se encontro. Valor '" & Tdocu & "'"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 31
            HuboError = True
            Exit Sub
        End If
        rs.Close
    End If
            
    'Nro de Documento
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Nro de Documento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        Ndocu = Left(Aux, 30)
    End If

    StrSql = "SELECT tercero.terrazsoc, tercero.ternro, terape, ternom FROM tercero INNER JOIN ter_doc ON tercero.ternro = ter_doc.ternro "
    StrSql = StrSql & " WHERE ter_doc.tidnro = " & Nro_TDocumento & " AND ter_doc.nrodoc = '" & Ndocu & "'"
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        If CLng(rs!Ternro) = CLng(NroTercero) Then
            ExisteDoc = True
        Else
            Texto = " - Ese Tipo y Número de Documento ya estan asignados a " & rs!terrazsoc & " " & rs!terape & " " & rs!ternom & ". Valor '" & Tdocu & " " & Ndocu & "'"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 113
            HuboError = True
            Exit Sub
        End If
    End If
    rs.Close
    
    'CUIL
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "CUIL"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        cuil1 = Mid(Aux, 1, 2)
        cuil2 = Mid(Aux, 3, Len(Aux) - 3)
        cuil3 = Right(Aux, 1)
        If Len(cuil2) <= 8 Then
            cuil2 = String(8 - Len(cuil2), "0") & cuil2
            Cuil = cuil1 & "-" & cuil2 & "-" & cuil3
            If Len(Cuil) <> 13 Then
                Texto = " - Campo " & Campoetiqueta & ". Despues de formarlo tiene una longitud distinta a 13. Valor original '" & Aux & "'. Valor formado '" & Cuil & "'"
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                InsertaError NroColumna, 7
                HuboError = True
                Exit Sub
            End If
        End If
    End If

    StrSql = "SELECT tercero.ternro, terrazsoc, terape, ternom FROM tercero INNER JOIN ter_doc ON tercero.ternro = ter_doc.ternro "
    StrSql = StrSql & " WHERE ter_doc.tidnro = 10 AND ter_doc.nrodoc = '" & Cuil & "'"
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        If CLng(rs!Ternro) = CLng(NroTercero) Then
            ExisteCuil = True
        Else
            Texto = " - El Cuil ya esta asignado a " & rs!terrazsoc & " " & rs!terape & " " & rs!ternom
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 113
            HuboError = True
            Exit Sub
        End If
    End If
    rs.Close
    
    'Sexo
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Sexo"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        Sexo = UCase(Aux)
        If Sexo = "M" Then
            ter_sexo = -1
        Else
            ter_sexo = 0
        End If
    End If
    
    'Nacionalidad
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Nacionalidad"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        Nacionalidad = Aux
        If Not IsNumeric(Nacionalidad) Then
            Texto = " - Campo " & Campoetiqueta & " con valor no numérico"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 3
            HuboError = True
            Exit Sub
        Else
            StrSql = " SELECT nacionalcodext, nacionalnro FROM nacionalidad WHERE nacionalnro = " & Nacionalidad
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                nro_nacionalidad = rs!nacionalnro
                nacionalcodext = IIf(EsNulo(rs!nacionalcodext), "", rs!nacionalcodext)
            Else
                Texto = " - La Nacionalidad no Existe. Valor '" & Nacionalidad & "'"
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                InsertaError NroColumna, 114
                HuboError = True
                Exit Sub
            End If
            rs.Close
        End If
    End If
    
    'Pais de Nacimiento
    If EsNulo(nacionalcodext) Then
        Texto = " - El Cod. Externo de Nacionalidad tiene valor nulo. Debe coincidir con algún Cod. Externo de Pais"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 28
        HuboError = True
        Exit Sub
    End If

    StrSql = " SELECT paisnro FROM pais WHERE UPPER(paiscodext) = '" & UCase(nacionalcodext) & "'"
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        nro_paisnac = rs!Paisnro
    Else
        Texto = " - Pais de Nacimiento no se encontro. No coinciden los Cod. Externos de Nacionalidad y Pais. Valor '" & nacionalcodext & "'"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 28
        HuboError = True
        Exit Sub
    End If
    rs.Close
    
    'Estado Civil
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Estado Civil"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) And Obligatorio Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        EstCivil = Aux
        StrSql = " SELECT estcivnro FROM estcivil WHERE estcivnro = " & EstCivil
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            nro_estcivil = rs!estcivnro
        Else
            Texto = " - Campo " & Campoetiqueta & " inexistente. No se encontro. Valor '" & EstCivil & "'"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 115
            HuboError = True
            Exit Sub
        End If
        rs.Close
    End If
    
    'Puesto
    NroColumna = NroColumna + 1
    Campoetiqueta = "Puesto"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        Puesto = Mid(Aux, 1, 20)
        StrSql = " SELECT estructura.estrnro FROM estructura "
        StrSql = StrSql & " WHERE tenro = 4 AND estrcodext = '" & Puesto & "'"
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            nro_puesto = rs!Estrnro
        Else
            Texto = " - Campo " & Campoetiqueta & ". No se encontro ningún Puesto con dicho Cod. Externo. Valor '" & Puesto & "'"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 59
            HuboError = True
            Exit Sub
        End If
        rs.Close
    End If
        
    'Categoria
    NroColumna = NroColumna + 1
    Campoetiqueta = "Categoria"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If EsNulo(Aux) Then
        Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError NroColumna, 25
        HuboError = True
        Exit Sub
    Else
        categoria = Mid(Aux, 1, 20)
        StrSql = " SELECT estructura.estrnro FROM estructura "
        StrSql = StrSql & " WHERE tenro = 3 AND estrcodext = '" & categoria & "'"
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            nro_categoria = rs!Estrnro
        Else
            Texto = " - Campo " & Campoetiqueta & ". No se encontro ningúna Categoría con dicho Cod. Externo. Valor '" & categoria & "'"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            InsertaError NroColumna, 111
            HuboError = True
            Exit Sub
        End If
        rs.Close
    End If

' =====================================================================================================
' =====================================================================================================
' =====================================================================================================

    If Not ExisteLeg Then
        StrSql = " INSERT INTO tercero(ternom,terape,terfecnac,tersex,terestciv,estcivnro,nacionalnro,paisnro)"
        StrSql = StrSql & " VALUES('" & nombre & "','" & Apellido & "'," & F_Nacimiento & "," & ter_sexo & "," & nro_estcivil & "," & nro_estcivil & ","
        StrSql = StrSql & nro_nacionalidad & "," & nro_paisnac & ")"
        objConn.Execute StrSql, , adExecuteNoRecords

        NroTercero = getLastIdentity(objConn, "tercero")

        Texto = " - Codigo de Tercero = " & NroTercero
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    Else
        StrSql = " UPDATE tercero SET "
        StrSql = StrSql & " ternom = " & "'" & nombre & "'"
        StrSql = StrSql & ", terape = " & "'" & Apellido & "'"
        StrSql = StrSql & ", terfecnac = " & F_Nacimiento
        StrSql = StrSql & ", tersex = " & ter_sexo
        StrSql = StrSql & ", terestciv =" & nro_estcivil
        StrSql = StrSql & ", estcivnro =" & "'" & nro_estcivil & "'"
        StrSql = StrSql & ", nacionalnro =" & nro_nacionalidad
        StrSql = StrSql & ", paisnro =" & nro_paisnac
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        objConn.Execute StrSql, , adExecuteNoRecords

        Texto = " - Empleado: " & Legajo & " - Ya existe. Datos de tercero actualizados"
        NroColumna = 1
        Call Escribir_Log("flogp", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If

    If Not ExisteLeg Then
        StrSql = "SELECT * FROM adptemplate WHERE tplatedefault = -1 ORDER BY tplatenro "
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            tplatenro = rs!tplatenro
        Else
            tplatenro = 1
            Texto = " - WARNING No se encontro un Modelo de Organización definido como default. Se asigno tplatenro=1"
            Call Escribir_Log("floge", LineaCarga, 1, Texto, Tabs, strReg)
        End If
        rs.Close
    
        StrSql = " INSERT INTO empleado(empleg,empfecalta,empest,empfaltagr,"
        StrSql = StrSql & "ternro,terape,ternom,tplatenro,agencia"
        
        StrSql = StrSql & ") VALUES("
        StrSql = StrSql & Legajo & "," & FAlta & ", -1," & FAlta & ","
        StrSql = StrSql & NroTercero & ",'" & Apellido & "','" & nombre & "'," & tplatenro & "," & nro_Agencia & ")"
        objConn.Execute StrSql, , adExecuteNoRecords

        Texto = " - Empleado Insertado - " & Legajo & " - " & Apellido & " - " & nombre
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    Else
        StrSql = " UPDATE empleado SET "
        StrSql = StrSql & " empleg = " & Legajo
        StrSql = StrSql & " ,empfecalta = " & FAlta
        StrSql = StrSql & " ,empest = -1 "
        StrSql = StrSql & " ,empfaltagr = " & FAlta
        StrSql = StrSql & " ,terape = " & "'" & Apellido & "'"
        StrSql = StrSql & " ,ternom = " & "'" & nombre & "'"
        StrSql = StrSql & " ,tplatenro = " & nro_ModOrg
        StrSql = StrSql & " ,agencia = " & nro_Agencia
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        objConn.Execute StrSql, , adExecuteNoRecords

        Texto = " - Empleado Actualizado - " & Legajo & " - " & Apellido & " - " & nombre
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    End If

    ' Inserto el Registro correspondiente en ter_tip
    If Not ExisteLeg Then
        StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & NroTercero & ", 1)"
        objConn.Execute StrSql, , adExecuteNoRecords
    End If

    ' Inserto los Documentos
    If Not ExisteLeg Or Not ExisteDoc Then
        StrSql = " INSERT INTO ter_doc (ternro,tidnro,nrodoc) "
        StrSql = StrSql & " VALUES(" & NroTercero & "," & Nro_TDocumento & ",'" & Ndocu & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = " - Documento insertado - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    Else
        StrSql = " UPDATE ter_doc SET "
        StrSql = StrSql & " nrodoc = '" & Ndocu & "'"
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        StrSql = StrSql & " AND tidnro = " & Nro_TDocumento
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = " - Documento actualizado - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    End If
    
    ' Inserto el CUIL
    If Not ExisteLeg Or Not ExisteCuil Then
        StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
        StrSql = StrSql & " VALUES(" & NroTercero & ",10,'" & Cuil & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = " - CUIL insertado - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    Else
        StrSql = " UPDATE ter_doc SET "
        StrSql = StrSql & " nrodoc = '" & Cuil & "'"
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        StrSql = StrSql & " AND tidnro = 10"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = " - CUIL actualizado - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    End If

    ' Inserto la Fase
    If Not ExisteLeg Then
        StrSql = " INSERT INTO fases (empleado,altfec,bajfec,caunro,estado,sueldo,vacaciones,indemnizacion,real,fasrecofec)"
        StrSql = StrSql & " VALUES( " & NroTercero & "," & FAlta & ",null,null,-1,-1,-1,-1,-1,-1)"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = " - Fase insertada - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    Else
        StrSql = "SELECT * FROM fases WHERE bajfec IS NULL AND empleado = " & NroTercero
        OpenRecordset StrSql, rs
        If rs.EOF Then
            StrSql = " INSERT INTO fases(empleado,altfec,bajfec,caunro,estado,sueldo,vacaciones,indemnizacion,real,fasrecofec)"
            StrSql = StrSql & " VALUES( " & NroTercero & "," & FAlta & ",null,null,-1,-1,-1,-1,-1,-1)"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            Texto = " - Fase Nueva Ingresada - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        Else
            If ConvFecha(rs!altfec) <> FAlta Then
                StrSql = " UPDATE fases SET "
                StrSql = StrSql & " altfec =" & FAlta
                StrSql = StrSql & " ,estado = -1"
                StrSql = StrSql & " ,sueldo = -1"
                StrSql = StrSql & " ,vacaciones = -1"
                StrSql = StrSql & " ,indemnizacion = -1"
                StrSql = StrSql & " ,real = -1"
                StrSql = StrSql & " ,fasrecofec = -1"
                StrSql = StrSql & " WHERE fasnro = " & rs!fasnro
                objConn.Execute StrSql, , adExecuteNoRecords
            
                Texto = " - Fase Actualizada con la Fecha de Alta - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
            End If
        End If
        
        rs.Close
    End If

    'Inserto las Estructuras
    If Not ExisteLeg Then
        ' Agencia
        StrSql = " INSERT INTO his_estructura(ternro,estrnro,tenro,htetdesde,htethasta) VALUES("
        StrSql = StrSql & NroTercero & "," & nro_Agencia & ",28," & FAlta & ",null)"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        ' Sucursal
        StrSql = " INSERT INTO his_estructura(ternro,estrnro,tenro,htetdesde,htethasta) VALUES("
        StrSql = StrSql & NroTercero & "," & nro_sucursal & ",1," & FAlta & ",null)"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        ' Puesto
        StrSql = " INSERT INTO his_estructura(ternro,estrnro,tenro,htetdesde,htethasta) VALUES("
        StrSql = StrSql & NroTercero & "," & nro_puesto & ",4," & FAlta & ",null)"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        ' Categoria
        StrSql = " INSERT INTO his_estructura(ternro,estrnro,tenro,htetdesde,htethasta) VALUES("
        StrSql = StrSql & NroTercero & "," & nro_categoria & ",3," & FAlta & ",null)"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Texto = " - Se ingresaron Agencia, Sucursal, Puesto y Categoria - "
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
    Else
        ' Agencia
        StrSql = "SELECT * FROM his_estructura "
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        StrSql = StrSql & " AND tenro = 28 AND htethasta is null"
        OpenRecordset StrSql, rs
        If rs.EOF Then
            StrSql = "INSERT INTO his_estructura (tenro, ternro, estrnro, htetdesde) "
            StrSql = StrSql & "VALUES (28, " & NroTercero & "," & nro_Agencia & "," & FAlta & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            Texto = " - Se ingreso la Agencia - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        Else
            StrSql = "UPDATE his_estructura SET estrnro = " & nro_Agencia
            StrSql = StrSql & " ,htetdesde = " & FAlta
            StrSql = StrSql & " WHERE ternro = " & NroTercero
            StrSql = StrSql & " AND estrnro = " & rs!Estrnro
            StrSql = StrSql & " AND tenro = 28 AND htethasta is null "
            objConn.Execute StrSql, , adExecuteNoRecords
                
            Texto = " - Se actualizo la Agencia a la Fecha de Alta " & FAlta & " - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        End If
        rs.Close
        
    
        ' Sucursal
        StrSql = "SELECT * FROM his_estructura "
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        StrSql = StrSql & " AND tenro = 1 AND htethasta is null"
        OpenRecordset StrSql, rs
        If rs.EOF Then
            StrSql = "INSERT INTO his_estructura (tenro, ternro, estrnro, htetdesde) "
            StrSql = StrSql & "VALUES (1, " & NroTercero & "," & nro_sucursal & "," & ConvFecha(Date) & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            Texto = " - Se ingreso la Sucursal - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        Else
            StrSql = "UPDATE his_estructura SET estrnro = " & nro_sucursal
            StrSql = StrSql & " ,htetdesde = " & FAlta
            StrSql = StrSql & " WHERE ternro = " & NroTercero
            StrSql = StrSql & " AND estrnro = " & rs!Estrnro
            StrSql = StrSql & " AND tenro = 1 AND htethasta is null "
            objConn.Execute StrSql, , adExecuteNoRecords
                
            Texto = " - Se actualizo la Sucursal a la Fecha de Alta " & FAlta & " - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        End If
        rs.Close
    
        ' Puesto
        StrSql = "SELECT * FROM his_estructura "
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        StrSql = StrSql & " AND tenro = 4 AND htethasta is null"
        OpenRecordset StrSql, rs
        If rs.EOF Then
            StrSql = "INSERT INTO his_estructura (tenro, ternro, estrnro, htetdesde) "
            StrSql = StrSql & "VALUES (4, " & NroTercero & "," & nro_puesto & "," & ConvFecha(Date) & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            Texto = " - Se ingreso el Puesto - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        Else
            StrSql = "UPDATE his_estructura SET estrnro = " & nro_puesto
            StrSql = StrSql & " ,htetdesde = " & FAlta
            StrSql = StrSql & " WHERE ternro = " & NroTercero
            StrSql = StrSql & " AND estrnro = " & rs!Estrnro
            StrSql = StrSql & " AND tenro = 4 AND htethasta is null "
            objConn.Execute StrSql, , adExecuteNoRecords
                
            Texto = " - Se actualizo el Puesto a la Fecha de Alta " & FAlta & " - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        End If
        rs.Close
    
        ' Categoria
        StrSql = "SELECT * FROM his_estructura "
        StrSql = StrSql & " WHERE ternro = " & NroTercero
        StrSql = StrSql & " AND tenro = 3 AND htethasta is null"
        OpenRecordset StrSql, rs
        If rs.EOF Then
            StrSql = "INSERT INTO his_estructura (tenro, ternro, estrnro, htetdesde) "
            StrSql = StrSql & "VALUES (3, " & NroTercero & "," & nro_categoria & "," & ConvFecha(Date) & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            
            Texto = " - Se ingreso la Categoría - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        Else
            StrSql = "UPDATE his_estructura SET estrnro = " & nro_categoria
            StrSql = StrSql & " ,htetdesde = " & FAlta
            StrSql = StrSql & " WHERE ternro = " & NroTercero
            StrSql = StrSql & " AND estrnro = " & rs!Estrnro
            StrSql = StrSql & " AND tenro = 3 AND htethasta is null "
            objConn.Execute StrSql, , adExecuteNoRecords
                
            Texto = " - Se actualizo la Categoría a la Fecha de Alta " & FAlta & " - "
            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs, strReg)
        End If
        rs.Close
        
    End If
    
    Texto = "---- Linea procesada correctamente ----"
    Call Escribir_Log("flogp", LineaCarga, NroColumna, Texto, Tabs + 1, strReg)


FinLinea:
    If rs.State = adStateOpen Then
        rs.Close
    End If
Exit Sub


SaltoLinea:
    Texto = " - Error:" & Err.Description & ". Ultima SQL Ejecutada: " & StrSql
    NroColumna = 1
    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    Texto = " - Ultima SQL Ejecutada: " & StrSql
    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    MyRollbackTrans
    HuboError = True
    GoTo FinLinea
End Sub



Public Sub LineaModelo_313(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Novedad segun formato
' Autor      : FGZ
'              El formato es:
'                   Formato 1
'                       Legajo; conccod; tpanro; monto
'                   ó
'                   Formato 2.1
'                       Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta
'                   Formato 2.2
'                       Legajo; conccod; tpanro; monto; FechaDesde
'                   ó
'                   Formato 3
'                       Legajo; conccod; tpanro; monto; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro)
' Fecha      : 29/07/2004
' Ultima Mod.: 14/06/2007.Gustavo Ring, se verifica que el usuario tenga permiso
'              en el concepto que se va a ingresar como novedad.
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As String
Dim fornro As Long

Dim tpanro As Long
Dim Aux_Monto As String
Dim Monto As Single
Dim FechaDesde As String
Dim FechaHasta As String

Dim PeriodoDesde
Dim PeriodoHasta
Dim TieneVigencia As Boolean
Dim EsRetroactivo As Boolean

Dim Aux As String
Dim Encontro As Boolean

Dim perfsegcon As Integer
Dim tienePermiso As Integer

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim rs_TipoPar As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_Periodo As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset
Dim rs_seguridad As New ADODB.Recordset

' El formato es:
' Formato 1
' Legajo; conccod; tpanro; monto
' ó
' Formato 2.1
' Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta
' ó
' Formato 2.2
' Legajo; conccod; tpanro; monto; FechaDesde
' ó
' Formato 3
' Legajo; conccod; tpanro; monto; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro)
' ó
' Formato 4
' Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro)
    
    On Error GoTo Manejador_De_Error
    Tabs = 1
    
    TieneVigencia = False
    EsRetroactivo = False

    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    'Nro de Legajo
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
   
    NroColumna = NroColumna + 1
    'Concepto
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    ConcCod = Mid(strLinea, pos1, pos2 - pos1)

    
    NroColumna = NroColumna + 1
    'Tipo de Parametro
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    tpanro = Mid(strLinea, pos1, pos2 - pos1)
    

    NroColumna = NroColumna + 1
    'Monto
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    If pos2 = 0 Then
        pos2 = Len(strLinea)
        Aux_Monto = Mid(strLinea, pos1, pos2)
        Monto = CSng(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
    Else
        Aux_Monto = Mid(strLinea, pos1, pos2 - pos1)
        Monto = CSng(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
        
        'Puede veniar Fecha Desde; fecha Hasta ó Retroactivo, Periodo desde , Periodo Hasta
        pos1 = pos2 + 1
        pos2 = InStr(pos1 + 1, strLinea, separador)
        
        If pos2 > 0 Then
            NroColumna = NroColumna + 1
            Aux = Mid(strLinea, pos1, pos2 - pos1)
            
            If IsDate(Aux) Then
                TieneVigencia = True
                'Fecha desde
                FechaDesde = Mid(strLinea, pos1, pos2 - pos1)
            
                NroColumna = NroColumna + 1
                'Fecha Hasta
                pos1 = pos2 + 1
                pos2 = InStr(pos1, strLinea, separador)
                
                If pos2 > 0 Then
                    FechaHasta = Mid(strLinea, pos1, pos2 - pos1)
                    If IsDate(FechaHasta) Then
                        FechaHasta = CDate(FechaHasta)
                    Else
                        If Not EsNulo(FechaHasta) Then
                            Texto = ": Fecha no valida "
                            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                            Call InsertaError(1, 4)
                            HuboError = True
                            Exit Sub
                        End If
                    End If
                    NroColumna = NroColumna + 1
                    'Marca de Retroactividad
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    Aux = Mid(strLinea, pos1, pos2 - pos1)
                    If UCase(Aux) = "SI" Then
                        EsRetroactivo = True
                    Else
                        EsRetroactivo = False
                    End If
                    'Periodo desde
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    PeriodoDesde = Mid(strLinea, pos1, pos2 - pos1)
                    'Periodo hasta
                    pos1 = pos2 + 1
                    pos2 = Len(strLinea)
                    PeriodoHasta = Mid(strLinea, pos1, pos2)
                Else
                    pos2 = Len(strLinea)
                    FechaHasta = Mid(strLinea, pos1, pos2)
                
                    TieneVigencia = True
                End If
            Else
                If UCase(Aux) = "SI" Then
                    EsRetroactivo = True
                Else
                    EsRetroactivo = False
                End If
                'Periodo desde
                pos1 = pos2 + 1
                pos2 = InStr(pos1 + 1, strLinea, separador)
                PeriodoDesde = Mid(strLinea, pos1, pos2 - pos1)
                'Periodo hasta
                pos1 = pos2 + 1
                pos2 = Len(strLinea)
                PeriodoHasta = Mid(strLinea, pos1, pos2)
            End If
        Else
            'Viene Vigencia con fecha desde y sin fecha hasta
            pos2 = Len(strLinea)
            FechaDesde = Mid(strLinea, pos1, pos2)
            TieneVigencia = True
            FechaHasta = ""
        End If
    End If

' ====================================================================
'   Validar los parametros Levantados

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If


'Que exista el concepto
StrSql = "SELECT * FROM concepto WHERE conccod = '" & ConcCod & "'"
'StrSql = StrSql & " OR conccod = '" & Conccod & "'"
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
    fornro = rs_Concepto!fornro
End If

'Que exista el tipo de Parametro
StrSql = "SELECT * FROM tipopar WHERE tpanro = " & tpanro
OpenRecordset StrSql, rs_TipoPar

If rs_TipoPar.EOF Then
    Texto = ": " & "No se encontro el Tipo de Parametro " & tpanro
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
End If


'FGZ - 27/01/2004
'Faltaria revisar que el par concepto-parametro se resuelva por novedad
StrSql = "SELECT * FROM con_for_tpa "
StrSql = StrSql & " WHERE concnro = " & ConcNro
StrSql = StrSql & " AND fornro =" & fornro
StrSql = StrSql & " AND tpanro =" & tpanro
OpenRecordset StrSql, rs_con_for_tpa

If rs_con_for_tpa.EOF Then
    Texto = ": " & "El parametro " & tpanro & " no esta asociado a la formula del concepto " & ConcCod
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
Else
    Encontro = False
    Do While Not Encontro And Not rs_con_for_tpa.EOF
        If Not CBool(rs_con_for_tpa!cftauto) Then
            Encontro = True
        End If
        rs_con_for_tpa.MoveNext
    Loop
    If Not Encontro Then
        Texto = ": " & "El parametro " & tpanro & " del concepto " & ConcCod & " no se resuelve por novedad "
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(3, 11)
        HuboError = True
        Exit Sub
    End If
End If

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Verifico que el usuario tenga el nivel de seguridad para insertar la novedad '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 
 StrSql = "SELECT perf_usr.perfsegcon, user_per.iduser FROM user_per "
 StrSql = StrSql & "INNER JOIN perf_usr ON user_per.perfnro = perf_usr.perfnro "
 StrSql = StrSql & "WHERE user_per.iduser = '" & usuario & "'"
 OpenRecordset StrSql, rs_seguridad

 If rs_seguridad.EOF Then
        perfsegcon = 0
 Else
   If IsNull(rs_seguridad!perfsegcon) Then
        perfsegcon = 0
   Else
        perfsegcon = rs_seguridad!perfsegcon
   End If
 End If
        
 rs_seguridad.Close
 
 '--------------------------------------------------------------------------------------------------------------------
 ' Busco el nivel de seguridad del concepto
 '--------------------------------------------------------------------------------------------------------------------

 StrSql = "SELECT codseguridad FROM concepto "
 StrSql = StrSql & " WHERE concepto.conccod=" & ConcCod
 OpenRecordset StrSql, rs_seguridad
 
 If Not (IsNull(rs_seguridad!codseguridad)) Then
        If rs_seguridad!codseguridad <= CInt(perfsegcon) Then
            tienePermiso = True
        Else
            tienePermiso = False
        End If
 Else
        tienePermiso = True
 End If

 rs_seguridad.Close

If tienePermiso Then
  Texto = ": El usuario:" & usuario & " tiene autorización sobre el concepto:" & ConcCod
  Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
  If EsRetroactivo Then
    'Chequeo que los periodos sean validos
    'Chequeo Periodo Desde
    
    StrSql = "SELECT * FROM periodo WHERE pliqnro = " & PeriodoDesde
    If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
    OpenRecordset StrSql, rs_Periodo
    If rs_Periodo.EOF Then
        Texto = ": " & "Periodo Desde Invalido " & PeriodoDesde
        NroColumna = 6
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(6, 36)
        HuboError = True
        Exit Sub
    End If
    
    'Chequeo Periodo Hasta
    StrSql = "SELECT * FROM periodo WHERE pliqnro = " & PeriodoHasta
    If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
    OpenRecordset StrSql, rs_Periodo
    If rs_Periodo.EOF Then
        Texto = ": " & "Periodo Hasta Invalido " & PeriodoHasta
        NroColumna = 7
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(7, 36)
        HuboError = True
        Exit Sub
    End If
End If

'=============================================================
'Busco si existe la Novedad

  If Not TieneVigencia Then
    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
    StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
    StrSql = StrSql & " ORDER BY nevigencia "
    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
    OpenRecordset StrSql, rs_NovEmp
    If Not rs_NovEmp.EOF Then
        If CBool(rs_NovEmp!nevigencia) Then
            Texto = ": " & "No se puede insertar la novedad porque ya existe una con Vigencia"
            NroColumna = 1
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 94)
            HuboError = True
            Exit Sub
        Else
            'Existe una novedad pero sin vigencia ==> Actualizo
            If PisaNovedad Then 'Actualizo la Novedad
                If Not EsRetroactivo Then
                    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
                             " WHERE concnro = " & ConcNro & _
                             " AND tpanro = " & tpanro & _
                             " AND empleado = " & Tercero
                Else
                    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
                             " , nepliqdesde =  " & PeriodoDesde & _
                             " , nepliqhasta =  " & PeriodoHasta & _
                             " WHERE concnro = " & ConcNro & _
                             " AND tpanro = " & tpanro & _
                             " AND empleado = " & Tercero
                End If
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Novedad Actualizada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                'Flog.Writeline Espacios(Tabulador * 1) & "Novedad Actualizada "
            Else
                Texto = "No se insertó la novedad. Ya existe y no se pisa."
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            End If
        End If
      Else
        'Inserto
        If Not EsRetroactivo Then
            StrSql = "INSERT INTO novemp (" & _
                     "empleado,concnro,tpanro,nevalor,nevigencia" & _
                     ") VALUES (" & Tercero & _
                     "," & ConcNro & _
                     "," & tpanro & _
                     "," & Monto & _
                     ",0" & _
                     " )"
        Else
            StrSql = "INSERT INTO novemp (" & _
                     "empleado,concnro,tpanro,nevalor,nevigencia,nepliqdesde,nepliqhasta " & _
                     ") VALUES (" & Tercero & _
                     "," & ConcNro & _
                     "," & tpanro & _
                     "," & Monto & _
                     "," & CLng(TieneVigencia) & _
                     "," & PeriodoDesde & _
                     "," & PeriodoHasta & _
                     " )"
        End If
        objConn.Execute StrSql, , adExecuteNoRecords
        'Flog.Writeline Espacios(Tabulador * 1) & "Novedad insertada "
        Texto = "Novedad insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If
  Else 'Tiene Vigencia
    'Reviso que no se pise
    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
    StrSql = StrSql & " AND (nevigencia = 0 "
    StrSql = StrSql & " OR (nevigencia = -1 "
    If Not EsNulo(FechaHasta) Then
        StrSql = StrSql & " AND (nedesde <= " & ConvFecha(FechaHasta)
        StrSql = StrSql & " AND nehasta >= " & ConvFecha(FechaDesde) & ")"
        StrSql = StrSql & " OR  (nedesde <= " & ConvFecha(FechaHasta)
        StrSql = StrSql & " AND nehasta is null )))"
    Else
        StrSql = StrSql & " AND nehasta is null OR nehasta >= " & ConvFecha(FechaDesde) & "))"
    End If
    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
    OpenRecordset StrSql, rs_NovEmp
    
    If Not rs_NovEmp.EOF Then
        If CBool(rs_NovEmp!nevigencia) Then
            
            'Existe/n novedad/es con vigencia ==>
            If PisaNovedad Then 'Borro las que haya e ingreso la nueva novedades
                Do Until rs_NovEmp.EOF
                    StrSql = "DELETE FROM novemp WHERE nenro = " & rs_NovEmp!nenro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    
                    rs_NovEmp.MoveNext
                Loop
                
                If Not EsRetroactivo Then
                    StrSql = "INSERT INTO novemp ("
                    StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
                    If Not EsNulo(FechaHasta) Then
                        StrSql = StrSql & ",nehasta"
                    End If
                    StrSql = StrSql & ") VALUES (" & Tercero
                    StrSql = StrSql & "," & ConcNro
                    StrSql = StrSql & "," & tpanro
                    StrSql = StrSql & "," & Monto
                    StrSql = StrSql & ",-1"
                    StrSql = StrSql & "," & ConvFecha(FechaDesde)
                    If Not EsNulo(FechaHasta) Then
                        StrSql = StrSql & "," & ConvFecha(FechaHasta)
                    End If
                    StrSql = StrSql & " )"
                Else
                    StrSql = "INSERT INTO novemp ("
                    StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
                    If Not EsNulo(FechaHasta) Then
                        StrSql = StrSql & ",nehasta"
                    End If
                    StrSql = StrSql & ",nepliqdesde,nepliqhasta"
                    StrSql = StrSql & ") VALUES (" & Tercero
                    StrSql = StrSql & "," & ConcNro
                    StrSql = StrSql & "," & tpanro
                    StrSql = StrSql & "," & Monto
                    StrSql = StrSql & ",-1"
                    StrSql = StrSql & "," & ConvFecha(FechaDesde)
                    If Not EsNulo(FechaHasta) Then
                        StrSql = StrSql & "," & ConvFecha(FechaHasta)
                    End If
                    StrSql = StrSql & "," & PeriodoDesde
                    StrSql = StrSql & "," & PeriodoHasta
                    StrSql = StrSql & " )"
                End If
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Novedad Actualizada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            Else
                Texto = ": " & "No se puede insertar la novedad, las vigencias se superponen"
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                InsertaError 1, 95
                HuboError = True
                Exit Sub
            End If
        Else
            Texto = ": " & "No se puede insertar la novedad porque ya existe una sin Vigencia"
            NroColumna = 1
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 95)
            HuboError = True
            Exit Sub
        End If
    Else
        If Not EsRetroactivo Then
            StrSql = "INSERT INTO novemp ("
            StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & ",nehasta"
            End If
            StrSql = StrSql & ") VALUES (" & Tercero
            StrSql = StrSql & "," & ConcNro
            StrSql = StrSql & "," & tpanro
            StrSql = StrSql & "," & Monto
            StrSql = StrSql & ",-1"
            StrSql = StrSql & "," & ConvFecha(FechaDesde)
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & "," & ConvFecha(FechaHasta)
            End If
            StrSql = StrSql & " )"
        Else
            StrSql = "INSERT INTO novemp ("
            StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & ",nehasta"
            End If
            StrSql = StrSql & ",nepliqdesde,nepliqhasta"
            StrSql = StrSql & ") VALUES (" & Tercero
            StrSql = StrSql & "," & ConcNro
            StrSql = StrSql & "," & tpanro
            StrSql = StrSql & "," & Monto
            StrSql = StrSql & ",-1"
            StrSql = StrSql & "," & ConvFecha(FechaDesde)
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & "," & ConvFecha(FechaHasta)
            End If
            StrSql = StrSql & "," & PeriodoDesde
            StrSql = StrSql & "," & PeriodoHasta
            StrSql = StrSql & " )"
        End If
        objConn.Execute StrSql, , adExecuteNoRecords
        'Flog.Writeline Espacios(Tabulador * 1) & "Novedad insertada "
        Texto = "Novedad insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If
  End If
Else
  Texto = "El usuario no tiene autorización sobre el concepto:" & ConcCod
  Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
  HuboError = True
End If

Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close
If rs_TipoPar.State = adStateOpen Then rs_TipoPar.Close
If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
If rs_con_for_tpa.State = adStateOpen Then rs_con_for_tpa.Close

Set rs_NovEmp = Nothing
Set rs_Empleado = Nothing
Set rs_Concepto = Nothing
Set rs_TipoPar = Nothing
Set rs_Periodo = Nothing
Set rs_con_for_tpa = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub



Public Sub LineaModelo_314(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Distrivucion Horaria - Actionline
' Autor      : Lisandro Moro
'              El formato es:
'               LEGAJO;FECHA;HORA DESDE;HORA HASTA;CUENTA (estructura(estrnro))
' Fecha      : 09/09/2008
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
    
Dim objHoras As New FechasHoras

Dim Tercero As Long
Dim NroLegajo As Long
'Dim Licencia_Descripcion As String
'Dim TDNro As Long
'Dim DiaCompleto As Boolean
Dim Fecha As Date
'Dim FechaHasta As Date
Dim HoraDesde As String
Dim HoraHasta As String
Dim Cuenta As Variant
Dim Estrnro As Long
Dim Tenro As Long

'Dim Estado As String
'Dim LicEstNro As Long
'Dim emp_licnro As Long
'Dim LicTipo As Long

Dim Aux As String

Dim rs_Empleado As New ADODB.Recordset
Dim rs As New ADODB.Recordset
'Dim rs_TipDia As New ADODB.Recordset
'Dim rs_Estado As New ADODB.Recordset

On Error GoTo Manejador_De_Error


'Nro de Legajo
pos1 = 1
pos2 = InStr(pos1, strLinea, separador)
If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
    NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
Else
    InsertaError 1, 8
    HuboError = True
    Exit Sub
End If

'Fecha
pos1 = pos2 + 1
pos2 = InStr(pos1 + 1, strLinea, separador)
Fecha = CDate(Mid(strLinea, pos1, pos2 - pos1))
        
'Hora desde
pos1 = pos2 + 1
pos2 = InStr(pos1, strLinea, separador)
HoraDesde = Mid(strLinea, pos1, pos2 - pos1)

'Hora hasta
pos1 = pos2 + 1
pos2 = InStr(pos1, strLinea, separador)
HoraHasta = Mid(strLinea, pos1, pos2 - pos1)
        
'Cuenta
pos1 = pos2 + 1
pos2 = InStr(pos1, strLinea, separador)
Cuenta = Mid(strLinea, pos1, pos2 - pos1)

 
' ====================================================================
'   Validar los parametros Levantados

'Valido el tipo de estructura segun la politica de alcance
StrSql = " SELECT tenro FROM alcance_testr WHERE tanro = 15 "
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Flog.writeline Espacios(Tabulador * 2) & "Debe configurar las politicas de alcance."
    HuboError = True
    Exit Sub
Else
    Tenro = rs_Empleado("tenro")
End If
rs_Empleado.Close

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Flog.writeline Espacios(Tabulador * 2) & "No se encontro el legajo " & NroLegajo
    InsertaError 1, 8
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'Valido la fecha
If Not IsDate(Fecha) Then
    Flog.writeline Espacios(Tabulador * 2) & "La fecha no es valida " & NroLegajo
    InsertaError 1, 4
    HuboError = True
    Exit Sub
End If
 
'Valido la hora desde
If Not objHoras.ValidarHora(HoraDesde) Then
    Flog.writeline Espacios(Tabulador * 2) & "formato de Hora Desde incorrecto " & HoraDesde
    InsertaError 3, 98
    HuboError = True
    Exit Sub
Else
    HoraDesde = Replace(HoraDesde, ":", "")
    If Len(HoraDesde) = 3 Then
        HoraDesde = "0" & HoraDesde
    End If
End If

'Valido la hora hasta
If Not objHoras.ValidarHora(HoraHasta) Then
    Flog.writeline Espacios(Tabulador * 2) & "formato de Hora Hasta incorrecto " & HoraHasta
    InsertaError 4, 98
    HuboError = True
    Exit Sub
Else
    HoraHasta = Replace(HoraHasta, ":", "")
    If Len(HoraHasta) = 3 Then
        HoraHasta = "0" & HoraHasta
    End If
End If

If CLng(HoraDesde) > CLng(HoraHasta) Then
    Flog.writeline Espacios(Tabulador * 2) & "la hora desde (" & HoraDesde & ") no puede ser mayor a la hora hasta (" & HoraHasta & ")"
    InsertaError 4, 98
    HuboError = True
    Exit Sub
End If

'Valido que exista la estructura
If IsNumeric(Cuenta) Then
    StrSql = " SELECT * FROM estructura WHERE tenro = " & Tenro & " AND estrnro = " & CLng(Cuenta)
Else
    StrSql = " SELECT * FROM estructura WHERE tenro = " & Tenro & " AND upper(estrdabr) = '" & Trim(UCase(Cuenta)) & "'"
End If
OpenRecordset StrSql, rs
If rs.EOF Then
    Flog.writeline Espacios(Tabulador * 2) & "No se encontro la Cuenta " & CStr(Cuenta)
    InsertaError 5, 100
    HuboError = True
    Exit Sub
Else
    Estrnro = rs!Estrnro
End If
rs.Close

'=============================================================
'Busco si existe la regitracion horaria

StrSql = " SELECT * "
StrSql = StrSql & " FROM cta_emp_dist "
StrSql = StrSql & " WHERE ternro = " & Tercero
StrSql = StrSql & " AND estrnro = " & Estrnro
StrSql = StrSql & " AND fecha = " & ConvFecha(Fecha)
StrSql = StrSql & " AND hordesde = '" & HoraDesde & "'"
StrSql = StrSql & " AND hordesde = '" & HoraHasta & "'"
OpenRecordset StrSql, rs
If Not rs.EOF Then
    Flog.writeline Espacios(Tabulador * 2) & " No se puede insertar la Distrbucion horaria porque se superpone con otra ya existente."
    Flog.writeline Espacios(Tabulador * 2) & "Empleado " & NroLegajo & "del dia " & Fecha & " desde las " & HoraDesde & " hasta las " & HoraHasta & " de la cuenta " & Cuenta
    'InsertaError 1, 99
    HuboError = True
    Exit Sub
Else
    'Inserto la Licencia
    StrSql = " INSERT INTO cta_emp_dist ( "
    StrSql = StrSql & " ternro, fecha, hordesde, horhasta, estrnro, bpronro, iduser, aprob "
    StrSql = StrSql & " ) VALUES ( "
    StrSql = StrSql & Tercero
    StrSql = StrSql & "," & ConvFecha(Fecha)
    StrSql = StrSql & ",'" & HoraDesde & "'"
    StrSql = StrSql & ",'" & HoraHasta & "'"
    StrSql = StrSql & "," & Estrnro
    StrSql = StrSql & ", null "
    StrSql = StrSql & ",'" & usuario & "'"
    StrSql = StrSql & ", -1 "
    StrSql = StrSql & " )"
    objConn.Execute StrSql, , adExecuteNoRecords
    
    Flog.writeline Espacios(Tabulador * 2) & "Distribucion Horaria insertada "
    
End If
rs.Close

Fin:

'Cierro todo y libero
If rs.State = adStateOpen Then rs.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close

Set rs = Nothing
Set rs_Empleado = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin

End Sub


Public Sub ValidarEstructura(TipoEstr As Long, ByRef Valor As String, ByRef CodEst As Long)

Dim Rs_Estr As New ADODB.Recordset

Dim d_estructura As String
Dim CodExt As String
Dim l_pos1 As Long
Dim l_pos2 As Long


    Valor = Trim(Valor)
            
    StrSql = " SELECT estrnro FROM estructura WHERE UPPER(estructura.estrdabr) = '" & UCase(Mid(Valor, 1, 60)) & "'"
    StrSql = StrSql & " AND estructura.tenro = " & TipoEstr
    OpenRecordset StrSql, Rs_Estr
        
    If Not Rs_Estr.EOF Then
       CodEst = Rs_Estr!Estrnro
    Else
       CodEst = 0
    End If
    
End Sub
Public Sub ValidarEstructuraCodExt(TipoEstr As Long, ByRef Valor As String, ByRef CodEst As Long)

Dim Rs_Estr As New ADODB.Recordset

Dim d_estructura As String
Dim CodExt As String
Dim l_pos1 As Byte
Dim l_pos2 As Byte


    Valor = Trim(Valor)
    
    StrSql = " SELECT estrnro FROM estructura WHERE upper(estructura.estrcodext) = '" & UCase(Mid(Valor, 1, 30)) & "'"
    StrSql = StrSql & " AND estructura.tenro = " & TipoEstr
    OpenRecordset StrSql, Rs_Estr
        
    If Not Rs_Estr.EOF Then
       CodEst = Rs_Estr!Estrnro
    Else
       CodEst = 0
    End If

End Sub

Public Function calcularhabyferi(ByVal cantdias, ByVal Fecha)
    'Se utiliza para la interfaz 344 - Sykes
    'Devuelve cantidad de diías feriados/hábiles
    Dim rs1 As New ADODB.Recordset
    Dim l_esferiado
    Dim l_rs1
    Dim l_sql
    Dim l_canthab
    Dim l_cantferi
    Dim l_fechasta
    l_canthab = 0
    l_cantferi = 0
    
    l_fechasta = DateAdd("d", (cantdias - 1), CDate(Fecha))
    
    Do While (DateDiff("d", Fecha, l_fechasta) >= 0)
        l_esferiado = False
        
        StrSql = "SELECT * FROM feriado "
        StrSql = StrSql & "WHERE feriado.ferifecha = " & ConvFecha(Fecha)
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            If rs!tipferinro = 1 Then  'Pais
                
                StrSql = "SELECT * FROM pais "
                StrSql = StrSql & "WHERE pais.paisdef = -1 "
                OpenRecordset StrSql, rs1
                If Not rs1.EOF Then
                    If rs!fericodext = rs1!Paisnro Then
                        l_esferiado = True
                    End If
                End If
                rs1.Close
            End If
        End If
        rs.Close
        
        If l_esferiado Or (Weekday(Fecha) = 1) Or (Weekday(Fecha) = 7) Then
            l_cantferi = l_cantferi + 1
        Else
            l_canthab = l_canthab + 1
        End If
        Fecha = DateAdd("d", 1, CDate(Fecha))
    Loop
    calcularhabyferi = l_cantferi & "@" & l_canthab
End Function


Public Function listaConceptosPermitidos(Campo)
    listaConceptosPermitidos = ""
    Dim l_rs As New ADODB.Recordset
    Dim l_perfnro
    Dim l_iduser
    Dim l_usuario
    Dim l_perfil
    Dim l_perfilConf
    Dim l_eltoconfnro
    Dim l_eltoopnro
    Dim l_configuracion_concepto
    
    l_usuario = False
    l_perfil = False
    l_perfilConf = False
    
    
    
    '-------------------------------------------------------------------------------
    'Busco los datos de la configuracion
    '1 = Todos los usuarios ven todos los Conceptos.
    '2 = Todos los usuarios ven ningun Conceptos.
    '-------------------------------------------------------------------------------
    StrSql = " SELECT eltoopnro, eltoconfnro "
    StrSql = StrSql & " FROM conf_general "
    StrSql = StrSql & " WHERE eltoconfnro = 1 "
    OpenRecordset StrSql, l_rs
    If Not l_rs.EOF Then
        If l_rs("eltoopnro") = 1 Then
            l_configuracion_concepto = True '1
        Else
            l_configuracion_concepto = False '2
        End If
    Else
        l_configuracion_concepto = True
    End If
    l_rs.Close
    
    If l_configuracion_concepto Then
        'listaConceptosPermitidos = " AND 1=1 "
        listaConceptosPermitidos = True
    Else
        
        '-------------------------------------------------------------------------------
        'La configuracion general dice que NO SE VE NINGUN CONCEPTO => BUSCO EXCEPCIONES
        '-------------------------------------------------------------------------------
        
        'Busco los datos del usuario / perfil
        '-------------------------------------------------------------------------------
        StrSql = "SELECT iduser, listperfnro"
        StrSql = StrSql & " FROM user_perfil"
        StrSql = StrSql & " WHERE UPPER(user_perfil.iduser) = '" & usuario & "'"
        StrSql = StrSql & " UNION "
        StrSql = StrSql & " SELECT bk_perfil.iduser, listperfnro FROM bk_perfil INNER JOIN bk_cab ON bk_cab.bkcabnro = bk_perfil.bkcabnro "
        StrSql = StrSql & " AND (bk_cab.fdesde <= " & ConvFecha(Date) & " AND (bk_cab.fhasta IS NULL OR bk_cab.fhasta >= " & ConvFecha(Date) & " ))"
        StrSql = StrSql & " AND upper(bk_perfil.iduser) = '" & usuario & "'"
       OpenRecordset StrSql, l_rs
        If Not l_rs.EOF Then
            l_iduser = l_rs("iduser")
            l_perfnro = ""
            listaConceptosPermitidos = True
            Do Until l_rs.EOF
                l_perfnro = l_perfnro & l_rs("listperfnro")
                l_rs.MoveNext
                If Not l_rs.EOF Then
                    l_perfnro = l_perfnro & ","
                End If
            Loop
            
        Else
            l_rs.Close
            listaConceptosPermitidos = False
            Exit Function
        End If
        l_rs.Close
        
        'Busco operaciones permitidas para el usuario
        '-------------------------------------------------------------------
        StrSql = " SELECT distinct concepto.concnro "
        StrSql = StrSql & " FROM concepto "
        StrSql = StrSql & " INNER JOIN op_per_det ON concepto.concnro = op_per_det.op_det "
        StrSql = StrSql & " INNER JOIN op_permitida ON op_per_det.oppernro = op_permitida.oppernro "
        StrSql = StrSql & " WHERE tipoopnro = 2 " 'abm de novedades de concepto
        StrSql = StrSql & " AND torigennro = 2 " 'usuario
        StrSql = StrSql & " AND origen = '" & l_iduser & "'"
        StrSql = StrSql & " AND conccod = " & Campo
        
        StrSql = StrSql & " UNION "
        
        StrSql = StrSql & " SELECT distinct concepto.concnro "
        StrSql = StrSql & " FROM concepto "
        StrSql = StrSql & " INNER JOIN bk_oper_det ON concepto.concnro = bk_oper_det.op_det "
        StrSql = StrSql & " INNER JOIN bk_oper ON bk_oper_det.bkopernro = bk_oper.bkopernro "
        StrSql = StrSql & " INNER JOIN bk_cab ON bk_cab.bkcabnro = bk_oper.bkcabnro AND "
        StrSql = StrSql & " (bk_cab.fdesde <= " & ConvFecha(Date) & " AND (bk_cab.fhasta IS NULL OR bk_cab.fhasta >= " & ConvFecha(Date) & " ))"
        StrSql = StrSql & " WHERE  bk_oper.tipoopnro = 2 " 'abm de novedades de concepto
        StrSql = StrSql & " AND  bk_oper.torigennro = 2 " 'usuario
        StrSql = StrSql & " AND  bk_oper.origen = '" & l_iduser & "'"
        StrSql = StrSql & " AND conccod = " & Campo
        OpenRecordset StrSql, l_rs
        If Not l_rs.EOF Then
            listaConceptosPermitidos = True
            l_usuario = True
        Else
            l_usuario = False
            listaConceptosPermitidos = False
            'Voy a buscar las de perfil
        End If
        l_rs.Close
            
        'La configuracion no es por usuario entonces busco por perfil
        '-------------------------------------------------------------------
        If Not l_usuario Then
            StrSql = " SELECT distinct concepto.concnro"
            StrSql = StrSql & " FROM concepto "
            StrSql = StrSql & " INNER JOIN op_per_det ON concepto.concnro = op_per_det.op_det "
            StrSql = StrSql & " INNER JOIN op_permitida ON op_per_det.oppernro = op_permitida.oppernro "
            StrSql = StrSql & " WHERE tipoopnro = 2 " 'abm de novedades de concepto "
            StrSql = StrSql & " AND torigennro = 1 " 'perfil
            StrSql = StrSql & " AND origen IN (" & l_perfnro & ")"
            OpenRecordset StrSql, l_rs
            'response.write(l_sql)
            If Not l_rs.EOF Then
                listaConceptosPermitidos = True
            Else
                ' no hay permisos
                listaConceptosPermitidos = False
            End If
            l_rs.Close
        End If
    End If
    


End Function
Public Sub ActualizarEstructura(TipoEstr As Long, CodEst As Long, CodTer As Long, FAlta As String, FBaja As String, Motivo As Long)
' ---------------------------------------------------------------------------------------------
' Descripcion: Procedimiento que inserta la estructura. si existe una estructura del mismo tipo en el intervalo
'               la estructura será actualizada.
' Autor      : JMH
' Fecha      : 26/10/2005
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------

Dim rs As New ADODB.Recordset
Dim rs_his As New ADODB.Recordset

    If CodEst <> 0 Then
        If nro_ModOrg <> 0 Then
            StrSql = "SELECT * FROM adptte_estr WHERE tplatenro = " & nro_ModOrg & " AND tenro = " & TipoEstr
            OpenRecordset StrSql, rs
            If rs.EOF Then
                tplaorden = tplaorden + 1
                StrSql = "INSERT INTO adptte_estr(tplatenro,tenro,tplaestroblig,tplaestrorden) VALUES (" & nro_ModOrg & "," & TipoEstr & ",0," & tplaorden & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
            End If
        End If
    
        StrSql = "SELECT * FROM his_estructura "
        StrSql = StrSql & " WHERE tenro = " & TipoEstr
        StrSql = StrSql & " AND ternro = " & CodTer
        StrSql = StrSql & " AND (htetdesde <= " & FAlta & ") AND"
        StrSql = StrSql & " ((" & FAlta & " <= htethasta) or (htethasta is null))"
        StrSql = StrSql & " ORDER BY htetdesde "
        If rs_his.State = adStateOpen Then rs_his.Close
        OpenRecordset StrSql, rs_his
        If Not rs_his.EOF Then
            If Pisa Then
                If rs_his!Estrnro = CodEst Then
                   StrSql = " UPDATE his_estructura SET htetdesde = " & FAlta
                   StrSql = StrSql & ",htethasta = " & FBaja
                   StrSql = StrSql & ",tipmotnro = " & Motivo
                   StrSql = StrSql & " WHERE tenro = " & TipoEstr
                   StrSql = StrSql & " AND ternro = " & CodTer
                   StrSql = StrSql & " AND estrnro = " & rs_his!Estrnro
                   StrSql = StrSql & " AND htetdesde = " & ConvFecha(rs_his!htetdesde)
                   objConn.Execute StrSql, , adExecuteNoRecords
                Else
                   StrSql = " UPDATE his_estructura SET "
                   StrSql = StrSql & " estrnro = " & CodEst
                   StrSql = StrSql & ",htetdesde = " & FAlta
                   StrSql = StrSql & ",htethasta = " & FBaja
                   StrSql = StrSql & ",tipmotnro = " & Motivo
                   StrSql = StrSql & " WHERE tenro = " & TipoEstr
                   StrSql = StrSql & " AND ternro = " & CodTer
                   StrSql = StrSql & " AND estrnro = " & rs_his!Estrnro
                   StrSql = StrSql & " AND htetdesde = " & ConvFecha(rs_his!htetdesde)
                   objConn.Execute StrSql, , adExecuteNoRecords
                End If
            Else
                Texto = ": " & "Ya existe una estructura de tipo " & TipoEstr
                Call Escribir_Log("floge", LineaCarga, 1, Texto, Tabs, "")
            End If
        Else
            If Not FBaja = "Null" Then
                StrSql = " INSERT INTO his_estructura(ternro,estrnro,tenro,htetdesde,htethasta,tipmotnro) VALUES("
                StrSql = StrSql & CodTer & "," & CodEst & "," & TipoEstr & "," & FAlta & "," & FBaja & "," & Motivo & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
            Else
                StrSql = " INSERT INTO his_estructura(ternro,estrnro,tenro,htetdesde,tipmotnro) VALUES("
                StrSql = StrSql & CodTer & "," & CodEst & "," & TipoEstr & "," & FAlta & "," & Motivo & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
            End If
        End If
    End If
    
    If rs_his.State = adStateOpen Then rs_his.Close
    Set rs_his = Nothing

End Sub

Public Sub LineaModelo_315(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Historico de ranking - Custom IAMSA
'               Inserta en la tabla gti_his_rnk
' Autor      : FGZ
'              El formato es:
'                   Formato 1
'                       Legajo; Año; Dias Trabajados; Antig Años; Antig Dias; Porc Ant; Tarjeta; Tarjeta Anterior
' Fecha      : 12/08/2009
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long
Dim Apellido As String
Dim nombre As String

Dim FechaDesde As String
Dim FechaHasta As String

Dim Aux As String

Dim Anio As Integer
Dim DiasTrab As Integer
Dim Ant_a As Integer
Dim Ant_d As Integer
Dim Porc As Double
Dim Tar As Long
Dim Tar_Ant As Long
Dim Diferencia As Long
Dim campos

Dim rs_Empleado As New ADODB.Recordset

' El formato es:
' Legajo; Año; Dias Trabajados; Antig Años; Antig Dias; Porc Ant; Tarjeta; Tarjeta Anterior
    
    
    On Error GoTo Manejador_De_Error
    Tabs = 1
    

    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    campos = Split(strLinea, separador)
    
    NroColumna = NroColumna + 1
    'Nro de Legajo
    Aux = campos(0)
    If IsNumeric(Aux) Then
        NroLegajo = Aux
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
    NroColumna = NroColumna + 1
    'Año
    Anio = campos(1)
        
    NroColumna = NroColumna + 1
    'Dias trabajados
    DiasTrab = campos(2)
        
    NroColumna = NroColumna + 1
    'Antiguedad años
    Ant_a = campos(3)
    
    NroColumna = NroColumna + 1
    'Antiguedad dias
    Ant_d = campos(4)
    
    NroColumna = NroColumna + 1
    'Porcentaje Antiguedad
    Porc = campos(5)
    
    NroColumna = NroColumna + 1
    'Tarjeta
    Aux = campos(6)
    If IsNumeric(Aux) Then
        Tar = Aux
    Else
        Texto = ": " & "El nro de tarjeta debe ser numerico " & Tar
        NroColumna = 7
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    End If
    
    NroColumna = NroColumna + 1
    'Tarjeta anterior
    If UBound(campos) >= 7 Then
        Aux = campos(7)
        If IsNumeric(Aux) Then
            Tar_Ant = Aux
        Else
            Texto = ": " & "El nro de tarjeta debe ser numerico " & Tar_Ant
            NroColumna = 8
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            HuboError = True
            Exit Sub
        End If
    Else
        Tar_Ant = "0"
    End If
   

' ====================================================================
'   Validar los parametros Levantados

'Que exista el legajo
StrSql = "SELECT ternro, empleg, terape, ternom FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
    Apellido = rs_Empleado!terape
    nombre = rs_Empleado!ternom
End If


'Calculo la diferencia entre los nros de tarjeta
If Tar_Ant <> 0 And Tar <> 0 Then
    Diferencia = Tar - Tar_Ant
Else
    Diferencia = 0
End If

'=============================================================
'Busco si existe la Novedad

    StrSql = "SELECT * FROM gti_his_rnk "
    StrSql = StrSql & " WHERE ternro = " & Tercero
    StrSql = StrSql & " AND anio = " & CLng(Anio)
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        'Si existe ==> lo piso
    
        StrSql = "UPDATE gti_his_rnk SET "
        StrSql = StrSql & " bpronro = " & NroProcesoBatch & ", "
        StrSql = StrSql & " iduser = " & "'" & usuario & "', "
        StrSql = StrSql & " Ternro = " & Tercero & ", "
        StrSql = StrSql & " empleg = " & NroLegajo & ", "
        StrSql = StrSql & " terape = " & "'" & Apellido & "', "
        StrSql = StrSql & " ternom = " & "'" & nombre & "', "
        StrSql = StrSql & " tarjeta = " & Tar & ", "
        StrSql = StrSql & " anio = " & "'" & Anio & "', "
        StrSql = StrSql & " cerrado = -1, "
        StrSql = StrSql & " dias_trabajados = " & DiasTrab & ", "
        StrSql = StrSql & " antig_anio = " & Ant_a & ", "
        StrSql = StrSql & " antig_dias = " & Ant_d & ", "
        StrSql = StrSql & " situacion = " & "'', "
        StrSql = StrSql & " observacion = " & "'MIG', "
        StrSql = StrSql & " porc_antig = " & Porc & ", "
        StrSql = StrSql & " tarjeta_ant = " & Tar_Ant & ", "
        StrSql = StrSql & " dif = " & Diferencia
        StrSql = StrSql & " WHERE ternro = " & Tercero
        StrSql = StrSql & " AND anio = '" & Anio & "'"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "historico Actualizada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    Else
        
        StrSql = "INSERT INTO gti_his_rnk (bpronro, iduser, Ternro, empleg, terape, ternom, tarjeta, anio, cerrado, dias_trabajados, antig_anio,antig_dias, situacion, observacion, porc_antig, tarjeta_ant, dif) VALUES ("
        StrSql = StrSql & NroProcesoBatch & ", "
        StrSql = StrSql & "'" & usuario & "', "
        StrSql = StrSql & Tercero & ", "
        StrSql = StrSql & NroLegajo & ", "
        StrSql = StrSql & "'" & Apellido & "', "
        StrSql = StrSql & "'" & nombre & "', "
        StrSql = StrSql & Tar & ", "
        StrSql = StrSql & "'" & Anio & "', "
        StrSql = StrSql & -1 & ", "
        StrSql = StrSql & Fix(DiasTrab) & ", "
        StrSql = StrSql & Fix(Ant_a) & ", "
        StrSql = StrSql & Fix(Ant_d) & ", "
        StrSql = StrSql & "'', "
        StrSql = StrSql & "'MIG', "
        StrSql = StrSql & FormatNumber(Porc, 2) & ", "
        StrSql = StrSql & Tar_Ant & ", "
        StrSql = StrSql & Diferencia & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "historico insertado "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If


Fin:
'Cierro todo y libero
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs.State = adStateOpen Then rs.Close

Set rs_Empleado = Nothing
Set rs = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_284(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Farmacity
' Autor      : Cesar Stankunas
' Fecha      : 23/10/2009
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
' El formato es:    Periodo
'                   Legajo
'                   Apellido_Nombre (No usado)
'                   Lugar Pago (No usado)
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim cant As Long
Dim I As Long
Dim datos

Dim Periodo As Date
Dim empleg As Long

Dim rs_consulta As New ADODB.Recordset
    
    On Error GoTo Manejador_De_Error:
    
    Flog.writeline "                                                         "
    Flog.writeline "    -----------------------------------------------------"
    Flog.writeline "    -----------------------------------------------------"
    Flog.writeline "                                                         "
    
    Flog.writeline "procesando linea " & strLinea
    datos = Split(strLinea, separador)
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I
    
    'Periodo
    Flog.writeline "    chequeo que la fecha del periodo tenga el formato correcto"
    If Not IsDate(datos(0)) Then
        Flog.writeline "    La fecha del periodo: " & datos(0) & " no tiene el formato correcto."
        Exit Sub
    End If
    Periodo = datos(0)
    
    'Legajo Empleado
    Flog.writeline "    chequeo que el numero de legajo del empleado sea numerico"
    If Not IsNumeric(datos(1)) Then
        Flog.writeline "    El legajo del empleado: " & datos(1) & " no es numérico."
        Exit Sub
    End If
    empleg = datos(1)
    
    'Busco si existe el empleado
    Flog.writeline "    Busco si existe el empleado"
    StrSql = "SELECT ternro FROM empleado " & _
            " WHERE empleg = " & empleg
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "    No se encontró el empleado con legajo: " & empleg
        Exit Sub
    Else
        rs_consulta.Close
    End If
    
    'Busco si ya existía el recibo
    Flog.writeline "    Busco si el recibo ya existe"
    StrSql = "SELECT * FROM recentregados " & _
            " WHERE empleg = " & empleg & _
            " AND fecrecibo = '" & Periodo & "'"
    OpenRecordset StrSql, rs_consulta
    If Not rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "    El recibo ya existe, no se insertó."
        Exit Sub
    Else
        rs_consulta.Close
        
        StrSql = "INSERT INTO recentregados ("
        StrSql = StrSql & " empleg, fecrecibo)"
        StrSql = StrSql & " VALUES (" & empleg
        StrSql = StrSql & ",'" & Periodo & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline " Grabo el recibo entregado al Legajo " & empleg & " el " & Periodo
    End If
    
    'cierro y libero
    If rs_consulta.State = adStateOpen Then rs_consulta.Close
    Set rs_consulta = Nothing

Fin:
    Exit Sub

Manejador_De_Error:
    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub
Public Sub LineaModelo_317(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion:  Interface Distribución Contable - Custom PRICE
'               Inserta en la tabla imputaciones
' Autor      : Cesar Stankunas
'              El formato es:
'                   Formato 1
'                       Legajo; Cod Modelo Asiento; TE1; Estr1; TE2; Estr2; TE3; Estr3; Porcentaje
'                       (Los TE y Estr son nombres)
' Fecha      : 02/12/2009
' Ultima Mod.:
' Descripcion: 06-12-2010 - Leticia A. - elimina caracteres invalidos de diferentes campos.
' ---------------------------------------------------------------------------------------------

Dim pos1 As Long
Dim pos2 As Long

Dim Tercero As Long
Dim NroLegajo As Long
Dim Apellido As String
Dim nombre As String

Dim FechaDesde As String
Dim FechaHasta As String

Dim Aux As String

Dim Anio As Integer
Dim DiasTrab As Integer
Dim Ant_a As Integer
Dim Ant_d As Integer
Dim Porc As Double
Dim Tar As Long
Dim Tar_Ant As Long
Dim Diferencia As Long
Dim campos
Dim CodModelo As Long
Dim te1desc As String
Dim estr1desc As String
Dim te1 As Long
Dim estr1 As Long
Dim te2desc As String
Dim estr2desc As String
Dim te2 As Long
Dim estr2 As Long
Dim te3desc As String
Dim estr3desc As String
Dim te3 As Long
Dim estr3 As Long
Dim Porcent As Double
Dim errnro As Long
Dim Suma As Double
Dim Inserto_estr1 As Boolean
Dim Inserto_estr2 As Boolean
Dim Inserto_estr3 As Boolean
Dim MasinivTernro1 As Long
Dim MasinivTernro2 As Long
Dim MasinivTernro3 As Long
Dim periodoLiqDesde As Long
Dim periodoLiqHasta As Long

Dim rs_Empleado As New ADODB.Recordset
Dim rs As New ADODB.Recordset

' El formato es:
' Legajo; Cod Modelo Asiento; TE1; Estr1; TE2; Estr2; TE3; Estr3; Porcentaje; Fecha Desde; Fecha Hasta
    
    On Error GoTo Manejador_De_Error
    Tabs = 1
    te1 = 0
    estr1 = 0
    te2 = 0
    estr2 = 0
    te3 = 0
    estr3 = 0
    MasinivTernro1 = 0
    MasinivTernro2 = 0
    MasinivTernro3 = 0
    
    Inserto_estr1 = False
    Inserto_estr2 = False
    Inserto_estr3 = False
    
    Texto = " "
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    campos = Split(strLinea, separador)
    
    
    '==========================================================================================================
    'Nro de Legajo
    '==========================================================================================================
    NroColumna = NroColumna + 1
    Aux = campos(0)
    If IsNumeric(Aux) Then
        NroLegajo = Aux
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Texto = " "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        RegError = RegError + 1
        HuboError = True
        Exit Sub
    End If
    
    'Que exista el legajo
    StrSql = "SELECT ternro, empleg, terape, ternom FROM empleado where empleg = " & NroLegajo
    OpenRecordset StrSql, rs_Empleado
    If rs_Empleado.EOF Then
        Texto = ": " & "No se encontro el legajo " & NroLegajo
        NroColumna = 1
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        RegError = RegError + 1
        HuboError = True
        Exit Sub
    Else
        Tercero = rs_Empleado!Ternro
        Apellido = rs_Empleado!terape
        nombre = rs_Empleado!ternom
        Flog.writeline "Empleado encontrado."
    End If
    
    
    '==========================================================================================================
    'Codigo Modelo Asiento
    '==========================================================================================================
    NroColumna = NroColumna + 1
    Aux = campos(1)
    StrSql = " SELECT masinro, masidesc, masinivternro1 , masinivternro2, masinivternro3"
    StrSql = StrSql & " FROM mod_asiento"
    StrSql = StrSql & " WHERE masinro = " & Aux
    StrSql = StrSql & " ORDER BY masidesc"
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        CodModelo = Aux
        MasinivTernro1 = IIf(EsNulo(rs!MasinivTernro1), 0, rs!MasinivTernro1)
        MasinivTernro2 = IIf(EsNulo(rs!MasinivTernro2), 0, rs!MasinivTernro2)
        MasinivTernro3 = IIf(EsNulo(rs!MasinivTernro3), 0, rs!MasinivTernro3)
        Flog.writeline "Modelo de Asiento encontrado."
    Else
        Texto = ": " & "El código de modelo de asiento " & Aux & " no existe en el sistema "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        RegError = RegError + 1
        HuboError = True
        Exit Sub
    End If
    
    
    '==========================================================================================================
    'TE1
    '==========================================================================================================
    NroColumna = NroColumna + 1
    te1desc = campos(2)
    estr1desc = campos(3)
    Campoetiqueta = campos(3)
    te1desc = EliminarCHInvalidosII(te1desc, 1, "")
    estr1desc = EliminarCHInvalidosII(estr1desc, 1, "")
    
    ' Validacion y Creacion del Centro de Costo
    If te1desc <> "" Then
        
        'Validacion del tipo de estructura contra la base
        Call GetTipoEstrucNro(te1desc, te1)
        If te1 = 0 Then
            estr1 = 0
            Texto = ": " & "El tipo de estructura " & te1desc & " no existe en el sistema "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
            Exit Sub
        End If
        
        'Controlo que sea el mismo tipo de estructura que el configurado en el modelo
        If te1 <> MasinivTernro1 Then
            Texto = ": " & "El tipo de estructura " & te1desc & " no pertenece al modelo " & CodModelo
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
            Exit Sub
        End If
        
        'Busqueda/Creacion de estructura
        Call ValidaEstructura(te1, estr1desc, estr1, Inserto_estr1)
        If Inserto_estr1 Then
            Texto = ": " & "Se creo la estructura '" & estr1desc & "'"
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
        End If
        
    Else
        te1 = 0
        estr1 = 0
    End If
    
    
    '==========================================================================================================
    'TE2
    '==========================================================================================================
    NroColumna = NroColumna + 1
    te2desc = campos(4)
    estr2desc = campos(5)
    Campoetiqueta = campos(5)
    te2desc = EliminarCHInvalidosII(te2desc, 1, "")
    estr2desc = EliminarCHInvalidosII(estr2desc, 1, "")
    
    
    ' Validacion y Creacion del Centro de Costo
    If te2desc <> "" Then
        
        'Validacion del tipo de estructura contra la base
        Call GetTipoEstrucNro(te2desc, te2)
        If te2 = 0 Then
            estr2 = 0
            Texto = ": " & "El tipo de estructura " & te2desc & " no existe en el sistema "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
            Exit Sub
        End If
        
        'Controlo que sea el mismo tipo de estructura que el configurado en el modelo
        If te2 <> MasinivTernro2 Then
            Texto = ": " & "El tipo de estructura " & te2desc & " no pertenece al modelo " & CodModelo
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
            Exit Sub
        End If
            
        'Busqueda/Creacion de estructura
        Call ValidaEstructura(te2, estr2desc, estr2, Inserto_estr2)
        If Inserto_estr2 Then
            Texto = ": " & "Se creo la estructura '" & estr2desc & "'"
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
        End If
        
    Else
        te2 = 0
        estr2 = 0
    End If
    
    
    '==========================================================================================================
    'TE3
    '==========================================================================================================
    NroColumna = NroColumna + 1
    te3desc = campos(6)
    estr3desc = campos(7)
    Campoetiqueta = campos(7)
    te3desc = EliminarCHInvalidosII(te3desc, 1, "")
    estr3desc = EliminarCHInvalidosII(estr3desc, 1, "")
    
    ' Validacion y Creacion del Centro de Costo
    If te3desc <> "" Then
        
        'Validacion del tipo de estructura contra la base
        Call GetTipoEstrucNro(te3desc, te3)
        If te3 = 0 Then
            estr3 = 0
            Texto = ": " & "El tipo de estructura " & te3desc & " no existe en el sistema "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
            Exit Sub
        End If
        
        'Controlo que sea el mismo tipo de estructura que el configurado en el modelo
        If te3 <> MasinivTernro3 Then
            Texto = ": " & "El tipo de estructura " & te3desc & " no pertenece al modelo " & CodModelo
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
            Exit Sub
        End If
            
        'Busqueda/Creacion de estructura
        Call ValidaEstructura(te3, estr3desc, estr3, Inserto_estr3)
        If Inserto_estr3 Then
            Texto = ": " & "Se creo la estructura '" & estr3desc & "'"
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
        End If
        
    Else
        te3 = 0
        estr3 = 0
    End If
    
    If te1 = 0 And te2 = 0 And te3 = 0 Then
        Texto = ": " & "Ningun tipo de estructura es valido "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        RegError = RegError + 1
        HuboError = True
        Exit Sub
    End If
    
    
    '==========================================================================================================
    'Porcentaje
    '==========================================================================================================
    NroColumna = NroColumna + 1
    Porcent = campos(8)
    If EsNulo(Porcent) Then
        Porcent = 0
    Else
        If Porcent < 0 Then
            Porcent = 0
        Else
            If Porcent > 100 Then
                Porcent = 100
            End If
        End If
    End If
    

'==========================================================================================================
    'Fecha Desde
    '==========================================================================================================
    NroColumna = NroColumna + 1
    FechaDesde = campos(9)
    If FechaDesde = "" Or UCase(FechaDesde) = "N/A" Then
        Texto = ": Fecha Desde Obligatoria."
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        RegError = RegError + 1
        HuboError = True
        Exit Sub
    End If
    
    '==========================================================================================================
    'Fecha Hasta
    '==========================================================================================================
    NroColumna = NroColumna + 1
    FechaHasta = campos(10)
    If FechaHasta = "" Or UCase(FechaHasta) = "N/A" Then
        FechaHasta = ""
    Else
        '==========================================================================================================
        'Valido que la las fechas de los periodos sea correcto
        '==========================================================================================================
        If CDate(FechaDesde) > CDate(FechaHasta) Then
            Texto = ": Periodo Desde es mayor que el Período Hasta."
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
            HuboError = True
            Exit Sub
        End If
    End If


    
    
    
     '==========================================================================================================
    'Busco el periodo de liquidacion a partir de la fecha Desde
    '==========================================================================================================
    StrSql = " SELECT pliqnro FROM periodo " & _
             " WHERE pliqdesde <= " & ConvFecha(FechaDesde) & " AND pliqhasta >= " & ConvFecha(FechaDesde)
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        pliqdesde = rs!Pliqnro
    Else
        Texto = ": Periodo de liquidacion Desde no Existente."
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        RegError = RegError + 1
        HuboError = True
        Exit Sub
    End If
    
    '==========================================================================================================
    'Busco el periodo de liquidacion a partir de la fecha Hasta
    '==========================================================================================================
    If FechaHasta <> "" Then
        StrSql = " SELECT pliqnro FROM periodo " & _
                 " WHERE pliqdesde <= " & ConvFecha(FechaHasta) & " AND pliqhasta >= " & ConvFecha(FechaHasta)
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            pliqhasta = rs!Pliqnro
        Else
            Texto = ": Periodo de liquidacion hasta no Existente."
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
            HuboError = True
            Exit Sub
        End If
    Else
        FechaHasta = "NULL"
    End If
    
    '==========================================================================================================
    'Calculo el Porcentaje ya cargado por el proceso dentro de la vigencia
    '==========================================================================================================
    Suma = 0
       StrSql = " SELECT SUM(porcentaje) suma FROM imputacion "
       StrSql = StrSql & " INNER JOIN periodo desde ON  desde.pliqnro= imputacion.pliqdesde "
       StrSql = StrSql & " LEFT JOIN periodo hasta ON hasta.pliqnro = imputacion.pliqhasta "
       StrSql = StrSql & " WHERE ternro = " & Tercero & " AND masinro = " & CodModelo
        If FechaHasta <> "NULL" Then
        StrSql = StrSql & " AND ((desde.pliqdesde <= " & ConvFecha(FechaDesde) & " AND (hasta.pliqhasta is null or hasta.pliqhasta >= " & ConvFecha(FechaHasta) & _
                          " OR hasta.pliqhasta >= " & ConvFecha(FechaDesde) & ")) OR (desde.pliqdesde >= " & ConvFecha(FechaDesde) & " AND (desde.pliqdesde <= " & ConvFecha(FechaHasta) & "))) "
        Else
        StrSql = StrSql & " AND ((desde.pliqdesde <= " & ConvFecha(FechaDesde) & " AND (hasta.pliqhasta is null or hasta.pliqhasta >= " & ConvFecha(FechaDesde) & "))" & _
                          " OR (desde.pliqdesde >= " & ConvFecha(FechaDesde) & " AND (hasta.pliqhasta is null or hasta.pliqhasta >= " & ConvFecha(FechaDesde) & ")))"
        End If
       StrSql = StrSql & " AND (fija = -1"
       StrSql = StrSql & " OR bpronro = " & NroProcesoBatch & ")"
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        If Not EsNulo(rs!Suma) Then
            Suma = CDbl(rs!Suma)
        End If
    End If
    
    If (Suma + Porcent) > 100 Then
        Texto = ": " & " el porcentaje acumula mas de 100%"
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        RegError = RegError + 1
        HuboError = True
        Exit Sub
    End If
    '==========================================================================================================
    'Borro las lineas que no fueron subidas por el proceso actual y que no son fijas
    '==========================================================================================================
    StrSql = "DELETE imputacion"
    StrSql = StrSql & " WHERE ternro = " & Tercero
    StrSql = StrSql & " AND fija <> -1 AND (bpronro <> " & NroProcesoBatch & " OR bpronro IS NULL)"
    If FechaHasta <> "NULL" Then
            StrSql = StrSql & " AND pliqdesde >=  " & pliqdesde
            StrSql = StrSql & " AND pliqhasta >=  " & pliqhasta
    Else
             StrSql = StrSql & " AND pliqdesde >=  " & pliqdesde
           ' StrSql = StrSql & " AND pliqhasta IS NULL  "
    End If
    objConn.Execute StrSql, , adExecuteNoRecords
    
    '==========================================================================================================
    'Valido contra la bd que no exista una imputacion para el modelo y empleado con marca de fija
    '==========================================================================================================
    StrSql = "SELECT impnro, desde.pliqdesde, hasta.pliqhasta"
    StrSql = StrSql & " FROM imputacion"
    StrSql = StrSql & " INNER JOIN periodo desde ON  desde.pliqnro= imputacion.pliqdesde "
    StrSql = StrSql & " LEFT JOIN periodo hasta ON hasta.pliqnro = imputacion.pliqhasta "
    StrSql = StrSql & " WHERE ternro = " & Tercero & " AND masinro = " & CodModelo
    StrSql = StrSql & " AND tenro = " & te1 & " AND estrnro = " & estr1
    StrSql = StrSql & " AND tenro2 = " & te2 & " AND estrnro2 = " & estr2
    StrSql = StrSql & " AND tenro3 = " & te3 & " AND estrnro3 = " & estr3
    StrSql = StrSql & " AND fija = -1"
    If FechaHasta <> "NULL" Then
        StrSql = StrSql & " AND ((desde.pliqdesde <= " & ConvFecha(FechaDesde) & " AND (hasta.pliqhasta is null or hasta.pliqhasta >= " & ConvFecha(FechaHasta) & _
                          " OR hasta.pliqhasta >= " & ConvFecha(FechaDesde) & ")) OR (desde.pliqdesde >= " & ConvFecha(FechaDesde) & " AND (desde.pliqdesde <= " & ConvFecha(FechaHasta) & ")) )"
    Else
        StrSql = StrSql & " AND ((desde.pliqdesde <= " & ConvFecha(FechaDesde) & " AND (hasta.pliqhasta is null or hasta.pliqhasta >= " & ConvFecha(FechaDesde) & "))" & _
                          " OR (desde.pliqdesde >= " & ConvFecha(FechaDesde) & " AND (hasta.pliqhasta is null or hasta.pliqhasta >= " & ConvFecha(FechaDesde) & ")))"
    End If
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        Texto = ": " & " ya existe una linea fija para el empleado, estructuras y modelo"
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        RegError = RegError + 1
        HuboError = True
        Exit Sub
    End If

    '==========================================================================================================
    'Verifico si existe la imputacion
    '==========================================================================================================
    StrSql = "SELECT impnro, desde.pliqdesde, hasta.pliqhasta FROM imputacion"
    StrSql = StrSql & " INNER JOIN periodo desde ON  desde.pliqnro= imputacion.pliqdesde "
    StrSql = StrSql & " LEFT JOIN periodo hasta ON hasta.pliqnro = imputacion.pliqhasta "
    StrSql = StrSql & " WHERE ternro = " & Tercero & " AND masinro = " & CodModelo

 
    If te1 > 0 And estr1 > 0 Then
        StrSql = StrSql & " AND tenro = " & te1 & " AND estrnro = " & estr1
    Else
        StrSql = StrSql & " AND tenro = 0 AND estrnro = 0"
    End If
    If te2 > 0 And estr2 > 0 Then
        StrSql = StrSql & " AND tenro2 = " & te2 & " AND estrnro2 = " & estr2
    Else
        StrSql = StrSql & " AND tenro2 = 0 AND estrnro2 = 0"
    End If
    If te3 > 0 And estr3 > 0 Then
        StrSql = StrSql & " AND tenro3 = " & te3 & " AND estrnro3 = " & estr3
    Else
        StrSql = StrSql & " AND tenro3 = 0 AND estrnro3 = 0"
    End If
    If FechaHasta <> "NULL" Then
        StrSql = StrSql & " AND ((desde.pliqdesde <= " & ConvFecha(FechaDesde) & " AND (hasta.pliqhasta is null or hasta.pliqhasta >= " & ConvFecha(FechaHasta) & _
                          " OR hasta.pliqhasta >= " & ConvFecha(FechaDesde) & ")) OR (desde.pliqdesde >= " & ConvFecha(FechaDesde) & " AND (desde.pliqdesde <= " & ConvFecha(FechaHasta) & ")) )"
    Else
        StrSql = StrSql & " AND ((desde.pliqdesde <= " & ConvFecha(FechaDesde) & " AND (hasta.pliqhasta is null or hasta.pliqhasta >= " & ConvFecha(FechaDesde) & "))" & _
                          " OR (desde.pliqdesde >= " & ConvFecha(FechaDesde) & " AND (hasta.pliqhasta is null or hasta.pliqhasta >= " & ConvFecha(FechaDesde) & ")))"
    End If
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        '==========================================================================================================
        'Actualizo la distribucion
        '==========================================================================================================
        StrSql = "Update imputacion"
        StrSql = StrSql & " SET porcentaje = porcentaje + " & Porcent
        StrSql = StrSql & " ,bpronro = " & NroProcesoBatch
'        StrSql = StrSql & " ,pliqdesde= " & pliqdesde
'        StrSql = StrSql & " ,pliqhasta= " & pliqhasta
        StrSql = StrSql & " WHERE impnro = " & rs!impnro
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Texto = "Imputación Actualizada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    Else
        '==========================================================================================================
        'Inserto la distribucion
        '==========================================================================================================
        StrSql = "INSERT INTO imputacion (ternro, masinro, porcentaje"
        StrSql = StrSql & " , tenro, estrnro"
        StrSql = StrSql & " , tenro2, estrnro2"
        StrSql = StrSql & " , tenro3, estrnro3, bpronro, pliqdesde, pliqhasta"
        StrSql = StrSql & " ) VALUES (" & Tercero & "," & CodModelo & ", " & Porcent
        If te1 > 0 And estr1 > 0 Then
            StrSql = StrSql & " ," & te1 & "," & estr1
        Else
            StrSql = StrSql & " ,0,0"
        End If
        If te2 > 0 And estr2 > 0 Then
            StrSql = StrSql & " ," & te2 & "," & estr2
        Else
            StrSql = StrSql & " ,0,0"
        End If
        If te3 > 0 And estr3 > 0 Then
            StrSql = StrSql & " ," & te3 & "," & estr3
        Else
            StrSql = StrSql & " ,0,0"
        End If
        StrSql = StrSql & " ," & NroProcesoBatch & "," & pliqdesde & "," & pliqhasta & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Texto = "Imputación Insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If
    
Fin:
'Cierro todo y libero
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs.State = adStateOpen Then rs.Close

Set rs_Empleado = Nothing
Set rs = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    GoTo Fin
End Sub
'Public Sub LineaModelo_317(ByVal strLinea As String)
'' ---------------------------------------------------------------------------------------------
'' Descripcion:  Interface DistribuciÃ³n Contable - Custom PRICE
''               Inserta en la tabla imputaciones
'' Autor      : Cesar Stankunas
''              El formato es:
''                   Formato 1
''                       Legajo; Cod Modelo Asiento; TE1; Estr1; TE2; Estr2; TE3; Estr3; Porcentaje
''                       (Los TE y Estr son nombres)
'' Fecha      : 02/12/2009
'' Ultima Mod.:
'' Descripcion: 06-12-2010 - Leticia A. - elimina caracteres invalidos de diferentes campos.
'' ---------------------------------------------------------------------------------------------
'
'Dim pos1 As Long
'Dim pos2 As Long
'
'Dim Tercero As Long
'Dim NroLegajo As Long
'Dim Apellido As String
'Dim nombre As String
'
'Dim FechaDesde As String
'Dim FechaHasta As String
'
'Dim Aux As String
'
'Dim Anio As Integer
'Dim DiasTrab As Integer
'Dim Ant_a As Integer
'Dim Ant_d As Integer
'Dim Porc As Double
'Dim Tar As Long
'Dim Tar_Ant As Long
'Dim Diferencia As Long
'Dim campos
'Dim CodModelo As Long
'Dim te1desc As String
'Dim estr1desc As String
'Dim te1 As Long
'Dim estr1 As Long
'Dim te2desc As String
'Dim estr2desc As String
'Dim te2 As Long
'Dim estr2 As Long
'Dim te3desc As String
'Dim estr3desc As String
'Dim te3 As Long
'Dim estr3 As Long
'Dim Porcent As Double
'Dim errnro As Long
'Dim Suma As Double
'Dim Inserto_estr1 As Boolean
'Dim Inserto_estr2 As Boolean
'Dim Inserto_estr3 As Boolean
'Dim MasinivTernro1 As Long
'Dim MasinivTernro2 As Long
'Dim MasinivTernro3 As Long
'
'Dim rs_Empleado As New ADODB.Recordset
'Dim rs As New ADODB.Recordset
'
'' El formato es:
'' Legajo; Cod Modelo Asiento; TE1; Estr1; TE2; Estr2; TE3; Estr3; Porcentaje
'
'    On Error GoTo Manejador_De_Error
'    Tabs = 1
'    te1 = 0
'    estr1 = 0
'    te2 = 0
'    estr2 = 0
'    te3 = 0
'    estr3 = 0
'    MasinivTernro1 = 0
'    MasinivTernro2 = 0
'    MasinivTernro3 = 0
'
'    Inserto_estr1 = False
'    Inserto_estr2 = False
'    Inserto_estr3 = False
'
'    Texto = " "
'    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
'    Texto = "Procesando linea " & strLinea
'    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
'
'    campos = Split(strLinea, separador)
'
'
'    '==========================================================================================================
'    'Nro de Legajo
'    '==========================================================================================================
'    NroColumna = NroColumna + 1
'    Aux = campos(0)
'    If IsNumeric(Aux) Then
'        NroLegajo = Aux
'    Else
'        Texto = ": " & "El legajo no es numerico "
'        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        Texto = " "
'        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        HuboError = True
'        Exit Sub
'    End If
'
'    'Que exista el legajo
'    StrSql = "SELECT ternro, empleg, terape, ternom FROM empleado where empleg = " & NroLegajo
'    OpenRecordset StrSql, rs_Empleado
'    If rs_Empleado.EOF Then
'        Texto = ": " & "No se encontro el legajo " & NroLegajo
'        NroColumna = 1
'        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        HuboError = True
'        Exit Sub
'    Else
'        Tercero = rs_Empleado!Ternro
'        Apellido = rs_Empleado!terape
'        nombre = rs_Empleado!ternom
'    End If
'
'
'    '==========================================================================================================
'    'Codigo Modelo Asiento
'    '==========================================================================================================
'    NroColumna = NroColumna + 1
'    Aux = campos(1)
'    StrSql = " SELECT masinro, masidesc, masinivternro1 , masinivternro2, masinivternro3"
'    StrSql = StrSql & " FROM mod_asiento"
'    StrSql = StrSql & " WHERE masinro = " & Aux
'    StrSql = StrSql & " ORDER BY masidesc"
'    OpenRecordset StrSql, rs
'    If Not rs.EOF Then
'        CodModelo = Aux
'        MasinivTernro1 = IIf(EsNulo(rs!MasinivTernro1), 0, rs!MasinivTernro1)
'        MasinivTernro2 = IIf(EsNulo(rs!MasinivTernro2), 0, rs!MasinivTernro2)
'        MasinivTernro3 = IIf(EsNulo(rs!MasinivTernro3), 0, rs!MasinivTernro3)
'    Else
'        Texto = ": " & "El cÃ³digo de modelo de asiento " & Aux & " no existe en el sistema "
'        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        HuboError = True
'        Exit Sub
'    End If
'
'
'    '==========================================================================================================
'    'TE1
'    '==========================================================================================================
'    NroColumna = NroColumna + 1
'    te1desc = campos(2)
'    estr1desc = campos(3)
'    Campoetiqueta = campos(3)
'    te1desc = EliminarCHInvalidosII(te1desc, 1, "")
'    estr1desc = EliminarCHInvalidosII(estr1desc, 1, "")
'
'    ' Validacion y Creacion del Centro de Costo
'    If te1desc <> "" Then
'
'        'Validacion del tipo de estructura contra la base
'        Call GetTipoEstrucNro(te1desc, te1)
'        If te1 = 0 Then
'            estr1 = 0
'            Texto = ": " & "El tipo de estructura " & te1desc & " no existe en el sistema "
'            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'            Exit Sub
'        End If
'
'        'Controlo que sea el mismo tipo de estructura que el configurado en el modelo
'        If te1 <> MasinivTernro1 Then
'            Texto = ": " & "El tipo de estructura " & te1desc & " no pertenece al modelo " & CodModelo
'            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'            Exit Sub
'        End If
'
'        'Busqueda/Creacion de estructura
'        Call ValidaEstructura(te1, estr1desc, estr1, Inserto_estr1)
'        If Inserto_estr1 Then
'            Texto = ": " & "Se creo la estructura '" & estr1desc & "'"
'            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        End If
'
'    Else
'        te1 = 0
'        estr1 = 0
'    End If
'
'
'    '==========================================================================================================
'    'TE2
'    '==========================================================================================================
'    NroColumna = NroColumna + 1
'    te2desc = campos(4)
'    estr2desc = campos(5)
'    Campoetiqueta = campos(5)
'    te2desc = EliminarCHInvalidosII(te2desc, 1, "")
'    estr2desc = EliminarCHInvalidosII(estr2desc, 1, "")
'
'
'    ' Validacion y Creacion del Centro de Costo
'    If te2desc <> "" Then
'
'        'Validacion del tipo de estructura contra la base
'        Call GetTipoEstrucNro(te2desc, te2)
'        If te2 = 0 Then
'            estr2 = 0
'            Texto = ": " & "El tipo de estructura " & te2desc & " no existe en el sistema "
'            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'            Exit Sub
'        End If
'
'        'Controlo que sea el mismo tipo de estructura que el configurado en el modelo
'        If te2 <> MasinivTernro2 Then
'            Texto = ": " & "El tipo de estructura " & te2desc & " no pertenece al modelo " & CodModelo
'            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'            Exit Sub
'        End If
'
'        'Busqueda/Creacion de estructura
'        Call ValidaEstructura(te2, estr2desc, estr2, Inserto_estr2)
'        If Inserto_estr2 Then
'            Texto = ": " & "Se creo la estructura '" & estr2desc & "'"
'            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        End If
'
'    Else
'        te2 = 0
'        estr2 = 0
'    End If
'
'
'    '==========================================================================================================
'    'TE3
'    '==========================================================================================================
'    NroColumna = NroColumna + 1
'    te3desc = campos(6)
'    estr3desc = campos(7)
'    Campoetiqueta = campos(7)
'    te3desc = EliminarCHInvalidosII(te3desc, 1, "")
'    estr3desc = EliminarCHInvalidosII(estr3desc, 1, "")
'
'    ' Validacion y Creacion del Centro de Costo
'    If te3desc <> "" Then
'
'        'Validacion del tipo de estructura contra la base
'        Call GetTipoEstrucNro(te3desc, te3)
'        If te3 = 0 Then
'            estr3 = 0
'            Texto = ": " & "El tipo de estructura " & te3desc & " no existe en el sistema "
'            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'            Exit Sub
'        End If
'
'        'Controlo que sea el mismo tipo de estructura que el configurado en el modelo
'        If te3 <> MasinivTernro3 Then
'            Texto = ": " & "El tipo de estructura " & te3desc & " no pertenece al modelo " & CodModelo
'            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'            Exit Sub
'        End If
'
'        'Busqueda/Creacion de estructura
'        Call ValidaEstructura(te3, estr3desc, estr3, Inserto_estr3)
'        If Inserto_estr3 Then
'            Texto = ": " & "Se creo la estructura '" & estr3desc & "'"
'            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        End If
'
'    Else
'        te3 = 0
'        estr3 = 0
'    End If
'
'    If te1 = 0 And te2 = 0 And te3 = 0 Then
'        Texto = ": " & "Ningun tipo de estructura es valido "
'        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        HuboError = True
'        Exit Sub
'    End If
'
'
'    '==========================================================================================================
'    'Porcentaje
'    '==========================================================================================================
'    NroColumna = NroColumna + 1
'    Porcent = campos(8)
'    If EsNulo(Porcent) Then
'        Porcent = 0
'    Else
'        If Porcent < 0 Then
'            Porcent = 0
'        Else
'            If Porcent > 100 Then
'                Porcent = 100
'            End If
'        End If
'    End If
'
'    '==========================================================================================================
'    'Valido contra la bd que no exista una imputacion para el modelo y empleado con marca de fija
'    '==========================================================================================================
'    StrSql = "SELECT impnro"
'    StrSql = StrSql & " FROM imputacion"
'    StrSql = StrSql & " WHERE ternro = " & Tercero & " AND masinro = " & CodModelo
'    StrSql = StrSql & " AND tenro = " & te1 & " AND estrnro = " & estr1
'    StrSql = StrSql & " AND tenro2 = " & te2 & " AND estrnro2 = " & estr2
'    StrSql = StrSql & " AND tenro3 = " & te3 & " AND estrnro3 = " & estr3
'    StrSql = StrSql & " AND fija = -1"
'    OpenRecordset StrSql, rs
'    If Not rs.EOF Then
'        Texto = ": " & " ya existe una linea fija para el empleado, estructuras y modelo"
'        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        HuboError = True
'        Exit Sub
'    End If
'
'    '==========================================================================================================
'    'Calculo el Porcentaje ya cargado por el proceso
'    '==========================================================================================================
'    Suma = 0
'    StrSql = " SELECT SUM(porcentaje) suma FROM imputacion"
'    StrSql = StrSql & " WHERE ternro = " & Tercero & " AND masinro = " & CodModelo
'    StrSql = StrSql & " AND (fija = -1"
'    StrSql = StrSql & " OR bpronro = " & NroProcesoBatch & ")"
'    OpenRecordset StrSql, rs
'    If Not rs.EOF Then
'        If Not EsNulo(rs!Suma) Then
'            Suma = CDbl(rs!Suma)
'        End If
'    End If
'
'    If (Suma + Porcent) > 100 Then
'        Texto = ": " & " el porcentaje acumula mas de 100%"
'        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        HuboError = True
'        Exit Sub
'    End If
'
'
'    '==========================================================================================================
'    'Borro las lineas que no fueron subidas por el proceso actual y que no son fijas
'    '==========================================================================================================
'    StrSql = "DELETE imputacion"
'    StrSql = StrSql & " WHERE ternro = " & Tercero
'    StrSql = StrSql & " AND fija <> -1 AND (bpronro <> " & NroProcesoBatch & " OR bpronro IS NULL)"
'    objConn.Execute StrSql, , adExecuteNoRecords
'
'
'    '==========================================================================================================
'    'Verifico si existe la imputacion
'    '==========================================================================================================
'    StrSql = "SELECT impnro FROM imputacion"
'    StrSql = StrSql & " WHERE ternro = " & Tercero & " AND masinro = " & CodModelo
'    If te1 > 0 And estr1 > 0 Then
'        StrSql = StrSql & " AND tenro = " & te1 & " AND estrnro = " & estr1
'    Else
'        StrSql = StrSql & " AND tenro = 0 AND estrnro = 0"
'    End If
'    If te2 > 0 And estr2 > 0 Then
'        StrSql = StrSql & " AND tenro2 = " & te2 & " AND estrnro2 = " & estr2
'    Else
'        StrSql = StrSql & " AND tenro2 = 0 AND estrnro2 = 0"
'    End If
'    If te3 > 0 And estr3 > 0 Then
'        StrSql = StrSql & " AND tenro3 = " & te3 & " AND estrnro3 = " & estr3
'    Else
'        StrSql = StrSql & " AND tenro3 = 0 AND estrnro3 = 0"
'    End If
'    OpenRecordset StrSql, rs
'    If Not rs.EOF Then
'        '==========================================================================================================
'        'Actualizo la distribucion
'        '==========================================================================================================
'        StrSql = "Update imputacion"
'        StrSql = StrSql & " SET porcentaje = porcentaje + " & Porcent
'        StrSql = StrSql & " ,bpronro = " & NroProcesoBatch
'        StrSql = StrSql & " WHERE impnro = " & rs!impnro
'        objConn.Execute StrSql, , adExecuteNoRecords
'
'        Texto = "ImputaciÃ³n Actualizada "
'        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
'    Else
'        '==========================================================================================================
'        'Inserto la distribucion
'        '==========================================================================================================
'        StrSql = "INSERT INTO imputacion (ternro, masinro, porcentaje"
'        StrSql = StrSql & " , tenro, estrnro"
'        StrSql = StrSql & " , tenro2, estrnro2"
'        StrSql = StrSql & " , tenro3, estrnro3, bpronro"
'        StrSql = StrSql & " ) VALUES (" & Tercero & "," & CodModelo & ", " & Porcent
'        If te1 > 0 And estr1 > 0 Then
'            StrSql = StrSql & " ," & te1 & "," & estr1
'        Else
'            StrSql = StrSql & " ,0,0"
'        End If
'        If te2 > 0 And estr2 > 0 Then
'            StrSql = StrSql & " ," & te2 & "," & estr2
'        Else
'            StrSql = StrSql & " ,0,0"
'        End If
'        If te3 > 0 And estr3 > 0 Then
'            StrSql = StrSql & " ," & te3 & "," & estr3
'        Else
'            StrSql = StrSql & " ,0,0"
'        End If
'        StrSql = StrSql & " ," & NroProcesoBatch & ")"
'        objConn.Execute StrSql, , adExecuteNoRecords
'
'        Texto = "ImputaciÃ³n Insertada "
'        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
'    End If
'
'Fin:
''Cierro todo y libero
'If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
'If rs.State = adStateOpen Then rs.Close
'
'Set rs_Empleado = Nothing
'Set rs = Nothing
'Exit Sub
'
'Manejador_De_Error:
'    HuboError = True
'
'    Flog.writeline
'    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
'    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
'    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
'    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
'    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
'    Flog.writeline
'    Flog.writeline
'    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
'    Flog.writeline
'    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
'    Flog.writeline
'    Texto = Err.Description
'    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'    GoTo Fin
'End Sub

Public Sub LineaModelo_318_old(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Interfaz de Valor Plan Obra Social
' Autor      : Cesar Stankunas
' Fecha      : 07/12/2009
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
' El formato es:
'                   TE Nombre - X(60)
'                   Estr Nombre - X(60)
'                   Obra Social Nombre - X(60)
'                   Sigla - X(7)
'                   Precio - 9(3).99
'                   Estado - "SI" / "NO"
' ---------------------------------------------------------------------------------------------
Dim I As Long
Dim datos

Dim l_tenom As String
Dim l_estrnom As String
Dim l_osnom As String
Dim l_sigla As String
Dim l_precio As Long
Dim l_estado As Long
Dim l_estrnro As Long
Dim l_estrnroOS As Long
Dim l_ternroOS As Long
Dim l_tenro As Long
Dim l_plnro As Long

Dim rs As New ADODB.Recordset
Dim rs_consulta As New ADODB.Recordset
Dim rs_motivo As New ADODB.Recordset
    
    On Error GoTo Manejador_De_Error:
    
    Flog.writeline "procesando linea " & strLinea
    Flog.writeline " "
    datos = Split(strLinea, separador)
    
    'Controlo que la linea tenga los 6 registros
    If UBound(datos) <> 5 Then
        If UBound(datos) < 5 Then
            Flog.writeline "    ERROR. La cantidad de registros de la línea es menor a la esperada."
        Else
            Flog.writeline "    ERROR. La cantidad de registros de la línea es mayor a la esperada."
        End If
        Exit Sub
    End If
    
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I
    
    'TE Nombre - X(60)
    If Trim(datos(0)) = "" Then
        Flog.writeline "El nombre del Tipo de Estructura esta vacío"
        Exit Sub
    End If
    
    l_tenom = datos(0)
    
    'Estr Nombre - X(60)
    If Trim(datos(1)) = "" Then
        Flog.writeline "El nombre de la Estructura esta vacío"
        Exit Sub
    End If
    
    l_estrnom = datos(1)
    
    'Obra Social Nombre - X(60)
    If Trim(datos(2)) = "" Then
        Flog.writeline "El nombre de la Obra Social esta vacío"
        Exit Sub
    End If
    
    l_osnom = datos(2)
    
    'Sigla - X(7)
    If Trim(datos(3)) = "" Then
        Flog.writeline "El campo 'Sigla' esta vacío"
    End If
    
    l_sigla = datos(3)
    
    'Precio - 9(3).99
    If Not IsNumeric(datos(4)) Then
        Flog.writeline "El precio del Plan de la Obra Social: " & datos(4) & " no es numérico"
        Exit Sub
    End If
    
    l_precio = datos(4)
    
    'Estado - "Activo" - "Inactivo" (SI/NO)
    If UCase(Trim(datos(5))) <> "SI" And UCase(Trim(datos(5))) <> "NO" Then
        Flog.writeline "El estado: " & datos(5) & " debe ser 'SI/NO'"
        Exit Sub
    End If
    
    If UCase(Trim(datos(5))) = "SI" Then
        l_estado = -1
    Else
        l_estado = 0
    End If
    
    '                                       TE  Nombre                                       '
    StrSql = " SELECT * FROM tipoestructura"
    StrSql = StrSql & " WHERE upper(tedabr) = '" & UCase(l_tenom) & "'"
    OpenRecordset StrSql, rs
    If rs.EOF Then
        Flog.writeline "El Tipo de Estructura '" & l_tenom & "' no existe, no se puede actualizar el valor del plan de la OS"
        Exit Sub
    Else
        l_tenro = rs!Tenro
    End If
    
    'Valido la OS
    l_estrnroOS = 0
    StrSql = " SELECT estructura.estrnro, replica_estr.origen FROM estructura"
    StrSql = StrSql & " INNER JOIN replica_estr ON estructura.estrnro = replica_estr.estrnro "
    'StrSql = StrSql & " INNER JOIN osocial ON estructura.estrnro = osocial.estrno "
    StrSql = StrSql & " WHERE (upper(estrdabr) = '" & UCase(l_osnom) & "' OR upper(estrdext) = '" & UCase(l_osnom) & "')"
    'StrSql = StrSql & " AND tenro = " & l_tenro
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        l_estrnroOS = rs!Estrnro
        l_ternroOS = rs!Origen
    Else
        Flog.writeline "La Obra Sicial '" & l_osnom & "' no existe, no se puede actualizar el valor del plan de la OS"
        Exit Sub
    End If
    
    '                                    Valido Estructura                                  '
    l_estrnro = 0
    StrSql = " SELECT * FROM estructura"
    StrSql = StrSql & " WHERE (upper(estrdabr) = '" & UCase(l_estrnom) & "' OR upper(estrdext) = '" & UCase(l_estrnom) & "')"
    StrSql = StrSql & " AND tenro = " & l_tenro
    'StrSql = StrSql & " AND (tenro = 23 OR tenro = 25)"
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        'Si existe guardo el numero de estructura
        l_estrnro = rs!Estrnro
        l_tenro = rs!Tenro
        
    Else
        'Si no existe se inserta una nueva estructura
        StrSql = " INSERT INTO estructura (estrdabr, estrdext, tenro, estrest) VALUES ("
        StrSql = StrSql & "'" & l_estrnom & "'"
        StrSql = StrSql & ", '" & l_estrnom & "'"
        StrSql = StrSql & ", " & l_tenro
        StrSql = StrSql & ", " & l_estado
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        'Escribo en en Log
        Flog.writeline "Se insertó una nueva estructura '" & l_estrnom & "' para el TE 'Plan de OS elegido(23)'"
        
        l_estrnro = getLastIdentity(objConn, "estructura")
        
        
        'Y se inserta un nuevo Plan de OS
        StrSql = " INSERT INTO planos (plsigla, plprecio, OSocial, plnom) VALUES ("
        StrSql = StrSql & "'" & l_sigla & "'"
        StrSql = StrSql & ", " & l_precio
        StrSql = StrSql & ", " & l_ternroOS
        StrSql = StrSql & ", '" & l_estrnom & "'"
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        'Escribo en en Log
        Flog.writeline "Se insertó un nuevo Plan de Obra Social '" & l_estrnom & "'."
        
        l_plnro = getLastIdentity(objConn, "planos")
        
        StrSql = " INSERT INTO replica_estr (estrnro,origen) VALUES ("
        StrSql = StrSql & l_estrnro
        StrSql = StrSql & ", " & l_plnro
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
    End If
    
    'Si la estructura que busque existia
    If l_estrnro <> 0 Then
        'Y pisa plan
        If PisaPlan Then
            
            'Busca si esta el registro de PLANOS
            StrSql = " SELECT * FROM planos "
            StrSql = StrSql & " WHERE OSocial = " & l_ternroOS
            StrSql = StrSql & " AND upper(plnom) = '" & UCase(l_estrnom) & "'"
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                StrSql = " UPDATE planos SET"
                StrSql = StrSql & " plsigla = '" & l_sigla & "'"
                StrSql = StrSql & ", plprecio = " & l_precio
                StrSql = StrSql & " WHERE plnro = " & rs!plnro
                objConn.Execute StrSql, , adExecuteNoRecords
                'Escribo en en Log
                Flog.writeline "Se actualizó el Plan '" & l_estrnom & "' de la Obra Social '" & l_osnom & "'."
                
                l_plnro = rs!plnro
            Else
                StrSql = " INSERT INTO planos (plsigla, plprecio, OSocial, plnom) VALUES ("
                StrSql = StrSql & "'" & l_sigla & "'"
                StrSql = StrSql & ", " & l_precio
                StrSql = StrSql & ", " & l_ternroOS
                StrSql = StrSql & ", '" & l_estrnom & "'"
                StrSql = StrSql & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
                'Escribo en en Log
                Flog.writeline "Se insertó un nuevo Plan de Obra Social '" & l_estrnom & "'."
                
                l_plnro = getLastIdentity(objConn, "planos")
            End If
                
            'Busca si esta el registro en replica_estr
            StrSql = "SELECT * FROM replica_estr"
            StrSql = StrSql & " WHERE estrnro = " & l_estrnro
            StrSql = StrSql & " AND origen = " & l_plnro
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                'OK ya esta el registro. No hago nada
            Else
                StrSql = " INSERT INTO replica_estr (estrnro,origen) VALUES ("
                StrSql = StrSql & l_estrnro
                StrSql = StrSql & ", " & l_plnro
                StrSql = StrSql & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
            End If
        Else
            Flog.writeline "No se insertó el plan '" & l_estrnom & "' porque ya existe."
        End If
    End If
    
    'cierro y libero
    If rs_consulta.State = adStateOpen Then rs_consulta.Close
    Set rs_consulta = Nothing
    
Fin:
    Exit Sub
    
Manejador_De_Error:
    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub


Public Sub LineaModelo_318(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Interfaz de Valor Plan Obra Social
' Autor      : Cesar Stankunas
' Fecha      : 07/12/2009
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------
' El formato es:
'                   TE Nombre - X(60)
'                   Estr Nombre - X(60)
'                   Obra Social Nombre - X(60)
'                   Sigla - X(7)
'                   Precio - 9(3).99
'                   Estado - "SI" / "NO"
' ---------------------------------------------------------------------------------------------
Dim I As Long
Dim datos

Dim l_tenom As String
Dim l_estrnom As String
Dim l_osnom As String
Dim l_sigla As String
Dim l_precio As Long
Dim l_estado As Long
Dim l_estrnro As Long
Dim l_estrnroOS As Long
Dim l_ternroOS As Long
Dim l_tenro As Long
Dim l_plnro As Long
Dim rs As New ADODB.Recordset
Dim rs_motivo As New ADODB.Recordset


Dim TipoEstPlanDesc As String
Dim TipoEstPlanNro As Long
Dim EstPlanDesc As String
Dim EstPlanNro As Long
Dim PlanNro As Long
Dim OSDesc As String
Dim OSTerNro As Long
Dim Sigla As String
Dim ExisteSigla As Boolean
Dim Precio As Double
Dim ExistePrecio As Boolean
Dim Estado As Integer

Dim rs_consulta As New ADODB.Recordset
    
    On Error GoTo Manejador_De_Error:
    
    
    NroColumna = 0
    LineaCarga = LineaCarga + 1
    
    Flog.writeline
    FlogE.writeline
    FlogP.writeline
    
    datos = Split(strLinea, separador)
    
    
    'Controlo que la linea tenga los 6 registros
    '------------------------------------------------------------------------------------------------
    If UBound(datos) <> 5 Then
        If UBound(datos) < 5 Then
            Texto = ": " & " La cantidad de registros de la línea es menor a la esperada."
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        Else
            Texto = ": " & " La cantidad de registros de la línea es mayor a la esperada."
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        End If
        HuboError = True
        Exit Sub
    End If
    
    
    'TE Nombre - X(60)
    '------------------------------------------------------------------------------------------------
    NroColumna = NroColumna + 1
    Campoetiqueta = "Tipo de Estructura"
    If Trim(datos(0)) = "" Then
        Texto = ": " & " - Campo " & Campoetiqueta & " es vacio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    End If
    TipoEstPlanDesc = Trim(datos(0))
    
    
    'Estr Nombre - X(60)
    '------------------------------------------------------------------------------------------------
    NroColumna = NroColumna + 1
    Campoetiqueta = "Estructura"
    If Trim(datos(1)) = "" Then
        Texto = ": " & " - Campo " & Campoetiqueta & " es vacio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    End If
    EstPlanDesc = Trim(datos(1))
    
    
    'Obra Social Nombre - X(60)
    '------------------------------------------------------------------------------------------------
    NroColumna = NroColumna + 1
    Campoetiqueta = "Obra Social"
    If Trim(datos(2)) = "" Then
        Texto = ": " & " - Campo " & Campoetiqueta & " es vacio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    End If
    OSDesc = Trim(datos(2))
    
    
    'Sigla - X(7) OPICIONAL
    '------------------------------------------------------------------------------------------------
    ExisteSigla = False
    NroColumna = NroColumna + 1
    If UCase(Trim(datos(3))) <> "N/A" Then
        Sigla = Trim(datos(3))
        If Len(Sigla) <> 0 Then ExisteSigla = True
    End If
    
    
    'Precio - 9(3).99 OPICIONAL
    '------------------------------------------------------------------------------------------------
    ExistePrecio = False
    NroColumna = NroColumna + 1
    If Trim(datos(4)) <> "" Then
        If IsNumeric(Trim(datos(4))) Then
            Precio = CDbl(Trim(datos(4)))
            ExistePrecio = True
        End If
    End If
        
    
    'Estado - "Activo" - "Inactivo" (SI/NO)
    '------------------------------------------------------------------------------------------------
    NroColumna = NroColumna + 1
    If Trim(datos(5)) = "" Then
        Estado = -1
    Else
        If UCase(Trim(datos(5))) <> "SI" Then
            Estado = 0
        Else
            Estado = -1
        End If
    End If
    
    
    'Valido el tipo de estructura Plan contra la base
    '------------------------------------------------------------------------------------------------
    StrSql = "SELECT tenro FROM tipoestructura"
    StrSql = StrSql & " Where (Tenro = 23 Or Tenro = 25)"
    StrSql = StrSql & " AND upper(tedabr) = '" & UCase(TipoEstPlanDesc) & "'"
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        NroColumna = 1
        Campoetiqueta = "Tipo de Estructura"
        Texto = ": " & " - Campo " & Campoetiqueta & " no se encuentra en la base."
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    Else
        TipoEstPlanNro = rs_consulta!Tenro
    End If
    rs_consulta.Close
    
    
    'Valido Obra social contra la base
    '------------------------------------------------------------------------------------------------
    'StrSql = "SELECT ternro FROM osocial"
    'StrSql = StrSql & " WHERE upper(osdesc) = '" & UCase(OSDesc) & "'"
    'OpenRecordset StrSql, rs_consulta
    'If rs_consulta.EOF Then
    '    Nrocolumna = 3
    '    Campoetiqueta = "Obra Social"
    '    Texto = ": " & " - Campo " & Campoetiqueta & " no se encuentra en la base."
    '    Call Escribir_Log("floge", LineaCarga, Nrocolumna, Texto, Tabs, strLinea)
    '    HuboError = True
    '    Exit Sub
    'Else
    '    OSTerNro = rs_consulta!Ternro
    'End If
    'rs_consulta.Close
    
    'Valido Obra social contra la base sebastian stremel 22/11/2011
    '------------------------------------------------------------------------------------------------

    StrSql = "select origen from estructura"
    StrSql = StrSql & " inner join replica_estr on replica_estr.estrnro=estructura.estrnro "
    StrSql = StrSql & " Where upper(estructura.estrdabr)='" & UCase(OSDesc) & "' and Tenro = 17 "
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        NroColumna = 3
        Campoetiqueta = "Obra Social"
        Texto = ": " & " - Campo " & Campoetiqueta & " no se encuentra en la base."
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    Else
        'OSTerNro = rs_consulta!Ternro
        OSTerNro = rs_consulta!Origen
    End If
    rs_consulta.Close
    
    
    'Valido estructura Plan contra la base
    '------------------------------------------------------------------------------------------------
    StrSql = "SELECT estructura.estrnro, planos.plnro FROM estructura"
    StrSql = StrSql & " INNER JOIN replica_estr ON replica_estr.estrnro = estructura.estrnro"
    StrSql = StrSql & " INNER JOIN planos ON planos.plnro =  replica_estr.origen"
    StrSql = StrSql & " WHERE upper(estrdabr) = '" & UCase(EstPlanDesc) & "'"
    StrSql = StrSql & " AND estructura.tenro = " & TipoEstPlanNro
    StrSql = StrSql & " AND planos.osocial = " & OSTerNro
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        
        'nrocolumna = 2
        'Campoetiqueta = "Estructura"
        'Texto = ": " & " - Campo " & Campoetiqueta & " no se encuentra Plan OS en la base. Se procede a la creacion"
        'Call Escribir_Log("flogp", LineaCarga, nrocolumna, Texto, Tabs, strLinea)
        
        StrSql = "INSERT INTO estructura"
        StrSql = StrSql & " (estrdabr,tenro"
        StrSql = StrSql & " ,empnro,estrcodext,estrest)"
        StrSql = StrSql & " Values"
        StrSql = StrSql & " ('" & Mid(EstPlanDesc, 1, 60) & "'"
        StrSql = StrSql & " ," & TipoEstPlanNro
        StrSql = StrSql & " ,1"
        StrSql = StrSql & " ,''"
        StrSql = StrSql & " ," & Estado
        StrSql = StrSql & " )"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        EstPlanNro = getLastIdentity(objConn, "estructura")
        'Texto = "Se inserto la estructura " & EstPlanNro
        'Call Escribir_Log("flogp", LineaCarga, nrocolumna, Texto, Tabs, strLinea)
        
        StrSql = "INSERT INTO planos"
        StrSql = StrSql & " ("
        If ExistePrecio Then StrSql = StrSql & " plprecio,"
        If ExisteSigla Then StrSql = StrSql & " plsigla,"
        StrSql = StrSql & " osocial,plnom)"
        StrSql = StrSql & " Values"
        StrSql = StrSql & " ("
        If ExistePrecio Then StrSql = StrSql & " " & Precio & ","
        If ExisteSigla Then StrSql = StrSql & " '" & Sigla & "', "
        StrSql = StrSql & " " & OSTerNro
        StrSql = StrSql & " ,'" & Mid(EstPlanDesc, 1, 60) & "'"
        StrSql = StrSql & " )"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        PlanNro = getLastIdentity(objConn, "planos")
        'Texto = "Se inserto el plan de OS" & PlanNro
        'Call Escribir_Log("flogp", LineaCarga, nrocolumna, Texto, Tabs, strLinea)
        
        
        StrSql = "INSERT INTO replica_estr(origen,estrnro)"
        StrSql = StrSql & " VALUES("
        StrSql = StrSql & " " & PlanNro
        StrSql = StrSql & "," & EstPlanNro
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        'Texto = "Se inserto replica_estr" & PlanNro
        'Call Escribir_Log("flogp", LineaCarga, nrocolumna, Texto, Tabs, strLinea)
    
    Else
    
        'Existe el plan. Analizo si la interfaz pisa datos
        If Not PisaPlan Then
            'Texto = "El plan ya existe y no se encuentra habilitado reemplaza plan"
            'Call Escribir_Log("flogp", LineaCarga, nrocolumna, Texto, Tabs, strLinea)
            Exit Sub
        Else
        
            PlanNro = rs_consulta!plnro
            
            If ExistePrecio Then
                StrSql = "Update planos"
                StrSql = StrSql & " SET plprecio = " & Precio
                StrSql = StrSql & " WHERE plnro = " & PlanNro
                objConn.Execute StrSql, , adExecuteNoRecords
                'Texto = "Se actualizo el precio del plan " & PlanNro
                'Call Escribir_Log("flogp", LineaCarga, nrocolumna, Texto, Tabs, strLinea)
            End If
            
            If ExisteSigla Then
                StrSql = "Update planos"
                StrSql = StrSql & " SET plsigla = '" & Sigla & "'"
                StrSql = StrSql & " WHERE planro = " & PlanNro
                objConn.Execute StrSql, , adExecuteNoRecords
                'Texto = "Se actualizo la sigla del plan " & PlanNro
                'Call Escribir_Log("flogp", LineaCarga, nrocolumna, Texto, Tabs, strLinea)
            End If
            
            
            StrSql = "Update estructura"
            StrSql = StrSql & " SET estrest = " & Estado
            StrSql = StrSql & " WHERE estrnro = " & rs_consulta!Estrnro
            objConn.Execute StrSql, , adExecuteNoRecords
            
        
        End If
        
    
    End If
    rs_consulta.Close
    
    Texto = ": " & "Linea procesada correctamente "
    Call Escribir_Log("flogp", LineaCarga, NroColumna, Texto, Tabs + 1, strLinea)
    
    
    'cierro y libero
    If rs_consulta.State = adStateOpen Then rs_consulta.Close
    Set rs_consulta = Nothing
    
Exit Sub

Manejador_De_Error:

    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline

End Sub

Public Sub LineaModelo_325(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta en anticipos.
'              El formato es:
'                   Legajo; Monto; Fecha; PeriodoDto ; Tipo Vale; Moneda; Revisado; Autorizado; Periodo (Retroactivo); Neto
' Autor      : Cesar Stankunas
' Fecha      : 25/06/2010
' Ultima Mod.: 08/07/2010 - Cesar Stankunas - Se cambió para que tome con "si" "revisado" y "Autorizado"
'              29/12/2010 - Cesar Stankunas - Se agregó la columna descripcion
'              13/01/2011 - Cesar Stankunas - Se cambió el chequeo del legajo de v_empleado a empleado
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
Dim I As Long

Dim Tercero As Long
Dim NroLegajo As Long
Dim TipoAnticipo As String
Dim Monto As Double
Dim FechaAnticipo As Date
Dim DescripcionAnticipo As String
Dim Pliqnro As Long
Dim Pliqdto As Long
Dim Moneda As Integer
Dim Revisado As Integer
Dim Autorizado As Integer
Dim Aux As String
Dim PeriodoRetro
Dim Neto As Double
Dim PliqDesc As String

Dim MontoCorrecto As Boolean
Dim NetoCorrecto As Boolean
Dim TieneDescripcion As Boolean

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Periodos As New ADODB.Recordset
Dim rs_TipoAnticipo As New ADODB.Recordset
Dim rs_Periodo As New ADODB.Recordset
Dim rs_Moneda As New ADODB.Recordset
Dim campos

On Error GoTo Manejador_De_Error

' El formato es:
' Legajo; Monto; Fecha; PeriodoDto ; Tipo Anticipo; Moneda; Revisado; Autorizado; Fecha (Retroactivo), Descripción
    
    campos = Split(strLinea, separador, -1)
   
    'Nro de Legajo
    If IsNumeric(campos(0)) Then
        NroLegajo = campos(0)
    Else
        Flog.writeline " El legajo no es numerico " & campos(1)
        HuboError = True
        Exit Sub
    End If
    
    'Monto
    If IsNumeric(campos(1)) Then
        Monto = CDbl(campos(1))
        MontoCorrecto = True
    Else
        MontoCorrecto = False
        Flog.writeline " El monto no es numerico " & campos(1)
        HuboError = True
        Exit Sub
    End If
    
    'Fecha
    If IsDate(campos(2)) Then
        FechaAnticipo = CDate(campos(2))
    Else
        Flog.writeline " Formato de fecha Incorrecto " & campos(2)
        HuboError = True
        Exit Sub
    End If
    
    'Periodo de Descuento
    If Not EsNulo(campos(3)) Then
        If IsNumeric(campos(3)) Then
            Pliqdto = campos(3)
        Else
            Flog.writeline " El periodo de Descuento debe ser numerico " & campos(3)
            Pliqdto = 0
        End If
    Else
        Pliqdto = 0
    End If
    
    'Tipo Anticipo
    TipoAnticipo = campos(4)
    
    'Moneda
    Moneda = CInt(campos(5))
    
    'Revisado
    If UBound(campos) > 5 Then
        If UCase(Trim(campos(6))) = "SI" Or UCase(Trim(campos(6))) = "S" Then
            Revisado = -1
        Else
            Revisado = 0
        End If
    Else
        Revisado = 0
    End If
    
    'Autorizado
    If UBound(campos) > 6 Then
        If UCase(Trim(campos(7))) = "SI" Or UCase(Trim(campos(7))) = "S" Then
            Autorizado = -1
        Else
            Autorizado = 0
        End If
    Else
        Autorizado = 0
    End If
    
    'Periodo Retro
    If Not EsNulo(campos(8)) Then
        If IsNumeric(campos(8)) Then
            PeriodoRetro = campos(8)
        Else
            Flog.writeline " El periodo retroactivo debe ser numerico " & campos(8)
            PeriodoRetro = 0
        End If
    Else
        PeriodoRetro = 0
    End If
    
    'Neto
    If IsNumeric(campos(9)) Then
        Neto = CDbl(campos(9))
        NetoCorrecto = True
    Else
        NetoCorrecto = False
        Flog.writeline " El neto no es numerico " & campos(9)
        HuboError = True
        Neto = 0
    End If
    
    'Descripcion
    TieneDescripcion = False
    If UBound(campos) > 9 Then
        If campos(10) <> "" Then
            DescripcionAnticipo = campos(10)
            TieneDescripcion = True
        End If
    End If
    
' ====================================================================
'   Validar los parametros Levantados

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Flog.writeline " No se encontro el legajo " & NroLegajo
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

PliqDesc = ""
'Busco el periodo
StrSql = "SELECT * FROM periodo WHERE pliqmes = " & Month(FechaAnticipo)
StrSql = StrSql & " AND pliqanio =" & Year(FechaAnticipo)
OpenRecordset StrSql, rs_Periodo
If rs_Periodo.EOF Then
    Flog.writeline " No se encontro el Periodo para el mes " & Month(FechaAnticipo)
    HuboError = True
    Exit Sub
Else
    Pliqnro = rs_Periodo!Pliqnro
    PliqDesc = rs_Periodo!PliqDesc
End If

'Busco el periodo de Descuento
If Pliqdto <> 0 Then
    StrSql = "SELECT * FROM periodo WHERE pliqnro = " & Pliqdto
    OpenRecordset StrSql, rs_Periodo
    If rs_Periodo.EOF Then
        Flog.writeline " No se encontro el Periodo de descuento" & Pliqdto
        HuboError = True
        Exit Sub
    Else
        PliqDesc = rs_Periodo!PliqDesc
    End If
Else
    Flog.writeline " Periodo de Descuento no especificado. Se utilizará el periodo correspondiente a la fecha del anticipo."
    Pliqdto = Pliqnro
End If

Flog.writeline " Periodo " & PliqDesc


'Busco el periodo de Retroactividad
If PeriodoRetro <> 0 And CStr(PeriodoRetro) <> "" Then
    StrSql = "SELECT * FROM periodo WHERE pliqnro = " & PeriodoRetro
    OpenRecordset StrSql, rs_Periodo
    If rs_Periodo.EOF Then
        Flog.writeline "No se encontro el Periodo de retroactividad " & PeriodoRetro
        HuboError = True
        Exit Sub
    End If
Else
    Flog.writeline " El Anticipo no es Retroactivo"
    PeriodoRetro = 0
End If

'Tipo de Anticipo
StrSql = "SELECT * FROM tipoanticipo WHERE tanticiponro = " & CLng(TipoAnticipo)
OpenRecordset StrSql, rs_TipoAnticipo
If rs_TipoAnticipo.EOF Then
    Flog.writeline " No se encontro el tipo de anticipo " & TipoAnticipo
    HuboError = True
    Exit Sub
Else
    If Not TieneDescripcion Then
        DescripcionAnticipo = Left(rs_TipoAnticipo!tanticipodesabr & " " & NroLegajo & " " & FechaAnticipo, 30)
    End If
End If

'Moneda
StrSql = "SELECT * FROM moneda WHERE monnro = " & CInt(Moneda)
OpenRecordset StrSql, rs_Moneda
If rs_Moneda.EOF Then
    Flog.writeline " No se encontro la Moneda " & Moneda
    HuboError = True
    Exit Sub
End If

'Períodos
If PeriodoRetro <> 0 And CStr(PeriodoRetro) <> "" Then
    StrSql = " SELECT * FROM periodo"
    StrSql = StrSql & " WHERE pliqnro = " & Pliqdto
    StrSql = StrSql & " AND pliqdesde > (SELECT pliqdesde FROM periodo WHERE pliqnro = " & PeriodoRetro & ")"
    OpenRecordset StrSql, rs_Periodos
    If rs_Periodos.EOF Then
        Flog.writeline " El Período de Descuento debe ser mayor al Período de Retroactividad"
        HuboError = True
        Exit Sub
    End If
End If
'=============================================================
'Inserto el anticipo
StrSql = "INSERT INTO anticipos ("
StrSql = StrSql & "empleado,antmonto,antfecped,pliqnro,pliqdto,antdesc,tanticiponro,antrevis,antautoriz,monnro,pliqretro,antneto,antestado "
StrSql = StrSql & ") VALUES (" & Tercero
StrSql = StrSql & "," & Monto
StrSql = StrSql & "," & ConvFecha(FechaAnticipo)
StrSql = StrSql & "," & Pliqnro
StrSql = StrSql & "," & Pliqdto
StrSql = StrSql & ",'" & DescripcionAnticipo & "'"
StrSql = StrSql & "," & TipoAnticipo
StrSql = StrSql & "," & Revisado
StrSql = StrSql & "," & Autorizado
StrSql = StrSql & "," & Moneda
StrSql = StrSql & "," & PeriodoRetro
StrSql = StrSql & "," & Neto
StrSql = StrSql & ",1" 'Estado
StrSql = StrSql & ")"
objConn.Execute StrSql, , adExecuteNoRecords

Flog.writeline " Anticipo insertado (" & DescripcionAnticipo & ")"

Fin:
'cierro y libero
If rs_TipoAnticipo.State = adStateOpen Then rs_TipoAnticipo.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
If rs_Moneda.State = adStateOpen Then rs_Moneda.Close

Set rs_TipoAnticipo = Nothing
Set rs_Empleado = Nothing
Set rs_Periodo = Nothing
Set rs_Moneda = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin

End Sub


Public Sub LineaModelo_328(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Procedimiento de incorporacion de postulantes. Version CUSTOM - MEDICUS
' Autor      : Lisandor Moro
' Fecha      : 14/09/2010
' Ultima Mod.:
' Descripcion: La diferencia con el estandar esta en que se agrego el campo empleo anterior actual.
' ---------------------------------------------------------------------------------------------
    Dim datos() As String
    Dim Ternro As Long
    Dim NroDom As Long
    Dim a As Long
    Dim Xconst As Long
    Dim ActPasos As Boolean
    Dim tempString As String
    Dim EstPosNro As Long
    
    Dim rs_Ter As New ADODB.Recordset
    Dim rs_Aux As New ADODB.Recordset
    Dim I As Long
    
    Const c_ELcargoAnterior As Long = 77
    Const c_ELempresa As Long = 78
    Const c_ELtareaDesempenada As Long = 79
    Const c_ELfechaDesde As Long = 80
    Const c_ELfechaHasta As Long = 81
    Const c_EmpleoActual As Long = 82
    Const c_ELremuneracion As Long = 83
    Const c_ELcausaBaja As Long = 84
    
    Const c_idioma1 As Long = 109 '105
    Const c_idiomaLee1 As Long = 110 '106
    Const c_idiomaHabla1 As Long = 111 '107
    Const c_idiomaEscribe1 As Long = 112 '108

    Const c_descCurso As Long = 125 '121
    Const c_tipoCurso  As Long = 126 '122
    Const c_fechaCurso  As Long = 127 '123
    Const c_institucionCurso  As Long = 128 '124

    Const c_tipo As Long = 141 '137
    Const c_elemento As Long = 142 '138
    Const c_nivel As Long = 143 '139

  
    Flog.writeline "procesando linea " & strLinea
    
    'Si ocurre un error antes de insertar el tercero se aborta el postulante
    On Error GoTo Manejador_De_Error:
    
    datos = Split("0" & separador & strLinea, separador)
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I
    '--Documentos--
    datos(1) = TraerCodTipoDocumento(CStr(datos(1)))  'tipoDocumento
    datos(2) = StrToStr(CStr(datos(2)), 30) 'numeroDocumento
    datos(2) = Replace(datos(2), ".", "") 'elimino puntos y comas
    datos(2) = Replace(datos(2), ",", "")
    
    '--Tercero
    datos(3) = StrToStr(datos(3), 25) 'ternom
    datos(4) = StrToStr(datos(4), 25)  'ternom2
    datos(5) = StrToStr(datos(5), 25) 'terape
    datos(6) = StrToStr(datos(6), 25) 'terape2
    datos(7) = ConvFecha(CDate(datos(7))) 'terfecnac
    'If UCase(Datos(8)) = "MASCULINO" Then Datos(8) = -1 Else Datos(8) = 0 'tersex
    If (UCase(datos(8)) = "M") Or (UCase(datos(8)) = "-1") Or (UCase(datos(8)) = "MASCULINO") Then
        datos(8) = -1
    Else
        datos(8) = 0
    End If

    datos(23) = StrToStr(datos(23), 100) ' teremail
    datos(13) = TraerCodNacionalidad(CStr(datos(13))) ' nacionalnro
    datos(9) = StrToStr(TraerCodEstadoCivil(CStr(datos(9))), 8) 'estcivnro
    If datos(14) = "" Then
        datos(14) = "''"
    Else
        datos(14) = ConvFecha(CDate(datos(14))) 'fechaingresopais
    End If
    datos(11) = StrToStr(datos(11), 25) 'tercasape
    If datos(10) = "" Then
        datos(10) = "NULL"
    Else
        datos(10) = ConvFecha(CDate(datos(10))) 'terfecestciv
    End If
    datos(12) = TraerCodPais(CStr(datos(12))) 'paisnro


    'FGZ - 06/04/2005
    StrSql = "SELECT * FROM ter_doc  "
    StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
    StrSql = StrSql & " AND nrodoc = '" & datos(2) & "'"
    OpenRecordset StrSql, rs_Ter

    If rs_Ter.EOF Then
        StrSql = " INSERT INTO tercero (ternom, ternom2, terape, terape2, terfecnac, tersex, teremail, nacionalnro, estcivnro, terfecing, tercasape,terfecestciv, paisnro ) VALUES ("
        StrSql = StrSql & "'" & datos(3) & "'"      'ternom
        StrSql = StrSql & ",'" & datos(4) & "'"     'ternom2
        StrSql = StrSql & ",'" & datos(5) & "'"      'terape
        StrSql = StrSql & ",'" & datos(6) & "'"     'terape2
        StrSql = StrSql & "," & datos(7)            'terfecnac
        StrSql = StrSql & "," & CLng(datos(8))      'tersex
        StrSql = StrSql & ",'" & datos(23) & "'"    'teremail
        StrSql = StrSql & "," & CLng(datos(13))     'nacionalnro
        StrSql = StrSql & ",'" & datos(9) & "'"     'estcivnro
        StrSql = StrSql & "," & datos(14)           'fechaingresopais
        StrSql = StrSql & ",'" & datos(11) & "'"    'tercasape
        StrSql = StrSql & "," & datos(10)           'terfecestciv
        StrSql = StrSql & "," & datos(12)           'paisnro
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Inserto en la tabla de tercero"
    
        '--Obtengo el ternro--
        Ternro = getLastIdentity(objConn, "tercero")
        Flog.writeline "-----------------------------------------------"
        Flog.writeline "Codigo de Tercero = " & Ternro
    
        '--Inserto el Registro correspondiente en ter_tip--
        StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & Ternro & ",14)"
        objConn.Execute StrSql, , adExecuteNoRecords
        'Flog.Writeline "Inserto el tipo de tercero 14 en ter_tip"
        
        'Desactivo el manejador de erorres
        On Error GoTo 0
        
        
        'Cualquier error que ocurra de aquí en adelante sigue adelante
        ' tratando de insertar la mayor cantidad de datos posible
        On Error Resume Next
        'HuboError = False
        
        StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
        StrSql = StrSql & " VALUES(" & Ternro & "," & datos(1) & ",'" & datos(2) & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
    
        '--------------------------------------------------------------------------------
        '--Inserto el Domicilio--
        StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
        StrSql = StrSql & " VALUES(1," & Ternro & ",-1,2)"
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "inserto el Domicilio"
    
        '--Obtengo el numero de domicilio en la tabla--
        NroDom = CLng(getLastIdentity(objConn, "cabdom"))
    
        '--Si no tiene algun dato le agregamos unos ficticios--
        datos(24) = StrToStr(datos(24), 30) 'dirCalle
        datos(25) = StrToStr(datos(25), 8) 'dirNumero
        datos(26) = StrToStr(datos(26), 8) 'dirPiso
        datos(27) = StrToStr(datos(27), 8) 'dirDepto
        datos(28) = StrToStr(datos(28), 8) 'dirTorre
        datos(29) = StrToStr(datos(29), 8) 'dirManzana
        datos(30) = StrToStr(datos(30), 8) 'dirSector
        datos(31) = StrToStr(datos(31), 12) 'dirCP
        datos(32) = TraerCodLocalidad(CStr(datos(32))) 'dirLocalidad
        datos(33) = TraerCodProvincia(CStr(datos(33)))   'dirProvincia
        datos(34) = TraerCodPartido(CStr(datos(34)))  'dirPartido
        datos(35) = TraerCodZona(CStr(datos(35)), CLng(datos(33)))  'dirZona
            If datos(35) = "" Then datos(35) = "NULL"
        datos(36) = TraerCodPais(CStr(datos(36))) 'dirPais
    
        StrSql = " INSERT INTO detdom (domnro,calle,nro,sector,torre,piso,oficdepto,manzana,codigopostal,"
        StrSql = StrSql & "locnro,provnro,paisnro, zonanro, partnro) "
        StrSql = StrSql & " VALUES ("
        StrSql = StrSql & NroDom
        StrSql = StrSql & ",'" & datos(24) & "'"
        StrSql = StrSql & ",'" & datos(25) & "'"
        StrSql = StrSql & ",'" & datos(30) & "'"
        StrSql = StrSql & ",'" & datos(28) & "'"
        StrSql = StrSql & ",'" & datos(26) & "'"
        StrSql = StrSql & ",'" & datos(27) & "'"
        StrSql = StrSql & ",'" & datos(29) & "'"
        StrSql = StrSql & ",'" & datos(31) & "'"
        StrSql = StrSql & "," & datos(32)
        StrSql = StrSql & "," & datos(33)
        StrSql = StrSql & "," & datos(36)
        StrSql = StrSql & "," & datos(35)
        StrSql = StrSql & "," & datos(34)
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Err.Clear
        Else
            Flog.writeline "Inserte el domicilio "
        End If
       
        Flog.writeline "Inserto el Domicilio "
    
        '--Telefonos-Personal--
        datos(21) = validatelefono(StrToStr(datos(21), 20))
        If datos(21) <> "" Then
            StrSql = " INSERT INTO telefono "
            'FGZ - 04/05/2011 ---- agregué el tipo de telefono ----------------------
            'StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular ) "
            'StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0 ) "
            StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular, tipotel ) "
            StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0,1) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
            Else
                Flog.writeline "Inserte el telefono"
            End If
        End If
        
        '--Telefonos-Celular--
        'FGZ 11/04/2005 - quieren que lo cargue como telefono comun
        datos(22) = validatelefono(StrToStr(datos(22), 20))
        If datos(22) <> "" Then
            StrSql = " INSERT INTO telefono "
            'FGZ - 04/05/2011 ---- agregué el tipo de telefono ----------------------
            'StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular ) "
            'StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0 ) "
            StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
            StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0,2 ) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
            Else
                Flog.writeline "Inserte el telefono2 "
            End If
        End If
    
        '--Complemento--
        If datos(15) = "" Then
            datos(15) = 0
        Else
            datos(15) = CLng(StrToInt(datos(15))) 'cantidadHijos
        End If
        datos(16) = StrToStr(datos(16), 60) 'imagen
        If datos(17) = "" Then
            datos(17) = "NULL"
        Else
            datos(17) = ConvFecha(CDate(datos(17))) 'fechaIngresoCV
        End If
        datos(18) = StrToStr(datos(18), 250) 'referencias
        If datos(19) = "" Then
            datos(19) = TraerCodProcedencia("Web Deloitte") 'procedencia
        Else
            datos(19) = TraerCodProcedencia(CStr(datos(19))) 'procedencia
        End If
        If datos(20) = "" Then
            datos(20) = 0
        Else
            datos(20) = CDbl(StrToDbl(datos(20))) 'remuneracionPretendida
        End If
        
        'FGZ - 02/03/2006 Se agrego el estposnro = 4 (postulantre activo)
        StrSql = " INSERT INTO pos_postulante "
        StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro,estposnro) "
        StrSql = StrSql & " VALUES (" & Ternro & " ," & CDbl(datos(20)) & ", " & CLng(datos(15)) & ", '" & datos(16) & "', " & datos(17) & ",'" & datos(18) & "', " & datos(19) & ",4) "
        objConn.Execute StrSql, , adExecuteNoRecords
        If Err Then
            Flog.writeline "Error al inserte el Complemento: " & Err.Description
            Flog.writeline "SQL ejecutada: " & StrSql
            Err.Clear
        Else
            Flog.writeline "Inserte el Complemento "
        End If
    
        
    
        '--Estudios-formales--(49) - en medicus 50
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + 37) <> "" Then
                datos(Xconst + 37) = TraerCodNivelEstudio(datos(Xconst + 37))   'EFnivel8
                'FGZ - 29/08/2005
                'If Datos(Xconst + 38) = "Graduado" Then Datos(Xconst + 38) = -1 Else Datos(Xconst + 38) = 0
                If datos(Xconst + 38) = "-1" Then datos(Xconst + 38) = "-1" Else datos(Xconst + 38) = "0"
                    'Datos(Xconst + 38) = Datos(Xconst + 38)   'EFcompleto8
                datos(Xconst + 39) = TraerCodTitulo(CStr(datos(Xconst + 39)), CLng(datos(Xconst + 37)))   'EFtitulo8
                datos(Xconst + 40) = TraerCodInstitucionAbreviada(CStr(datos(Xconst + 40)))   'EFinstitucion8
                datos(Xconst + 41) = TraerCodCarrera(CStr(datos(Xconst + 41)))    'EFcarrera8
                If datos(Xconst + 42) <> "" Then
                    datos(Xconst + 42) = ConvFecha(CDate(datos(Xconst + 42)))   'EFfechaDesde8
                Else
                    datos(Xconst + 42) = "NULL"
                End If
                If datos(Xconst + 43) <> "" Then
                    datos(Xconst + 43) = ConvFecha(CDate(datos(Xconst + 43)))   'EFfechaHasta8
                Else
                    datos(Xconst + 43) = "NULL"
                End If
                datos(Xconst + 44) = StrToStr(datos(Xconst + 44), 30)   'EFpromedio8
                datos(Xconst + 45) = StrToStr(datos(Xconst + 45), 60)   'EFrango8
                If datos(Xconst + 46) <> "" And UCase(datos(Xconst + 46)) <> "NO" Then
                    datos(Xconst + 46) = -1  'EFestudiaActualmente8
                Else
                    datos(Xconst + 46) = 0  'EFestudiaActualmente8
                End If
        
                StrSql = " INSERT INTO cap_estformal "
                StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
                StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + 37)) & ", " & Ternro & " ," & datos(Xconst + 39) & "," & datos(Xconst + 40) & "," & datos(Xconst + 41) & "," & datos(Xconst + 42) & " ," & datos(Xconst + 43) & "," & datos(Xconst + 38) & "," & datos(Xconst + 46) & ",'" & datos(Xconst + 45) & "','" & datos(Xconst + 44) & "' ) "
                'StrSql = StrSql & " Go "
                Err.Clear
                objConn.Execute StrSql, , adExecuteNoRecords
'                StrSql = " INSERT INTO cap_estformal "
'                StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
'                StrSql = StrSql & " VALUES ("
'                StrSql = StrSql & CLng(Datos(Xconst + 37))
'                StrSql = StrSql & ", " & ternro
'                StrSql = StrSql & " ," & Datos(Xconst + 39)
'                StrSql = StrSql & "," & Datos(Xconst + 40)
'                StrSql = StrSql & "," & Datos(Xconst + 41)
'                StrSql = StrSql & "," & Datos(Xconst + 42)
'                StrSql = StrSql & " ," & Datos(Xconst + 43)
'                StrSql = StrSql & "," & Datos(Xconst + 38)
'                StrSql = StrSql & "," & Datos(Xconst + 46)
'                StrSql = StrSql & ",'" & Datos(Xconst + 45)
'                StrSql = StrSql & "','" & Datos(Xconst + 44)
'                StrSql = StrSql & "' ) "
'                objConn.Execute StrSql, , adExecuteNoRecords
                
                If Err Then
                    Flog.writeline "Error al inserte el estudio formal: " & Err.Description
                    Flog.writeline "SQL ejecutada: " & StrSql
                    Err.Clear
                Else
                    Flog.writeline "Inserte el estudio formal " & datos(Xconst + 37)
                    ActPasos = True
                End If
            End If
            Xconst = Xconst + 10
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 50)
        End If
        ActPasos = False
        
        
        '--Experiencia-Laboral----Empleos Anteriores--57 (en medicus 58)

        'reemplazos
        '117 x 77
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + c_ELempresa) <> "" And datos(Xconst + c_ELcargoAnterior) <> "" Then
                datos(Xconst + c_ELcargoAnterior) = TraerCodCargo(CStr(datos(Xconst + c_ELcargoAnterior)))    'ELcargoAnterior16
                datos(Xconst + c_ELempresa) = TraerCodListaEmpresa(CStr(datos(Xconst + c_ELempresa)))   'ELempresa16 lempnro
                datos(Xconst + c_ELtareaDesempenada) = StrToStr(datos(Xconst + c_ELtareaDesempenada), 200) 'ELtareaDesempenada16
                If datos(Xconst + c_ELfechaDesde) <> "" Then
                    datos(Xconst + c_ELfechaDesde) = ConvFecha(CDate(datos(Xconst + c_ELfechaDesde)))  'ELfechaDesde16
                Else
                    datos(Xconst + c_ELfechaDesde) = "NULL"
                End If
                If datos(Xconst + c_ELfechaHasta) <> "" Then
                    datos(Xconst + c_ELfechaHasta) = ConvFecha(CDate(datos(Xconst + c_ELfechaHasta)))  'ELfechaHasta16
                Else
                    datos(Xconst + c_ELfechaHasta) = "NULL"
                End If
                If datos(Xconst + c_EmpleoActual) <> "" And UCase(datos(Xconst + c_EmpleoActual)) <> "NO" And UCase(datos(Xconst + c_EmpleoActual)) <> "N/A" Then
                    datos(Xconst + c_EmpleoActual) = -1  'EmpleoActual
                Else
                    datos(Xconst + c_EmpleoActual) = 0  'EmpleoActual
                End If
                If datos(Xconst + c_ELremuneracion) = "" Then
                    datos(Xconst + c_ELremuneracion) = 0
                Else
                    datos(Xconst + c_ELremuneracion) = StrToDbl(datos(Xconst + c_ELremuneracion))   'ELremuneracion16
                End If
                If datos(Xconst + c_ELcausaBaja) <> "" Then
                    datos(Xconst + c_ELcausaBaja) = TraerCodCausa(CStr(datos(Xconst + c_ELcausaBaja)))   'ELcausaBaja16
                Else
                    datos(Xconst + c_ELcausaBaja) = "NULL"
                End If
            
                StrSql = " INSERT INTO empant "
                'FGZ - 29/08/2005
                'cambié los nombres de los campos donde inserta las fechas desde y hasta
                'StrSql = StrSql & " ( empleado, empatareas, lempnro, empadesde, emmpahasta, carnro, emparemu ) "
                StrSql = StrSql & " ( empleado, empatareas, lempnro, empaini, empafin, carnro, emparemu, caunro, empantactual ) "
                StrSql = StrSql & " VALUES (" & Ternro & ", '" & datos(Xconst + c_ELtareaDesempenada) & "' ," & datos(Xconst + c_ELempresa) & "," & datos(Xconst + c_ELfechaDesde) & "," & datos(Xconst + c_ELfechaHasta) & "," & datos(Xconst + c_ELcargoAnterior) & "," & datos(Xconst + c_ELremuneracion) & "," & datos(Xconst + c_ELcausaBaja) & "," & datos(Xconst + c_EmpleoActual) & " ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al inserte el Empleo Anterior: " & Err.Description
                    Flog.writeline "SQL ejecutada: " & StrSql
                    Err.Clear
                Else
                    Flog.writeline "Inserto los datos del Empleo Anterior"
                    ActPasos = True
                End If
            End If
            Xconst = Xconst + 8
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 58) '58
        End If
        ActPasos = False
    
        '--Idiomas--53 (medicus 54)
        'reemplazos
        '229 x 105
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + c_idioma1) <> "" Then
                If datos(Xconst + c_idiomaLee1) <> "" Or datos(Xconst + c_idiomaHabla1) <> "" Or datos(Xconst + c_idiomaEscribe1) <> "" Then
                    datos(Xconst + c_idioma1) = TraerCodIdioma(CStr(datos(Xconst + c_idioma1))) 'idioma1
                    datos(Xconst + c_idiomaLee1) = TraerCodIdiNivel(CStr(datos(Xconst + c_idiomaLee1))) 'idiomaLee1
                    datos(Xconst + c_idiomaHabla1) = TraerCodIdiNivel(CStr(datos(Xconst + c_idiomaHabla1))) 'idiomaHabla1
                    datos(Xconst + c_idiomaEscribe1) = TraerCodIdiNivel(CStr(datos(Xconst + c_idiomaEscribe1))) 'idiomaEscribe1
                    
                    If Not TieneIdioma(Ternro, CLng(datos(Xconst + c_idioma1))) Then
                        StrSql = " INSERT INTO emp_idi "
                        StrSql = StrSql & " (idinro, empleado, empidlee, empidhabla, empidescr) "
                        StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + c_idioma1)) & ", " & Ternro & " ," & datos(Xconst + c_idiomaLee1) & ", " & datos(Xconst + c_idiomaHabla1) & ", " & datos(Xconst + c_idiomaEscribe1) & " ) "
                    Else
                        StrSql = " UPDATE emp_idi SET "
                        StrSql = StrSql & " empidlee = " & datos(Xconst + c_idiomaLee1)
                        StrSql = StrSql & ", empidhabla = " & datos(Xconst + c_idiomaHabla1)
                        StrSql = StrSql & ", empidescr = " & datos(Xconst + c_idiomaEscribe1)
                        StrSql = StrSql & " where empleado = " & Ternro & " and idinro = " & CLng(datos(Xconst + c_idioma1))
                    End If
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al inserte el Idioma " & datos(Xconst + c_idioma1) & "-" & Err.Description
                        Flog.writeline "SQL ejecutada: " & StrSql
                        Err.Clear
                    Else
                        Flog.writeline "Inserte el Idioma " & datos(Xconst + c_idioma1)
                        ActPasos = True
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 54) '54?
        End If
        ActPasos = False
    
        
        '--Estudios-Informales--50 (medicus 51)
        'Reemplazos
        ' 249 x 121
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If datos(Xconst + c_descCurso) <> "" Then
                tempString = StrToStr(datos(c_descCurso + Xconst), 50) ''descCurso  estinfdesabr
                datos(c_descCurso + Xconst) = datos(c_descCurso + Xconst) ''descCurso  estinfdesabr
                datos(c_tipoCurso + Xconst) = TraerCodTipoCurso(StrToStr(datos(c_tipoCurso + Xconst), 50)) 'tipoCurso tipcurnro
                If datos(c_fechaCurso + Xconst) <> "" Then
                    datos(c_fechaCurso + Xconst) = ConvFecha(datos(c_fechaCurso + Xconst)) 'fechaCurso  estinffecha
                Else
                    datos(c_fechaCurso + Xconst) = ConvFecha(Date)
                End If
                datos(c_institucionCurso + Xconst) = TraerCodInstitucion(CStr(datos(c_institucionCurso + Xconst))) 'institucionCurso instnro
                If datos(c_descCurso + Xconst) = "" Or datos(c_tipoCurso + Xconst) = "" Or datos(c_institucionCurso + Xconst) = "" Then
                    Flog.writeline "Error al insertar el estudio informal por falta de datos "
                Else
                    StrSql = " INSERT INTO cap_estinformal "
                    StrSql = StrSql & " (ternro, estinfdesabr, estinffecha, tipcurnro, instnro) "
                    StrSql = StrSql & " VALUES (" & Ternro & " , '" & tempString & "'," & datos(c_fechaCurso + Xconst) & "," & CLng(datos(c_tipoCurso + Xconst)) & "," & CLng(datos(c_institucionCurso + Xconst)) & ")"
                    Err.Clear
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al insertar el estudio informal: " & Err.Description
                        Flog.writeline "SQL ejecutada: " & StrSql
                        Err.Clear
                    Else
                        Flog.writeline "Inserto los datos del estudio informal "
                        ActPasos = True
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 51)
        End If
        ActPasos = False
        
        
        '--Especializaciones--51 (medicus 52)
        'reemplazos
        '253 x 137
        Xconst = 0
        ActPasos = False
        For a = 0 To 3
            If datos(Xconst + c_nivel) <> "" Then
                datos(Xconst + c_tipo) = TraerCodEspecializacion(CStr(datos(Xconst + c_tipo))) 'tipo
                datos(Xconst + c_elemento) = TraerCodEltoana(CStr(datos(Xconst + c_elemento)), CLng(datos(Xconst + c_tipo))) 'elemento
                datos(Xconst + c_nivel) = TraerCodNivelEspecializacion(CStr(datos(Xconst + c_nivel))) 'nivel
                
                StrSql = " INSERT INTO especemp "
                StrSql = StrSql & " (eltananro, ternro, espnivnro ) "
                StrSql = StrSql & " VALUES (" & datos(Xconst + c_elemento) & ", " & Ternro & " ," & datos(Xconst + c_nivel) & ") "
'                StrSql = StrSql & " VALUES (" & datosEltoAna(0, a) & ", " & ternro & " ," & Datos(Xconst + c_nivel) & ") "
                Err.Clear
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Flog.writeline "Error al insertar la especialidad: " & Err.Description
                    Flog.writeline "SQL ejecutada: " & StrSql
                    Err.Clear
                Else
                    Flog.writeline "Inserto los datos de la especialidad."
                    ActPasos = True
                End If
            Else
                Flog.writeline "Error al insertar la especialidad por falta de datos."
            End If
            Xconst = Xconst + 3
        Next a
        If ActPasos Then
           Flog.writeline "Inserto los datos de la especialidad"
           Call InsertarPaso(Ternro, 52)
           ActPasos = False
        End If
    Else
        Ternro = rs_Ter!Ternro
        Flog.writeline "-----------------------------------------------"
        Flog.writeline "Codigo de Tercero = " & Ternro
        
        'FGZ - 27/07/2005
        'si el tercereo existe pero es de tipo empleado ==> no se hace nada
        '1       Empleado
        '2       Empleado Agencia
        StrSql = " SELECT * FROM ter_tip"
        StrSql = StrSql & " WHERE ternro = " & Ternro
        StrSql = StrSql & " AND tipnro = 1"
        'StrSql = StrSql & " AND (tipnro = 1 OR tipnro = 2)"
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If Not rs_Aux.EOF Then
            Flog.writeline "El Postulante ya es empleado." & datos(5) & " " & datos(3) & " " & datos(4) & "No se procesará."
            Exit Sub
        End If
        
        'Actualizar los datos
        StrSql = " UPDATE tercero SET "
        StrSql = StrSql & " ternom = " & "'" & datos(3) & "'"
        StrSql = StrSql & ", ternom2 = " & "'" & datos(4) & "'"
        StrSql = StrSql & ", terape = " & "'" & datos(5) & "'"
        StrSql = StrSql & ", terape2 = " & "'" & datos(6) & "'"
        StrSql = StrSql & ", terfecnac = " & datos(7)
        StrSql = StrSql & ", tersex = " & CLng(datos(8))
        StrSql = StrSql & ", teremail =" & "'" & datos(23) & "'"
        StrSql = StrSql & ", nacionalnro =" & CLng(datos(13))
        StrSql = StrSql & ", estcivnro =" & "'" & datos(9) & "'"
        StrSql = StrSql & ", terfecing =" & datos(14)
        StrSql = StrSql & ", tercasape =" & "'" & datos(11) & "'"
        StrSql = StrSql & ",terfecestciv =" & datos(10)
        StrSql = StrSql & ", paisnro =" & datos(12)
        StrSql = StrSql & " WHERE ternro = " & Ternro
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Tercero Actualizado"
    
        'Desactivo el manejador de erorres
        On Error GoTo 0
        
        'Cualquier error que ocurra de aquí en adelante sigue adelante
        ' tratando de insertar la mayor cantidad de datos posible
        On Error Resume Next
        
        StrSql = "SELECT * FROM ter_doc  "
        StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
        StrSql = StrSql & " AND ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
            StrSql = StrSql & " VALUES(" & Ternro & "," & datos(1) & ",'" & datos(2) & "')"
        Else
            StrSql = "UPDATE ter_doc SET "
            StrSql = StrSql & " nrodoc = '" & datos(2) & "'"
            StrSql = StrSql & " WHERE ter_doc.tidnro = " & datos(1)
            StrSql = StrSql & " AND ternro = " & Ternro
        End If
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline "Documento Actualizado"
        
        
        '--------------------------------------------------------------------------------
        '--Inserto el Domicilio--
        StrSql = "SELECT * FROM cabdom  "
        StrSql = StrSql & " WHERE tipnro = 1"
        StrSql = StrSql & " AND ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
            StrSql = StrSql & " VALUES(1," & Ternro & ",-1,2)"
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline "inserto el Domicilio"
    
            '--Obtengo el numero de domicilio en la tabla--
            NroDom = CLng(getLastIdentity(objConn, "cabdom"))
        
            '--Si no tiene algun dato le agregamos unos ficticios--
            datos(24) = StrToStr(datos(24), 30) 'dirCalle
            datos(25) = StrToStr(datos(25), 8) 'dirNumero
            datos(26) = StrToStr(datos(26), 8) 'dirPiso
            datos(27) = StrToStr(datos(27), 8) 'dirDepto
            datos(28) = StrToStr(datos(28), 8) 'dirTorre
            datos(29) = StrToStr(datos(29), 8) 'dirManzana
            datos(30) = StrToStr(datos(30), 8) 'dirSector
            datos(31) = StrToStr(datos(31), 12) 'dirCP
            datos(32) = TraerCodLocalidad(CStr(datos(32))) 'dirLocalidad
            datos(33) = TraerCodProvincia(CStr(datos(33)))   'dirProvincia
            datos(34) = TraerCodPartido(CStr(datos(34)))  'dirPartido
            datos(35) = TraerCodZona(CStr(datos(35)), CLng(datos(33)))  'dirZona
                If datos(35) = "" Then datos(35) = "NULL"
            datos(36) = TraerCodPais(CStr(datos(36))) 'dirPais
        
            StrSql = " INSERT INTO detdom (domnro,calle,nro,sector,torre,piso,oficdepto,manzana,codigopostal,"
            StrSql = StrSql & "locnro,provnro,paisnro, zonanro, partnro) "
            StrSql = StrSql & " VALUES ("
            StrSql = StrSql & NroDom
            StrSql = StrSql & ",'" & datos(24) & "'"
            StrSql = StrSql & ",'" & datos(25) & "'"
            StrSql = StrSql & ",'" & datos(30) & "'"
            StrSql = StrSql & ",'" & datos(28) & "'"
            StrSql = StrSql & ",'" & datos(26) & "'"
            StrSql = StrSql & ",'" & datos(27) & "'"
            StrSql = StrSql & ",'" & datos(29) & "'"
            StrSql = StrSql & ",'" & datos(31) & "'"
            StrSql = StrSql & "," & datos(32)
            StrSql = StrSql & "," & datos(33)
            StrSql = StrSql & "," & datos(36)
            StrSql = StrSql & "," & datos(35)
            StrSql = StrSql & "," & datos(34)
            StrSql = StrSql & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
            Else
                Flog.writeline "Inserte el domicilio "
            End If
            Flog.writeline "Inserto el Domicilio "
        Else
            NroDom = rs_Aux!domnro
        
            '--Si no tiene algun dato le agregamos unos ficticios--
            datos(24) = StrToStr(datos(24), 30) 'dirCalle
            datos(25) = StrToStr(datos(25), 8) 'dirNumero
            datos(26) = StrToStr(datos(26), 8) 'dirPiso
            datos(27) = StrToStr(datos(27), 8) 'dirDepto
            datos(28) = StrToStr(datos(28), 8) 'dirTorre
            datos(29) = StrToStr(datos(29), 8) 'dirManzana
            datos(30) = StrToStr(datos(30), 8) 'dirSector
            datos(31) = StrToStr(datos(31), 12) 'dirCP
            datos(32) = TraerCodLocalidad(CStr(datos(32))) 'dirLocalidad
            datos(33) = TraerCodProvincia(CStr(datos(33)))   'dirProvincia
            datos(34) = TraerCodPartido(CStr(datos(34)))  'dirPartido
            datos(35) = TraerCodZona(CStr(datos(35)), CLng(datos(33)))  'dirZona
            If datos(35) = "" Then datos(35) = "NULL"
            datos(36) = TraerCodPais(CStr(datos(36))) 'dirPais
        
            StrSql = " UPDATE detdom SET "
            StrSql = StrSql & " calle =" & "'" & datos(24) & "'"
            StrSql = StrSql & ",nro =" & "'" & datos(25) & "'"
            StrSql = StrSql & ",sector =" & "'" & datos(30) & "'"
            StrSql = StrSql & ",torre =" & "'" & datos(28) & "'"
            StrSql = StrSql & ",piso =" & "'" & datos(26) & "'"
            StrSql = StrSql & ",oficdepto =" & "'" & datos(27) & "'"
            StrSql = StrSql & ",manzana =" & "'" & datos(29) & "'"
            StrSql = StrSql & ",codigopostal =" & "'" & datos(31) & "'"
            StrSql = StrSql & ",locnro =" & datos(32)
            StrSql = StrSql & ",provnro =" & datos(33)
            StrSql = StrSql & ",paisnro =" & datos(36)
            StrSql = StrSql & ", zonanro =" & datos(35)
            StrSql = StrSql & ", partnro = " & datos(34)
            StrSql = StrSql & " WHERE domnro = " & NroDom
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Err.Clear
                Flog.writeline "Domicilio NO actualizado"
                Flog.writeline "SQL ejecutada: " & StrSql
            Else
                Flog.writeline "Domicilio actualizado"
            End If
        End If
        
        
        '--Telefonos-Personal--
        datos(21) = validatelefono(StrToStr(datos(21), 20))
        If datos(21) <> "" Then
            StrSql = "SELECT * FROM telefono  "
            StrSql = StrSql & " WHERE domnro = " & NroDom
            StrSql = StrSql & " AND telnro = " & "'" & datos(21) & "'"
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO telefono "
                'FGZ - 04/05/2011 ----- Agregué el tipo de telefono --------------------------
                'StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular ) "
                'StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0 ) "
                StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
                StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(21) & "' ,0 , -1 ,0,1 ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Err.Clear
                    Flog.writeline "Error Insertando el telefono " & datos(21)
                    Flog.writeline "SQL ejecutada: " & StrSql
                Else
                    Flog.writeline "Inserte el telefono"
                End If
            End If
        End If
        
        '--Telefonos-segundo--
        datos(22) = validatelefono(StrToStr(datos(22), 20))
        If datos(22) <> "" Then
            StrSql = "SELECT * FROM telefono  "
            StrSql = StrSql & " WHERE domnro = " & NroDom
            StrSql = StrSql & " AND telnro = " & "'" & datos(22) & "'"
            If rs_Aux.State = adStateOpen Then rs_Aux.Close
            OpenRecordset StrSql, rs_Aux
            If rs_Aux.EOF Then
                StrSql = " INSERT INTO telefono "
                'FGZ - 04/05/2011 ----- Agregué el tipo de telefono --------------------------
                'StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular ) "
                'StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0 ) "
                StrSql = StrSql & " (domnro, telnro, telfax, teldefault, telcelular,tipotel ) "
                StrSql = StrSql & " VALUES (" & NroDom & ", '" & datos(22) & "' , 0, -1, 0,2 ) "
                objConn.Execute StrSql, , adExecuteNoRecords
                If Err Then
                    Err.Clear
                    Flog.writeline "Error Insertando el telefono " & datos(22)
                    Flog.writeline "SQL ejecutada: " & StrSql
                Else
                    Flog.writeline "Inserte el telefono2 "
                End If
            End If
        End If
    
    
        '--Complemento--
        If datos(15) = "" Then
            datos(15) = 0
        Else
            datos(15) = CLng(StrToInt(datos(15))) 'cantidadHijos
        End If
        datos(16) = StrToStr(datos(16), 60) 'imagen
        If datos(17) = "" Then
            datos(17) = "NULL"
        Else
            datos(17) = ConvFecha(CDate(datos(17))) 'fechaIngresoCV
        End If
        datos(18) = StrToStr(datos(18), 250) 'referencias
        If datos(19) = "" Then
            datos(19) = TraerCodProcedencia("Web Deloitte") 'procedencia
        Else
            datos(19) = TraerCodProcedencia(CStr(datos(19))) 'procedencia
        End If
        If datos(20) = "" Then
            datos(20) = 0
        Else
            datos(20) = CDbl(StrToDbl(datos(20))) 'remuneracionPretendida
        End If
        
        'FGZ - 02/03/2006 Se agrego el estposnro = 4 (postulantre activo)
        StrSql = "SELECT * FROM pos_postulante  "
        StrSql = StrSql & " WHERE ternro = " & Ternro
        If rs_Aux.State = adStateOpen Then rs_Aux.Close
        OpenRecordset StrSql, rs_Aux
        If rs_Aux.EOF Then
            StrSql = " INSERT INTO pos_postulante "
            StrSql = StrSql & " ( ternro, posrempre, poscanhijos, posfoto, posfecpres, posref, procnro,estposnro) "
            StrSql = StrSql & " VALUES (" & Ternro & " ," & CDbl(datos(20)) & ", " & CLng(datos(15)) & ", '" & datos(16) & "', " & datos(17) & ",'" & datos(18) & "', " & datos(19) & ",4) "
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al inserte el Complemento: " & Err.Description
                Flog.writeline "SQL ejecutada: " & StrSql
                Err.Clear
            Else
                Flog.writeline "Inserte el Complemento "
            End If
        Else
            StrSql = "UPDATE pos_postulante SET "
            StrSql = StrSql & " posrempre = " & CDbl(datos(20))
            StrSql = StrSql & ", poscanhijos =" & CLng(datos(15))
            StrSql = StrSql & ", posfoto =" & "'" & datos(16) & "'"
            StrSql = StrSql & ", posfecpres =" & datos(17)
            StrSql = StrSql & ", posref =" & "'" & datos(18) & "'"
            StrSql = StrSql & ", procnro =" & datos(19)
            StrSql = StrSql & ", estposnro = 4"
            StrSql = StrSql & " WHERE ternro = " & Ternro
            objConn.Execute StrSql, , adExecuteNoRecords
            If Err Then
                Flog.writeline "Error al actualizar el Complemento: " & Err.Description
                Flog.writeline "SQL ejecutada: " & StrSql
                Err.Clear
            Else
                Flog.writeline "Complemento actualizado"
            End If
        End If
        
        '--Estudios-formales--(49) (Medicus 50)
        Xconst = 0
        For a = 0 To 3
            If UBound(datos) > (Xconst + 37) Then
                If datos(Xconst + 37) <> "" Then
                    datos(Xconst + 37) = TraerCodNivelEstudio(datos(Xconst + 37))   'EFnivel8
                    'FGZ - 29/08/2005
                    'If Datos(Xconst + 38) = "Graduado" Then Datos(Xconst + 38) = -1 Else Datos(Xconst + 38) = 0
                    If datos(Xconst + 38) = "-1" Then datos(Xconst + 38) = "-1" Else datos(Xconst + 38) = "0"
                        'Datos(Xconst + 38) = Datos(Xconst + 38)   'EFcompleto8
                    datos(Xconst + 39) = TraerCodTitulo(CStr(datos(Xconst + 39)), CLng(datos(Xconst + 37)))   'EFtitulo8
                    datos(Xconst + 40) = TraerCodInstitucionAbreviada(CStr(datos(Xconst + 40)))   'EFinstitucion8
                    datos(Xconst + 41) = TraerCodCarrera(CStr(datos(Xconst + 41)))    'EFcarrera8
                    If datos(Xconst + 42) <> "" Then
                        datos(Xconst + 42) = ConvFecha(CDate(datos(Xconst + 42)))   'EFfechaDesde8
                    Else
                        datos(Xconst + 42) = "NULL"
                    End If
                    If datos(Xconst + 43) <> "" Then
                        datos(Xconst + 43) = ConvFecha(CDate(datos(Xconst + 43)))   'EFfechaHasta8
                    Else
                        datos(Xconst + 43) = "NULL"
                    End If
                    datos(Xconst + 44) = StrToStr(datos(Xconst + 44), 30)   'EFpromedio8
                    datos(Xconst + 45) = StrToStr(datos(Xconst + 45), 60)   'EFrango8
                    If datos(Xconst + 46) <> "" And UCase(datos(Xconst + 46)) <> "NO" Then
                        datos(Xconst + 46) = -1  'EFestudiaActualmente8
                    Else
                        datos(Xconst + 46) = 0  'EFestudiaActualmente8
                    End If
            
                    'actualizo
                    StrSql = "SELECT * FROM cap_estformal  "
                    StrSql = StrSql & " WHERE nivnro = " & CLng(datos(Xconst + 37))
                    StrSql = StrSql & " AND ternro = " & Ternro
                    StrSql = StrSql & " AND titnro = " & datos(Xconst + 39)
                    StrSql = StrSql & " AND instnro = " & datos(Xconst + 40)
                    StrSql = StrSql & " AND carredunro = " & datos(Xconst + 41)
                    If rs_Aux.State = adStateOpen Then rs_Aux.Close
                    OpenRecordset StrSql, rs_Aux
                    If rs_Aux.EOF Then
                        StrSql = " INSERT INTO cap_estformal "
                        StrSql = StrSql & " ( nivnro, ternro, titnro, instnro, carredunro, capfecdes, capfechas, capcomp , capestact, caprango, capprom) "
                        StrSql = StrSql & " VALUES ("
                        StrSql = StrSql & CLng(datos(Xconst + 37))          'nivnro
                        StrSql = StrSql & "," & Ternro                      'ternro
                        StrSql = StrSql & "," & datos(Xconst + 39)          'titnro
                        StrSql = StrSql & "," & datos(Xconst + 40)          'instnro
                        StrSql = StrSql & "," & datos(Xconst + 41)          'carredunro
                        StrSql = StrSql & "," & datos(Xconst + 42)          'capfecdes
                        StrSql = StrSql & "," & datos(Xconst + 43)          'capfechas
                        StrSql = StrSql & "," & datos(Xconst + 38)          'capcomp
                        StrSql = StrSql & "," & datos(Xconst + 46)          'capestact
                        StrSql = StrSql & ",'" & datos(Xconst + 45) & "'"   'caprango
                        StrSql = StrSql & ",'" & datos(Xconst + 44) & "'"   'capprom
                        StrSql = StrSql & ")"
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte el estudio formal: " & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Inserte el estudio formal " & datos(Xconst + 37)
                            ActPasos = True
                        End If
                    Else
                        StrSql = "UPDATE  cap_estformal SET "
                        StrSql = StrSql & " capfecdes = " & datos(Xconst + 42)
                        StrSql = StrSql & ", capfechas =" & datos(Xconst + 43)
                        StrSql = StrSql & ", capcomp =" & datos(Xconst + 38)
                        StrSql = StrSql & ", capestact =" & datos(Xconst + 46)
                        StrSql = StrSql & ", caprango =" & "'" & datos(Xconst + 45) & "'"
                        StrSql = StrSql & ", capprom =" & "'" & datos(Xconst + 44) & "'"
                        StrSql = StrSql & " WHERE nivnro = " & CLng(datos(Xconst + 37))
                        StrSql = StrSql & " AND ternro = " & Ternro
                        StrSql = StrSql & " AND titnro = " & datos(Xconst + 39)
                        StrSql = StrSql & " AND instnro = " & datos(Xconst + 40)
                        StrSql = StrSql & " AND carredunro = " & datos(Xconst + 41)
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte Al actualizar studio formal: " & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Estudio formal " & datos(Xconst + 37) & " actualizado"
                            ActPasos = False
                        End If
                    End If
                End If
            Else
            End If
            Xconst = Xconst + 10
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 50)
        End If
        ActPasos = False
        
        
        '--Experiencia-Laboral----Empleos Anteriores--57 (medicus 58)
        Xconst = 0
        For a = 0 To 3
            If UBound(datos) > (Xconst + c_ELcargoAnterior) Then
                If datos(Xconst + c_ELempresa) <> "" And datos(Xconst + c_ELcargoAnterior) <> "" Then
                    datos(Xconst + c_ELcargoAnterior) = TraerCodCargo(CStr(datos(Xconst + c_ELcargoAnterior)))    'ELcargoAnterior16
                    datos(Xconst + c_ELempresa) = TraerCodListaEmpresa(CStr(datos(Xconst + c_ELempresa)))   'ELempresa16 lempnro
                    datos(Xconst + c_ELtareaDesempenada) = StrToStr(datos(Xconst + c_ELtareaDesempenada), 200) 'ELtareaDesempenada16
                    If datos(Xconst + c_ELfechaDesde) <> "" Then
                        datos(Xconst + c_ELfechaDesde) = ConvFecha(CDate(datos(Xconst + c_ELfechaDesde)))  'ELfechaDesde16
                    Else
                        datos(Xconst + c_ELfechaDesde) = "NULL"
                    End If
                    If datos(Xconst + c_ELfechaHasta) <> "" Then
                        datos(Xconst + c_ELfechaHasta) = ConvFecha(CDate(datos(Xconst + c_ELfechaHasta)))  'ELfechaHasta16
                    Else
                        datos(Xconst + c_ELfechaHasta) = "NULL"
                    End If
                    If datos(Xconst + c_EmpleoActual) <> "" And UCase(datos(Xconst + c_EmpleoActual)) <> "NO" And UCase(datos(Xconst + c_EmpleoActual)) <> "N/A" Then
                        datos(Xconst + c_EmpleoActual) = -1  'EmpleoActual
                    Else
                        datos(Xconst + c_EmpleoActual) = 0  'EmpleoActual
                    End If
                    If datos(Xconst + c_ELremuneracion) = "" Then
                        datos(Xconst + c_ELremuneracion) = 0
                    Else
                        datos(Xconst + c_ELremuneracion) = StrToDbl(datos(Xconst + c_ELremuneracion))   'ELremuneracion16
                    End If
                    If datos(Xconst + c_ELcausaBaja) <> "" Then
                        datos(Xconst + c_ELcausaBaja) = TraerCodCausa(CStr(datos(Xconst + c_ELcausaBaja)))   'ELcausaBaja16
                    Else
                        datos(Xconst + c_ELcausaBaja) = "NULL"
                    End If
                
                    StrSql = "SELECT * FROM empant  "
                    StrSql = StrSql & " WHERE empleado = " & Ternro
                    StrSql = StrSql & " AND empatareas = " & "'" & datos(Xconst + c_ELtareaDesempenada) & "'"
                    StrSql = StrSql & " AND lempnro = " & datos(Xconst + c_ELempresa)
                    StrSql = StrSql & " AND carnro = " & datos(Xconst + c_ELcargoAnterior)
                    If rs_Aux.State = adStateOpen Then rs_Aux.Close
                    OpenRecordset StrSql, rs_Aux
                    If rs_Aux.EOF Then
                        StrSql = " INSERT INTO empant "
                        'FGZ - 29/08/2005
                        'cambié los nombres de los campos donde inserta las fechas desde y hasta
                        'StrSql = StrSql & " ( empleado, empatareas, lempnro, empadesde, emmpahasta, carnro, emparemu ) "
                        StrSql = StrSql & " ( empleado, empatareas, lempnro, empaini, empafin, carnro, emparemu, caunro, empantactual ) "
                        StrSql = StrSql & " VALUES (" & Ternro & ", '" & datos(Xconst + c_ELtareaDesempenada) & "' ," & datos(Xconst + c_ELempresa) & "," & datos(Xconst + c_ELfechaDesde) & "," & datos(Xconst + c_ELfechaHasta) & "," & datos(Xconst + c_ELcargoAnterior) & "," & datos(Xconst + c_ELremuneracion) & "," & datos(Xconst + c_ELcausaBaja) & "," & datos(Xconst + c_EmpleoActual) & "  ) "
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte el Empleo Anterior: " & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Inserto los datos del Empleo Anterior"
                            ActPasos = True
                        End If
                    Else
                        StrSql = "UPDATE empant SET "
                        'FGZ - 29/08/2005
'                        StrSql = StrSql & " empadesde =" & Datos(Xconst + 120)
'                        StrSql = StrSql & ", emmpahasta =" & (Datos(Xconst + 121))
                        StrSql = StrSql & " empaini =" & datos(Xconst + c_ELfechaDesde)
                        StrSql = StrSql & ", empafin =" & (datos(Xconst + c_ELfechaHasta))
                        StrSql = StrSql & ", emparemu = " & datos(Xconst + c_ELremuneracion)
                        StrSql = StrSql & ", caunro = " & datos(Xconst + c_ELcausaBaja)
                        StrSql = StrSql & ", empantactual = " & datos(Xconst + c_EmpleoActual)
                        StrSql = StrSql & " WHERE empantnro = " & rs_Aux!Empantnro
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al actualizar el Empleo Anterior: " & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Actualizo los datos del Empleo Anterior"
                            ActPasos = False
                        End If
                    End If
                Else
                End If
            End If
            Xconst = Xconst + 8
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 58)
        End If
        ActPasos = False
    
    
        '--Idiomas--53 (Medicus 54)
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            If UBound(datos) > (Xconst + c_idioma1) Then
                If datos(Xconst + c_idioma1) <> "" Then
                    If datos(Xconst + c_idiomaLee1) <> "" Or datos(Xconst + c_idiomaHabla1) <> "" Or datos(Xconst + c_idiomaEscribe1) <> "" Then
                        datos(Xconst + c_idioma1) = TraerCodIdioma(CStr(datos(Xconst + c_idioma1))) 'idioma1
                        datos(Xconst + c_idiomaLee1) = TraerCodIdiNivel(CStr(datos(Xconst + c_idiomaLee1))) 'idiomaLee1
                        datos(Xconst + c_idiomaHabla1) = TraerCodIdiNivel(CStr(datos(Xconst + c_idiomaHabla1))) 'idiomaHabla1
                        datos(Xconst + c_idiomaEscribe1) = TraerCodIdiNivel(CStr(datos(Xconst + c_idiomaEscribe1))) 'idiomaEscribe1
                        
                        If Not TieneIdioma(Ternro, CLng(datos(Xconst + c_idioma1))) Then
                            StrSql = " INSERT INTO emp_idi "
                            StrSql = StrSql & " (idinro, empleado, empidlee, empidhabla, empidescr) "
                            StrSql = StrSql & " VALUES (" & CLng(datos(Xconst + c_idioma1)) & ", " & Ternro & " ," & datos(Xconst + 230) & ", " & datos(Xconst + 231) & ", " & datos(Xconst + 232) & " ) "
                        Else
                            StrSql = " UPDATE emp_idi SET "
                            StrSql = StrSql & " empidlee = " & datos(Xconst + c_idiomaLee1)
                            StrSql = StrSql & ", empidhabla = " & datos(Xconst + c_idiomaHabla1)
                            StrSql = StrSql & ", empidescr = " & datos(Xconst + c_idiomaEscribe1)
                            StrSql = StrSql & " where empleado = " & Ternro & " and idinro = " & CLng(datos(Xconst + c_idioma1))
                        End If
                        objConn.Execute StrSql, , adExecuteNoRecords
                        If Err Then
                            Flog.writeline "Error al inserte el Idioma " & datos(Xconst + 229) & "-" & Err.Description
                            Flog.writeline "SQL ejecutada: " & StrSql
                            Err.Clear
                        Else
                            Flog.writeline "Inserte el Idioma " & datos(Xconst + 229)
                            ActPasos = True
                        End If
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
            Call InsertarPaso(Ternro, 54)
        End If
        ActPasos = False
    
        
        '--Estudios-Informales--50 (medicus 51)
        ActPasos = False
        Xconst = 0
        For a = 0 To 3
            tempString = StrToStr(datos(c_descCurso + Xconst), 50) ''descCurso  estinfdesabr
            datos(c_descCurso + Xconst) = datos(c_descCurso + Xconst) ''descCurso  estinfdesabr
            datos(c_tipoCurso + Xconst) = TraerCodTipoCurso(StrToStr(datos(c_tipoCurso + Xconst), 50)) 'tipoCurso tipcurnro
            If datos(c_fechaCurso + Xconst) <> "" Then
                datos(c_fechaCurso + Xconst) = ConvFecha(datos(c_fechaCurso + Xconst)) 'fechaCurso  estinffecha
            Else
                datos(c_fechaCurso + Xconst) = ConvFecha(Date)
            End If
            datos(c_institucionCurso + Xconst) = TraerCodInstitucion(CStr(datos(c_institucionCurso + Xconst))) 'institucionCurso instnro
            If datos(c_descCurso + Xconst) = "" Or datos(c_tipoCurso + Xconst) = "" Or datos(c_institucionCurso + Xconst) = "" Then
                Flog.writeline "Error al insertar el estudio informal por falta de datos "
            Else
                'Reviso
                StrSql = "SELECT * FROM cap_estinformal  "
                StrSql = StrSql & " WHERE tipcurnro = " & CLng(datos(c_tipoCurso + Xconst))
                StrSql = StrSql & " AND ternro = " & Ternro
                StrSql = StrSql & " AND instnro = " & CLng(datos(c_institucionCurso + Xconst))
                If rs_Aux.State = adStateOpen Then rs_Aux.Close
                OpenRecordset StrSql, rs_Aux
                If rs_Aux.EOF Then
                    StrSql = " INSERT INTO cap_estinformal "
                    StrSql = StrSql & " (ternro, estinfdesabr, estinffecha, tipcurnro, instnro) "
                    StrSql = StrSql & " VALUES (" & Ternro & " , '" & tempString & "'," & datos(c_fechaCurso + Xconst) & "," & CLng(datos(c_tipoCurso + Xconst)) & "," & CLng(datos(c_institucionCurso + Xconst)) & ")"
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al insertar el estudio informal: " & Err.Description
                        Flog.writeline "SQL ejecutada: " & StrSql
                        Err.Clear
                    Else
                        Flog.writeline "Inserto los datos del estudio informal "
                        ActPasos = True
                    End If
                Else
                    StrSql = "UPDATE cap_estinformal SET "
                    StrSql = StrSql & " estinfdesabr = '" & tempString & "'"
                    StrSql = StrSql & ", estinffecha =" & (datos(c_fechaCurso + Xconst))
                    StrSql = StrSql & " WHERE tipcurnro = " & CLng(datos(c_tipoCurso + Xconst))
                    StrSql = StrSql & " AND ternro = " & Ternro
                    StrSql = StrSql & " AND instnro = " & CLng(datos(c_institucionCurso + Xconst))
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al actualizar el estudio informal: " & Err.Description
                        Flog.writeline "SQL ejecutada: " & StrSql
                        Err.Clear
                    Else
                        Flog.writeline "Actualizo los datos del estudio informal "
                        ActPasos = False
                    End If
                End If
            End If
            Xconst = Xconst + 4
        Next a
        If ActPasos Then
           Call InsertarPaso(Ternro, 51)
           ActPasos = False
        End If
        
        '--Especializaciones--51 (Medicus 52)
        Xconst = 0
        ActPasos = False
        For a = 0 To 3
            If datos(Xconst + c_nivel) <> "" Then
                datos(Xconst + c_tipo) = TraerCodEspecializacion(CStr(datos(Xconst + c_tipo))) 'tipo
                datos(Xconst + c_elemento) = TraerCodEltoana(CStr(datos(Xconst + c_elemento)), CLng(datos(Xconst + c_tipo))) 'elemento
                datos(Xconst + c_nivel) = TraerCodNivelEspecializacion(CStr(datos(Xconst + c_nivel))) 'nivel
                
                'REVISO
                StrSql = "SELECT * FROM especemp  "
                StrSql = StrSql & " WHERE espnivnro = " & datos(Xconst + c_nivel)
                StrSql = StrSql & " AND ternro = " & Ternro
                StrSql = StrSql & " AND eltananro = " & datos(Xconst + c_elemento)
                If rs_Aux.State = adStateOpen Then rs_Aux.Close
                OpenRecordset StrSql, rs_Aux
                If rs_Aux.EOF Then
                    StrSql = " INSERT INTO especemp "
                    StrSql = StrSql & " (eltananro, ternro, espnivnro ) "
                    StrSql = StrSql & " VALUES (" & datos(Xconst + c_elemento) & ", " & Ternro & " ," & datos(Xconst + c_nivel) & ") "
    '                StrSql = StrSql & " VALUES (" & datosEltoAna(0, a) & ", " & ternro & " ," & Datos(Xconst + c_nivel) & ") "
                
                    Err.Clear
                    objConn.Execute StrSql, , adExecuteNoRecords
                    If Err Then
                        Flog.writeline "Error al insertar la especialidad: " & Err.Description
                        Flog.writeline "SQL ejecutada: " & StrSql
                        Err.Clear
                    Else
                        Flog.writeline "Actualizo los datos de la especialidad."
                        ActPasos = True
                    End If
                End If
            Else
            End If
            Xconst = Xconst + 3
        Next a
        If ActPasos Then
           'Flog.Writeline "Inserto los datos de la especialidad"
           Call InsertarPaso(Ternro, 52)
           ActPasos = False
        End If
    End If
Fin:
Exit Sub

Manejador_De_Error:
    HuboError = True
    Flog.writeline "SQL ejecutada: " & StrSql
    Texto = ": " & Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    'Fue error de Consulta de SQL
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
    
End Sub

Public Sub LineaModelo_337(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Cargar Novedades para un concepto configurable. Archivos AsoSykes
'              El formato es:
'              Entidad Deductora, Columna2, Nro de Empleado, Monto a deducir, Tipo, Columna6, Codigo de deduccion
' Autor      : Manterola Maria Magdalena
' Fecha      : 27/01/2011
' Modificación:06/04/2011 Se modificó el número 329 por el número 337
'              19/04/2011 Gonzalez Nicolás - Se Agregó funcion Firmas_novliq() - Validación de Firmas + Listas de firmantes
'              12/05/2011 Gonzalez Nicolás - Se corrigió N° de reporte 310 a 307
'                                          - Se agregó validación en VALIDO QUE ESTE ACTIVO EL CIRCUITO
'              10/06/2011 Gonzalez Nicolás - Se agregó listaConceptosPermitidos()
'              20/08/2013 - Gonzalez Nicolás - Se corrigió parametro en llamada a getLastIdentity()
' ---------------------------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As Long
Dim fornro As Long

Dim tpanro As Long
Dim Aux_Monto As String
Dim Monto As Single
Dim EntDed As Integer
Dim col2 As Integer
Dim tipo As String
Dim col6 As Integer
Dim codded As Integer

Dim Aux As String
Dim Encontro As Boolean

'Dim perfsegcon As Integer
Dim tienePermiso As Boolean

Dim rs As New ADODB.Recordset
Dim rs_Empleado As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim rs_TipoPar As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset
Dim rs_seguridad As New ADODB.Recordset
Dim rs_Confrep As New ADODB.Recordset
Dim campos

'Para el circ. de firmas
Dim gnovnro
Dim firmas_ok
Dim Firmas
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim cystipnro

cystipnro = 5

On Error GoTo Manejador_De_Error

' El formato es:
' Entidad Deductora, Columna2, Nro de Empleado, Monto a deducir, Tipo, Columna6, Codigo de deduccion
    
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    '=====================================
    'ENTIDAD DEDUCTORA
    '=====================================
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        
        EntDed = Mid$(strLinea, pos1, pos2 - pos1)
    
    Else
        Texto = ": " & "La entidad deductora no es numerica "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If

    NroColumna = NroColumna + 1
    '=====================================
    'COLUMNA 2
    '=====================================
    pos1 = pos2 + 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        col2 = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        Texto = ": " & "La entidad deductora no es numerica "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If

    NroColumna = NroColumna + 1
    '=====================================
    'NUMERO DE EMPLEADO
    '=====================================
    pos1 = pos2 + 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
    
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
        
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If

    NroColumna = NroColumna + 1
    '=====================================
    'MONTO A DEDUCIR
    '=====================================
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    Aux_Monto = Mid(strLinea, pos1, pos2 - pos1)
    Monto = CSng(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
    
    If Not IsNumeric(Monto) Then
        Texto = ": " & "El monto no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
    NroColumna = NroColumna + 1
    '=====================================
    'TIPO
    '=====================================
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    If Mid$(strLinea, pos1, pos2 - pos1) = "D" Then
        
        tipo = Mid$(strLinea, pos1, pos2 - pos1)
        
    Else
        Texto = ": " & "El tipo no es igual a D "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
    NroColumna = NroColumna + 1
    '=====================================
    'COLUMNA 6
    '=====================================
    pos1 = pos2 + 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
    
        col6 = Mid$(strLinea, pos1, pos2 - pos1)
               
    Else
        Texto = ": " & "La columna 6 no es numerica "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
              
    NroColumna = NroColumna + 1
    '=====================================
    'CODIGO DE DEDUCCION
    '=====================================
    pos1 = pos2 + 1
    pos2 = Len(strLinea)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
    
        codded = Mid$(strLinea, pos1, pos2 - pos1)
        
    Else
        Texto = ": " & "El código de deducción no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
' ====================================================================
' CONFREP
' ====================================================================
StrSql = "SELECT * FROM confrep where confrep.repnro = 307 ORDER BY confnrocol"
OpenRecordset StrSql, rs_Confrep
    
If rs_Confrep.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "Falta configurar el concepto en el reporte 307 "
    FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": Falta configurar el concepto en el reporte 307 "
    InsertaError 0, 106
    HuboError = True
    Exit Sub
Else
    Do While Not rs_Confrep.EOF
        Select Case UCase(Trim(rs_Confrep!conftipo))
            Case "CO": 'CONCEPTO
                
                ConcCod = rs_Confrep!Confval
                
            Case "PA": 'PARAMETRO DONDE PODER CARGAR LA NOVEDAD
            
                tpanro = rs_Confrep!Confval
                
        End Select
            
    rs_Confrep.MoveNext
    Loop

End If

' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'Que exista el concepto
StrSql = "SELECT * FROM concepto WHERE conccod = " & ConcCod
'StrSql = StrSql & " OR conccod = '" & Conccod & "'"
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
    fornro = rs_Concepto!fornro
End If

'Que exista el tipo de Parametro
StrSql = "SELECT * FROM tipopar WHERE tpanro = " & tpanro
OpenRecordset StrSql, rs_TipoPar

If rs_TipoPar.EOF Then
    Texto = ": " & "No se encontro el Tipo de Parametro " & tpanro
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
End If

'------------------------------------------------
'VALIDA QUE EL USUARIO TENGA ACTIVO EL CONCEPTO
If listaConceptosPermitidos(ConcCod) = True Then
    tienePermiso = True
Else
    tienePermiso = False
End If
 
If tienePermiso = False Then
  Texto = ": El usuario:" & usuario & " no tiene autorización sobre el concepto:" & ConcCod
  Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
  HuboError = True
End If
'------------------------------------------------


'VALIDO QUE ESTE ACTIVO EL CIRCUITO
StrSql = "SELECT cystipact FROM cystipo "
StrSql = StrSql & "WHERE cystipnro = " & cystipnro & " AND cystipact = -1"
OpenRecordset StrSql, rs
If Not rs.EOF Then
'SI ESTA ACTIVO LLAMO LA FNC Firmas_novliq()
    firmas_ok = Split(Firmas_novliq(usuario, cystipnro, ConcCod, 1), ",")
    cysfirautoriza = firmas_ok(0)
    cysfirusuario = firmas_ok(1)
    cysfirdestino = firmas_ok(2)
    cysfirfin = firmas_ok(3)
    cysfiryaaut = firmas_ok(4)
    cysfirrecha = firmas_ok(5)
    
    If cysfirautoriza = "" And cysfirusuario = "" And cysfirdestino = "" And cysfirfin = 0 And cysfiryaaut = 0 And cysfirrecha = 0 Then
        Firmas = ""
    Else
        Firmas = "OK"
    End If
Else
    Firmas = ""
End If
rs.Close


' ====================================================================
' INSERTAR O ACTUALIZAR LA NOVEDAD
' ====================================================================
StrSql = "SELECT * FROM novemp WHERE "
StrSql = StrSql & " concnro = " & ConcNro
StrSql = StrSql & " AND tpanro = " & tpanro
StrSql = StrSql & " AND empleado = " & Tercero
StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
StrSql = StrSql & " ORDER BY nevigencia "
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
OpenRecordset StrSql, rs_NovEmp
If Not rs_NovEmp.EOF Then
    'Existe una novedad  ==> Actualizo
    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
            " WHERE concnro = " & ConcNro & _
            " AND tpanro = " & tpanro & _
            " AND empleado = " & Tercero
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad Actualizada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
Else
    'Inserto
    StrSql = "INSERT INTO novemp (" & _
            "empleado,concnro,tpanro,nevalor,nevigencia" & _
            ") VALUES (" & Tercero & _
            "," & ConcNro & _
            "," & tpanro & _
            "," & Monto & _
            ",0" & _
            " )"
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)

    'NG - 20/08/2013
    gnovnro = getLastIdentity(objConn, "novemp")
    'gnovnro = getLastIdentity(objConn, "gnovnro")
    If Firmas = "OK" Then
        ' ====================================================================
        'INSERTO EN cysfirmas
        ' ====================================================================
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & gnovnro & ",1,'Novedad desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If
End If

Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close
If rs_TipoPar.State = adStateOpen Then rs_TipoPar.Close
If rs_con_for_tpa.State = adStateOpen Then rs_con_for_tpa.Close

Set rs_NovEmp = Nothing
Set rs_Empleado = Nothing
Set rs_Concepto = Nothing
Set rs_TipoPar = Nothing
Set rs_con_for_tpa = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_338(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Cargar una novedad fija "1" para un concepto configurable.
'              Archivos de Afiliación de AsoSykes
'              El formato es:
'              NroEmpleado EntidadDeductora Columna3 Columna4 CodigoDeduccion
'              Sin embargo los datos importantes son: Legajo
' Autor      : Manterola Maria Magdalena
' Fecha      : 31/01/2011
' Modificación : 23/02/2011 Se modificó el numero del reporte por el numero 311
'                06/04/2011 Se modificó el número de modelo 331 por el número 338
'                19/04/2011 Gonzalez Nicolás - Se Agregó funcion Firmas_novliq() - Validación de Firmas + Listas de firmantes
'                12/05/2011 Gonzalez Nicolás - Se agregó validación en VALIDO QUE ESTE ACTIVO EL CIRCUITO
'                10/06/2011 Gonzalez Nicolás - Se agregó listaConceptosPermitidos()
'                20/08/2013 - Gonzalez Nicolás - Se corrigió parametro en llamada a getLastIdentity()
' ---------------------------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As Long
Dim fornro As Long

Dim tpanro As Long
Dim Monto As Single

Dim Aux As String
Dim Encontro As Boolean

'Dim perfsegcon As Integer
Dim tienePermiso As Boolean

Dim rs As New ADODB.Recordset
Dim rs_Empleado As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim rs_TipoPar As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset
Dim rs_seguridad As New ADODB.Recordset
Dim rs_Confrep As New ADODB.Recordset
Dim campos

'Para el circ. de firmas
Dim gnovnro
Dim Firmas
Dim firmas_ok
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim cystipnro

cystipnro = 5

On Error GoTo Manejador_De_Error

' El formato es:
' NroEmpleado EntidadDeductora Columna3 Columna4 CodigoDeduccion
    
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    '===============================================
    'NUMERO DE EMPLEADO - UNICO DATO QUE ME INTERESA
    '===============================================
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
    
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
        
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
    
' ====================================================================
' CONFREP
' ====================================================================
StrSql = "SELECT * FROM confrep where confrep.repnro = 313 ORDER BY confnrocol"
OpenRecordset StrSql, rs_Confrep
    
If rs_Confrep.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "Falta configurar el concepto en el reporte 313 "
    FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": Falta configurar el concepto en el reporte 313 "
    InsertaError 0, 106
    HuboError = True
    Exit Sub
Else
    Do While Not rs_Confrep.EOF
        Select Case UCase(Trim(rs_Confrep!conftipo))
            Case "CO": 'CONCEPTO
                
                ConcCod = rs_Confrep!Confval
                
            Case "PA": 'PARAMETRO DONDE PODER CARGAR LA NOVEDAD
            
                tpanro = rs_Confrep!Confval
                
        End Select
            
    rs_Confrep.MoveNext
    Loop

End If

' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'Que exista el concepto
StrSql = "SELECT * FROM concepto WHERE conccod = " & ConcCod
'StrSql = StrSql & " OR conccod = '" & Conccod & "'"
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
    fornro = rs_Concepto!fornro
End If

'Que exista el tipo de Parametro
StrSql = "SELECT * FROM tipopar WHERE tpanro = " & tpanro
OpenRecordset StrSql, rs_TipoPar

If rs_TipoPar.EOF Then
    Texto = ": " & "No se encontro el Tipo de Parametro " & tpanro
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
End If

'Reviso que el par concepto-parametro se resuelva por novedad
StrSql = "SELECT * FROM con_for_tpa "
StrSql = StrSql & " WHERE concnro = " & ConcNro
StrSql = StrSql & " AND fornro =" & fornro
StrSql = StrSql & " AND tpanro =" & tpanro
OpenRecordset StrSql, rs_con_for_tpa

If rs_con_for_tpa.EOF Then
    Texto = ": " & "El parametro " & tpanro & " no esta asociado a la formula del concepto " & ConcCod
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
Else
    Encontro = False
    Do While Not Encontro And Not rs_con_for_tpa.EOF
        If Not CBool(rs_con_for_tpa!cftauto) Then
            Encontro = True
        End If
        rs_con_for_tpa.MoveNext
    Loop
    If Not Encontro Then
        Texto = ": " & "El parametro " & tpanro & " del concepto " & ConcCod & " no se resuelve por novedad "
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(3, 11)
        HuboError = True
        Exit Sub
    End If
End If

'------------------------------------------------
'VALIDA QUE EL USUARIO TENGA ACTIVO EL CONCEPTO
If listaConceptosPermitidos(ConcCod) = True Then
    tienePermiso = True
Else
    tienePermiso = False
End If
 
If tienePermiso = False Then
  Texto = ": El usuario:" & usuario & " no tiene autorización sobre el concepto:" & ConcCod
  Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
  HuboError = True
End If
'------------------------------------------------

'VALIDO QUE ESTE ACTIVO EL CIRCUITO
StrSql = "SELECT cystipact FROM cystipo "
StrSql = StrSql & "WHERE cystipnro = " & cystipnro & " AND cystipact = -1"
OpenRecordset StrSql, rs
If Not rs.EOF Then
'SI ESTA ACTIVO LLAMO LA FNC Firmas_novliq()
    firmas_ok = Split(Firmas_novliq(usuario, cystipnro, ConcCod, 1), ",")
    cysfirautoriza = firmas_ok(0)
    cysfirusuario = firmas_ok(1)
    cysfirdestino = firmas_ok(2)
    cysfirfin = firmas_ok(3)
    cysfiryaaut = firmas_ok(4)
    cysfirrecha = firmas_ok(5)

    If cysfirautoriza = "" And cysfirusuario = "" And cysfirdestino = "" And cysfirfin = 0 And cysfiryaaut = 0 And cysfirrecha = 0 Then
        Firmas = ""
    Else
        Firmas = "OK"
    End If
Else
    Firmas = ""
End If
rs.Close


' ====================================================================
' INSERTAR O ACTUALIZAR LA NOVEDAD
' ====================================================================
StrSql = "SELECT * FROM novemp WHERE "
StrSql = StrSql & " concnro = " & ConcNro
StrSql = StrSql & " AND tpanro = " & tpanro
StrSql = StrSql & " AND empleado = " & Tercero
StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
StrSql = StrSql & " ORDER BY nevigencia "
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
OpenRecordset StrSql, rs_NovEmp
Monto = 1
If Not rs_NovEmp.EOF Then
    'Existe una novedad  ==> Actualizo
    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
            " WHERE concnro = " & ConcNro & _
            " AND tpanro = " & tpanro & _
            " AND empleado = " & Tercero
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad Actualizada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
Else
    'Inserto
    StrSql = "INSERT INTO novemp (" & _
            "empleado,concnro,tpanro,nevalor,nevigencia" & _
            ") VALUES (" & Tercero & _
            "," & ConcNro & _
            "," & tpanro & _
            "," & Monto & _
            ",0" & _
            " )"
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)


    gnovnro = getLastIdentity(objConn, "novemp")
    'NG - 20/08/2013
    'gnovnro = getLastIdentity(objConn, "gnovnro")

    If Firmas = "OK" Then
        ' ====================================================================
        'INSERTO EN cysfirmas
        ' ====================================================================
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & gnovnro & ",1,'Novedad desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If

End If

Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close
If rs_TipoPar.State = adStateOpen Then rs_TipoPar.Close
If rs_con_for_tpa.State = adStateOpen Then rs_con_for_tpa.Close

Set rs = Nothing
Set rs_NovEmp = Nothing
Set rs_Empleado = Nothing
Set rs_Concepto = Nothing
Set rs_TipoPar = Nothing
Set rs_con_for_tpa = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_339_old(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Inserta registros en novedades de liquidación.
'              Importación Banco Popular
'              Formato: .txt delimitado por ancho fijo
' Autor      : Gonzalez Nicolás
' Fecha      : 18/04/2011
' ---------------------------------------------------------------------------------------------------------------
   
Dim Encontro As Boolean

Dim perfsegcon As Integer
Dim tienePermiso As Integer


Dim rs_TipoPar As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset

Dim remplazo
'-------------------------
Dim rs As New ADODB.Recordset
Dim rs_Confrep As New ADODB.Recordset
Dim rs_seguridad As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim tidnro
Dim Tercero
Dim Cedula
Dim Periodo
Dim Monto
Dim ConcCod As Long
Dim ConcNro As Long
Dim tpanro As Long
Dim fornro As Long
Dim Esfin
Dim cystipnro

'Circ Firmas
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim gnovnro

'Lista del complemento
Dim cyslfirmnro
Dim l_listperfnro_aux
Dim l_listperfnro
Dim l_lista
Dim StrSql_aux
Dim a
Dim tipoorigen
Dim listestrnro
Dim Tenro
Dim cyslfirmdetnro

cysfirautoriza = usuario
cystipnro = 5

'Valida tipo de cedula 1 en ter_doc
tidnro = 1


On Error GoTo Manejador_De_Error

' El formato es:
'CEDULA (10) NOMBRE (30) PERIODO(6) MONTO (8)
    
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    
    'Guardo los datos
    Cedula = Int(Left(strLinea, 10))
    Periodo = Mid(strLinea, 41, 6)
    Monto = Int(Mid(strLinea, 47, 8))
    
    '===============================================
    'QUE MONTO SEA VALIDO
    '===============================================
    If IsNumeric(Monto) = False Then
        Texto = ": " & "El Monto no es numérico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 3)
        HuboError = True
        Exit Sub
    End If
       
    '===============================================
    'QUE EXISTA CEDULA ASOCIADA AL EMPLEADO
    '===============================================
    If IsNumeric(Cedula) = False Then
        Texto = ": " & "El N° de cédula no es numérico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 31)
        HuboError = True
        Exit Sub
    End If
    
    
    StrSql = "SELECT ternro FROM ter_doc "
    StrSql = StrSql & " WHERE nrodoc = '" & Cedula & "'"
    StrSql = StrSql & " AND tidnro = " & tidnro
    OpenRecordset StrSql, rs
    If rs.EOF Then
        Texto = ": " & "No existe empleado con cédula Nº: " & Cedula
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 31)
        HuboError = True
        Exit Sub
    Else
        Tercero = rs!Ternro
    End If
    rs.Close
          
    '------------------------


' ====================================================================
' CONFREP
' ====================================================================
StrSql = "SELECT * FROM confrep where confrep.repnro = 339 ORDER BY confnrocol"
OpenRecordset StrSql, rs_Confrep
    
If rs_Confrep.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "Falta configurar el concepto/parametro en el reporte 339 "
    FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": Falta configurar el concepto en el reporte 339 "
    InsertaError 0, 106
    HuboError = True
    Exit Sub
Else
    Do While Not rs_Confrep.EOF
        Select Case UCase(Trim(rs_Confrep!conftipo))
            Case "CO": 'CONCEPTO
                
                ConcCod = rs_Confrep!Confval
                
            Case "PA": 'PARAMETRO DONDE PODER CARGAR LA NOVEDAD
            
                tpanro = rs_Confrep!Confval
                
        End Select
            
    rs_Confrep.MoveNext
    Loop

End If

' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================
'Si existe concepto
StrSql = "SELECT * FROM concepto WHERE conccod = " & ConcCod
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
    fornro = rs_Concepto!fornro
End If

'Si existe tipo de Parametro
StrSql = "SELECT * FROM tipopar WHERE tpanro = " & tpanro
OpenRecordset StrSql, rs_TipoPar

If rs_TipoPar.EOF Then
    Texto = ": " & "No se encontro el Tipo de Parametro " & tpanro
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
End If

'Reviso que el par concepto-parametro se resuelva por novedad
StrSql = "SELECT * FROM con_for_tpa "
StrSql = StrSql & " WHERE concnro = " & ConcNro
StrSql = StrSql & " AND fornro =" & fornro
StrSql = StrSql & " AND tpanro =" & tpanro
OpenRecordset StrSql, rs_con_for_tpa

If rs_con_for_tpa.EOF Then
    Texto = ": " & "El parametro " & tpanro & " no esta asociado a la formula del concepto " & ConcCod
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
Else
    Encontro = False
    Do While Not Encontro And Not rs_con_for_tpa.EOF
        If Not CBool(rs_con_for_tpa!cftauto) Then
            Encontro = True
        End If
        rs_con_for_tpa.MoveNext
    Loop
    If Not Encontro Then
        Texto = ": " & "El parametro " & tpanro & " del concepto " & ConcCod & " no se resuelve por novedad "
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(3, 11)
        HuboError = True
        Exit Sub
    End If
End If

' Verifico que el usuario tenga el nivel de seguridad para insertar la novedad
' StrSql = "SELECT perf_usr.perfsegcon, user_per.iduser FROM user_per "
'StrSql = StrSql & "INNER JOIN perf_usr ON user_per.perfnro = perf_usr.perfnro "
' StrSql = StrSql & "WHERE user_per.iduser = '" & usuario & "'"
' OpenRecordset StrSql, rs_seguridad

' If rs_seguridad.EOF Then
'        perfsegcon = 0
' Else
'   If IsNull(rs_seguridad!perfsegcon) Then
 '       perfsegcon = 0
'   Else
'        perfsegcon = rs_seguridad!perfsegcon
'   End If
' End If
        
 'rs_seguridad.Close
 
 ' Busco el nivel de seguridad del concepto
' StrSql = "SELECT codseguridad FROM concepto "
' StrSql = StrSql & " WHERE concepto.conccod=" & Conccod
' OpenRecordset StrSql, rs_seguridad
 
 'If Not (IsNull(rs_seguridad!codseguridad)) Then
  '      If rs_seguridad!codseguridad <= CInt(perfsegcon) Then
'            tienePermiso = True
 '       Else
  '          tienePermiso = False
 '       End If
 'Else
  '      tienePermiso = True
' End If

' rs_seguridad.Close



'If tienePermiso = False Then
  ''Texto = ": El usuario:" & usuario & " tiene autorización sobre el concepto:" & Conccod
  ''Call Escribir_Log("floge", NroLinea, nrocolumna, Texto, Tabs, strLinea)
'Else
 ' Texto = ": El usuario:" & usuario & " no tiene autorización sobre el concepto:" & Conccod
 ' Call Escribir_Log("floge", NroLinea, Nrocolumna, Texto, Tabs, strLinea)
 ' HuboError = True
'End If



'=====================================
'FIN DE FIRMA
'=====================================
StrSql = "SELECT * FROM cysfincirc "
StrSql = StrSql & " WHERE userid = '" & usuario & "' and cystipnro = " & cystipnro
OpenRecordset StrSql, rs_seguridad
If Not rs_seguridad.EOF Then
    Esfin = True
    cysfirusuario = usuario
    cysfirautoriza = usuario
    cysfirdestino = ""
    cysfirfin = -1
    cysfiryaaut = -1
    cysfirrecha = 0


Else
    Esfin = False
End If
rs_seguridad.Close

If Esfin = False Then
    '=====================================
    'QUE TENGA DELEGADO UN PERMISO
    '=====================================
    StrSql = "SELECT bk_cab.iduser, bkcystipnro "
    StrSql = StrSql & " From bk_cab "
    StrSql = StrSql & " INNER JOIN bk_firmas on bk_firmas.bkcabnro = bk_cab.bkcabnro "
    StrSql = StrSql & " Where fdesde <= " & ConvFecha(Date)
    StrSql = StrSql & " AND (fhasta >= " & ConvFecha(Date) & " OR fhasta IS NULL)"
    StrSql = StrSql & " AND bk_firmas.iduser = '" & usuario & "'"
    StrSql = StrSql & " AND bkcystipnro = " & cystipnro
    OpenRecordset StrSql, rs_seguridad
    
    If Not rs_seguridad.EOF Then
        Esfin = True
        cysfirusuario = rs_seguridad!iduser
        cysfirautoriza = usuario
        cysfirdestino = ""
        
        cysfirfin = -1
        cysfiryaaut = -1
        cysfirrecha = 0
    Else
        Esfin = False
    End If
    rs_seguridad.Close
End If
'-----

If Esfin = False Then
'Si no es fin de firma valida que tenga asociado un complemento a la lista
'y determina el primer usuario de la lista como siguiente en el circuito
    StrSql = "SELECT cyscompdet.cyslfirmnro,cyscomp.cyscomtipnro,cyslfirmantes_det.tipoorigen,cyslfirmantes_det.cyslfirmdetnro,orden,cyscomdetdesc "
    StrSql = StrSql & " FROM cyscomp "
    StrSql = StrSql & " INNER JOIN cyscompdet ON cyscompdet.cyscomnro = cyscomp.cyscomnro "
    StrSql = StrSql & " INNER JOIN cyslfirmantes_det ON cyslfirmantes_det.cyslfirmnro = cyscompdet.cyslfirmnro "
    StrSql = StrSql & " Where cystipnro = " & cystipnro
    StrSql = StrSql & " AND cyscomdetdesc = " & ConcCod
    StrSql = StrSql & " AND orden = 1"
    OpenRecordset StrSql, rs_seguridad

    If Not rs_seguridad.EOF Then
        tipoorigen = rs_seguridad!tipoorigen
        cyslfirmnro = rs_seguridad!cyslfirmnro
        cyslfirmdetnro = rs_seguridad!cyslfirmdetnro
    Else
        'VER TABLA INERROR CARGAR NUEVO PARA ESTE
        Texto = ": " & "No existe complemento asociado a una lista "
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(3, 11)
        HuboError = True
        Exit Sub
    End If
    rs_seguridad.Close
    
    If tipoorigen <> "" Then
    'Selecciona el primer usuario dependiendo del tipo de lista
    Select Case tipoorigen
                Case 1: 'Perfiles----------------------------------------
                    StrSql = "SELECT cyslfirmantes_det_perf.listperfnro "
                    StrSql = StrSql & " FROM cyslfirmantes_det "
                    StrSql = StrSql & " INNER JOIN cyslfirmantes_det_perf ON cyslfirmantes_det_perf.cyslfirmdetperfnro = cyslfirmantes_det.detorigen "
                    StrSql = StrSql & " WHERE cyslfirmantes_det.cyslfirmnro = " & cyslfirmnro
                    StrSql = StrSql & " AND cyslfirmantes_det.orden = 1 "
                    OpenRecordset StrSql, rs_seguridad
                    If Not rs_seguridad.EOF Then
                        l_listperfnro_aux = rs_seguridad!listperfnro
                    Else
                        l_listperfnro_aux = ""
                    End If
                    rs_seguridad.Close
                    
                    If l_listperfnro_aux <> "" Then
                        l_listperfnro = Split(l_listperfnro_aux, ",")
                        '----Crea la lista
                        StrSql = "SELECT iduser,listperfnro "
                        StrSql = StrSql & " FROM  user_perfil "
                        StrSql = StrSql & " WHERE ',' + listperfnro + ',' like '%," & l_listperfnro(0) & ",%'"
                        If UBound(l_listperfnro) > 0 Then
                            For a = 1 To UBound(l_listperfnro)
                                StrSql_aux = StrSql_aux & " OR ',' + listperfnro + ',' like '%," & l_listperfnro(a) & ",%' "
                            Next
                        End If
                        StrSql = StrSql & StrSql_aux
                        OpenRecordset StrSql, rs_seguridad
            
                        If Not rs_seguridad.EOF Then
                        'Guarda el primer usuario de la lista
                            cysfirusuario = usuario
                            cysfirautoriza = usuario
                            cysfirdestino = rs_seguridad!iduser
                            
                            cysfirfin = 0
                            cysfiryaaut = 0
                            cysfirrecha = 0
                        Else
                            'VER TABLA INERROR CARGAR NUEVO PARA ESTE
                            Texto = ": " & "No se encuentran usuarios con perfil "
                            NroColumna = 3
                            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                            Call InsertaError(3, 11)
                            HuboError = True
                            Exit Sub
                        
                        End If
                        rs_seguridad.Close
                    End If
                 Case 2: 'Usuarios ---------------------------------------------
                    StrSql = "SELECT iduser FROM cyslfirmantes "
                    StrSql = StrSql & " INNER JOIN cyslfirmantes_det ON cyslfirmantes_det.cyslfirmnro = cyslfirmantes.cyslfirmnro "
                    StrSql = StrSql & " INNER JOIN cyslfirmantes_det_usr ON cyslfirmantes_det_usr.cyslfirmdetnro = cyslfirmantes_det.cyslfirmdetnro "
                    StrSql = StrSql & " WHERE cyslfirmantes.cyslfirmnro = " & cyslfirmnro
                    StrSql = StrSql & " AND orden = 1"
                    OpenRecordset StrSql, rs_seguridad
                    If Not rs_seguridad.EOF Then
                        'Guarda el primer usuario de la lista
                         cysfirusuario = usuario
                         cysfirautoriza = usuario
                         cysfirdestino = rs_seguridad!iduser
                            
                         cysfirfin = 0
                         cysfiryaaut = 0
                         cysfirrecha = 0
       
                    Else
                        'VER TABLA INERROR CARGAR NUEVO PARA ESTE
                        Texto = ": " & "No se encuentran usuarios en la lista "
                        NroColumna = 3
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Call InsertaError(3, 11)
                        HuboError = True
                        Exit Sub
                    End If
                    rs_seguridad.Close
                Case 3: 'Reporta A: -------------------------------------------------------------
                    StrSql = "SELECT urepo.iduser "
                    StrSql = StrSql & " FROM user_ter "
                    StrSql = StrSql & " INNER JOIN v_empleado ON v_empleado.ternro = user_ter.ternro "
                    StrSql = StrSql & " AND user_ter.iduser = '" & usuario & "'"
                    StrSql = StrSql & " AND v_empleado.empest= -1 "
                    StrSql = StrSql & " INNER JOIN v_empleado repo ON repo.ternro = v_empleado.empreporta "
                    StrSql = StrSql & " AND repo.empest = -1"
                    StrSql = StrSql & " INNER JOIN user_ter urepo ON urepo.ternro = repo.ternro "
                    OpenRecordset StrSql, rs_seguridad
                    
                    If Not rs_seguridad.EOF Then
                        'Guarda el primer usuario de la lista
                         cysfirusuario = usuario
                         cysfirautoriza = usuario
                         cysfirdestino = rs_seguridad!iduser
                            
                         cysfirfin = 0
                         cysfiryaaut = 0
                         cysfirrecha = 0
       
                    Else
                        'VER TABLA INERROR CARGAR NUEVO PARA ESTE
                        Texto = ": " & "No se encuentran usuarios Reporta a: en la lista "
                        NroColumna = 3
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Call InsertaError(3, 11)
                        HuboError = True
                        Exit Sub
                    End If
                    rs_seguridad.Close
                Case 4: 'Busco lista de estructuras --------------------------------
                    
                    StrSql = "SELECT listestrnro,tenro FROM cyslfirmantes_det_estr "
                    StrSql = StrSql & " WHERE cyslfirmdetnro = " & cyslfirmdetnro
                    OpenRecordset StrSql, rs_seguridad
                    If Not rs_seguridad.EOF Then
                        listestrnro = rs_seguridad!listestrnro
                        Tenro = rs_seguridad!Tenro
                                       
                    End If
                    rs_seguridad.Close
                    'Busco lista de usuarios
                    StrSql = "SELECT user_ter.iduser FROM v_empleado "
                    StrSql = StrSql & " INNER JOIN his_estructura ON his_estructura.ternro = v_empleado.ternro "
                    StrSql = StrSql & " AND his_estructura.tenro = " & Tenro
                    StrSql = StrSql & " AND (his_estructura.htethasta IS NULL OR his_estructura.htethasta >= " & ConvFecha(Date) & ") "
                    StrSql = StrSql & " AND his_estructura.htetdesde <= " & ConvFecha(Date) & ""
                    StrSql = StrSql & " AND his_estructura.estrnro IN (" & listestrnro & ") AND v_empleado.empest= -1"
                    StrSql = StrSql & " INNER JOIN user_ter ON user_ter.ternro = v_empleado.ternro"
                    OpenRecordset StrSql, rs_seguridad
                    If Not rs_seguridad.EOF Then
                        'Guarda el primer usuario de la lista
                         cysfirusuario = usuario
                         cysfirautoriza = usuario
                         cysfirdestino = rs_seguridad!iduser
                            
                         cysfirfin = 0
                         cysfiryaaut = 0
                         cysfirrecha = 0
                     Else
                        'VER TABLA INERROR CARGAR NUEVO PARA ESTE
                        Texto = ": " & "No se encuentran usuarios por Estructura en la lista "
                        NroColumna = 3
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Call InsertaError(3, 11)
                        HuboError = True
                        Exit Sub
                    End If
                    rs_seguridad.Close
                    
        
            End Select
    
    End If 'Cierra tipoorigen <> ""
    

End If



' ====================================================================
' INSERTAR O ACTUALIZAR LA NOVEDAD
' ====================================================================
StrSql = "SELECT * FROM novemp WHERE "
StrSql = StrSql & " concnro = " & ConcNro
StrSql = StrSql & " AND tpanro = " & tpanro
StrSql = StrSql & " AND empleado = " & Tercero
StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
StrSql = StrSql & " ORDER BY nevigencia "
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
OpenRecordset StrSql, rs_NovEmp
'Monto = 1
If Not rs_NovEmp.EOF And remplazo <> 0 Then
    'Existe una novedad  -> Actualizo
    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
            " WHERE concnro = " & ConcNro & _
            " AND tpanro = " & tpanro & _
            " AND empleado = " & Tercero
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad Actualizada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
Else
    'Insert
    StrSql = "INSERT INTO novemp (" & _
            "empleado,concnro,tpanro,nevalor,nevigencia" & _
            ") VALUES (" & Tercero & _
            "," & ConcNro & _
            "," & tpanro & _
            "," & Monto & _
            ",0" & _
            " )"
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)

    'Guarda ID del Ûlt. registro ingresado
    gnovnro = getLastIdentity(objConn, "gnovnro")

    ' ====================================================================
    'INSERTO EN cysfirmas
    ' ====================================================================
    StrSql = "INSERT INTO cysfirmas ("
    StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
    StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
    StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
    StrSql = StrSql & ")"
    StrSql = StrSql & "VALUES("
    StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
    StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & gnovnro & ",1,'Novedad desde interfaz'"
    StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
    StrSql = StrSql & ")"
    
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Autorización insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)


End If

Fin:

If rs_seguridad.State = adStateOpen Then rs_seguridad.Close
If rs_Confrep.State = adStateOpen Then rs_Confrep.Close
If rs.State = adStateOpen Then rs.Close

Set rs_seguridad = Nothing
Set rs_Confrep = Nothing
Set rs = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_339(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Inserta registros en novedades de liquidación.
'              Importación Banco Popular
'              Formato: .txt delimitado por ancho fijo
' Autor      : Gonzalez Nicolás
' Fecha      : 18/04/2011
' Ult. Modifi: 10/06/2011 Gonzalez Nicolás - Se agregó listaConceptosPermitidos()
'              20/08/2013 - Gonzalez Nicolás - Se corrigió parametro en llamada a getLastIdentity()
' ---------------------------------------------------------------------------------------------------------------
   
Dim Encontro As Boolean

'Dim perfsegcon As Integer
Dim tienePermiso As Boolean

Dim rs_TipoPar As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset

Dim remplazo
'-------------------------
Dim rs As New ADODB.Recordset
Dim rs_Confrep As New ADODB.Recordset
Dim rs_seguridad As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim tidnro
Dim Tercero
Dim Cedula
Dim Periodo
Dim Monto
Dim ConcCod As Long
Dim ConcNro As Long
Dim tpanro As Long
Dim fornro As Long
Dim Esfin
Dim cystipnro

'Circ Firmas
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim gnovnro

'Lista del complemento
Dim cyslfirmnro
Dim l_listperfnro_aux
Dim l_listperfnro
Dim l_lista
Dim StrSql_aux
Dim a
Dim tipoorigen
Dim listestrnro
Dim Tenro
Dim cyslfirmdetnro

Dim Firmas
Dim firmas_ok

cysfirautoriza = usuario
cystipnro = 5

'Valida tipo de cedula 1 en ter_doc
tidnro = 1


On Error GoTo Manejador_De_Error

' El formato es:
'CEDULA (10) NOMBRE (30) PERIODO(6) MONTO (8)
    
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    
    'Guardo los datos
    Cedula = Int(Left(strLinea, 10))
    Periodo = Mid(strLinea, 41, 6)
    Monto = Int(Mid(strLinea, 47, 8))
    
    '===============================================
    'QUE MONTO SEA VALIDO
    '===============================================
    If IsNumeric(Monto) = False Then
        Texto = ": " & "El Monto no es numérico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 3)
        HuboError = True
        Exit Sub
    End If
       
    '===============================================
    'QUE EXISTA CEDULA ASOCIADA AL EMPLEADO
    '===============================================
    If IsNumeric(Cedula) = False Then
        Texto = ": " & "El N° de cédula no es numérico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 31)
        HuboError = True
        Exit Sub
    End If
    
    
    StrSql = "SELECT ternro FROM ter_doc "
    StrSql = StrSql & " WHERE nrodoc = '" & Cedula & "'"
    StrSql = StrSql & " AND tidnro = " & tidnro
    OpenRecordset StrSql, rs
    If rs.EOF Then
        Texto = ": " & "No existe empleado con cédula Nº: " & Cedula
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 31)
        HuboError = True
        Exit Sub
    Else
        Tercero = rs!Ternro
    End If
    rs.Close
          
    '------------------------


' ====================================================================
' CONFREP
' ====================================================================
StrSql = "SELECT * FROM confrep where confrep.repnro = 339 ORDER BY confnrocol"
OpenRecordset StrSql, rs_Confrep
    
If rs_Confrep.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "Falta configurar el concepto/parametro en el reporte 339 "
    FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": Falta configurar el concepto en el reporte 339 "
    InsertaError 0, 106
    HuboError = True
    Exit Sub
Else
    Do While Not rs_Confrep.EOF
        Select Case UCase(Trim(rs_Confrep!conftipo))
            Case "CO": 'CONCEPTO
                
                ConcCod = rs_Confrep!Confval
                
            Case "PA": 'PARAMETRO DONDE PODER CARGAR LA NOVEDAD
            
                tpanro = rs_Confrep!Confval
                
        End Select
            
    rs_Confrep.MoveNext
    Loop

End If

' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================
'Si existe concepto
StrSql = "SELECT * FROM concepto WHERE conccod = " & ConcCod
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
    fornro = rs_Concepto!fornro
End If

'Si existe tipo de Parametro
StrSql = "SELECT * FROM tipopar WHERE tpanro = " & tpanro
OpenRecordset StrSql, rs_TipoPar

If rs_TipoPar.EOF Then
    Texto = ": " & "No se encontro el Tipo de Parametro " & tpanro
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
End If

'Reviso que el par concepto-parametro se resuelva por novedad
StrSql = "SELECT * FROM con_for_tpa "
StrSql = StrSql & " WHERE concnro = " & ConcNro
StrSql = StrSql & " AND fornro =" & fornro
StrSql = StrSql & " AND tpanro =" & tpanro
OpenRecordset StrSql, rs_con_for_tpa

If rs_con_for_tpa.EOF Then
    Texto = ": " & "El parametro " & tpanro & " no esta asociado a la formula del concepto " & ConcCod
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
Else
    Encontro = False
    Do While Not Encontro And Not rs_con_for_tpa.EOF
        If Not CBool(rs_con_for_tpa!cftauto) Then
            Encontro = True
        End If
        rs_con_for_tpa.MoveNext
    Loop
    If Not Encontro Then
        Texto = ": " & "El parametro " & tpanro & " del concepto " & ConcCod & " no se resuelve por novedad "
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(3, 11)
        HuboError = True
        Exit Sub
    End If
End If

'------------------------------------------------
'VALIDA QUE EL USUARIO TENGA ACTIVO EL CONCEPTO
If listaConceptosPermitidos(ConcCod) = True Then
    tienePermiso = True
Else
    tienePermiso = False
End If
 
If tienePermiso = False Then
  Texto = ": El usuario:" & usuario & " no tiene autorización sobre el concepto:" & ConcCod
  Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
  HuboError = True
End If
'------------------------------------------------


'VALIDO QUE ESTE ACTIVO EL CIRCUITO
StrSql = "SELECT cystipact FROM cystipo "
StrSql = StrSql & "WHERE cystipnro = " & cystipnro & " AND cystipact = -1"
OpenRecordset StrSql, rs
If Not rs.EOF Then
'SI ESTA ACTIVO LLAMO LA FNC Firmas_novliq()
    Firmas = Split(Firmas_novliq(usuario, cystipnro, ConcCod, 1), ",")
    cysfirautoriza = Firmas(0)
    cysfirusuario = Firmas(1)
    cysfirdestino = Firmas(2)
    cysfirfin = Firmas(3)
    cysfiryaaut = Firmas(4)
    cysfirrecha = Firmas(5)
    If cysfirautoriza = "" And cysfirusuario = "" And cysfirdestino = "" And cysfirfin = 0 And cysfiryaaut = 0 And cysfirrecha = 0 Then
        firmas_ok = ""
    Else
        firmas_ok = "OK"
    End If
Else
    firmas_ok = ""
End If


' ====================================================================
' INSERTAR O ACTUALIZAR LA NOVEDAD
' ====================================================================
StrSql = "SELECT * FROM novemp WHERE "
StrSql = StrSql & " concnro = " & ConcNro
StrSql = StrSql & " AND tpanro = " & tpanro
StrSql = StrSql & " AND empleado = " & Tercero
StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
StrSql = StrSql & " ORDER BY nevigencia "
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
OpenRecordset StrSql, rs_NovEmp
'Monto = 1
If Not rs_NovEmp.EOF And remplazo <> 0 Then
    'Existe una novedad  -> Actualizo
    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
            " WHERE concnro = " & ConcNro & _
            " AND tpanro = " & tpanro & _
            " AND empleado = " & Tercero
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad Actualizada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
Else
    'Insert
    StrSql = "INSERT INTO novemp (" & _
            "empleado,concnro,tpanro,nevalor,nevigencia" & _
            ") VALUES (" & Tercero & _
            "," & ConcNro & _
            "," & tpanro & _
            "," & Monto & _
            ",0" & _
            " )"
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)

    'Guarda ID del Ûlt. registro ingresado
    'NG - 20/08/2013
    gnovnro = getLastIdentity(objConn, "novemp")
    'gnovnro = getLastIdentity(objConn, "gnovnro")

    If firmas_ok <> "" Then
        ' ====================================================================
        'INSERTO EN cysfirmas
        ' ====================================================================
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & gnovnro & ",1,'Novedad desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If


End If

Fin:

If rs_seguridad.State = adStateOpen Then rs_seguridad.Close
If rs_Confrep.State = adStateOpen Then rs_Confrep.Close
If rs.State = adStateOpen Then rs.Close

Set rs_seguridad = Nothing
Set rs_Confrep = Nothing
Set rs = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_333()
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Novedades Horarias'
'              lo que hace la interfaz es actualizar el nro de tercero y proceso
' Autor      : FGZ
' Fecha      : 07/04/2011 - Redefinicion del modelo
' Ult Mod    : 13/04/2011 - en el campo idtarjeta
'              13/12/2011 - Manterola Maria Magdalena - Se agregó la actualización del progreso y además se muestra un mensaje de error
'                           en caso que el idtarjeta no sea el legajo. Debe ser el legajo para Sykes!
' ---------------------------------------------------------------------------------------------------------------
'Dim pos1 As Long
'Dim pos2 As Long
    
'Dim Tercero As Long
'Dim NroLegajo As Long
'Dim notifNro As Long
Dim NroColumna As Integer

Dim I As Integer
'Dim objHora As New FechasHoras

'Dim Laborable As Boolean


Dim rs_WC As New ADODB.Recordset
Dim objRs As New ADODB.Recordset

On Error GoTo Manejador_De_Error

' El formato es:
'       Se lee de la tabla WC_MOV_HORARIOS

    'CREATE TABLE [dbo].[WC_MOV_HORARIOS](
    '      [bpronro] [int] NOT NULL CONSTRAINT [DF_WC_MOV_HORARIOS_bpronro]  DEFAULT ((0)),
    '      [idtarjeta] [varchar](30) NOT NULL,
    '      [tiptarnro] [int] NOT NULL,
    '      [ternro] [int] NULL,
    '      [fechor] [datetime] NOT NULL,
    '      [fecinidia] [datetime] NOT NULL,
    '      [fecfindia] [datetime] NOT NULL,
    '      [horini] [varchar](4)  NOT NULL,
    '      [horfin] [varchar](4)  NOT NULL,
    '      [desmin] [int] NOT NULL CONSTRAINT [DF_WC_MOV_HORARIOS_desmin]  DEFAULT ((0)),
    '      [legautor] [int] NOT NULL,
    '      [manual] [smallint] NOT NULL CONSTRAINT [DF_Table_1_legmanual]  DEFAULT ((0)),
    '      [fecdesde] [datetime] NOT NULL,
    '      [FecHasta] Not [DateTime]
    ') ON [PRIMARY]
    'GO

'tarActual = 0
'SemanaActual = 0



StrSql = "SELECT * FROM WC_MOV_HORARIOS WHERE bpronro = 0"
'StrSql = StrSql = " ORDER BY fecdesde, FecHasta, idtarjeta, fechor, fecinidia"
OpenRecordset StrSql, rs_WC

'Determino la proporcion de progreso
Progreso = 0
CEmpleadosAProc = rs_WC.RecordCount
If CEmpleadosAProc = 0 Then
    CEmpleadosAProc = 1
End If
IncPorc = (99 / CEmpleadosAProc)

Do While Not rs_WC.EOF
    'FGZ - 13/04/2011 - en el campo idtarjeta va a venir el nro de legajo ----------------
    'StrSql = "SELECT ternro FROM gti_histarjeta WHERE tptrnro = " & rs_WC!tiptarnro & " AND hstjnrotar = '" & rs_WC!idtarjeta & "' AND (hstjfecdes <= " & ConvFecha(rs_WC!fechor) & ") AND ( (" & ConvFecha(rs_WC!fechor) & " <= hstjfechas) OR ( hstjfechas is null ))"
    If IsNumeric(rs_WC!idtarjeta) Then
        
        StrSql = "SELECT ternro FROM empleado WHERE empleg = " & rs_WC!idtarjeta
        OpenRecordset StrSql, objRs
        If Not objRs.EOF Then
            StrSql = "UPDATE WC_MOV_HORARIOS SET ternro = " & objRs!Ternro
            StrSql = StrSql & ", bpronro = " & NroProcesoBatch
            StrSql = StrSql & " WHERE idtarjeta = '" & rs_WC!idtarjeta & "'"
            StrSql = StrSql & " AND tiptarnro = " & rs_WC!tiptarnro
            StrSql = StrSql & " AND fechor = " & ConvFecha(rs_WC!fechor)
            StrSql = StrSql & " AND fecdesde = " & ConvFecha(rs_WC!fecDesde)
            StrSql = StrSql & " AND Fechasta = " & ConvFecha(rs_WC!fecHasta)
            StrSql = StrSql & " AND fecinidia = " & ConvFecha(rs_WC!fecinidia)
            objConn.Execute StrSql, , adExecuteNoRecords
        
        Else
            Texto = ": " & "No se encontro el legajo asociado a la tarjeta " & rs_WC!idtarjeta
            NroColumna = 1
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, rs_WC!idtarjeta)
            HuboError = True
        End If
        
    Else
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "ERROR - Tarjeta mal cargada: En el campo idtarjeta DEBE venir el nro de legajo"
        Flog.writeline
    End If
    
    'Incremento el progreso para que el servidor de aplicaciones no vea a este proceso
    'como colgado
    Progreso = Progreso + IncPorc
    Flog.writeline Espacios(Tabulador * 0) & "Progreso = " & CLng(Progreso) & " (Incremento = " & IncPorc & ")"
    StrSql = "UPDATE batch_proceso SET bprcprogreso = " & CLng(Progreso) & " WHERE bpronro = " & NroProcesoBatch
    objconnProgreso.Execute StrSql, , adExecuteNoRecords
    Flog.writeline Espacios(Tabulador * 0) & "Progreso actualizado"
        
siguiente_WC:
    rs_WC.MoveNext
Loop

Fin:
Exit Sub

Manejador_De_Error:
    HuboError = True
    
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable leyendo notificacion "
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub


Public Sub LineaModelo_333_old(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Novedades Horarias'
'              El formato es:
'              Empleado FechaDesde FechaHasta wdCantidadDias wd1lab wd1HDesde wd1HHasta wd1Pausa
' Autor      : Margiotta, Emanuel
' Fecha      : 10/02/2011
' ---------------------------------------------------------------------------------------------------------------
Dim datos() As String
Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long
Dim notifNro As Long
Dim NroColumna As Integer

Dim I As Integer
Dim objHora As New FechasHoras

Dim Laborable As Boolean

Dim rsDatos As New ADODB.Recordset




On Error GoTo Manejador_De_Error

' El formato es:
' Empleado FechaDesde FechaHasta wdCantidadDias wd1lab wd1HDesde wd1HHasta wd1Pausa
    
    datos = Split("0" & separador & strLinea, separador)
    
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    
    'Obtiene el número del empleado
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
    
    
' ====================================================================
' VALIDAR LOS DATOS LEVANTADOS
' ====================================================================

'Verifica que exita el legajo para la vista empleado del proceso
StrSql = "SELECT ternro FROM empleado WHERE ternro IN ( "
StrSql = StrSql & Replace(Sql_VistaEmpleado, ";", "") & ") AND empleg = " & NroLegajo
OpenRecordset StrSql, rsDatos

If rsDatos.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rsDatos!Ternro
    NroColumna = NroColumna + 1
    rsDatos.Close
End If


'Valida que la fecha desde sea valida
If Not IsDate(datos(NroColumna)) Then
    Texto = "Fecha no válida --> " & datos(NroColumna)
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    InsertaError 3, 4
    
    HuboError = True
    Exit Sub
    GoTo Fin
Else
    StrSql = "SELECT * FROM gti_notifhor "
    StrSql = StrSql & " WHERE ((fechadesde <= " & ConvFecha(datos(NroColumna)) & " AND fechahasta >= " & ConvFecha(datos(NroColumna)) & ")"
    StrSql = StrSql & " OR (fechadesde <= " & ConvFecha(datos(NroColumna)) & " AND fechahasta is null))"
    StrSql = StrSql & " AND ternro = " & Tercero
    OpenRecordset StrSql, rsDatos
    
    'EAM- Si es EOF no existe ninguna cabecera de notificación que comience antes y esté abierta
    If rsDatos.EOF Then
        rsDatos.Close
        If datos(NroColumna + 1) = "" Then
            StrSql = "SELECT * FROM gti_notifhor WHERE fechadesde > " & ConvFecha(datos(NroColumna))
            StrSql = StrSql & " AND ternro = " & Tercero
        Else
            StrSql = "SELECT * FROM gti_notifhor WHERE fechadesde < " & ConvFecha(datos(NroColumna + 1)) & " AND fechahasta > " & ConvFecha(datos(NroColumna + 1))
            StrSql = StrSql & " AND ternro = " & Tercero
        End If
        OpenRecordset StrSql, rsDatos
        If rsDatos.EOF Then
            NroColumna = NroColumna + 1
        Else
            Texto = "Se superpone las fechas con otra cabecera --> " & datos(NroColumna)
        End If
    Else
        If IsNull(rsDatos!FechaHasta) And datos(NroColumna) <> rsDatos!FechaDesde Then
            StrSql = "UPDATE gti_notifhor SET fechahasta= " & ConvFecha(DateAdd("d", -1, CDate(datos(NroColumna))))
            StrSql = StrSql & " WHERE notifnro = " & rsDatos!notifNro
            objConn.Execute StrSql, , adExecuteNoRecords

            NroColumna = NroColumna + 1
        Else
            Texto = "Se superpone las fechas con otra cabecera --> " & datos(NroColumna)
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            InsertaError 3, 133

            HuboError = True
            Exit Sub
            GoTo Fin
        End If
                
    End If
End If
    

'Valida que la fecha hasta sea valida o que sea Vacia
If Not datos(NroColumna) = "" Then
    If Not IsDate(datos(NroColumna)) Then
        Texto = "Fecha no válida --> " & datos(NroColumna)
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 3, 4
        GoTo Fin
    Else
        NroColumna = NroColumna + 1
    End If
Else
        NroColumna = NroColumna + 1
End If


'Valida que la cantidad de días sea un numero positivo
If Not IsNumeric(datos(NroColumna)) Then
    Texto = "Cant. de Día no válida --> " & datos(NroColumna)
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    InsertaError 3, 4
    GoTo Fin
    
Else
    If CInt(datos(NroColumna)) < 0 Then
    Texto = "Cant. de Día no válida --> " & datos(NroColumna)
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        InsertaError 3, 4
        GoTo Fin
    Else
        NroColumna = NroColumna + 1
    End If
End If

'EAM- Inicio de transaccion por si algun dato es incorrecto deshacer todo
MyBeginTrans

StrSql = "INSERT INTO gti_notifhor ( ternro,empleg,fechadesde,fechahasta,wdCantidaddias,idUser ) " & _
        " VALUES (" & Tercero & "," & NroLegajo & "," & ConvFecha(CDate(datos(2))) & ","
    If (datos(3) = "") Then
        StrSql = StrSql & "NULL"
    Else
        StrSql = StrSql & ConvFecha(CDate(datos(3)))
    End If
StrSql = StrSql & "," & CLng(datos(4)) & ",'" & usuario & "')"
objConn.Execute StrSql, , adExecuteNoRecords


'EAM- Obtiene la clave de la cabecera de las notificaciones
notifNro = getLastIdentity(objConn, "gti_notifhor")


If ((UBound(datos) - 4) = (CInt(datos(4)) * 4)) Then


    'Do While (notifNro > 0)
    For I = 1 To CLng(datos(4))
        'Valida si es un día laborable y que el parametro sea un numero
        If IsNumeric(datos(NroColumna)) Then
            If ((CInt(datos(NroColumna)) = 0) Or (CInt(datos(NroColumna)) = -1)) Then
                NroColumna = NroColumna + 1
                Laborable = CInt(datos(NroColumna))
            Else
                Texto = "Dia Laborable no válida --> " & datos(NroColumna)
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                InsertaError 3, 4
                GoTo Fin
            End If
        Else
            Texto = "Dia Laborable no válida --> " & datos(NroColumna)
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            InsertaError 3, 4
            GoTo Fin
        End If
        
        If Laborable Then
            'Valida que la Hora desde sea un numero positivo
            If IsNumeric(datos(NroColumna)) Then
                If (CInt(datos(NroColumna)) <= 0) Or (CInt(datos(NroColumna)) >= 2400) Or Not objHora.ValidarHora_Rellenar(datos(NroColumna)) Then
                    Texto = "Hora Desde no válida --> " & datos(NroColumna)
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    InsertaError 3, 4
                    GoTo Fin
                Else
                    NroColumna = NroColumna + 1
                End If
            Else
                Texto = "Hora Desde no válida --> " & datos(NroColumna)
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                InsertaError 3, 4
                GoTo Fin
            End If
        Else
            NroColumna = NroColumna + 1
        End If
                
        If Laborable Then
            'Valida que la Hora desde sea un numero positivo
            If IsNumeric(datos(NroColumna)) Then
                If ((CInt(datos(NroColumna)) <= 0) Or (CInt(datos(NroColumna)) >= 2400)) Or Not objHora.ValidarHora_Rellenar(datos(NroColumna)) Then
                    Texto = "Hora Hasta no válida --> " & datos(NroColumna)
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    InsertaError 3, 4
                    GoTo Fin
                Else
                    NroColumna = NroColumna + 1
                End If
            Else
                Texto = "Hora Desde no válida --> " & datos(NroColumna)
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                InsertaError 3, 4
                GoTo Fin
            End If
        Else
            NroColumna = NroColumna + 1
        End If
        
        If Laborable Then
            'Valida que los minutos de la pausa sea un numero positivo
            If IsNumeric(datos(NroColumna)) Then
                If (CInt(datos(NroColumna)) <= 0) Or (CInt(datos(NroColumna)) >= 2400) Or Not objHora.ValidarHora_Rellenar(datos(NroColumna)) Then
                    Texto = "Minutos de Pausa no válida --> " & datos(NroColumna)
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    InsertaError 3, 4
                    GoTo Fin
                Else
                    NroColumna = NroColumna + 1
                End If
            Else
                Texto = "Minutos de Pausa no válida --> " & datos(NroColumna)
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                InsertaError 3, 4
                GoTo Fin
            End If
        Else
            NroColumna = NroColumna + 1
        End If
        
        'Empleado FechaDesde FechaHasta wdCantidadDias wd1lab wd1HDesde wd1HHasta wd1Pausa
'        StrSql = "INSERT INTO gti_notifhor_det (notifnro,wd,wdlab,wddesde,wdhasta,wdpausa) " & _
'                 " VALUES (" & notifNro & "," & i & "," & datos(nrocolumna - 4) & ",'" & datos(nrocolumna - 3) & _
'                 "','" & datos(nrocolumna - 2) & " ','" & datos(nrocolumna - 1) & "')"
        StrSql = "INSERT INTO gti_notifhor_det (notifnro,wd,wdlab,wddesde,wdhasta,wdpausa) "
        StrSql = StrSql & " VALUES (" & notifNro & "," & I & "," & datos(NroColumna - 4) & ",'" & datos(NroColumna - 3)
        StrSql = StrSql & "','" & datos(NroColumna - 2) & "','" & datos(NroColumna - 1) & "')"
        objConn.Execute StrSql, , adExecuteNoRecords
    Next
    'Loop
    
    'EAM- Realiza el commit
    MyCommitTrans
Else
    Flog.writeline Espacios(Tabulador * 1) & "La cantidad de días (" & datos(4) & ") no corresponde con la cantidad de días del detalle " & (UBound(datos) - 4) / 4
End If



Fin:

Exit Sub

Manejador_De_Error:
    HuboError = True
    
    'EAM- Realiza el rollback de la operacion
    MyRollbackTrans

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub


Public Sub LineaModelo_334(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Cargar una novedad fija "1" para un concepto configurable.
'              Archivos de Importación Cafetería
'              Formato: .txt delimitado por ,
' Autor      : Gonzalez Nicolás
' Fecha      : 11/02/2011
' Modificación: 19/04/2011 Gonzalez Nicolás - Se Agregó funcion Firmas_novliq() - Validación de Firmas + Listas de firmantes
'               12/05/2011 Gonzalez Nicolás - Se agregó validación en VALIDO QUE ESTE ACTIVO EL CIRCUITO
'               10/06/2011 Gonzalez Nicolás - Se agregó listaConceptosPermitidos()
'               20/08/2013 - Gonzalez Nicolás - Se corrigió parametro en llamada a getLastIdentity()
' ---------------------------------------------------------------------------------------------------------------
   
Dim Tercero As Long
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As Long
Dim fornro As Long

Dim tpanro As Long
Dim Monto As Single

Dim Aux As String
Dim Encontro As Boolean

'Dim perfsegcon As Integer
Dim tienePermiso As Boolean

Dim rs As New ADODB.Recordset
Dim rs_Empleado As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim rs_TipoPar As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset
Dim rs_seguridad As New ADODB.Recordset
Dim rs_Confrep As New ADODB.Recordset
Dim campos
'Dim strCmdLine
'Dim ArrParametros
Dim ArrDatos
Dim remplazo
Dim Arr_remplazo


'Para el circ. de firmas
Dim gnovnro
Dim Firmas
Dim firmas_ok
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim cystipnro

cystipnro = 5
On Error GoTo Manejador_De_Error

' El formato es:
' NroEmpleado EntidadDeductora Columna3 Columna4 CodigoDeduccion
    
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    '=============================================
    'Trae número de proceso para validar remplazo
    '=============================================
    'strCmdLine = Command()
    'ArrParametros = Split(strCmdLine, " ", -1)
    StrSql = "SELECT bprcparam FROM batch_proceso "
    StrSql = StrSql & " WHERE bpronro = " & NroProcesoBatch 'ArrParametros(0)
    OpenRecordset StrSql, rs_Confrep
    If rs_Confrep.EOF Then
        remplazo = 0
    Else
        Arr_remplazo = Split(rs_Confrep!bprcparam, "@", -1)
        remplazo = Arr_remplazo(2)
    End If
        
    
    '===============================================
    'NUMERO DE EMPLEADO & MONTO A DESCONTAR
    '===============================================
    ArrDatos = Split(strLinea, separador)
    'FGZ - 03/06/2011 -----------------------
    'NroLegajo = ArrDatos(1)
    NroLegajo = "200" & Right(ArrDatos(1), 5)
    'FGZ - 03/06/2011 -----------------------
    Monto = ArrDatos(3)
    If IsNumeric(NroLegajo) = False Or IsNumeric(Monto) = False Then
        Texto = ": " & "El N° de legajo o el Monto a descontar no es numérico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If

' ====================================================================
' CONFREP
' ====================================================================
StrSql = "SELECT * FROM confrep where confrep.repnro = 310 ORDER BY confnrocol"
OpenRecordset StrSql, rs_Confrep
    
If rs_Confrep.EOF Then
    Flog.writeline Espacios(Tabulador * 1) & "Falta configurar el concepto/parametro en el reporte 310 "
    FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": Falta configurar el concepto en el reporte 310 "
    InsertaError 0, 106
    HuboError = True
    Exit Sub
Else
    Do While Not rs_Confrep.EOF
        Select Case UCase(Trim(rs_Confrep!conftipo))
            Case "CO": 'CONCEPTO
                
                ConcCod = rs_Confrep!Confval
                
            Case "PA": 'PARAMETRO DONDE PODER CARGAR LA NOVEDAD
            
                tpanro = rs_Confrep!Confval
                
        End Select
            
    rs_Confrep.MoveNext
    Loop

End If

' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'Si existe concepto
StrSql = "SELECT * FROM concepto WHERE conccod = " & ConcCod
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
    fornro = rs_Concepto!fornro
End If

'Si existe tipo de Parametro
StrSql = "SELECT * FROM tipopar WHERE tpanro = " & tpanro
OpenRecordset StrSql, rs_TipoPar

If rs_TipoPar.EOF Then
    Texto = ": " & "No se encontro el Tipo de Parametro " & tpanro
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
End If

'Reviso que el par concepto-parametro se resuelva por novedad
StrSql = "SELECT * FROM con_for_tpa "
StrSql = StrSql & " WHERE concnro = " & ConcNro
StrSql = StrSql & " AND fornro =" & fornro
StrSql = StrSql & " AND tpanro =" & tpanro
OpenRecordset StrSql, rs_con_for_tpa

If rs_con_for_tpa.EOF Then
    Texto = ": " & "El parametro " & tpanro & " no esta asociado a la formula del concepto " & ConcCod
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
Else
    Encontro = False
    Do While Not Encontro And Not rs_con_for_tpa.EOF
        If Not CBool(rs_con_for_tpa!cftauto) Then
            Encontro = True
        End If
        rs_con_for_tpa.MoveNext
    Loop
    If Not Encontro Then
        Texto = ": " & "El parametro " & tpanro & " del concepto " & ConcCod & " no se resuelve por novedad "
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(3, 11)
        HuboError = True
        Exit Sub
    End If
End If

'------------------------------------------------
'VALIDA QUE EL USUARIO TENGA ACTIVO EL CONCEPTO
If listaConceptosPermitidos(ConcCod) = True Then
    tienePermiso = True
Else
    tienePermiso = False
End If
 
If tienePermiso = False Then
  Texto = ": El usuario:" & usuario & " no tiene autorización sobre el concepto:" & ConcCod
  Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
  HuboError = True
End If
'------------------------------------------------


'VALIDO QUE ESTE ACTIVO EL CIRCUITO
StrSql = "SELECT cystipact FROM cystipo "
StrSql = StrSql & "WHERE cystipnro = " & cystipnro & " AND cystipact = -1"
OpenRecordset StrSql, rs
If Not rs.EOF Then
'SI ESTA ACTIVO LLAMO LA FNC Firmas_novliq()
    firmas_ok = Split(Firmas_novliq(usuario, cystipnro, ConcCod, 1), ",")
    cysfirautoriza = firmas_ok(0)
    cysfirusuario = firmas_ok(1)
    cysfirdestino = firmas_ok(2)
    cysfirfin = firmas_ok(3)
    cysfiryaaut = firmas_ok(4)
    cysfirrecha = firmas_ok(5)
    
    If cysfirautoriza = "" And cysfirusuario = "" And cysfirdestino = "" And cysfirfin = 0 And cysfiryaaut = 0 And cysfirrecha = 0 Then
        Firmas = ""
    Else
        Firmas = "OK"
    End If
Else
    Firmas = ""
End If
rs.Close




' ====================================================================
' INSERTAR O ACTUALIZAR LA NOVEDAD
' ====================================================================
StrSql = "SELECT * FROM novemp WHERE "
StrSql = StrSql & " concnro = " & ConcNro
StrSql = StrSql & " AND tpanro = " & tpanro
StrSql = StrSql & " AND empleado = " & Tercero
StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
StrSql = StrSql & " ORDER BY nevigencia "
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
OpenRecordset StrSql, rs_NovEmp
'Monto = 1
If Not rs_NovEmp.EOF And remplazo <> 0 Then
    'Existe una novedad  -> Actualizo
    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
            " WHERE concnro = " & ConcNro & _
            " AND tpanro = " & tpanro & _
            " AND empleado = " & Tercero
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad Actualizada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
Else
    'Insert
    StrSql = "INSERT INTO novemp (" & _
            "empleado,concnro,tpanro,nevalor,nevigencia" & _
            ") VALUES (" & Tercero & _
            "," & ConcNro & _
            "," & tpanro & _
            "," & Monto & _
            ",0" & _
            " )"
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    'gnovnro = getLastIdentity(objConn, "gnovnro")
    'NG - 20/08/2013
    gnovnro = getLastIdentity(objConn, "novemp")
    If Firmas = "OK" Then
        ' ====================================================================
        'INSERTO EN cysfirmas
        ' ====================================================================
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & gnovnro & ",1,'Novedad desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If

End If

Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close
If rs_TipoPar.State = adStateOpen Then rs_TipoPar.Close
If rs_con_for_tpa.State = adStateOpen Then rs_con_for_tpa.Close

Set rs_NovEmp = Nothing
Set rs_Empleado = Nothing
Set rs_Concepto = Nothing
Set rs_TipoPar = Nothing
Set rs_con_for_tpa = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_335(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación Novedades Horarias - Sykes - CR
'              Formato: .txt delimitado por ,
' Autor      : Gonzalez Nicolás
' Fecha      : 17/02/2011
'            : 19/10/2011 Gonzalez Nicolás - Se agregaron al insert de las tablas gti_justificacion y gti_novedad
'                                            las variables elorden y hs_just
'              12/06/2013 - Gonzalez Nicolás - Se formatean a null -> hs_ini y  hs_hasta  cuando es Parcial V.
'              18/11/2013 - Sebastian Stremel - Se agrega el campo comentario - CAS-21493 - SYKES CR - Custom nueva columna para anormalidades
' ---------------------------------------------------------------------------------------------------------------
   
Dim Tercero As Long
Dim NroLegajo As Long

Dim Aux As String

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Aux As New ADODB.Recordset

Dim ArrDatos
'------
Dim T_novedad, T_Motivo, fec_ini, fec_hasta, Dia_completo, hs_ini, hs_hasta, hs_just, id_autoriz
Dim motnro
Dim gtnovnro
Dim gnovdesde
Dim gnovhasta
Dim gtnovdesabr
Dim gnovtipo
Dim cystipnro
Dim cysfirusuario
Dim cysfirsecuencia
Dim gnovnro
Dim motdesabr
Dim elorden
Dim fechaProcesamiento
Dim actualizo As Boolean
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim error As Long

Dim comentario As String
Dim Horas

On Error GoTo Manejador_De_Error

' Formato de texto ingresado:
'1,Permiso,falla o avería del despertador,05/01/2011,05/01/2011,NO,0900,0930,, rhpror3
'2,Suspensión,Problemas personales,06/01/2011,06/01/2011,SI,,,,rhpror3
'3,Permiso,falla o avería del despertador,07/01/2011,07/01/2011,NO,,,0030,rhpror3
          
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)

    NroColumna = NroColumna + 1
    '===============================================
    'GRABO LOS DATOS DE LA 1ER LINEA
    '===============================================
    ArrDatos = Split(strLinea, separador)
    NroLegajo = ArrDatos(0)
    '-----
    T_novedad = LCase(Trim(ArrDatos(1)))
    T_Motivo = LCase(Trim(ArrDatos(2)))
    fec_ini = ArrDatos(3)
    fec_hasta = ArrDatos(4)
    Dia_completo = ArrDatos(5)
    hs_ini = Replace(ArrDatos(6), ":", "")
    hs_hasta = Replace(ArrDatos(7), ":", "")
    hs_just = ArrDatos(8)
    id_autoriz = Trim(ArrDatos(9))
    comentario = ArrDatos(10)
    fechaProcesamiento = ArrDatos(11)
    elorden = "Null"
    
    '------------------------
    
    
    
    
    cysfirusuario = usuario
     
    If IsNumeric(NroLegajo) = False Then
        Texto = ": " & "El N° de legajo no es numérico "
        HuboError = True
        error = 3
    ElseIf T_novedad = "" Then
        Texto = ": " & "El Tipo de novedad no puede estar vacìo "
        HuboError = True
        error = 3
    ElseIf T_Motivo = "" Then
        Texto = ": " & "El Tipo de motivo no puede estar vacìo "
        HuboError = True
        error = 3
    ElseIf id_autoriz = "" Then
        Texto = ": " & "Falta usuario autorizante "
        HuboError = True
        error = 128
    End If
    
    If HuboError = True Then
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, error)
        HuboError = True
        Exit Sub
    End If
' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'QUE EXISTA EL TIPO DE PERMISO
StrSql = "SELECT * FROM gti_tiponovedad "
StrSql = StrSql & "WHERE upper(gtnovdesabr) = '" & UCase(T_novedad) & "'"
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el tipo de novedad " & T_novedad
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 131)
    HuboError = True
    Exit Sub
Else
    gtnovnro = rs_Empleado!gtnovnro
    gtnovdesabr = rs_Empleado!gtnovdesabr
End If

'QUE EXISTA EL MOTIVO
StrSql = "SELECT * FROM gti_motivo "
StrSql = StrSql & "WHERE upper(motdesabr) = '" & UCase(T_Motivo) & "' "
OpenRecordset StrSql, rs_Empleado

If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el tipo de motivo " & T_Motivo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 132)
    HuboError = True
    Exit Sub
Else
    motnro = rs_Empleado!motnro
    motdesabr = rs_Empleado!motdesabr
End If

'QUE EXISTA EL USUARIO
StrSql = "SELECT iduser FROM user_per "
StrSql = StrSql & "WHERE iduser='" & id_autoriz & "'"
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el usuario " & id_autoriz
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 128)
    HuboError = True
    Exit Sub
End If



'SI ES FIN DE FIRMA AUTORIZA
StrSql = "SELECT * FROM cysfincirc "
StrSql = StrSql & "WHERE userid = '" & Trim(cysfirusuario) & "' "
StrSql = StrSql & "AND cystipnro = 7 "
OpenRecordset StrSql, rs_Empleado

If rs_Empleado.EOF = True Then
    cysfirfin = 0
    cysfiryaaut = 0
    cysfirrecha = 0
    'Si no es fin y el siguiente es el mismo usuario
    If Trim(cysfirusuario) = Trim(id_autoriz) Then
        Texto = ": " & "El usuario de destino no es válido"
        NroColumna = 1
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 128)
        HuboError = True
        Exit Sub
    End If

Else
    id_autoriz = ""
    cysfirfin = -1
    cysfiryaaut = -1
    cysfirrecha = 0

End If

'VALIDA FECHA INICIO
If GetFecha(fec_ini) <> "NULL" Then
    gnovdesde = GetFecha(fec_ini)
Else
    Texto = ": " & "Error en la fecha de inicio de la novedad "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 4)
    HuboError = True
    Exit Sub
    
End If

'VALIDA FECHA HASTA
'If GetFecha(fec_hasta) <> False Then
If GetFecha(fec_hasta) <> "NULL" Then
    gnovhasta = GetFecha(fec_hasta)
Else
    Texto = ": " & "Error en la fecha de fin de la novedad "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 4)
    HuboError = True
    Exit Sub
    
End If

'VALIDA QUE FEC HASTA NO SEA MENOR QUE DESDE
'If GetFecha(fec_hasta) < GetFecha(fec_ini) Then
If CDate(fec_hasta) < CDate(fec_ini) Then
    Texto = ": " & "La fecha Hasta no puede ser inferior a la Fecha Desde "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 47)
    HuboError = True
    Exit Sub
End If

'DIA COMPLETO
If Dia_completo = "SI" Then
    Dia_completo = -1
    hs_ini = Null
    hs_hasta = Null
    hs_just = "Null"
    gnovtipo = 1
ElseIf Dia_completo = "NO" Then
    Dia_completo = -1
        
    'Parcial fija
    If hs_just = "" Then
        If hs_ini = "" And Len(hs_ini) < 4 Then
            Texto = ": " & "Error de Horas de inicio "
            NroColumna = 1
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 37)
            HuboError = True
            Exit Sub
        ElseIf hs_hasta = "" And Len(hs_hasta) < 4 Then
            Texto = ": " & "Error de Horas Fin "
            NroColumna = 1
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 37)
            HuboError = True
            Exit Sub
        End If
        hs_just = "Null"
        gnovtipo = 2
    End If
    
    'Parcial variable
    If hs_just <> "" And IsNumeric(hs_just) Then
        'NG - 13/06/2013
        hs_ini = Null
        hs_hasta = Null
    
        If IsNumeric(hs_just) = False Then
            Texto = ": " & "Error de formato en Horas a justificar "
            NroColumna = 1
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 37)
            HuboError = True
            Exit Sub
        End If
        elorden = 1
        gnovtipo = 3
    End If

    
    
ElseIf Dia_completo = "" Then
    Dia_completo = Null
Else
    Texto = ": " & "Error de formato en Dia Completo "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    HuboError = True
    Exit Sub
End If

'Corresponde al tipo de novedad
cystipnro = 7

'valido la longitud del comentario
If Len(comentario) > 100 Then
    Flog.writeline "La longitud del comentario excede los 100 caracteres, solo se insertan los 100 primeros"
    comentario = Mid(comentario, 1, 100)
End If

'EAM(v5.42)- VALIDA FECHA procesamiento
If (UCase(fechaProcesamiento) = "N/A") Or (Trim(fechaProcesamiento) = "") Then
    fechaProcesamiento = GetFecha(fec_hasta)
Else
    If GetFecha(fechaProcesamiento) <> "NULL" Then
        fechaProcesamiento = GetFecha(fechaProcesamiento)
    Else
        Texto = ": " & "Error en la fecha de procesamiento de la novedad"
        NroColumna = 11
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 4)
        HuboError = True
        Exit Sub
    End If
End If
'hasta aca



'FGZ - 29/07/2014 --------------------------------------------
If gnovtipo = 2 Then
    If CDate(fec_ini) = CDate(DateAdd("d", -1, fec_hasta)) Then
        If hs_hasta = "0000" Then
            hs_hasta = "2400"
            fec_hasta = fec_ini
        End If
    Else
        If fec_ini = fec_hasta Then
            If hs_hasta = "0000" Then
                hs_hasta = "2400"
            Else
                If hs_ini > hs_hasta Then
                    Texto = ": " & "Hora desde > Hora Hasta."
                    NroColumna = 8
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(1, 37)
                    HuboError = True
                    Exit Sub
                End If
            End If
        End If
    End If
End If
'FGZ - 29/07/2014 --------------------------------------------

'_________________________________________________
'VALIDA QUE NO EXISTE UNA NOVEDAD PARA ESA FECHA
'StrSql = " SELECT gnovnro FROM gti_novedad "
StrSql = " SELECT * FROM gti_novedad "
StrSql = StrSql & " WHERE gnovotoa=" & Tercero & " and ((gnovdesde >=" & ConvFecha(fec_ini)
StrSql = StrSql & " and gnovdesde <=" & ConvFecha(fec_hasta) & ") "
StrSql = StrSql & " or (gnovhasta >=" & ConvFecha(fec_ini)
StrSql = StrSql & " and gnovhasta <=" & ConvFecha(fec_hasta) & ") "
StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_ini)
StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_ini) & ") "
StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_hasta)
StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_hasta) & ")) "

'If gnovtipo = 2 Then
'    StrSql = StrSql & " and (gnovtipo =1 "
'    StrSql = StrSql & " or ( gnovtipo=2 and ( (gnovhoradesde <='" & hs_hasta & "' and gnovhorahasta>='" & hs_hasta & "' ) "
'    StrSql = StrSql & " or (gnovhoradesde <='" & hs_ini & "' and gnovhorahasta>='" & hs_ini & "' ) "
'    StrSql = StrSql & " or (gnovhoradesde >='" & hs_ini & "' and gnovhoradesde<='" & hs_hasta & "' ))))"
'End If

If gnovtipo = 3 Then
    StrSql = StrSql & " and gnovtipo =1"
End If
OpenRecordset StrSql, rs_Empleado
'If Not rs_Empleado.EOF Then
'        Texto = ": " & "Esta novedad se superpone con otras cargadas anteriormente "
'        NroColumna = 1
'        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        Call InsertaError(1, 54)
'        HuboError = True
'        Exit Sub
'End If
actualizo = False
Do While Not rs_Empleado.EOF

    If gnovtipo = 2 Then
        Horas = HorasInterseccion(fec_ini, hs_ini, fec_hasta, hs_hasta, rs_Empleado!gnovdesde, rs_Empleado!gnovhoradesde, rs_Empleado!gnovhasta, rs_Empleado!gnovhorahasta)
        If Horas > 0 Then
            'controlo que la novedad sea la misma para actualizarla
            StrSql = " SELECT gnovnro FROM gti_novedad  WHERE gnovotoa = " & Tercero & " and gnovdesde = " & ConvFecha(fec_ini) & " AND gnovhasta = " & ConvFecha(fec_hasta) & _
                     " AND gnovhoradesde = '" & hs_ini & "' AND gnovhorahasta = '" & hs_hasta & "' AND gnovtipo = 2 AND gtnovnro = " & rs_Empleado!gtnovnro & _
                     " AND motnro = " & motnro
            OpenRecordset StrSql, rs_Aux
            If Not rs_Aux.EOF Then
                StrSql = " UPDATE gti_novedad SET " & _
                         " fechaprocesamiento = " & fechaProcesamiento & _
                         " , gnovdesabr = '" & gtnovdesabr & "'" & _
                         " WHERE gnovnro = " & rs_Aux!gnovnro
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = ": La novedad ya existe se actualiza "
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                actualizo = True
            Else
                Texto = ": " & "Esta novedad se superpone con otras cargadas anteriormente "
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(1, 54)
                HuboError = True
                Exit Sub
            End If
        End If
    Else
    
            'controlo que la novedad sea la misma para actualizarla
            StrSql = " SELECT gnovnro FROM gti_novedad  WHERE gnovotoa = " & Tercero & " and gnovdesde = " & ConvFecha(fec_ini) & " AND gnovhasta = " & ConvFecha(fec_hasta) & _
                     " AND gnovtipo <> 2 AND gtnovnro = " & rs_Empleado!gtnovnro & _
                     " AND motnro = " & motnro
            OpenRecordset StrSql, rs_Aux
                        
            If Not rs_Aux.EOF Then
                StrSql = " UPDATE gti_novedad SET " & _
                         " fechaprocesamiento = " & fechaProcesamiento & _
                         " , gnovdesabr = '" & gtnovdesabr & "'" & _
                         " WHERE gnovnro = " & rs_Aux!gnovnro
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = ": La novedad ya existe se actualiza "
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                actualizo = True
            Else
    
                Texto = ": " & "Esta novedad se superpone con otras cargadas anteriormente "
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(1, 54)
                HuboError = True
                Exit Sub
            End If
    End If
    
    rs_Empleado.MoveNext
Loop


' ====================================================================
' INSERTO NOVEDAD HORARIA
' ====================================================================
If Not actualizo Then
    cysfirsecuencia = cysfirsecuencia + 1
    StrSql = "INSERT INTO gti_novedad ( "
    StrSql = StrSql & "gnovdesabr , gnovdesext, motnro, gnovotox"
    StrSql = StrSql & ",gnovotoa, gnovdesde, gnovhasta, gnovestado"
    StrSql = StrSql & ",gtnovnro, gnovhoradesde, gnovhorahasta"
    StrSql = StrSql & ",gnovautoriza__1, gnovautoriza__2, gnovautoriza__3"
    StrSql = StrSql & ",gnovfecaut__1, gnovfecaut__2, gnovfecaut__3, gnovusuario__1"
    StrSql = StrSql & ",gnovusuario__2, gnovusuario__3, gnovdiacompleto, gnovtipo"
    StrSql = StrSql & ",gnovorden, gnovmaxhoras, ft, ftap, comentario,fechaProcesamiento "
    StrSql = StrSql & ") "
    StrSql = StrSql & "VALUES("
    StrSql = StrSql & "'" & gtnovdesabr & "','" & motdesabr & "'," & motnro & ",NULL," & Tercero
    StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",''," & gtnovnro & ""
    
    If IsNull(hs_ini) Then
        StrSql = StrSql & ",NULL,NULL"
    Else
        StrSql = StrSql & ",'" & hs_ini & "','" & hs_hasta & "'"
    End If
    'StrSql = StrSql & ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL," & Dia_completo & "," & gnovtipo & ",NULL,NULL,0,0"
    StrSql = StrSql & ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL," & Dia_completo & "," & gnovtipo & "," & elorden & "," & hs_just & ",0,0"
    StrSql = StrSql & ",'" & comentario & "'," & fechaProcesamiento
    StrSql = StrSql & ")"
    
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad Horaria insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    'Guarda ID del Ûlt. registro ingresado
    'gnovnro = getLastIdentity(objConn, "gnovnro")
    gnovnro = getLastIdentity(objConn, "gti_novedad")
    
    ' ====================================================================
    'INSERTO EN gti_justificacion
    ' ====================================================================
    StrSql = "INSERT INTO gti_justificacion("
    StrSql = StrSql & "jussigla , turnro, ternro, tjusnro, juscodext"
    StrSql = StrSql & ", jusdiacompleto, jusanterior, jusdesde, jushasta"
    StrSql = StrSql & ", jussistema, jusdesabr, juscanths, jushoradesde"
    StrSql = StrSql & ", jushorahasta, juseltipo, juselorden, juselmaxhoras "
    StrSql = StrSql & ")"
    StrSql = StrSql & " VALUES("
    StrSql = StrSql & "'NOV',0"
    StrSql = StrSql & "," & Tercero & ",1," & gnovnro & "," & Dia_completo & "," & Dia_completo
    StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",-1,NULL,NULL"
    'StrSql = StrSql & ",'" & hs_ini & "','" & hs_hasta & "'," & gnovtipo & ",NULL,NULL"
    StrSql = StrSql & ",'" & hs_ini & "','" & hs_hasta & "'," & gnovtipo & "," & elorden & "," & hs_just
    StrSql = StrSql & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Justificación insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    
    ' ====================================================================
    'INSERTO EN cysfirmas
    ' ====================================================================
    StrSql = "INSERT INTO cysfirmas ("
    StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
    StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
    StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
    StrSql = StrSql & ")"
    StrSql = StrSql & "VALUES("
    'StrSql = StrSql & "'" & cysfirusuario & "','" & Date & "','" & Format_Str(Hour(Now), 2, "0", True) & ":" & Format_Str(Minute(Now), 2, "0", True) & "'"
    StrSql = StrSql & "'" & cysfirusuario & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
    StrSql = StrSql & ",'" & cysfirusuario & "','" & id_autoriz & "'," & cystipnro & "," & gnovnro & ",1,'" & motdesabr & "'"
    StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
    StrSql = StrSql & ")"
    
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Autorización insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
End If
'--------------------------------------


Fin:
'Cierro y libero

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Aux.State = adStateOpen Then rs_Aux.Close

Set rs_Empleado = Nothing
Set rs_Aux = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub


Public Sub LineaModelo_336(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación de Partes Horarios - Hs- Extras - Sykes - CR
'              Formato: .txt delimitado por ,
' Autor      : Gonzalez Nicolás
' Fecha      : 18/02/2011
' Modificado : 10/02/2012 - Se valida que no exista un tipo de hora para una fecha.
'                         - Se corrigió error con el código de cystipnro (Se cambio 7 por 1)
'                         - Se modificó la validación de los circuitos de firma (Se valida si hay BK)
'              20/08/2013 - Gonzalez Nicolás - Se corrigió parametro en llamada a getLastIdentity()
' ---------------------------------------------------------------------------------------------------------------
   
Dim Tercero As Long
Dim NroLegajo As Long

Dim rs_Empleado As New ADODB.Recordset
Dim rs_estado As New ADODB.Recordset

Dim ArrDatos
Dim fec_ini, fec_hasta, id_autoriz, cod_tipohora, cant_hs
Dim gnovdesde
Dim gnovhasta

Dim gtpnro
Dim GcpDesAbr
Dim gcpnro
Dim thnro

Dim error As Long

'CIRCUITO DE FIRMAS
Dim firmas_ok
Dim Firmas
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim cystipnro
Dim l_listperfnro
Dim tipoorigen
Dim Esfin
cystipnro = 1

On Error GoTo Manejador_De_Error
' Formato de texto ingresado:
'Empleado,Tipo Hora,Fecha desde,Fecha hasta,Horas,Autoriza
'1,6,05/01/2011,05/01/2011,4.5,rhpror3
'2,7,10/01/2011,10/01/2011,1,rhpror3

          
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)

    NroColumna = NroColumna + 1
    '===============================================
    'GRABO LOS DATOS X LINEA
    '==============================================usuario=
    ArrDatos = Split(strLinea, separador)
    NroLegajo = ArrDatos(0)
    '-----
    cod_tipohora = ArrDatos(1)
    fec_ini = ArrDatos(2)
    fec_hasta = ArrDatos(3)
    cant_hs = ArrDatos(4)
    id_autoriz = Trim(ArrDatos(5))
    '______________________
    'ID Partes Autorizacion de Horas
    gtpnro = 4
    
    'cysfirusuario = usuario
     
    If IsNumeric(NroLegajo) = False Or Trim(NroLegajo) = "" Then
        Texto = ": " & "El N° de legajo es incorrecto "
        HuboError = True
        error = 129
    ElseIf IsNumeric(cod_tipohora) = False Or Trim(cod_tipohora) = "" Then
        Texto = ": " & "El tipo de hora es incorrecto "
        HuboError = True
        error = 37
    ElseIf fec_ini = "" Then
        Texto = ": " & "El campo Fecha de inicio no puede estar vacio "
        HuboError = True
        error = 20
    ElseIf fec_hasta = "" Then
        Texto = ": " & "El campo Fecha Fin no puede estar vacio "
        HuboError = True
        error = 21
    ElseIf IsNumeric(cant_hs) = False Or Trim(cant_hs) = "" Then
        Texto = ": " & "El Cantidad de horas es incorrecto  "
        HuboError = True
        error = 38
    ElseIf id_autoriz = "" Then
        Texto = ": " & "Falta usuario autorizante "
        HuboError = True
        error = 130
    End If
    
    If HuboError = True Then
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, error)
        HuboError = True
        Exit Sub
    End If
' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'______________________
'QUE EXISTA EL LEGAJO
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'______________________
'QUE EXISTA EL USUARIO

StrSql = "SELECT iduser FROM user_per "
StrSql = StrSql & "WHERE iduser='" & id_autoriz & "'"
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el usuario " & id_autoriz
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 130)
    HuboError = True
    Exit Sub
End If


'=============================================================
'VALIDO QUE ESTE ACTIVO EL CIRCUITO
'=============================================================
StrSql = "SELECT cystipact FROM cystipo "
StrSql = StrSql & "WHERE cystipnro = " & cystipnro & " AND cystipact = -1"
OpenRecordset StrSql, rs
If Not rs.EOF Then
    Firmas = "OK"
Else
    Firmas = ""
End If

'____________________________
'SI EL CIRCUITO ESTA ACTIVO
'____________________________
If Firmas = "OK" Then
    'Seteo todo en 0
    cysfirusuario = ""
    cysfirautoriza = ""
    cysfirdestino = ""
    cysfirfin = 0
    cysfiryaaut = 0
    cysfirrecha = 0
    tipoorigen = ""
    l_listperfnro = ""
    
    
    '=====================================
    'FIN DE FIRMA
    '=====================================
    StrSql = "SELECT * FROM cysfincirc "
    StrSql = StrSql & " WHERE userid = '" & usuario & "' and cystipnro = " & cystipnro
    OpenRecordset StrSql, rs_Empleado
    If Not rs_Empleado.EOF Then
        Esfin = True
        cysfirusuario = usuario
        cysfirautoriza = usuario
        cysfirdestino = ""
        cysfirfin = -1
        cysfiryaaut = -1
        cysfirrecha = 0
    Else
        Esfin = False
    End If
    rs_Empleado.Close
    
    If Esfin = False Then
        '=====================================
        'QUE TENGA DELEGADO UN PERMISO
        '=====================================
        StrSql = "SELECT bk_cab.iduser, bkcystipnro "
        StrSql = StrSql & " From bk_cab "
        StrSql = StrSql & " INNER JOIN bk_firmas on bk_firmas.bkcabnro = bk_cab.bkcabnro "
        StrSql = StrSql & " Where fdesde <= " & ConvFecha(Date)
        StrSql = StrSql & " AND (fhasta >= " & ConvFecha(Date) & " OR fhasta IS NULL)"
        StrSql = StrSql & " AND bk_firmas.iduser = '" & usuario & "'"
        StrSql = StrSql & " AND bkcystipnro = " & cystipnro
        StrSql = StrSql & " AND bk_cab.iduser <> '" & usuario & "'"
        OpenRecordset StrSql, rs_Empleado
        
        If Not rs_Empleado.EOF Then
            Esfin = True
            cysfirusuario = rs_Empleado!iduser
            cysfirautoriza = usuario
            cysfirdestino = ""
            
            cysfirfin = -1
            cysfiryaaut = -1
            cysfirrecha = 0
        Else
            '-----------------------------
            'QUE EXISTA EL USUARIO
            '-----------------------------
            StrSql = "SELECT iduser FROM user_per "
            StrSql = StrSql & "WHERE iduser='" & id_autoriz & "'"
            OpenRecordset StrSql, rs_estado
            If rs_estado.EOF Or UCase(usuario) = UCase(id_autoriz) Then
                Texto = ": " & "No se encontro el usuario " & id_autoriz
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(1, 128)
                HuboError = True
                Exit Sub
           End If
            rs_estado.Close
            '---------------------------
            cysfirusuario = usuario
            cysfirautoriza = usuario
            cysfirdestino = id_autoriz
            
            cysfirfin = 0
            cysfiryaaut = 0
            cysfirrecha = 0
        End If
        rs_Empleado.Close
    
    
    End If
    '-----
End If
'______________________
'VALIDA FECHA INICIO
If GetFecha(fec_ini) <> False Then
    gnovdesde = GetFecha(fec_ini)
Else
    Texto = ": " & "Error en la fecha de inicio de la novedad "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 20)
    HuboError = True
    Exit Sub
    
End If

'______________________
'VALIDA FECHA HASTA
If GetFecha(fec_hasta) <> False Then
    gnovhasta = GetFecha(fec_hasta)
Else
    Texto = ": " & "Error en la fecha de fin de la novedad "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 21)
    HuboError = True
    Exit Sub
    
End If

'VALIDA QUE FEC HASTA NO SEA MENOR QUE DESDE
If GetFecha(fec_hasta) < GetFecha(fec_ini) Then
    Texto = ": " & "La fecha Hasta no puede ser inferior a Desde "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 12)
    HuboError = True
    Exit Sub
End If

'__________________
'VALIDA TIPO DE HS
StrSql = "SELECT thnro,thdesc FROM tiphora WHERE (thautpor <> 0 and thdesautpor<>0) "
StrSql = StrSql & " AND thnro = " & cod_tipohora
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "Error en el Tipo de Hora "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 37)
    HuboError = True
    Exit Sub
Else
    GcpDesAbr = "Aut." & NroLegajo & "-" & rs_Empleado!thdesc
    thnro = rs_Empleado!thnro
    If Len(GcpDesAbr) > 30 Then
        GcpDesAbr = Mid(GcpDesAbr, 4, 30)
    End If
End If


' ====================================================================
' VALIDO QUE YA NO EXISTA UN DETALLE
' ====================================================================
StrSql = " SELECT ternro,gti_cabparte.gcpnro from gti_autdet "
StrSql = StrSql & "INNER JOIN gti_cabparte ON gti_cabparte.gcpnro = gti_autdet.gcpnro "
StrSql = StrSql & " WHERE  ternro = " & Tercero
StrSql = StrSql & " AND thnro = " & thnro
StrSql = StrSql & " AND ( (gadfecdesde <=" & ConvFecha(fec_ini)
StrSql = StrSql & " AND " & ConvFecha(fec_ini) & "<=gadfechasta) "
StrSql = StrSql & " OR (gadfecdesde <=" & ConvFecha(fec_hasta)
StrSql = StrSql & " AND " & ConvFecha(fec_hasta) & "<=gadfechasta) "
StrSql = StrSql & " OR (" & ConvFecha(fec_ini)
StrSql = StrSql & " <= gadfecdesde and gadfecdesde <=" & ConvFecha(fec_hasta) & ")) "
OpenRecordset StrSql, rs_Empleado
If Not rs_Empleado.EOF Then
    Texto = ": " & "El empleado ya tiene autorizadas horas de ese tipo para la fecha indicada. Código: " & rs_Empleado!gcpnro
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 37)
    HuboError = True
    Exit Sub
Else
    ' ====================================================================
    ' INSERTO CABECERA
    ' ====================================================================
        StrSql = "INSERT INTO gti_cabparte ( "
        StrSql = StrSql & "gcpdesabr , gcpdesext, gcpdesde, gcphasta "
        StrSql = StrSql & ", Empnro, gtpnro, gcpcerrado, gcpfeccierre, gcpusrcierre, ft, ftap "
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES( "
        StrSql = StrSql & "'" & GcpDesAbr & "',''," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",0"
        StrSql = StrSql & "," & gtpnro & ",0,NULL,NULL,0,0"
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Cabecera insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        
        'Guarda ID del Ûlt. registro ingresado
        'NG - 20/08/2013
        gcpnro = getLastIdentity(objConn, "gti_cabparte")
        'gcpnro = getLastIdentity(objConn, "gcpnro")
 
        ' ====================================================================
        'INSERTO gti_autdet
        ' ====================================================================
        StrSql = "INSERT INTO gti_autdet("
        StrSql = StrSql & "gcpnro , ternro, thnro, gadhoras, gadhorreales"
        StrSql = StrSql & ", gadfecdesde, gadfechasta, gadhoradesde"
        StrSql = StrSql & ", gadhorahasta, gadhs_fecha, gadautorizable, gadobservacion "
        StrSql = StrSql & ") "
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & gcpnro & "," & Tercero & "," & thnro & ""
        StrSql = StrSql & "," & cant_hs & ",NULL"
        StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta)
        StrSql = StrSql & ",'','',-1,-1,''"
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Detalle de la cabecera insertado"
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    
    ' ====================================================================
    'INSERTO EN cysfirmas
    ' ====================================================================
    'StrSql = "INSERT INTO cysfirmas ("
    'StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
    'StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
    'StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
    'StrSql = StrSql & ")"
    'StrSql = StrSql & "VALUES("
    'StrSql = StrSql & "'" & cysfirusuario & "'," & ConvFecha(Date)
    'StrSql = StrSql & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
    ''StrSql = StrSql & ",'" & Format_Str(Hour(Now), 2, "0", True) & ":" & Format_Str(Minute(Now), 2, "0", True) & "'"
    '0 StrSql = StrSql & ",'" & cysfirusuario & "','" & id_autoriz & "',1," & gcpnro & ",1,'" & gcpdesabr & "'"
    'StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
    'StrSql = StrSql & ")"
    '
    'objConn.Execute StrSql, , adExecuteNoRecords
    'Texto = "Alta horaria insertada "
    'Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    If Firmas = "OK" Then
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & gcpnro & ",1,'Parte De horas Extras Desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If

'--------------------------------------
End If ' CIERRO IF QUE VALIDA SI YA ESTA CARGADO EL PARTE DEHORA

Fin:
'Cierro y libero

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
    Set rs_Empleado = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub
Public Sub LineaModelo_913(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación de Partes Horarios |Directas| - Hs- Extras - Sykes - SV (COPIA 336)
'              Formato: .txt delimitado por ,
' Autor      : Gonzalez Nicolás
' Fecha      : 09/01/2014
' Modificado :
' ---------------------------------------------------------------------------------------------------------------
   
Dim Tercero As Long
Dim NroLegajo As Long

Dim rs_Empleado As New ADODB.Recordset
Dim rs_estado As New ADODB.Recordset

Dim ArrDatos
Dim fec_ini, fec_hasta, id_autoriz, cod_tipohora, cant_hs
Dim gnovdesde
Dim gnovhasta

Dim gtpnro
Dim GcpDesAbr
Dim gcpnro
Dim thnro

Dim error As Long

'CIRCUITO DE FIRMAS
Dim firmas_ok
Dim Firmas
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim cystipnro
Dim l_listperfnro
Dim tipoorigen
Dim Esfin
Dim gadautorizable

'Siempre es DIRECTA
gadautorizable = 0

cystipnro = 1

On Error GoTo Manejador_De_Error
' Formato de texto ingresado:
'Empleado,Tipo Hora,Fecha desde,Fecha hasta,Horas,Autoriza
'1,6,05/01/2011,05/01/2011,4.5,rhpror3
'2,7,10/01/2011,10/01/2011,1,rhpror3

          
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)

    NroColumna = NroColumna + 1
    '===============================================
    'GRABO LOS DATOS X LINEA
    '==============================================usuario=
    ArrDatos = Split(strLinea, separador)
    NroLegajo = ArrDatos(0)
    '-----
    cod_tipohora = ArrDatos(1)
    fec_ini = ArrDatos(2)
    fec_hasta = ArrDatos(3)
    cant_hs = ArrDatos(4)
    id_autoriz = Trim(ArrDatos(5))
    '______________________
    'ID Partes Autorizacion de Horas
    gtpnro = 4
    
    'cysfirusuario = usuario
     
    If IsNumeric(NroLegajo) = False Or Trim(NroLegajo) = "" Then
        Texto = ": " & "El N° de legajo es incorrecto "
        HuboError = True
        error = 129
    ElseIf IsNumeric(cod_tipohora) = False Or Trim(cod_tipohora) = "" Then
        Texto = ": " & "El tipo de hora es incorrecto "
        HuboError = True
        error = 37
    ElseIf fec_ini = "" Then
        Texto = ": " & "El campo Fecha de inicio no puede estar vacio "
        HuboError = True
        error = 20
    ElseIf fec_hasta = "" Then
        Texto = ": " & "El campo Fecha Fin no puede estar vacio "
        HuboError = True
        error = 21
    ElseIf IsNumeric(cant_hs) = False Or Trim(cant_hs) = "" Then
        Texto = ": " & "El Cantidad de horas es incorrecto  "
        HuboError = True
        error = 38
    ElseIf id_autoriz = "" Then
        Texto = ": " & "Falta usuario autorizante "
        HuboError = True
        error = 130
    End If
    
    If HuboError = True Then
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, error)
        HuboError = True
        Exit Sub
    End If
' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'______________________
'QUE EXISTA EL LEGAJO
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'______________________
'QUE EXISTA EL USUARIO

StrSql = "SELECT iduser FROM user_per "
StrSql = StrSql & "WHERE iduser='" & id_autoriz & "'"
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el usuario " & id_autoriz
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 130)
    HuboError = True
    Exit Sub
End If


'=============================================================
'VALIDO QUE ESTE ACTIVO EL CIRCUITO
'=============================================================
StrSql = "SELECT cystipact FROM cystipo "
StrSql = StrSql & "WHERE cystipnro = " & cystipnro & " AND cystipact = -1"
OpenRecordset StrSql, rs
If Not rs.EOF Then
    Firmas = "OK"
Else
    Firmas = ""
End If

'____________________________
'SI EL CIRCUITO ESTA ACTIVO
'____________________________
If Firmas = "OK" Then
    'Seteo todo en 0
    cysfirusuario = ""
    cysfirautoriza = ""
    cysfirdestino = ""
    cysfirfin = 0
    cysfiryaaut = 0
    cysfirrecha = 0
    tipoorigen = ""
    l_listperfnro = ""
    
    
    '=====================================
    'FIN DE FIRMA
    '=====================================
    StrSql = "SELECT * FROM cysfincirc "
    StrSql = StrSql & " WHERE userid = '" & usuario & "' and cystipnro = " & cystipnro
    OpenRecordset StrSql, rs_Empleado
    If Not rs_Empleado.EOF Then
        Esfin = True
        cysfirusuario = usuario
        cysfirautoriza = usuario
        cysfirdestino = ""
        cysfirfin = -1
        cysfiryaaut = -1
        cysfirrecha = 0
    Else
        Esfin = False
    End If
    rs_Empleado.Close
    
    If Esfin = False Then
        '=====================================
        'QUE TENGA DELEGADO UN PERMISO
        '=====================================
        StrSql = "SELECT bk_cab.iduser, bkcystipnro "
        StrSql = StrSql & " From bk_cab "
        StrSql = StrSql & " INNER JOIN bk_firmas on bk_firmas.bkcabnro = bk_cab.bkcabnro "
        StrSql = StrSql & " Where fdesde <= " & ConvFecha(Date)
        StrSql = StrSql & " AND (fhasta >= " & ConvFecha(Date) & " OR fhasta IS NULL)"
        StrSql = StrSql & " AND bk_firmas.iduser = '" & usuario & "'"
        StrSql = StrSql & " AND bkcystipnro = " & cystipnro
        StrSql = StrSql & " AND bk_cab.iduser <> '" & usuario & "'"
        OpenRecordset StrSql, rs_Empleado
        
        If Not rs_Empleado.EOF Then
            Esfin = True
            cysfirusuario = rs_Empleado!iduser
            cysfirautoriza = usuario
            cysfirdestino = ""
            
            cysfirfin = -1
            cysfiryaaut = -1
            cysfirrecha = 0
        Else
            '-----------------------------
            'QUE EXISTA EL USUARIO
            '-----------------------------
            StrSql = "SELECT iduser FROM user_per "
            StrSql = StrSql & "WHERE iduser='" & id_autoriz & "'"
            OpenRecordset StrSql, rs_estado
            If rs_estado.EOF Or UCase(usuario) = UCase(id_autoriz) Then
                Texto = ": " & "No se encontro el usuario " & id_autoriz
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(1, 128)
                HuboError = True
                Exit Sub
           End If
            rs_estado.Close
            '---------------------------
            cysfirusuario = usuario
            cysfirautoriza = usuario
            cysfirdestino = id_autoriz
            
            cysfirfin = 0
            cysfiryaaut = 0
            cysfirrecha = 0
        End If
        rs_Empleado.Close
    
    
    End If
    '-----
End If
'______________________
'VALIDA FECHA INICIO
If GetFecha(fec_ini) <> False Then
    gnovdesde = GetFecha(fec_ini)
Else
    Texto = ": " & "Error en la fecha de inicio de la novedad "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 20)
    HuboError = True
    Exit Sub
    
End If

'______________________
'VALIDA FECHA HASTA
If GetFecha(fec_hasta) <> False Then
    gnovhasta = GetFecha(fec_hasta)
Else
    Texto = ": " & "Error en la fecha de fin de la novedad "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 21)
    HuboError = True
    Exit Sub
    
End If

'VALIDA QUE FEC HASTA NO SEA MENOR QUE DESDE
If GetFecha(fec_hasta) < GetFecha(fec_ini) Then
    Texto = ": " & "La fecha Hasta no puede ser inferior a Desde "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 12)
    HuboError = True
    Exit Sub
End If

'__________________
'VALIDA TIPO DE HS
StrSql = "SELECT thnro,thdesc FROM tiphora WHERE (thautpor <> 0 and thdesautpor<>0) "
StrSql = StrSql & " AND thnro = " & cod_tipohora
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "Error en el Tipo de Hora "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 37)
    HuboError = True
    Exit Sub
Else
    GcpDesAbr = "Aut." & NroLegajo & "-" & rs_Empleado!thdesc
    thnro = rs_Empleado!thnro
    If Len(GcpDesAbr) > 30 Then
        GcpDesAbr = Mid(GcpDesAbr, 4, 30)
    End If
End If


' ====================================================================
' VALIDO QUE YA NO EXISTA UN DETALLE
' ====================================================================
StrSql = " SELECT ternro,gti_cabparte.gcpnro from gti_autdet "
StrSql = StrSql & "INNER JOIN gti_cabparte ON gti_cabparte.gcpnro = gti_autdet.gcpnro "
StrSql = StrSql & " WHERE  ternro = " & Tercero
StrSql = StrSql & " AND thnro = " & thnro
StrSql = StrSql & " AND ( (gadfecdesde <=" & ConvFecha(fec_ini)
StrSql = StrSql & " AND " & ConvFecha(fec_ini) & "<=gadfechasta) "
StrSql = StrSql & " OR (gadfecdesde <=" & ConvFecha(fec_hasta)
StrSql = StrSql & " AND " & ConvFecha(fec_hasta) & "<=gadfechasta) "
StrSql = StrSql & " OR (" & ConvFecha(fec_ini)
StrSql = StrSql & " <= gadfecdesde and gadfecdesde <=" & ConvFecha(fec_hasta) & ")) "
OpenRecordset StrSql, rs_Empleado
If Not rs_Empleado.EOF Then
    Texto = ": " & "El empleado ya tiene autorizadas horas de ese tipo para la fecha indicada. Código: " & rs_Empleado!gcpnro
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 37)
    HuboError = True
    Exit Sub
Else
    ' ====================================================================
    ' INSERTO CABECERA
    ' ====================================================================
        StrSql = "INSERT INTO gti_cabparte ( "
        StrSql = StrSql & "gcpdesabr , gcpdesext, gcpdesde, gcphasta "
        StrSql = StrSql & ", Empnro, gtpnro, gcpcerrado, gcpfeccierre, gcpusrcierre, ft, ftap "
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES( "
        StrSql = StrSql & "'" & GcpDesAbr & "',''," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",0"
        StrSql = StrSql & "," & gtpnro & ",0,NULL,NULL,0,0"
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Cabecera insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        
        'Guarda ID del Ûlt. registro ingresado
        'NG - 20/08/2013
        gcpnro = getLastIdentity(objConn, "gti_cabparte")
        'gcpnro = getLastIdentity(objConn, "gcpnro")
 
        ' ====================================================================
        'INSERTO gti_autdet
        ' ====================================================================
        StrSql = "INSERT INTO gti_autdet("
        StrSql = StrSql & "gcpnro , ternro, thnro, gadhoras, gadhorreales"
        StrSql = StrSql & ", gadfecdesde, gadfechasta, gadhoradesde"
        StrSql = StrSql & ", gadhorahasta, gadhs_fecha, gadautorizable, gadobservacion "
        StrSql = StrSql & ") "
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & gcpnro & "," & Tercero & "," & thnro & ""
        StrSql = StrSql & "," & cant_hs & ",NULL"
        StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta)
        StrSql = StrSql & ",'','',-1," & gadautorizable & ",''"
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Detalle de la cabecera insertado"
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    
    ' ====================================================================
    'INSERTO EN cysfirmas
    ' ====================================================================
    'StrSql = "INSERT INTO cysfirmas ("
    'StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
    'StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
    'StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
    'StrSql = StrSql & ")"
    'StrSql = StrSql & "VALUES("
    'StrSql = StrSql & "'" & cysfirusuario & "'," & ConvFecha(Date)
    'StrSql = StrSql & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
    ''StrSql = StrSql & ",'" & Format_Str(Hour(Now), 2, "0", True) & ":" & Format_Str(Minute(Now), 2, "0", True) & "'"
    '0 StrSql = StrSql & ",'" & cysfirusuario & "','" & id_autoriz & "',1," & gcpnro & ",1,'" & gcpdesabr & "'"
    'StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
    'StrSql = StrSql & ")"
    '
    'objConn.Execute StrSql, , adExecuteNoRecords
    'Texto = "Alta horaria insertada "
    'Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    If Firmas = "OK" Then
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & gcpnro & ",1,'Parte De horas Extras Desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    End If

'--------------------------------------
End If ' CIERRO IF QUE VALIDA SI YA ESTA CARGADO EL PARTE DEHORA

Fin:
'Cierro y libero

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
    Set rs_Empleado = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_341(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Novedad segun formato (Copia 211 + Circuito de firmas)
' Autor      : Gonzalez Nicolás
'              El formato es:
'                   Formato 1
'                       Legajo; conccod; tpanro; monto
'                   ó
'                   Formato 2.1
'                       Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta
'                   Formato 2.2
'                       Legajo; conccod; tpanro; monto; FechaDesde
'                   ó
'                   Formato 3
'                       Legajo; conccod; tpanro; monto; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro)

'                   ó
'                   Formato 4
'                       Legajo; conccod; tpanro; monto; tipo motivo; motivo

'                   ó
'                   Formato 5
'                       Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta; tipo motivo; motivo

'                   ó
'                   Formato 6
'                       Legajo; conccod; tpanro; monto; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro); tipo motivo; motivo

'                   ó
'                   Formato 7
'                       Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro); tipo motivo; motivo

' Fecha      : 25/04/2011
' Ultima Mod.: 12/05/2011 - Gonzalez Nicolás - Se agregó validación en VALIDO QUE ESTE ACTIVO EL CIRCUITO
'              10/06/2011 - Gonzalez Nicolás - Se agregó listaConceptosPermitidos()
'              11/11/2011 - Gonzalez Nicolás - Si existe novedad, elimina las firmas y crea un circuito nuevo
'              16/11/2011 - Gonzalez Nicolás - Se agregó campo usuario al formato, y se cambio la forma en que se designa el firmante.
'                         - Ignora si el usuario que levanta la interfaz es FF, y utiliza el que viene como parametro para firmar (Autoriza si es FF)
'              16/02/2012 - Gonzalez Nicolás - Si el usuario de la interfaz es BK de un FF el registro queda autorizado, sino se pasa al usuario destino.
'              09/04/2012 - Gonzalez Nicolás - Se valida que el usuario origen sea <> destino | CAS-15529 - Sykes - Error importación novedades
'              03/05/2012 - Sebastian Stremel cambios caso CAS-14851 - Sykes - Modificaciones Varias
'              20/08/2013 - Gonzalez Nicolás - Se corrigió parametro en llamada a getLastIdentity()
'              02/09/2013 - Mauricio Zwenger - CAS-20933 - se quito obligatoriedad de poner fecha hasta en las novedades que poseen vigencia
'              10/02/2014 - Carmen Quintero - (CAS-23705 - SYKES - BUG EN CARGA DE INTERFAZ 341) Se modifico para que tenga cierre de novedades
'              12/06/2014 - Gonzalez Nicolás - Se cierra vigencia un día anterior de la fecha desde del registro a insertar.
'              29/08/2014 - Carmen Quintero - CAS-26942 - SYKES - ERROR EN CARGA DE INTERFAZ - Se modifica modelo 341 por faltar enviar a ejecutar la consulta en la base, para el caso cuando se debe actualizar la novedad con vigencia del empleado
'              15/10/2014 - Carmen Quintero - CAS-26942 - SYKES - ERROR EN CARGA DE INTERFAZ (CAS-15298) - Se modifica la consulta que verifica si existe superposición
' -------------------------------------------------------------------------------------------------------------------------------

Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As String
Dim fornro As Long

Dim tpanro As Long
Dim Aux_Monto As String
Dim Monto As Double
Dim FechaDesde As String
Dim FechaHasta As String

Dim PeriodoDesde
Dim PeriodoHasta
Dim TieneVigencia As Boolean
Dim EsRetroactivo As Boolean

Dim TipoMotivo As String
Dim Motivo As String

Dim Aux As String
Dim Encontro As Boolean

Dim perfsegcon As Integer
Dim tienePermiso As Boolean

Dim sinVig As Boolean

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim rs_TipoPar As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_NovEmp2 As New ADODB.Recordset
Dim rs_Periodo As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset
Dim rs_seguridad As New ADODB.Recordset
Dim rs_TipoMotivo As New ADODB.Recordset
Dim rs_cft_resumen As New ADODB.Recordset
Dim rs_Confrep As New ADODB.Recordset
Dim Arr_remplazo
Dim nenro
'Circ Firmas
Dim rs As New ADODB.Recordset
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim gnovnro
Dim cystipnro
Dim Firmas
Dim firmas_ok

Dim FechaDesdeAux As String 'V4.54
Dim FechaHastaAux As String 'V4.54
Dim StrSqlAux As String ' 4.54
Dim InsertoNovedad As Boolean ' 4.54
Dim ExisteNovedad As Boolean


Dim Esfin
Dim id_autoriz
Dim rs_estado As New ADODB.Recordset
'---
'Dim cysfirsecuencia
'Dim cysfirdestino2
'Dim cysfirfin2
'Dim cysfiryaaut2
'Dim cysfirrecha2




Dim strCmdLine
cysfirautoriza = usuario
cystipnro = 5
nenro = ""
'Dim AccionNovedad
'AccionNovedad = Mid(parametros, pos1, pos2 - pos1 + 1)
' El formato es:
' Formato 1
' Legajo; conccod; tpanro; monto
' ó
' Formato 2.1
' Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta
' ó
' Formato 2.2
' Legajo; conccod; tpanro; monto; FechaDesde
' ó
' Formato 3
' Legajo; conccod; tpanro; monto; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro)
' ó
' Formato 4
' Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro)
    
    On Error GoTo Manejador_De_Error
    Tabs = 1
    
    TieneVigencia = False
    EsRetroactivo = False

    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    'Nro de Legajo
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
' Flog.writeline NroProcesoBatch
'    '=============================================
'    'Trae número de proceso para validar remplazo
'    '=============================================
'    StrSql = "SELECT bprcparam FROM batch_proceso "
'    StrSql = StrSql & " WHERE bpronro = " & NroProcesoBatch
'    OpenRecordset StrSql, rs_Confrep
'    If rs_Confrep.EOF Then
'        AccionNovedad = 0
'    Else
'        Arr_remplazo = Split(rs_Confrep!bprcparam, "@", -1)
'        AccionNovedad = Arr_remplazo(2)
'    End If
'    rs_Confrep.Close
    

    
   
    NroColumna = NroColumna + 1
    'Concepto
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    ConcCod = Mid(strLinea, pos1, pos2 - pos1)
    ConcCod = EliminarCHInvalidosII(ConcCod, 1, "")
    
    
    NroColumna = NroColumna + 1
    'Tipo de Parametro
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    tpanro = Mid(strLinea, pos1, pos2 - pos1)
    '-------------------
    'Guarda el usuario
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    id_autoriz = Mid(strLinea, pos1, pos2 - pos1)
    '-------------------

    NroColumna = NroColumna + 1
    'Monto
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    If pos2 = 0 Then
        pos2 = Len(strLinea)
        Aux_Monto = Mid(strLinea, pos1, pos2)
        Monto = CSng(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
    Else
        Aux_Monto = Mid(strLinea, pos1, pos2 - pos1)
        Monto = CSng(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
        
        'Puede veniar Fecha Desde; fecha Hasta ó Retroactivo, Periodo desde , Periodo Hasta
        pos1 = pos2 + 1
        pos2 = InStr(pos1 + 1, strLinea, separador)
        
        If pos2 > 0 Then
            NroColumna = NroColumna + 1
            Aux = Mid(strLinea, pos1, pos2 - pos1)
            
            If IsDate(Aux) Then
                TieneVigencia = True
                'Fecha desde
                FechaDesde = Mid(strLinea, pos1, pos2 - pos1)
            
                NroColumna = NroColumna + 1
                'Fecha Hasta
                pos1 = pos2 + 1
                pos2 = InStr(pos1, strLinea, separador)
                
                If pos2 > 0 Then
                    FechaHasta = Mid(strLinea, pos1, pos2 - pos1)
                    If IsDate(FechaHasta) Then
                        FechaHasta = CDate(FechaHasta)
                    Else
                        If Not EsNulo(FechaHasta) Then
                            Texto = ": Fecha no valida "
                            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                            Call InsertaError(1, 4)
                            HuboError = True
                            Exit Sub
                        End If
                    End If
                    NroColumna = NroColumna + 1
                    'Marca de Retroactividad
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    Aux = Mid(strLinea, pos1, pos2 - pos1)
                    If UCase(Aux) = "SI" Then
                        EsRetroactivo = True
                    Else
                        EsRetroactivo = False
                    End If
                    If EsRetroactivo Then
                        'Periodo desde
                        pos1 = pos2 + 1
                        pos2 = InStr(pos1 + 1, strLinea, separador)
                        PeriodoDesde = Mid(strLinea, pos1, pos2 - pos1)
                        'Periodo hasta
                        pos1 = pos2 + 1
                        pos2 = InStr(pos1 + 1, strLinea, separador)
                        If pos2 > 0 Then 'Se especifican tipo de motivo y motivo
                            PeriodoHasta = Mid(strLinea, pos1, pos2 - pos1)
                            'Tipo de motivo
                            pos1 = pos2 + 1
                            pos2 = InStr(pos1 + 1, strLinea, separador)
                            If pos2 > 0 Then
                                TipoMotivo = Mid(strLinea, pos1, pos2 - pos1)
                                pos1 = pos2 + 1
                                pos2 = InStr(pos1 + 1, strLinea, separador)
                                If pos2 > 0 Then
                                    'Motivo
                                    Motivo = Mid(strLinea, pos1, pos2 - pos1)
                                    Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                                Else
                                    'Motivo
                                    pos2 = Len(strLinea)
                                    Motivo = Mid(strLinea, pos1, pos2)
                                    Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                                End If
                            Else
                                pos2 = Len(strLinea)
                                TipoMotivo = Mid(strLinea, pos1, pos2)
                                'Motivo
                                Motivo = ""
                            End If
                        Else
                            pos2 = Len(strLinea)
                            PeriodoHasta = Mid(strLinea, pos1, pos2)
                        End If
                    Else 'el siguiente dato es el tipo de motivo
                        TipoMotivo = Aux
                        pos1 = pos2 + 1
                        pos2 = InStr(pos1 + 1, strLinea, separador)
                        If pos2 > 0 Then 'Se especifican tipo de motivo y motivo
                            'Motivo
                            Motivo = Mid(strLinea, pos1, pos2 - pos1)
                            Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                        Else
                            pos2 = Len(strLinea)
                            Motivo = Mid(strLinea, pos1, pos2)
                            Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                        End If
                    End If
                    
                Else
                    pos2 = Len(strLinea)
                    FechaHasta = Mid(strLinea, pos1, pos2)
                    TieneVigencia = True
                End If
            Else
                If UCase(Aux) = "SI" Then
                    EsRetroactivo = True
                Else
                    EsRetroactivo = False
                End If
                If EsRetroactivo Then
                    'Periodo desde
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    PeriodoDesde = Mid(strLinea, pos1, pos2 - pos1)
                    'Periodo hasta
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    If pos2 > 0 Then 'Se especifican tipo de motivo y motivo
                        PeriodoHasta = Mid(strLinea, pos1, pos2 - pos1)
                        'Tipo de motivo
                        pos1 = pos2 + 1
                        pos2 = InStr(pos1 + 1, strLinea, separador)
                        If pos2 > 0 Then
                            TipoMotivo = Mid(strLinea, pos1, pos2 - pos1)
                            pos1 = pos2 + 1
                            pos2 = InStr(pos1 + 1, strLinea, separador)
                            If pos2 > 0 Then
                                'Motivo
                                Motivo = Mid(strLinea, pos1, pos2 - pos1)
                                Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                            Else
                                'Motivo
                                pos2 = Len(strLinea)
                                Motivo = Mid(strLinea, pos1, pos2)
                                Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                            End If
                        Else
                            pos2 = Len(strLinea)
                            TipoMotivo = Mid(strLinea, pos1, pos2)
                            'Motivo
                            Motivo = ""
                        End If
                    Else
                        pos2 = Len(strLinea)
                        PeriodoHasta = Mid(strLinea, pos1, pos2)
                    End If
                Else 'el siguiente dato es el tipo de motivo
                    TipoMotivo = Aux
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    If pos2 > 0 Then 'Se especifican tipo de motivo y motivo
                        'Motivo
                        Motivo = Mid(strLinea, pos1, pos2 - pos1)
                        Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                    Else
                        pos2 = Len(strLinea)
                        Motivo = Mid(strLinea, pos1, pos2)
                        Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                    End If
                End If
            End If
        Else
            If Not pos1 >= Len(strLinea) Then
                'Viene Vigencia con fecha desde y sin fecha hasta
                pos2 = Len(strLinea)
                FechaDesde = Mid(strLinea, pos1, pos2)
                TieneVigencia = True
                FechaHasta = ""
            End If
        End If
    End If



' ====================================================================
'   Validar los parametros Levantados



'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If


'Que exista el concepto
StrSql = "SELECT * FROM concepto WHERE conccod = '" & ConcCod & "'"
'StrSql = StrSql & " OR conccod = '" & Conccod & "'"
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
    fornro = rs_Concepto!fornro
End If

'Que exista el tipo de Parametro
StrSql = "SELECT * FROM tipopar WHERE tpanro = " & tpanro
OpenRecordset StrSql, rs_TipoPar

If rs_TipoPar.EOF Then
    Texto = ": " & "No se encontro el Tipo de Parametro " & tpanro
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
End If


'FGZ - 27/01/2004
'Faltaria revisar que el par concepto-parametro se resuelva por novedad
StrSql = "SELECT * FROM con_for_tpa "
StrSql = StrSql & " WHERE concnro = " & ConcNro
StrSql = StrSql & " AND fornro =" & fornro
StrSql = StrSql & " AND tpanro =" & tpanro
OpenRecordset StrSql, rs_con_for_tpa

If rs_con_for_tpa.EOF Then
    Texto = ": " & "El parametro " & tpanro & " no esta asociado a la formula del concepto " & ConcCod
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
Else
    Encontro = False
    Do While Not Encontro And Not rs_con_for_tpa.EOF
        If Not CBool(rs_con_for_tpa!cftauto) Then
            Encontro = True
        End If
        rs_con_for_tpa.MoveNext
    Loop
    If Not Encontro Then
        Texto = ": " & "El parametro " & tpanro & " del concepto " & ConcCod & " no se resuelve por novedad "
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(3, 11)
        HuboError = True
        Exit Sub
    End If
End If

'------------------------------------------------
'VALIDA QUE EL USUARIO TENGA ACTIVO EL CONCEPTO
If listaConceptosPermitidos(ConcCod) = True Then
    tienePermiso = True
Else
    tienePermiso = False
End If
 
If tienePermiso = False Then
  Texto = ": El usuario:" & usuario & " no tiene autorización sobre el concepto:" & ConcCod
  Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
  HuboError = True
End If
'------------------------------------------------

If EsRetroactivo Then
  'Chequeo que los periodos sean validos
  'Chequeo Periodo Desde
  
  StrSql = "SELECT * FROM periodo WHERE pliqnro = " & PeriodoDesde
  If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
  OpenRecordset StrSql, rs_Periodo
  If rs_Periodo.EOF Then
      Texto = ": " & "Periodo Desde Invalido " & PeriodoDesde
      NroColumna = 6
      Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
      Call InsertaError(6, 36)
      HuboError = True
      Exit Sub
  End If
  
  'Chequeo Periodo Hasta
  StrSql = "SELECT * FROM periodo WHERE pliqnro = " & PeriodoHasta
  If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
  OpenRecordset StrSql, rs_Periodo
  If rs_Periodo.EOF Then
      Texto = ": " & "Periodo Hasta Invalido " & PeriodoHasta
      NroColumna = 7
      Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
      Call InsertaError(7, 36)
      HuboError = True
      Exit Sub
  End If
End If

'=============================================================
'Si viene el tipo de motivo cargo ese y valido que exista sino viene, busco si hay un default
If Len(TipoMotivo) = 0 Or (TipoMotivo = "N/A") Then
    'Verifico si hay un default
    StrSql = "SELECT tipmotnro, motivo FROM cft_resumen where concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    OpenRecordset StrSql, rs_cft_resumen
    If Not rs_cft_resumen.EOF Then
        TipoMotivo = IIf(IsNull(rs_cft_resumen!tipmotnro), "0", rs_cft_resumen!tipmotnro)
    End If
    rs_cft_resumen.Close
Else
    'Valido contra BD que exista el motivo
    StrSql = "SELECT * FROM tipomotivo where tipmotnro = " & TipoMotivo
    OpenRecordset StrSql, rs_TipoMotivo
    If rs_TipoMotivo.EOF Then
        Texto = ": " & "No se encontro el tipo de motivo " & TipoMotivo
        NroColumna = 13
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(13, 116)
        HuboError = True
        Exit Sub
    End If
    rs_TipoMotivo.Close
End If

'Si viene motivo cargo ese, sino viene, busco si hay un default
If Len(Motivo) = 0 Or (Motivo = "N/A") Then
    'Verifico si hay un default
    StrSql = "SELECT tipmotnro, motivo FROM cft_resumen where concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    OpenRecordset StrSql, rs_cft_resumen
    If Not rs_cft_resumen.EOF Then
        Motivo = IIf(IsNull(rs_cft_resumen!Motivo), "", rs_cft_resumen!Motivo)
    End If
    rs_cft_resumen.Close
End If

If Len(TipoMotivo) = 0 Then TipoMotivo = "null"
If TipoMotivo = "N/A" Then TipoMotivo = "null"
If TipoMotivo = "0" Then TipoMotivo = "null"
If Motivo = "N/A" Then Motivo = ""


'=============================================================
'VALIDO QUE TENGA PERMITIDO EL CONCEPTO
If listaConceptosPermitidos(ConcCod) = False Then
    Texto = ": " & "El usuario no tiene permiso para insertar este tipo de concepto/Parámetro "
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 18)
    HuboError = True
    Exit Sub
End If

'=============================================================
'VALIDO QUE ESTE ACTIVO EL CIRCUITO
StrSql = "SELECT cystipact FROM cystipo "
StrSql = StrSql & "WHERE cystipnro = " & cystipnro & " AND cystipact = -1"
OpenRecordset StrSql, rs
If Not rs.EOF Then
    'Seteo todo en 0
    cysfirusuario = ""
    cysfirautoriza = ""
    cysfirdestino = ""
    cysfirfin = 0
    cysfiryaaut = 0
    cysfirrecha = 0
    '-----------------------------
    'QUE EXISTA EL USUARIO
    '-----------------------------
    StrSql = "SELECT iduser FROM user_per "
    StrSql = StrSql & "WHERE iduser='" & id_autoriz & "'"
    OpenRecordset StrSql, rs_estado
    If rs_estado.EOF Then
        Texto = ": " & "No se encontro el usuario " & id_autoriz
        NroColumna = 1
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 128)
        HuboError = True
        Exit Sub
    End If
    rs_estado.Close
    

    
    '--------------------------- Esfin siempre es FALSE (SOLO PARA ESTE MODELO:341)
    '=====================================
    'FIN DE FIRMA
    '=====================================
'    StrSql = "SELECT * FROM cysfincirc "
'    StrSql = StrSql & " WHERE userid = '" & id_autoriz & "' and cystipnro = " & cystipnro
'    OpenRecordset StrSql, rs_Empleado
'    If Not rs_Empleado.EOF Then
'        Esfin = True
'        cysfirusuario = id_autoriz
'        cysfirautoriza = id_autoriz
'        cysfirdestino = ""
'        cysfirfin = -1
'        cysfiryaaut = -1
'        cysfirrecha = 0
'    Else
        Esfin = False
'    End If
'    rs_Empleado.Close
    
    If Esfin = False Then
        '=====================================
        'QUE TENGA DELEGADO UN PERMISO
        '=====================================
        StrSql = "SELECT bk_cab.iduser, bkcystipnro "
        StrSql = StrSql & " From bk_cab "
        StrSql = StrSql & " INNER JOIN bk_firmas on bk_firmas.bkcabnro = bk_cab.bkcabnro "
        StrSql = StrSql & " Where fdesde <= " & ConvFecha(Date)
        StrSql = StrSql & " AND (fhasta >= " & ConvFecha(Date) & " OR fhasta IS NULL)"
        StrSql = StrSql & " AND bk_firmas.iduser = '" & usuario & "'"
        'StrSql = StrSql & " AND bk_firmas.iduser = '" & id_autoriz & "'"
        StrSql = StrSql & " AND bkcystipnro = " & cystipnro
        StrSql = StrSql & " AND bk_cab.iduser <> '" & usuario & "'"
        'StrSql = StrSql & " AND bk_cab.iduser <> '" & id_autoriz & "'"
        OpenRecordset StrSql, rs_Empleado
        
        If Not rs_Empleado.EOF Then
            Esfin = True
            cysfirusuario = rs_Empleado!iduser
            'cysfirautoriza = id_autoriz
            cysfirautoriza = usuario
            cysfirdestino = ""
            
            cysfirfin = -1
            cysfiryaaut = -1
            cysfirrecha = 0
        Else
            cysfirusuario = usuario
            cysfirautoriza = usuario
            cysfirdestino = id_autoriz
            
            cysfirfin = 0
            cysfiryaaut = 0
            cysfirrecha = 0
        End If
        rs_Empleado.Close

    End If
    
    
    '------------------------------------
    'VALIDO QUE USUARIO ORIGEN <> DESTINO
    '------------------------------------
    If UCase(cysfirusuario) = UCase(cysfirdestino) Then
        Texto = ": " & "El usuario de origen no puede ser el mismo que el de destino"
        NroColumna = 1
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 128)
        HuboError = True
        Exit Sub
    End If
    '---------------------------
    '-----------------------------
    If cysfirautoriza = "" And cysfirusuario = "" And cysfirdestino = "" And cysfirfin = 0 And cysfiryaaut = 0 And cysfirrecha = 0 Then
        Firmas = ""
    Else
        Firmas = "OK"
    End If
Else
    Firmas = ""
End If
'-----------------------------

'Busco si existe la Novedad
  If Not TieneVigencia Then
    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
    StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
    StrSql = StrSql & " ORDER BY nevigencia "
    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
    OpenRecordset StrSql, rs_NovEmp
    
    If Not rs_NovEmp.EOF Then
    
        'Busco si existe una novedad sin vigencia
        sinVig = False
        Do While Not rs_NovEmp.EOF
            If Not CBool(rs_NovEmp!nevigencia) Then
                sinVig = True
                Exit Do 'Para que quede posicionado en la nov a modificar
            End If
            rs_NovEmp.MoveNext
        Loop
        'A partir de la V4.50
        'Busco si existe una misma novedad s/vigencia o c/vigencia diferente
        ExisteNovedad = False
        StrSql = "SELECT * FROM novemp WHERE "
        StrSql = StrSql & " concnro = " & ConcNro
        StrSql = StrSql & " AND tpanro = " & tpanro
        StrSql = StrSql & " AND empleado = " & Tercero
        OpenRecordset StrSql, rs_NovEmp2
        If Not rs_NovEmp2.EOF Then
            Flog.writeline "Existe una novedad"
            ExisteNovedad = True
        End If
        rs_NovEmp2.Close
'       -------------------------------------------------

    
        If Not sinVig Then ' No encontre con licencia
            If ExisteNovedad = True Then 'V4.50
                Texto = "No se insertó la novedad. Ya existe y no se pisa.5"
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            Else

                'Inserto---------------------------------------------------------
                    If Not EsRetroactivo Then
                        StrSql = "INSERT INTO novemp (" & _
                                 "empleado,concnro,tpanro,nevalor,nevigencia"
                        StrSql = StrSql & ",tipmotnro,motivo"
                        StrSql = StrSql & ") VALUES (" & Tercero & _
                                 "," & ConcNro & _
                                 "," & tpanro & _
                                 "," & Monto & _
                                 ",0"
                        StrSql = StrSql & "," & TipoMotivo & _
                        ",'" & Motivo & "'"
                        StrSql = StrSql & " )"
                    Else
                        StrSql = "INSERT INTO novemp (" & _
                                 "empleado,concnro,tpanro,nevalor,nevigencia,nepliqdesde,nepliqhasta "
                        StrSql = StrSql & ",tipmotnro,motivo"
                        StrSql = StrSql & ") VALUES (" & Tercero & _
                                 "," & ConcNro & _
                                 "," & tpanro & _
                                 "," & Monto & _
                                 "," & CLng(TieneVigencia) & _
                                 "," & PeriodoDesde & _
                                 "," & PeriodoHasta
                        StrSql = StrSql & "," & TipoMotivo & _
                        ",'" & Motivo & "'"
                        StrSql = StrSql & " )"
                    End If
                    
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = "Novedad Insertada "
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
'                End If

            
                objConn.Execute StrSql, , adExecuteNoRecords
                'NG - 20/08/2013
                gnovnro = getLastIdentity(objConn, "novemp")
                'gnovnro = getLastIdentity(objConn, "nenro")
                Texto = "Novedad Insertada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            End If
 
            

            '-----------------------------------------------------------------
        Else
            'Existe una novedad pero sin vigencia ==> Actualizo
            
            Select Case CInt(AccionNovedad)
                Case -1: 'Actualizo la Novedad
                    If Not EsRetroactivo Then
                        StrSql = "UPDATE novemp SET nevalor = " & Monto
                            StrSql = StrSql & " , tipmotnro =  " & TipoMotivo & _
                            " , motivo =  '" & Motivo & "'"
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    Else
                        StrSql = "UPDATE novemp SET nevalor = " & Monto & _
                                 " , nepliqdesde =  " & PeriodoDesde & _
                                 " , nepliqhasta =  " & PeriodoHasta & _
                                 " , tipmotnro =  " & TipoMotivo & _
                                 " , motivo =  '" & Motivo & "'"
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    End If
                    nenro = rs_NovEmp!nenro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = "Novedad Actualizada "
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                    'Flog.Writeline Espacios(Tabulador * 1) & "Novedad Actualizada "
                Case 0: 'Mantiene Novedades
                    Texto = "No se insertó la novedad. Ya existe y no se pisa.4"
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                Case 1: 'Suma Novedades
                    If Not EsRetroactivo Then
                        StrSql = "UPDATE novemp SET nevalor = nevalor + " & Monto
                        StrSql = StrSql & " , tipmotnro =  " & TipoMotivo
                        StrSql = StrSql & " , motivo =  '" & Motivo & "'"
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    Else
                        StrSql = "UPDATE novemp SET nevalor = nevalor + " & Monto & _
                                 " , nepliqdesde =  " & PeriodoDesde & _
                                 " , nepliqhasta =  " & PeriodoHasta
                        StrSql = StrSql & " , tipmotnro =  " & TipoMotivo & _
                        " , motivo =  '" & Motivo & "'"
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    End If
                    nenro = rs_NovEmp!nenro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = "Novedad Sumada "
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            End Select

        End If
    Else 'No encontre novedad alguna para el conc y param
        
        If ExisteNovedad = True Then 'V4.50
            Texto = "No se insertó la novedad. Ya existe y no se pisa.3"
            Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        Else

        'Inserto
            If Not EsRetroactivo Then
                StrSql = "INSERT INTO novemp (" & _
                         "empleado,concnro,tpanro,nevalor,nevigencia"
                StrSql = StrSql & ",tipmotnro,motivo"
                StrSql = StrSql & ") VALUES (" & Tercero & _
                         "," & ConcNro & _
                         "," & tpanro & _
                         "," & Monto & _
                         ",0"
                StrSql = StrSql & "," & TipoMotivo & _
                ",'" & Motivo & "'"
                StrSql = StrSql & " )"
            Else
                StrSql = "INSERT INTO novemp (" & _
                         "empleado,concnro,tpanro,nevalor,nevigencia,nepliqdesde,nepliqhasta "
                StrSql = StrSql & ",tipmotnro,motivo"
                StrSql = StrSql & ") VALUES (" & Tercero & _
                         "," & ConcNro & _
                         "," & tpanro & _
                         "," & Monto & _
                         "," & CLng(TieneVigencia) & _
                         "," & PeriodoDesde & _
                         "," & PeriodoHasta
                StrSql = StrSql & "," & TipoMotivo & _
                ",'" & Motivo & "'"
                StrSql = StrSql & " )"
            End If
            
            objConn.Execute StrSql, , adExecuteNoRecords
            'NG - 20/08/2013
            gnovnro = getLastIdentity(objConn, "novemp")
            'gnovnro = getLastIdentity(objConn, "nenro")
            'Flog.Writeline Espacios(Tabulador * 1) & "Novedad insertada "
            Texto = "Novedad insertada "
            Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        End If
    End If
 Else 'Tiene Vigencia
 
    '02/09/2013 - MDZ - CAS-20933 - verifico si hay novedades sin vigencia
'    StrSql = "SELECT * FROM novemp WHERE "
'    StrSql = StrSql & " concnro = " & ConcNro
'    StrSql = StrSql & " AND tpanro = " & Tpanro
'    StrSql = StrSql & " AND empleado = " & Tercero
'    StrSql = StrSql & " AND nevigencia = 0 "
'    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
'    OpenRecordset StrSql, rs_NovEmp
'    If Not rs_NovEmp.EOF Then
'        Texto = ": " & "No se puede insertar una novedad con vigencia porque existe una sin vigencia."
'        Call Escribir_Log("floge", NroLinea, 0, Texto, Tabs, strLinea)
'        Call InsertaError(0, 139)
'        HuboError = True
'        Exit Sub
'    End If
    
'    Agregado el 10/02/2014
    'Busco si existe una misma novedad s/vigencia o c/vigencia diferente
    ExisteNovedad = False
    
    '*******************************************
    'VER QUE PASA CUANDO TENGO MAS DE 1 CARGADA
    '*******************************************
    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
    
    
    StrSql = StrSql & " AND ("
    If EsNulo(FechaHasta) = False Then
    
        StrSql = StrSql & "((nedesde <= " & ConvFecha(FechaDesde) & " AND nedesde <= " & ConvFecha(FechaHasta) & " AND (nehasta >= " & ConvFecha(FechaDesde) & " OR nehasta IS NULL )) )"
        StrSql = StrSql & " OR ((nedesde >= " & ConvFecha(FechaDesde) & " AND nedesde <= " & ConvFecha(FechaHasta) & " AND (nehasta >= " & ConvFecha(FechaDesde) & " OR nehasta IS NULL)))"
    
    Else
        StrSql = StrSql & "((nedesde <= " & ConvFecha(FechaDesde) & " AND nedesde <= " & ConvFecha(FechaDesde) & " AND (nehasta >= " & ConvFecha(FechaDesde) & " OR nehasta IS NULL )) )"
        StrSql = StrSql & " OR ((nedesde >= " & ConvFecha(FechaDesde) & " AND nedesde <= " & ConvFecha(FechaDesde) & " AND (nehasta >= " & ConvFecha(FechaDesde) & " OR nehasta IS NULL)))"
    End If
        StrSql = StrSql & ")"
        StrSql = StrSql & " ORDER BY nehasta ASC "
    
    OpenRecordset StrSql, rs_NovEmp2
    If Not rs_NovEmp2.EOF Then
        'Flog.WRITELINE "Existe una novedad"
        ExisteNovedad = True
        Do While Not rs_NovEmp2.EOF
            InsertoNovedad = False
            StrSqlAux = ""
            If EsNulo(rs_NovEmp2!nehasta) = True And EsNulo(FechaHasta) = False Then
            'Si la FechaHastaAux es nulo, debo cerrar vigencia
                 'If CDate(rs_NovEmp2!nedesde) = CDate(FechaDesde) Then
                 If CDate(rs_NovEmp2!nedesde) < CDate(FechaDesde) Then
                     'Actualizo novedad, y cierro vigencia.
                     'StrSqlAux = ", nehasta=" & ConvFecha(FechaHasta)
                     StrSqlAux = ", nehasta=" & ConvFecha(DateAdd("d", -1, FechaDesde))
                     
                     Exit Do
                 End If
            ElseIf (CDate(rs_NovEmp2!nedesde) < CDate(FechaDesde)) Then 'NG 17/06/2014
                'Actualizo novedad, y cierro vigencia.
                StrSqlAux = ", nehasta=" & ConvFecha(DateAdd("d", -1, FechaDesde))
                Exit Do
            End If
            '***********************************************
            '***********************************************
            If EsNulo(rs_NovEmp2!nehasta) = False Then
                If CDate(rs_NovEmp2!nehasta) < CDate(FechaDesde) Then
                    'Inserto nuevo registro.
                    ExisteNovedad = False
                    InsertoNovedad = True
                    Exit Do
                End If
            End If
            '***********************************************
            '***********************************************
            If EsNulo(rs_NovEmp2!nehasta) = True Then
                rs_NovEmp2.MoveNext
                If Not rs_NovEmp2.EOF And EsNulo(FechaHasta) = False Then
                    If CDate(rs_NovEmp2!nehasta) > CDate(FechaHasta) Then
                        'Inserto nuevo registro.
                        ExisteNovedad = False
                        InsertoNovedad = True
                        Exit Do
                    End If
                ElseIf EsNulo(FechaHasta) = False Then
                    rs_NovEmp2.MovePrevious
                    If CDate(rs_NovEmp2!nedesde) > CDate(FechaHasta) Then
                        'Inserto nuevo registro.
                        ExisteNovedad = False
                        InsertoNovedad = True
                        Exit Do
                    End If
                Else
                    rs_NovEmp2.MovePrevious
                End If
            End If
            '***********************************************
            '***********************************************
            rs_NovEmp2.MoveNext
        Loop
        '-------------------------------------------
        'V4.54 | Guardo fechas aux. de la novedad existente
        '____________________________________________
        If Not rs_NovEmp2.EOF Then
            FechaDesdeAux = rs_NovEmp2!nedesde
            If EsNulo(rs_NovEmp2!nehasta) Then
                FechaHastaAux = ""
            Else
                FechaHastaAux = rs_NovEmp2!nehasta
            End If
        Else
            FechaDesdeAux = FechaDesde
            FechaHastaAux = FechaHasta
        End If
        '-------------------------------------------
    Else
        FechaDesdeAux = FechaDesde
        FechaHastaAux = FechaHasta
    End If
    rs_NovEmp2.Close
   
'----------------------------------------------------
'----------------------------------------------------
'   BUSCO SI EXISTE  MISMA NOVEDAD SIN VIGENCIA
    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
     StrSql = StrSql & " AND nevigencia = 0"
    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
    OpenRecordset StrSql, rs_NovEmp
    If Not rs_NovEmp.EOF Then
        ExisteNovedad = True
        Flog.writeline "Se encontró novedad Sin Vigencia"
    Else
        ExisteNovedad = False
    End If
'----------------------------------------------------
'----------------------------------------------------
    
    'Reviso que no se pise
    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
    StrSql = StrSql & " AND nevigencia = -1 "
    If Not EsNulo(FechaHastaAux) Then
        StrSql = StrSql & " AND nedesde = " & ConvFecha(FechaDesdeAux)
        StrSql = StrSql & " AND nehasta = " & ConvFecha(FechaHastaAux)
    Else
        StrSql = StrSql & " AND nedesde = " & ConvFecha(FechaDesdeAux)
        StrSql = StrSql & " AND nehasta is null"
    End If
    
'----

    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
    OpenRecordset StrSql, rs_NovEmp
    
    'If Not rs_NovEmp.EOF Then
    If Not rs_NovEmp.EOF And InsertoNovedad = False Then ' 4.54
    
        'Existe/n novedad/es con vigencia ==>
        Select Case CInt(AccionNovedad)
            Case -1: 'Actualizo la Novedad
                If Not EsRetroactivo Then
                    If StrSqlAux <> "" Then
                        'Existe novedad con vigencia Desde, la cierro y creo la nueva novedad
                        StrSql = "UPDATE novemp SET "
                        StrSql = StrSql & Replace(StrSqlAux, ",", "")
                        '--------------------------------------------------------
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                        objConn.Execute StrSql, , adExecuteNoRecords
                        Texto = "Novedad Actualizada "

                        
                        '----------------INSERTO EL NUEVO REGISTRO
                        StrSql = "INSERT INTO novemp ("
                        StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
                        If Not EsNulo(FechaHasta) Then
                            StrSql = StrSql & ",nehasta"
                        End If
                        StrSql = StrSql & ",tipmotnro,motivo"
                        StrSql = StrSql & ") VALUES (" & Tercero
                        StrSql = StrSql & "," & ConcNro
                        StrSql = StrSql & "," & tpanro
                        StrSql = StrSql & "," & Monto
                        StrSql = StrSql & ",-1"
                        StrSql = StrSql & "," & ConvFecha(FechaDesde)
                        If Not EsNulo(FechaHasta) Then
                            StrSql = StrSql & "," & ConvFecha(FechaHasta)
                        End If
                        StrSql = StrSql & "," & TipoMotivo & _
                        ",'" & Motivo & "'"
                        StrSql = StrSql & " )"
                        '----------------
                        objConn.Execute StrSql, , adExecuteNoRecords
                        Texto = "Novedad Insertada "
                        gnovnro = getLastIdentity(objConn, "novemp")
                    Else
                        StrSql = "UPDATE novemp SET nevalor = " & Monto
                        StrSql = StrSql & " , tipmotnro =  " & TipoMotivo
                        StrSql = StrSql & " , motivo =  '" & Motivo & "'"
                        StrSql = StrSql & StrSqlAux
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                        'Agregado 29/08/2014
                        objConn.Execute StrSql, , adExecuteNoRecords
                        Texto = "Novedad Actualizada "
                        'fin
                    End If

                    
                Else
                    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
                             " , nepliqdesde =  " & PeriodoDesde & _
                             " , nepliqhasta =  " & PeriodoHasta
                    StrSql = StrSql & " , tipmotnro =  " & TipoMotivo & _
                    " , motivo =  '" & Motivo & "'"
                    StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    nenro = rs_NovEmp!nenro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = "Novedad Actualizada "
                End If
                
                

                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            Case 0: 'Mantiene Novedades
                Texto = "No se insertó la novedad. Ya existe y no se pisa.2"
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            Case 1: 'Suma Novedades
                If Not EsRetroactivo Then
                    StrSql = "UPDATE novemp SET nevalor = nevalor + " & Monto
                    StrSql = StrSql & " , tipmotnro =  " & TipoMotivo
                    StrSql = StrSql & " , motivo =  '" & Motivo & "'"
                    StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                Else
                    StrSql = "UPDATE novemp SET nevalor = nevalor + " & Monto & _
                             " , nepliqdesde =  " & PeriodoDesde & _
                             " , nepliqhasta =  " & PeriodoHasta
                    StrSql = StrSql & " , tipmotnro =  " & TipoMotivo & _
                    " , motivo =  '" & Motivo & "'"
                    StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                End If
                nenro = rs_NovEmp!nenro
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Novedad Sumada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        End Select
        
    Else
        '--------------------
        'Verifico si hay superposición.
        StrSql = "SELECT * FROM novemp WHERE "
        StrSql = StrSql & " concnro = " & ConcNro
        StrSql = StrSql & " AND tpanro = " & tpanro
        StrSql = StrSql & " AND empleado = " & Tercero
        StrSql = StrSql & " AND nevigencia = -1 "
 '       If Not EsNulo(FechaDesdeAux) Then ' comentado MR
           StrSql = StrSql & " AND ((nehasta >= " & ConvFecha(FechaDesdeAux) & " AND nedesde <= " & ConvFecha(FechaDesdeAux) & ")"
         '15/10/2014
         'If Not EsNulo(FechaDesdeAux) Then
         If Not EsNulo(FechaHastaAux) Then
            StrSql = StrSql & " OR (nehasta >= " & ConvFecha(FechaHastaAux) & " AND nedesde <= " & ConvFecha(FechaHastaAux) & ")"
            StrSql = StrSql & " OR (nehasta <= " & ConvFecha(FechaHastaAux) & " AND nedesde >= " & ConvFecha(FechaDesdeAux) & ")"
            
        'If Not EsNulo(FechaHastaAux) Then
 '            StrSql = StrSql & " AND nedesde = " & ConvFecha(FechaDesdeAux)
 '           StrSql = StrSql & " AND nehasta = " & ConvFecha(FechaHastaAux)
 '       Else
 '           StrSql = StrSql & " AND nedesde = " & ConvFecha(FechaDesdeAux)
 '          StrSql = StrSql & " AND nehasta is null"
        End If
        StrSql = StrSql & ")"
        
        If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
        OpenRecordset StrSql, rs_NovEmp
        If Not rs_NovEmp.EOF Then
            ExisteNovedad = True
        End If
        
        Call Escribir_Log("flogp", NroLinea, 1, StrSql, Tabs, strLinea)
        '--------------------
        
        If ExisteNovedad = True Then 'V4.50
            Texto = "No se insertó la novedad. Ya existe y no se pisa. 1"
            Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        Else
            If Not EsRetroactivo Then
                StrSql = "INSERT INTO novemp ("
                StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
                If Not EsNulo(FechaHasta) Then
                    StrSql = StrSql & ",nehasta"
                End If
                StrSql = StrSql & ",tipmotnro,motivo"
                StrSql = StrSql & ") VALUES (" & Tercero
                StrSql = StrSql & "," & ConcNro
                StrSql = StrSql & "," & tpanro
                StrSql = StrSql & "," & Monto
                StrSql = StrSql & ",-1"
                StrSql = StrSql & "," & ConvFecha(FechaDesde)
                If Not EsNulo(FechaHasta) Then
                    StrSql = StrSql & "," & ConvFecha(FechaHasta)
                End If
                StrSql = StrSql & "," & TipoMotivo & _
                ",'" & Motivo & "'"
                StrSql = StrSql & " )"
            Else
                StrSql = "INSERT INTO novemp ("
                StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
                If Not EsNulo(FechaHasta) Then
                    StrSql = StrSql & ",nehasta"
                End If
                StrSql = StrSql & ",nepliqdesde,nepliqhasta"
                StrSql = StrSql & ",tipmotnro,motivo"
                StrSql = StrSql & ") VALUES (" & Tercero
                StrSql = StrSql & "," & ConcNro
                StrSql = StrSql & "," & tpanro
                StrSql = StrSql & "," & Monto
                StrSql = StrSql & ",-1"
                StrSql = StrSql & "," & ConvFecha(FechaDesde)
                If Not EsNulo(FechaHasta) Then
                    StrSql = StrSql & "," & ConvFecha(FechaHasta)
                End If
                StrSql = StrSql & "," & PeriodoDesde
                StrSql = StrSql & "," & PeriodoHasta
                StrSql = StrSql & "," & TipoMotivo & _
                ",'" & Motivo & "'"
                StrSql = StrSql & " )"
            End If
            objConn.Execute StrSql, , adExecuteNoRecords
            'NG - 20/08/2013
            gnovnro = getLastIdentity(objConn, "novemp")
            'gnovnro = getLastIdentity(objConn, "nenro")
            'Flog.Writeline Espacios(Tabulador * 1) & "Novedad insertada "
            Texto = "Novedad insertada "
            Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        End If
    End If
  End If
  
    'If UBound(firmas_ok) > 0 And gnovnro <> "" Then
    If Firmas = "OK" And gnovnro <> "" Then
    ' ====================================================================
    'INSERTO EN cysfirmas
    ' ====================================================================
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & gnovnro & ",1,'Novedad desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
               
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    ElseIf Firmas = "OK" And nenro <> "" Then
        ' ====================================================================
        'BORRO TODAS LAS FIMAS
        ' ====================================================================
        StrSql = "DELETE cysfirmas "
        StrSql = StrSql & " WHERE cystipnro=" & cystipnro
        StrSql = StrSql & " AND cysfircodext = " & nenro
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Se borraron las firmas"
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
       ' ====================================================================
            
       ' ====================================================================
       'INSERTO FIRMA NUEVA
       ' ====================================================================
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & nenro & ",1,'Novedad desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        

    End If



Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close
If rs_TipoPar.State = adStateOpen Then rs_TipoPar.Close
If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
If rs_con_for_tpa.State = adStateOpen Then rs_con_for_tpa.Close

Set rs_NovEmp = Nothing
Set rs_Empleado = Nothing
Set rs_Concepto = Nothing
Set rs_TipoPar = Nothing
Set rs_Periodo = Nothing
Set rs_con_for_tpa = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub
Public Sub LineaModelo_358(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Novedad segun formato (Copia 211 + Circuito de firmas)
' Autor      : Gonzalez Nicolás
'              El formato es:
'                   Formato 1
'                       Legajo; conccod; tpanro; monto
'                   ó
'                   Formato 2.1
'                       Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta
'                   Formato 2.2
'                       Legajo; conccod; tpanro; monto; FechaDesde
'                   ó
'                   Formato 3
'                       Legajo; conccod; tpanro; monto; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro)

'                   ó
'                   Formato 4
'                       Legajo; conccod; tpanro; monto; tipo motivo; motivo

'                   ó
'                   Formato 5
'                       Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta; tipo motivo; motivo

'                   ó
'                   Formato 6
'                       Legajo; conccod; tpanro; monto; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro); tipo motivo; motivo

'                   ó
'                   Formato 7
'                       Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro); tipo motivo; motivo

' Fecha      : 25/04/2011
' Ultima Mod.: 12/05/2011 - Gonzalez Nicolás - Se agregó validación en VALIDO QUE ESTE ACTIVO EL CIRCUITO
'              10/06/2011 - Gonzalez Nicolás - Se agregó listaConceptosPermitidos()
'              11/11/2011 - Gonzalez Nicolás - Si existe novedad, elimina las firmas y crea un circuito nuevo
'              16/11/2011 - Gonzalez Nicolás - Se agregó campo usuario al formato, y se cambio la forma en que se designa el firmante.
'                         - Ignora si el usuario que levanta la interfaz es FF, y utiliza el que viene como parametro para firmar (Autoriza si es FF)
'              16/02/2012 - Gonzalez Nicolás - Si el usuario de la interfaz es BK de un FF el registro queda autorizado, sino se pasa al usuario destino.
'              09/04/2012 - Gonzalez Nicolás - Se valida que el usuario origen sea <> destino | CAS-15529 - Sykes - Error importación novedades
'              03/05/2012 - Sebastian Stremel cambios caso CAS-14851 - Sykes - Modificaciones Varias
'              20/08/2013 - Gonzalez Nicolás - Se corrigió parametro en llamada a getLastIdentity()
' -------------------------------------------------------------------------------------------------------------------------------

Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As String
Dim fornro As Long

Dim tpanro As Long
Dim Aux_Monto As String
Dim Monto As Single
Dim FechaDesde As String
Dim FechaHasta As String

Dim PeriodoDesde
Dim PeriodoHasta
Dim TieneVigencia As Boolean
Dim EsRetroactivo As Boolean

Dim TipoMotivo As String
Dim Motivo As String

Dim Aux As String
Dim Encontro As Boolean

Dim perfsegcon As Integer
Dim tienePermiso As Boolean

Dim sinVig As Boolean

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim rs_TipoPar As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_Periodo As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset
Dim rs_seguridad As New ADODB.Recordset
Dim rs_TipoMotivo As New ADODB.Recordset
Dim rs_cft_resumen As New ADODB.Recordset
Dim rs_Confrep As New ADODB.Recordset
Dim Arr_remplazo
Dim nenro
'Circ Firmas
Dim rs As New ADODB.Recordset
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim gnovnro
Dim cystipnro
Dim Firmas
Dim firmas_ok


Dim Esfin
Dim id_autoriz
Dim rs_estado As New ADODB.Recordset
'---
'Dim cysfirsecuencia
'Dim cysfirdestino2
'Dim cysfirfin2
'Dim cysfiryaaut2
'Dim cysfirrecha2




Dim strCmdLine
cysfirautoriza = usuario
cystipnro = 5
nenro = ""
'Dim AccionNovedad
'AccionNovedad = Mid(parametros, pos1, pos2 - pos1 + 1)
' El formato es:
' Formato 1
' Legajo; conccod; tpanro; monto
' ó
' Formato 2.1
' Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta
' ó
' Formato 2.2
' Legajo; conccod; tpanro; monto; FechaDesde
' ó
' Formato 3
' Legajo; conccod; tpanro; monto; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro)
' ó
' Formato 4
' Legajo; conccod; tpanro; monto; FechaDesde; FechaHasta; MarcaRetroactividad;PeriodoDesde(pliqnro); PeriodoHasta(pliqnro)
    
    On Error GoTo Manejador_De_Error
    Tabs = 1
    
    TieneVigencia = False
    EsRetroactivo = False

    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    'Nro de Legajo
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
 Flog.writeline NroProcesoBatch
    '=============================================
    'Trae número de proceso para validar remplazo
    '=============================================
    StrSql = "SELECT bprcparam FROM batch_proceso "
    StrSql = StrSql & " WHERE bpronro = " & NroProcesoBatch
    OpenRecordset StrSql, rs_Confrep
    If rs_Confrep.EOF Then
        AccionNovedad = 0
    Else
        Arr_remplazo = Split(rs_Confrep!bprcparam, "@", -1)
        AccionNovedad = Arr_remplazo(2)
    End If
    rs_Confrep.Close
    

    
   
    NroColumna = NroColumna + 1
    'Concepto
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    ConcCod = Mid(strLinea, pos1, pos2 - pos1)
    ConcCod = EliminarCHInvalidosII(ConcCod, 1, "")
    
    
    NroColumna = NroColumna + 1
    'Tipo de Parametro
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    tpanro = Mid(strLinea, pos1, pos2 - pos1)
    '-------------------
    'Guarda el usuario
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    id_autoriz = Mid(strLinea, pos1, pos2 - pos1)
    '-------------------

    NroColumna = NroColumna + 1
    'Monto
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    If pos2 = 0 Then
        pos2 = Len(strLinea)
        Aux_Monto = Mid(strLinea, pos1, pos2)
        Monto = CSng(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
    Else
        Aux_Monto = Mid(strLinea, pos1, pos2 - pos1)
        Monto = CSng(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
        
        'Puede veniar Fecha Desde; fecha Hasta ó Retroactivo, Periodo desde , Periodo Hasta
        pos1 = pos2 + 1
        pos2 = InStr(pos1 + 1, strLinea, separador)
        
        If pos2 > 0 Then
            NroColumna = NroColumna + 1
            Aux = Mid(strLinea, pos1, pos2 - pos1)
            
            If IsDate(Aux) Then
                TieneVigencia = True
                'Fecha desde
                FechaDesde = Mid(strLinea, pos1, pos2 - pos1)
            
                NroColumna = NroColumna + 1
                'Fecha Hasta
                pos1 = pos2 + 1
                pos2 = InStr(pos1, strLinea, separador)
                
                If pos2 > 0 Then
                    FechaHasta = Mid(strLinea, pos1, pos2 - pos1)
                    If IsDate(FechaHasta) Then
                        FechaHasta = CDate(FechaHasta)
                    Else
                        If Not EsNulo(FechaHasta) Then
                            Texto = ": Fecha no valida "
                            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                            Call InsertaError(1, 4)
                            HuboError = True
                            Exit Sub
                        End If
                    End If
                    NroColumna = NroColumna + 1
                    'Marca de Retroactividad
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    Aux = Mid(strLinea, pos1, pos2 - pos1)
                    If UCase(Aux) = "SI" Then
                        EsRetroactivo = True
                    Else
                        EsRetroactivo = False
                    End If
                    If EsRetroactivo Then
                        'Periodo desde
                        pos1 = pos2 + 1
                        pos2 = InStr(pos1 + 1, strLinea, separador)
                        PeriodoDesde = Mid(strLinea, pos1, pos2 - pos1)
                        'Periodo hasta
                        pos1 = pos2 + 1
                        pos2 = InStr(pos1 + 1, strLinea, separador)
                        If pos2 > 0 Then 'Se especifican tipo de motivo y motivo
                            PeriodoHasta = Mid(strLinea, pos1, pos2 - pos1)
                            'Tipo de motivo
                            pos1 = pos2 + 1
                            pos2 = InStr(pos1 + 1, strLinea, separador)
                            If pos2 > 0 Then
                                TipoMotivo = Mid(strLinea, pos1, pos2 - pos1)
                                pos1 = pos2 + 1
                                pos2 = InStr(pos1 + 1, strLinea, separador)
                                If pos2 > 0 Then
                                    'Motivo
                                    Motivo = Mid(strLinea, pos1, pos2 - pos1)
                                    Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                                Else
                                    'Motivo
                                    pos2 = Len(strLinea)
                                    Motivo = Mid(strLinea, pos1, pos2)
                                    Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                                End If
                            Else
                                pos2 = Len(strLinea)
                                TipoMotivo = Mid(strLinea, pos1, pos2)
                                'Motivo
                                Motivo = ""
                            End If
                        Else
                            pos2 = Len(strLinea)
                            PeriodoHasta = Mid(strLinea, pos1, pos2)
                        End If
                    Else 'el siguiente dato es el tipo de motivo
                        TipoMotivo = Aux
                        pos1 = pos2 + 1
                        pos2 = InStr(pos1 + 1, strLinea, separador)
                        If pos2 > 0 Then 'Se especifican tipo de motivo y motivo
                            'Motivo
                            Motivo = Mid(strLinea, pos1, pos2 - pos1)
                            Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                        Else
                            pos2 = Len(strLinea)
                            Motivo = Mid(strLinea, pos1, pos2)
                            Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                        End If
                    End If
                    
                Else
                    pos2 = Len(strLinea)
                    FechaHasta = Mid(strLinea, pos1, pos2)
                    TieneVigencia = True
                End If
            Else
                If UCase(Aux) = "SI" Then
                    EsRetroactivo = True
                Else
                    EsRetroactivo = False
                End If
                If EsRetroactivo Then
                    'Periodo desde
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    PeriodoDesde = Mid(strLinea, pos1, pos2 - pos1)
                    'Periodo hasta
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    If pos2 > 0 Then 'Se especifican tipo de motivo y motivo
                        PeriodoHasta = Mid(strLinea, pos1, pos2 - pos1)
                        'Tipo de motivo
                        pos1 = pos2 + 1
                        pos2 = InStr(pos1 + 1, strLinea, separador)
                        If pos2 > 0 Then
                            TipoMotivo = Mid(strLinea, pos1, pos2 - pos1)
                            pos1 = pos2 + 1
                            pos2 = InStr(pos1 + 1, strLinea, separador)
                            If pos2 > 0 Then
                                'Motivo
                                Motivo = Mid(strLinea, pos1, pos2 - pos1)
                                Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                            Else
                                'Motivo
                                pos2 = Len(strLinea)
                                Motivo = Mid(strLinea, pos1, pos2)
                                Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                            End If
                        Else
                            pos2 = Len(strLinea)
                            TipoMotivo = Mid(strLinea, pos1, pos2)
                            'Motivo
                            Motivo = ""
                        End If
                    Else
                        pos2 = Len(strLinea)
                        PeriodoHasta = Mid(strLinea, pos1, pos2)
                    End If
                Else 'el siguiente dato es el tipo de motivo
                    TipoMotivo = Aux
                    pos1 = pos2 + 1
                    pos2 = InStr(pos1 + 1, strLinea, separador)
                    If pos2 > 0 Then 'Se especifican tipo de motivo y motivo
                        'Motivo
                        Motivo = Mid(strLinea, pos1, pos2 - pos1)
                        Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                    Else
                        pos2 = Len(strLinea)
                        Motivo = Mid(strLinea, pos1, pos2)
                        Motivo = EliminarCHInvalidosII(Motivo, 1, "")
                    End If
                End If
            End If
        Else
            If Not pos1 >= Len(strLinea) Then
                'Viene Vigencia con fecha desde y sin fecha hasta
                pos2 = Len(strLinea)
                FechaDesde = Mid(strLinea, pos1, pos2)
                TieneVigencia = True
                FechaHasta = ""
            End If
        End If
    End If



' ====================================================================
'   Validar los parametros Levantados



'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If


'Que exista el concepto
StrSql = "SELECT * FROM concepto WHERE conccod = '" & ConcCod & "'"
'StrSql = StrSql & " OR conccod = '" & Conccod & "'"
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
    fornro = rs_Concepto!fornro
End If

'Que exista el tipo de Parametro
StrSql = "SELECT * FROM tipopar WHERE tpanro = " & tpanro
OpenRecordset StrSql, rs_TipoPar

If rs_TipoPar.EOF Then
    Texto = ": " & "No se encontro el Tipo de Parametro " & tpanro
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
End If

Flog.writeline "usuario: " & usuario
'FGZ - 27/01/2004
'Faltaria revisar que el par concepto-parametro se resuelva por novedad
StrSql = "SELECT * FROM con_for_tpa "
StrSql = StrSql & " WHERE concnro = " & ConcNro
StrSql = StrSql & " AND fornro =" & fornro
StrSql = StrSql & " AND tpanro =" & tpanro
OpenRecordset StrSql, rs_con_for_tpa

If rs_con_for_tpa.EOF Then
    Texto = ": " & "El parametro " & tpanro & " no esta asociado a la formula del concepto " & ConcCod
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 11)
    HuboError = True
    Exit Sub
Else
    Encontro = False
    Do While Not Encontro And Not rs_con_for_tpa.EOF
        If Not CBool(rs_con_for_tpa!cftauto) Then
            Encontro = True
        End If
        rs_con_for_tpa.MoveNext
    Loop
    If Not Encontro Then
        Texto = ": " & "El parametro " & tpanro & " del concepto " & ConcCod & " no se resuelve por novedad "
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(3, 11)
        HuboError = True
        Exit Sub
    End If
End If

'------------------------------------------------
'VALIDA QUE EL USUARIO TENGA ACTIVO EL CONCEPTO
If listaConceptosPermitidos(ConcCod) = True Then
    tienePermiso = True
Else
    tienePermiso = False
End If
 
If tienePermiso = False Then
  Texto = ": El usuario:" & usuario & " no tiene autorización sobre el concepto:" & ConcCod
  Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
  HuboError = True
End If
'------------------------------------------------

If EsRetroactivo Then
  'Chequeo que los periodos sean validos
  'Chequeo Periodo Desde
  
  StrSql = "SELECT * FROM periodo WHERE pliqnro = " & PeriodoDesde
  If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
  OpenRecordset StrSql, rs_Periodo
  If rs_Periodo.EOF Then
      Texto = ": " & "Periodo Desde Invalido " & PeriodoDesde
      NroColumna = 6
      Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
      Call InsertaError(6, 36)
      HuboError = True
      Exit Sub
  End If
  
  'Chequeo Periodo Hasta
  StrSql = "SELECT * FROM periodo WHERE pliqnro = " & PeriodoHasta
  If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
  OpenRecordset StrSql, rs_Periodo
  If rs_Periodo.EOF Then
      Texto = ": " & "Periodo Hasta Invalido " & PeriodoHasta
      NroColumna = 7
      Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
      Call InsertaError(7, 36)
      HuboError = True
      Exit Sub
  End If
End If

'=============================================================
'Si viene el tipo de motivo cargo ese y valido que exista sino viene, busco si hay un default
If Len(TipoMotivo) = 0 Or (TipoMotivo = "N/A") Then
    'Verifico si hay un default
    StrSql = "SELECT tipmotnro, motivo FROM cft_resumen where concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    OpenRecordset StrSql, rs_cft_resumen
    If Not rs_cft_resumen.EOF Then
        TipoMotivo = IIf(IsNull(rs_cft_resumen!tipmotnro), "0", rs_cft_resumen!tipmotnro)
    End If
    rs_cft_resumen.Close
Else
    'Valido contra BD que exista el motivo
    StrSql = "SELECT * FROM tipomotivo where tipmotnro = " & TipoMotivo
    OpenRecordset StrSql, rs_TipoMotivo
    If rs_TipoMotivo.EOF Then
        Texto = ": " & "No se encontro el tipo de motivo " & TipoMotivo
        NroColumna = 13
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(13, 116)
        HuboError = True
        Exit Sub
    End If
    rs_TipoMotivo.Close
End If

'Si viene motivo cargo ese, sino viene, busco si hay un default
If Len(Motivo) = 0 Or (Motivo = "N/A") Then
    'Verifico si hay un default
    StrSql = "SELECT tipmotnro, motivo FROM cft_resumen where concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    OpenRecordset StrSql, rs_cft_resumen
    If Not rs_cft_resumen.EOF Then
        Motivo = IIf(IsNull(rs_cft_resumen!Motivo), "", rs_cft_resumen!Motivo)
    End If
    rs_cft_resumen.Close
End If

If Len(TipoMotivo) = 0 Then TipoMotivo = "null"
If TipoMotivo = "N/A" Then TipoMotivo = "null"
If TipoMotivo = "0" Then TipoMotivo = "null"
If Motivo = "N/A" Then Motivo = ""


'=============================================================
'VALIDO QUE TENGA PERMITIDO EL CONCEPTO
If listaConceptosPermitidos(ConcCod) = False Then
    Texto = ": " & "El usuario no tiene permiso para insertar este tipo de concepto/Parámetro "
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(3, 18)
    HuboError = True
    Exit Sub
End If

'=============================================================
'VALIDO QUE ESTE ACTIVO EL CIRCUITO
StrSql = "SELECT cystipact FROM cystipo "
StrSql = StrSql & "WHERE cystipnro = " & cystipnro & " AND cystipact = -1"
OpenRecordset StrSql, rs
If Not rs.EOF Then
    'Seteo todo en 0
    cysfirusuario = ""
    cysfirautoriza = ""
    cysfirdestino = ""
    cysfirfin = 0
    cysfiryaaut = 0
    cysfirrecha = 0
    
    
    
    
'=========================================================================
   'VALIDA QUE EL USUARIO QUE IMPORTA SEA FIN DE FIRMA
'=========================================================================
    StrSql = "SELECT * FROM cysfincirc "
    StrSql = StrSql & " WHERE userid = '" & usuario & "' and cystipnro = " & cystipnro
    OpenRecordset StrSql, rs_Empleado
    If Not rs_Empleado.EOF Then
        Esfin = True
        cysfirusuario = usuario
        cysfirautoriza = usuario
        cysfirdestino = ""
        cysfirfin = -1
        cysfiryaaut = -1
        cysfirrecha = 0
    Else
        Esfin = False
    End If
    rs_Empleado.Close
    
    '---------------------------------------------------------------------------------------
    'SI EL USUARIO QUE IMPORTA LA NOVEDAD NO ES FF, VALIDA EL USUARIO DESTINO
    '---------------------------------------------------------------------------------------
    
    If Esfin = False Then
        '-----------------------------
        'QUE EXISTA EL USUARIO
        '-----------------------------
        StrSql = "SELECT iduser FROM user_per "
        StrSql = StrSql & "WHERE iduser='" & id_autoriz & "'"
        OpenRecordset StrSql, rs_estado
        If rs_estado.EOF Then
            Texto = ": " & "No se encontro el usuario " & id_autoriz
            NroColumna = 1
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 128)
            HuboError = True
            Exit Sub
        End If
        rs_estado.Close
        
        '--------------------------- Esfin siempre es FALSE (SOLO PARA ESTE MODELO:341)
        '=====================================
        'FIN DE FIRMA
        '=====================================
        StrSql = "SELECT * FROM cysfincirc "
        StrSql = StrSql & " WHERE userid = '" & id_autoriz & "' and cystipnro = " & cystipnro
        OpenRecordset StrSql, rs_Empleado
        If Not rs_Empleado.EOF Then
            Esfin = True
            cysfirusuario = id_autoriz
            cysfirautoriza = id_autoriz
            cysfirdestino = ""
            cysfirfin = -1
            cysfiryaaut = -1
            cysfirrecha = 0
        Else
            Esfin = False
        End If
        rs_Empleado.Close
    End If
    If Esfin = False Then
        '=====================================
        'QUE TENGA DELEGADO UN PERMISO
        '=====================================
        StrSql = "SELECT bk_cab.iduser, bkcystipnro "
        StrSql = StrSql & " From bk_cab "
        StrSql = StrSql & " INNER JOIN bk_firmas on bk_firmas.bkcabnro = bk_cab.bkcabnro "
        StrSql = StrSql & " Where fdesde <= " & ConvFecha(Date)
        StrSql = StrSql & " AND (fhasta >= " & ConvFecha(Date) & " OR fhasta IS NULL)"
        StrSql = StrSql & " AND bk_firmas.iduser = '" & usuario & "'"
        'StrSql = StrSql & " AND bk_firmas.iduser = '" & id_autoriz & "'"
        StrSql = StrSql & " AND bkcystipnro = " & cystipnro
        StrSql = StrSql & " AND bk_cab.iduser <> '" & usuario & "'"
        'StrSql = StrSql & " AND bk_cab.iduser <> '" & id_autoriz & "'"
        OpenRecordset StrSql, rs_Empleado
        
        If Not rs_Empleado.EOF Then
            Esfin = True
            cysfirusuario = rs_Empleado!iduser
            'cysfirautoriza = id_autoriz
            cysfirautoriza = usuario
            cysfirdestino = ""
            
            cysfirfin = -1
            cysfiryaaut = -1
            cysfirrecha = 0
        Else
            cysfirusuario = usuario
            cysfirautoriza = usuario
            cysfirdestino = id_autoriz
            
            cysfirfin = 0
            cysfiryaaut = 0
            cysfirrecha = 0
        End If
        rs_Empleado.Close

    End If
    
    
    '------------------------------------
    'VALIDO QUE USUARIO ORIGEN <> DESTINO
    '------------------------------------
    If UCase(cysfirusuario) = UCase(cysfirdestino) And Esfin = False Then
        Texto = ": " & "El usuario de origen no puede ser el mismo que el de destino"
        NroColumna = 1
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 128)
        HuboError = True
        Exit Sub
    End If
    '---------------------------
    '-----------------------------
    If cysfirautoriza = "" And cysfirusuario = "" And cysfirdestino = "" And cysfirfin = 0 And cysfiryaaut = 0 And cysfirrecha = 0 Then
        Firmas = ""
    Else
        Firmas = "OK"
    End If
Else
    Firmas = ""
End If
'-----------------------------

'Busco si existe la Novedad
  If Not TieneVigencia Then
    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
    StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
    StrSql = StrSql & " ORDER BY nevigencia "
    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
    OpenRecordset StrSql, rs_NovEmp
    
    If Not rs_NovEmp.EOF Then
    
        'Busco si existe una novedad sin vigencia
        sinVig = False
        Do While Not rs_NovEmp.EOF
            If Not CBool(rs_NovEmp!nevigencia) Then
                sinVig = True
                Exit Do 'Para que quede posicionado en la nov a modificar
            End If
            rs_NovEmp.MoveNext
        Loop
    
        If Not sinVig Then ' No encontre con licencia

            'Inserto---------------------------------------------------------
            If Not EsRetroactivo Then
                If Not EsNulo(FechaHasta) Then
                StrSql = "INSERT INTO novemp (" & _
                         "empleado,concnro,tpanro,nevalor,nevigencia"
                StrSql = StrSql & ",tipmotnro,motivo"
                StrSql = StrSql & ") VALUES (" & Tercero & _
                         "," & ConcNro & _
                         "," & tpanro & _
                         "," & Monto & _
                         ",0"
                StrSql = StrSql & "," & TipoMotivo & _
                ",'" & Motivo & "'"
                StrSql = StrSql & " )"
                Else
                    Texto = ": " & "No se puede insertar la novedad porque existe una con vigencia." ' sebastian stremel 03/05/2012
                    Call Escribir_Log("floge", NroLinea, 0, Texto, Tabs, strLinea)
                    Call InsertaError(0, 139)
                    HuboError = True
                    Exit Sub
                End If

            Else
                StrSql = "INSERT INTO novemp (" & _
                         "empleado,concnro,tpanro,nevalor,nevigencia,nepliqdesde,nepliqhasta "
                StrSql = StrSql & ",tipmotnro,motivo"
                StrSql = StrSql & ") VALUES (" & Tercero & _
                         "," & ConcNro & _
                         "," & tpanro & _
                         "," & Monto & _
                         "," & CLng(TieneVigencia) & _
                         "," & PeriodoDesde & _
                         "," & PeriodoHasta
                StrSql = StrSql & "," & TipoMotivo & _
                ",'" & Motivo & "'"
                StrSql = StrSql & " )"
            End If
            
            objConn.Execute StrSql, , adExecuteNoRecords
            'NG - 20/08/2013
            gnovnro = getLastIdentity(objConn, "novemp")
            'gnovnro = getLastIdentity(objConn, "nenro")
            Texto = "Novedad Insertada "
            Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            
            

            '-----------------------------------------------------------------
        Else
            'Existe una novedad pero sin vigencia ==> Actualizo
            
            Select Case CInt(AccionNovedad)
                Case -1: 'Actualizo la Novedad
                    If Not EsRetroactivo Then
                        StrSql = "UPDATE novemp SET nevalor = " & Monto
                            StrSql = StrSql & " , tipmotnro =  " & TipoMotivo & _
                            " , motivo =  '" & Motivo & "'"
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    Else
                        StrSql = "UPDATE novemp SET nevalor = " & Monto & _
                                 " , nepliqdesde =  " & PeriodoDesde & _
                                 " , nepliqhasta =  " & PeriodoHasta & _
                                 " , tipmotnro =  " & TipoMotivo & _
                                 " , motivo =  '" & Motivo & "'"
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    End If
                    nenro = rs_NovEmp!nenro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = "Novedad Actualizada "
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                    'Flog.Writeline Espacios(Tabulador * 1) & "Novedad Actualizada "
                Case 0: 'Mantiene Novedades
                    Texto = "No se insertó la novedad. Ya existe y no se pisa."
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                Case 1: 'Suma Novedades
                    If Not EsRetroactivo Then
                        StrSql = "UPDATE novemp SET nevalor = nevalor + " & Monto
                        StrSql = StrSql & " , tipmotnro =  " & TipoMotivo
                        StrSql = StrSql & " , motivo =  '" & Motivo & "'"
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    Else
                        StrSql = "UPDATE novemp SET nevalor = nevalor + " & Monto & _
                                 " , nepliqdesde =  " & PeriodoDesde & _
                                 " , nepliqhasta =  " & PeriodoHasta
                        StrSql = StrSql & " , tipmotnro =  " & TipoMotivo & _
                        " , motivo =  '" & Motivo & "'"
                        StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    End If
                    nenro = rs_NovEmp!nenro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = "Novedad Sumada "
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            End Select

        End If
    Else 'No encontre novedad alguna para el conc y param
        'Inserto
        
        If Not EsRetroactivo Then
            StrSql = "INSERT INTO novemp (" & _
                     "empleado,concnro,tpanro,nevalor,nevigencia"
            StrSql = StrSql & ",tipmotnro,motivo"
            StrSql = StrSql & ") VALUES (" & Tercero & _
                     "," & ConcNro & _
                     "," & tpanro & _
                     "," & Monto & _
                     ",0"
            StrSql = StrSql & "," & TipoMotivo & _
            ",'" & Motivo & "'"
            StrSql = StrSql & " )"
        Else
            StrSql = "INSERT INTO novemp (" & _
                     "empleado,concnro,tpanro,nevalor,nevigencia,nepliqdesde,nepliqhasta "
            StrSql = StrSql & ",tipmotnro,motivo"
            StrSql = StrSql & ") VALUES (" & Tercero & _
                     "," & ConcNro & _
                     "," & tpanro & _
                     "," & Monto & _
                     "," & CLng(TieneVigencia) & _
                     "," & PeriodoDesde & _
                     "," & PeriodoHasta
            StrSql = StrSql & "," & TipoMotivo & _
            ",'" & Motivo & "'"
            StrSql = StrSql & " )"
        End If
        
        objConn.Execute StrSql, , adExecuteNoRecords
        'NG - 20/08/2013
        gnovnro = getLastIdentity(objConn, "novemp")
        'gnovnro = getLastIdentity(objConn, "nenro")
        'Flog.Writeline Espacios(Tabulador * 1) & "Novedad insertada "
        Texto = "Novedad insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        
        
        
    End If
  Else 'Tiene Vigencia
    'Reviso que no se pise
    StrSql = "SELECT * FROM novemp WHERE "
    StrSql = StrSql & " concnro = " & ConcNro
    StrSql = StrSql & " AND tpanro = " & tpanro
    StrSql = StrSql & " AND empleado = " & Tercero
    'StrSql = StrSql & " AND (nevigencia = 0 "
    StrSql = StrSql & " AND nevigencia = -1 "
    If Not EsNulo(FechaHasta) Then
'        StrSql = StrSql & " AND (nedesde <= " & ConvFecha(FechaHasta)
'        StrSql = StrSql & " AND nehasta >= " & ConvFecha(FechaDesde) & ")"
'        StrSql = StrSql & " OR  (nedesde <= " & ConvFecha(FechaHasta)
'        StrSql = StrSql & " AND nehasta is null )))"
        StrSql = StrSql & " AND nedesde = " & ConvFecha(FechaDesde)
        StrSql = StrSql & " AND nehasta = " & ConvFecha(FechaHasta)
    Else
        'Flog.writeline "No se puede insertar la novedad porque existe una con vingencia" 'esta linea seba
        Texto = ": " & "No se puede insertar la novedad porque existe una con vigencia."
        Call Escribir_Log("floge", NroLinea, 0, Texto, Tabs, strLinea)
        Call InsertaError(0, 139)
        HuboError = True
        Exit Sub
        'StrSql = StrSql & " AND nedesde = " & ConvFecha(FechaDesde) 'comento seba
        'StrSql = StrSql & " AND nehasta is null" ' comento seba
        'GoTo Manejador_De_Error

    End If
    If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
    OpenRecordset StrSql, rs_NovEmp
    
    If Not rs_NovEmp.EOF Then
    
        'Existe/n novedad/es con vigencia ==>
        Select Case CInt(AccionNovedad)
            Case -1: 'Actualizo la Novedad
                If Not EsRetroactivo Then
                    StrSql = "UPDATE novemp SET nevalor = " & Monto
                    StrSql = StrSql & " , tipmotnro =  " & TipoMotivo
                    StrSql = StrSql & " , motivo =  '" & Motivo & "'"
                    StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                Else
                    StrSql = "UPDATE novemp SET nevalor = " & Monto & _
                             " , nepliqdesde =  " & PeriodoDesde & _
                             " , nepliqhasta =  " & PeriodoHasta
                    StrSql = StrSql & " , tipmotnro =  " & TipoMotivo & _
                    " , motivo =  '" & Motivo & "'"
                    StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                End If
                nenro = rs_NovEmp!nenro
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Novedad Actualizada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            Case 0: 'Mantiene Novedades
                Texto = "No se insertó la novedad. Ya existe y no se pisa."
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            Case 1: 'Suma Novedades
                If Not EsRetroactivo Then
                    StrSql = "UPDATE novemp SET nevalor = nevalor + " & Monto
                    StrSql = StrSql & " , tipmotnro =  " & TipoMotivo
                    StrSql = StrSql & " , motivo =  '" & Motivo & "'"
                    StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                Else
                    StrSql = "UPDATE novemp SET nevalor = nevalor + " & Monto & _
                             " , nepliqdesde =  " & PeriodoDesde & _
                             " , nepliqhasta =  " & PeriodoHasta
                    StrSql = StrSql & " , tipmotnro =  " & TipoMotivo & _
                    " , motivo =  '" & Motivo & "'"
                    StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                End If
                nenro = rs_NovEmp!nenro
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Novedad Sumada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        End Select
        
    Else
        
        If Not EsRetroactivo Then
            StrSql = "INSERT INTO novemp ("
            StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & ",nehasta"
            End If
            StrSql = StrSql & ",tipmotnro,motivo"
            StrSql = StrSql & ") VALUES (" & Tercero
            StrSql = StrSql & "," & ConcNro
            StrSql = StrSql & "," & tpanro
            StrSql = StrSql & "," & Monto
            StrSql = StrSql & ",-1"
            StrSql = StrSql & "," & ConvFecha(FechaDesde)
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & "," & ConvFecha(FechaHasta)
            End If
            StrSql = StrSql & "," & TipoMotivo & _
            ",'" & Motivo & "'"
            StrSql = StrSql & " )"
        Else
            StrSql = "INSERT INTO novemp ("
            StrSql = StrSql & "empleado,concnro,tpanro,nevalor,nevigencia,nedesde"
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & ",nehasta"
            End If
            StrSql = StrSql & ",nepliqdesde,nepliqhasta"
            StrSql = StrSql & ",tipmotnro,motivo"
            StrSql = StrSql & ") VALUES (" & Tercero
            StrSql = StrSql & "," & ConcNro
            StrSql = StrSql & "," & tpanro
            StrSql = StrSql & "," & Monto
            StrSql = StrSql & ",-1"
            StrSql = StrSql & "," & ConvFecha(FechaDesde)
            If Not EsNulo(FechaHasta) Then
                StrSql = StrSql & "," & ConvFecha(FechaHasta)
            End If
            StrSql = StrSql & "," & PeriodoDesde
            StrSql = StrSql & "," & PeriodoHasta
            StrSql = StrSql & "," & TipoMotivo & _
            ",'" & Motivo & "'"
            StrSql = StrSql & " )"
        End If
        objConn.Execute StrSql, , adExecuteNoRecords
        'NG - 20/08/2013
        gnovnro = getLastIdentity(objConn, "novemp")
        'gnovnro = getLastIdentity(objConn, "nenro")
        'Flog.Writeline Espacios(Tabulador * 1) & "Novedad insertada "
        Texto = "Novedad insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        
        
        
    End If
  End If
  
    'If UBound(firmas_ok) > 0 And gnovnro <> "" Then
    If Firmas = "OK" And gnovnro <> "" Then
    ' ====================================================================
    'INSERTO EN cysfirmas
    ' ====================================================================
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & gnovnro & ",1,'Novedad desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
               
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    ElseIf Firmas = "OK" And nenro <> "" Then
        ' ====================================================================
        'BORRO TODAS LAS FIMAS
        ' ====================================================================
        StrSql = "DELETE cysfirmas "
        StrSql = StrSql & " WHERE cystipnro=" & cystipnro
        StrSql = StrSql & " AND cysfircodext = " & nenro
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Se borraron las firmas"
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
       ' ====================================================================
            
       ' ====================================================================
       'INSERTO FIRMA NUEVA
       ' ====================================================================
        StrSql = "INSERT INTO cysfirmas ("
        StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
        StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
        StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
        StrSql = StrSql & ")"
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
        StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & nenro & ",1,'Novedad desde interfaz'"
        StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Autorización insertada "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        

    End If







Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close
If rs_TipoPar.State = adStateOpen Then rs_TipoPar.Close
If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
If rs_con_for_tpa.State = adStateOpen Then rs_con_for_tpa.Close

Set rs_NovEmp = Nothing
Set rs_Empleado = Nothing
Set rs_Concepto = Nothing
Set rs_TipoPar = Nothing
Set rs_Periodo = Nothing
Set rs_con_for_tpa = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub
Public Sub LineaModelo_388(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta en Lic_pagas - Sykes CR
' Autor      : Gonzalez Nicolás
' Fecha      : 17/06/2013
' Ultima Mod.:
' -------------------------------------------------------------------------------------------------------------------------------
'El formato es: Legajo;Concepto;Fecha


Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As Long
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As String
Dim Fecha As String

Dim Emplicnro As Long
Dim Encontro As Boolean


Dim rs_Empleado As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
   
    On Error GoTo Manejador_De_Error
    Tabs = 1
    
    'Formato -> Legajo;Concepto;Fecha
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    'Nro de Legajo
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 8)
        HuboError = True
        Exit Sub
    End If
    
    NroColumna = NroColumna + 1
    'Concepto
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    ConcCod = Mid(strLinea, pos1, pos2 - pos1)
    ConcCod = EliminarCHInvalidosII(ConcCod, 1, "")
    
    'Fecha
    NroColumna = NroColumna + 1
    pos1 = pos2 + 1
    pos2 = Len(strLinea)
    Fecha = Mid(strLinea, pos1, pos2 + 1 - pos1)
    If IsDate(Fecha) = False Then
        Texto = ": " & "Error en el formato de la fecha"
        NroColumna = 1
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 4)
        HuboError = True
        Exit Sub
    End If
    

'===================================================================================
'QUE EXISTA EL LEGAJO
'===================================================================================
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If


'===================================================================================
'QUE EXISTA EL CONCEPTO
'===================================================================================
StrSql = "SELECT * FROM concepto WHERE conccod = '" & ConcCod & "'"
OpenRecordset StrSql, rs_Concepto
If rs_Concepto.EOF Then
    Texto = ": " & "No se encontro el Concepto " & ConcCod
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
Else
    ConcNro = rs_Concepto!ConcNro
End If

'===================================================================================
'BUSCO QUE EXISTA UNA LICENCIA
'===================================================================================
StrSql = "SELECT emp_licnro FROM emp_lic"
StrSql = StrSql & " WHERE Empleado = " & Tercero
StrSql = StrSql & " AND elfechadesde <= " & ConvFecha(Fecha)
StrSql = StrSql & " AND elfechahasta >=  " & ConvFecha(Fecha)
OpenRecordset StrSql, rs_Empleado
If Not rs_Empleado.EOF Then
    Emplicnro = rs_Empleado!emp_licnro
    Encontro = True
Else
    Emplicnro = 0
    Encontro = False
    Texto = ": " & "No se encontro licencia para el empleado legajo N°:" & NroLegajo
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(2, 10)
    HuboError = True
    Exit Sub
End If


'===================================================================================
'INSERTO EN lic_pagas
'===================================================================================
If Encontro = True Then

    'VALIDO QUE NO EXISTA EL MISMO REGISTRO (TERNRO, EMP_LICNRO)
    StrSql = "SELECT * FROM lic_pagas"
    StrSql = StrSql & " WHERE ternro =" & Tercero
    StrSql = StrSql & " AND emp_licnro =" & Emplicnro
    StrSql = StrSql & " AND fecha =" & ConvFecha(Fecha)
    OpenRecordset StrSql, rs_Empleado
    If Not rs_Empleado.EOF Then
        Texto = ": " & "No se encontro licencia para el empleado legajo N°:" & NroLegajo
        NroColumna = 2
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(2, 135)
        HuboError = True
        Exit Sub
    Else
        StrSql = " INSERT INTO lic_pagas (ternro,fecha,liq,emp_licnro,concnro,simpronro,liqpronro) VALUES"
        StrSql = StrSql & " ("
        StrSql = StrSql & Tercero
        StrSql = StrSql & "," & ConvFecha(Fecha)
        StrSql = StrSql & ",-1"
        StrSql = StrSql & "," & Emplicnro
        StrSql = StrSql & "," & ConcNro
        StrSql = StrSql & ",0"
        StrSql = StrSql & ",0"
        StrSql = StrSql & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
    End If
End If



Fin:
'Cierro todo y libero
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close

Set rs_Empleado = Nothing
Set rs_Concepto = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub
Public Sub LineaModelo_392(ByVal strLinea As String)

Dim rs_modelo As New ADODB.Recordset
Dim rs_Aux As New ADODB.Recordset

Dim arrayInterface
Dim indice As Integer
Dim Empresa As String
Dim codigo As String
Dim fechaSol As String

Dim gerenciaEstrnro As String
Dim CentroCosto As String
Dim Puesto As String
Dim reportaA As Long
Dim motreqnro As String
Dim motprinro As String
Dim nivEstudio As String
Dim cadenaSql As String
Dim cadena As String

Dim manejoEquipamiento As String
Dim otrasEspecif As String
Dim misionPuesto As String
Dim horarioACubrir As String
Dim PuestoACubrir As String
Dim teSubcentoCosto As String
Dim teSubcentoCostoDesc As String
Dim SubcentoCostoEstrnro As String

Dim NivEst As String
Dim NivelEducacionalEstrnro As String
Dim personalACargo As String
Dim regimenHorarioEstrnro As String
Dim principalTarea As String
Dim reqpernro As String
Dim Sexo As Integer
Dim edadDesde As String
Dim edadHasta As String
Dim especializacion As String
Dim nivelEspecializacion As String
Dim carrera As String
Dim expProfesional As String

On Error GoTo Manejador_De_Error

Flog.writeline Espacios(Tabulador * 1) & "Comienza la importacion del modelo 392 "
Flog.writeline Espacios(Tabulador * 1) & "Linea: " & strLinea

arrayInterface = Split(strLinea, separador)

cadenaSql = ""
cadena = ""
NroColumna = 0
For indice = 0 To UBound(arrayInterface)
    NroColumna = NroColumna + 1
    Select Case CLng(indice)
        Case 0: 'empresa
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                Flog.writeline Espacios(Tabulador * 1) & "Buscando la empresa: " & arrayInterface(indice)
                StrSql = " SELECT estrnro FROM estructura WHERE upper(estrdabr) = '" & UCase(arrayInterface(indice)) & "' AND tenro = 10"
                OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    Empresa = rs_modelo!Estrnro
                    Flog.writeline Espacios(Tabulador * 1) & "Empresa encontrada "
                    Texto = "Empresa encontrada "
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "La empresa no existe, se aborta la linea"
                    Texto = "La empresa no existe, se aborta la linea"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
                
                cadena = "EMPRESA:'" & UCase(arrayInterface(indice)) & "'"
                   
                cadenaSql = " tercero.ternro IN (SELECT ternro FROM estruc_aplica WHERE tenro= 10 AND estrnro=" & rs_modelo!Estrnro & " )"
                cadenaSql = cadenaSql & " OR tercero.ternro IN (SELECT ternro FROM his_estructura WHERE  (htetdesde <= " & ConvFecha(Date) & " and ( htethasta >= " & ConvFecha(Date) & " or htethasta is null ))" & " and tenro= 10 AND estrnro=" & rs_modelo!Estrnro & " )"
                
                Call insertarAlcance(10)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Empresa no informado, campo obligatorio"
                Texto = "Campo Empresa no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
                        
        Case 1: 'codigo
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                codigo = Trim(arrayInterface(indice))
                Flog.writeline Espacios(Tabulador * 1) & "Codigo encontrado"
                Texto = "Codigo encontrado"
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Codigo no informado, campo obligatorio"
                Texto = "Codigo no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 2: 'Fecha solicitud
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                fechaSol = arrayInterface(indice)
                Flog.writeline Espacios(Tabulador * 1) & "Fecha de solitud encontrada"
                Texto = "Fecha de solitud encontrada"
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Fecha de solicitud no informado, campo obligatorio"
                Texto = "Fecha de solicitud no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 3: 'Gerencia
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                StrSql = " SELECT estrnro FROM estructura WHERE upper(estrdabr) = '" & UCase(arrayInterface(indice)) & "' AND tenro = 6"
                OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    If cadena <> "" Then
                        cadena = cadena & " AND "
                    End If
                    cadena = cadena & "GERENCIA:'" & UCase(arrayInterface(indice)) & "'"
                    
                    Flog.writeline Espacios(Tabulador * 1) & "Gerencia encontrado"
                    Texto = "Gerencia encontrado"
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    If cadenaSql <> "" Then
                        cadenaSql = cadenaSql & " AND "
                    End If

                    cadenaSql = cadenaSql & " tercero.ternro IN (SELECT ternro FROM estruc_aplica WHERE tenro= 6 AND estrnro=" & rs_modelo!Estrnro & " )"
                    cadenaSql = cadenaSql & " OR tercero.ternro IN (SELECT ternro FROM his_estructura WHERE  (htetdesde <= " & ConvFecha(Date) & " and ( htethasta >= " & ConvFecha(Date) & " or htethasta is null ))" & " and tenro= 6 AND estrnro=" & rs_modelo!Estrnro & " )"
                    gerenciaEstrnro = rs_modelo!Estrnro
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Gerencia no existe, se aborta la linea"
                    Texto = "Gerencia no existe, se aborta la linea"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
                Call insertarAlcance(6)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Gerencia no informado, campo obligatorio"
                Texto = "Campo Gerencia no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 4: 'centro de costo
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                StrSql = " SELECT estrnro FROM estructura WHERE upper(estrdabr) = '" & UCase(arrayInterface(indice)) & "' AND tenro = 5"
                OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    CentroCosto = rs_modelo!Estrnro
                    
                    If cadena <> "" Then
                        cadena = cadena & " AND "
                    End If
                    cadena = cadena & "CENTROS DE COSTO:'" & UCase(arrayInterface(indice)) & "'"
                    
                    Flog.writeline Espacios(Tabulador * 1) & "Centro de Costo encontrado"
                    Texto = "Centro de Costo encontrado"
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    
                    If cadenaSql <> "" Then
                        cadenaSql = cadenaSql & " AND "
                    End If

                    cadenaSql = cadenaSql & " tercero.ternro IN (SELECT ternro FROM estruc_aplica WHERE tenro= 5 AND estrnro=" & rs_modelo!Estrnro & " )"
                    cadenaSql = cadenaSql & " OR tercero.ternro IN (SELECT ternro FROM his_estructura WHERE  (htetdesde <= " & ConvFecha(Date) & " and ( htethasta >= " & ConvFecha(Date) & " or htethasta is null ))" & " and tenro= 5 AND estrnro=" & rs_modelo!Estrnro & " )"
                    
                    
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Centro de Costo no existe, se aborta la linea"
                    Texto = "Centro de Costo no existe, se aborta la linea"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
                Call insertarAlcance(5)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Centro de Costo no informado, campo obligatorio"
                Texto = "Campo Centro de Costo no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 5: 'Estructura configurable - sub centro de costo
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                StrSql = " SELECT tedabr, confval FROM confrep " & _
                         " INNER JOIN tipoestructura on tipoestructura.tenro = confrep.confval " & _
                         " WHERE repnro = 454 and confnrocol = 2 "
                OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    teSubcentoCosto = rs_modelo!Confval
                    teSubcentoCostoDesc = rs_modelo!tedabr
                    Flog.writeline Espacios(Tabulador * 1) & "Tipo Estructura Sub Centro de Costo configurado tenro: " & teSubcentoCosto
                    Texto = "Tipo Estructura Sub Centro de Costo configurado tenro: " & teSubcentoCosto
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    
                    StrSql = " SELECT estrnro FROM estructura WHERE upper(estrdabr) = '" & UCase(arrayInterface(indice)) & "' AND tenro = " & teSubcentoCosto
                    OpenRecordset StrSql, rs_Aux
                    If Not rs_Aux.EOF Then
                        If cadena <> "" Then
                            cadena = cadena & " AND "
                        End If
                        cadena = cadena & UCase(teSubcentoCostoDesc) & ":'" & UCase(arrayInterface(indice)) & "'"
                                            
                        If cadenaSql <> "" Then
                            cadenaSql = cadenaSql & " AND "
                        End If
    
                        cadenaSql = cadenaSql & " tercero.ternro IN (SELECT ternro FROM estruc_aplica WHERE tenro= " & teSubcentoCosto & " AND estrnro=" & rs_Aux!Estrnro & " )"
                        cadenaSql = cadenaSql & " OR tercero.ternro IN (SELECT ternro FROM his_estructura WHERE  (htetdesde <= " & ConvFecha(Date) & " and ( htethasta >= " & ConvFecha(Date) & " or htethasta is null ))" & " and tenro= " & teSubcentoCosto & " AND estrnro=" & rs_Aux!Estrnro & " )"
                        SubcentoCostoEstrnro = rs_Aux!Estrnro
                    Else
                        Flog.writeline Espacios(Tabulador * 1) & "Sub centro de costo informado NO existe, campo obligatorio"
                        Texto = "Sub centro de costo informado NO existe, campo obligatorio"
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Exit Sub
                    End If

                Else
                    teSubcentoCosto = 0
                    teSubcentoCostoDesc = ""
                    Flog.writeline Espacios(Tabulador * 1) & "Tipo Estructura Sub Centro de Costo NO configurado"
                End If
                Call insertarAlcance(teSubcentoCosto)

            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Sub Centro de Costo no informado, campo obligatorio"
                Texto = "Campo Sub Centro de Costo no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
        
        Case 6: 'Puesto
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                StrSql = " SELECT puenro FROM estructura inner join puesto on estructura.estrnro = puesto.estrnro " & _
                         " WHERE upper(estrdabr) = '" & UCase(arrayInterface(indice)) & "' AND tenro = 4"
                OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    Puesto = rs_modelo!puenro
                    Flog.writeline Espacios(Tabulador * 1) & "Puesto encontrado"
                    Texto = "Puesto encontrado"
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Puesto no existe, se aborta la linea"
                    Texto = "Puesto no existe, se aborta la linea"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Puesto no informado, campo obligatorio"
                Texto = "Campo Puesto no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 7: 'reporta A
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                StrSql = " SELECT ternro FROM empleado WHERE empleg = " & CLng(arrayInterface(indice))
                OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    reportaA = rs_modelo!Ternro
                    Flog.writeline Espacios(Tabulador * 1) & "Reporta A encontrado"
                    Texto = "Reporta A encontrado"
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Reporta A no existente, se aborta la linea"
                    Texto = "Reporta A no existente, se aborta la linea"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Reporta A no existente, campo obligatorio"
                Texto = "Reporta A no existente, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 8: 'Motivo de alta - Motivo Pedido
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                StrSql = " SELECT motreqnro FROM pos_motivoreq WHERE upper(motreqdesabr) = '" & UCase(arrayInterface(indice)) & "'"
                OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    motreqnro = rs_modelo!motreqnro
                    Flog.writeline Espacios(Tabulador * 1) & "Motivo de pedido encontrado"
                    Texto = "Motivo de pedido encontrado"
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Motivo de pedido no existente, se aborta la linea"
                    Texto = "Motivo de pedido no existente, se aborta la linea"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Motivo de pedido no existente, campo obligatorio"
                Texto = "Motivo de pedido no existente, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
        
        Case 9: 'Detalle
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                StrSql = " SELECT motprinro FROM pos_motivopri WHERE upper(motpridesabr) = '" & UCase(arrayInterface(indice)) & "'"
                OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    motprinro = rs_modelo!motprinro
                    Flog.writeline Espacios(Tabulador * 1) & "Detalle (motivo prioridad) encontrado"
                    Texto = "Detalle (motivo prioridad) encontrado"
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Detalle (motivo prioridad) no existente, se aborta la linea"
                    Texto = "Detalle (motivo prioridad) no existente, se aborta la linea"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Detalle (motivo prioridad) no existente, campo obligatorio"
                Texto = "Detalle (motivo prioridad) no existente, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 10: 'Edad
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                If UBound(Split(arrayInterface(indice), "a")) > 0 Then
                    If IsNumeric(Split(arrayInterface(indice), "a")(0)) And IsNumeric(Split(arrayInterface(indice), "a")(1)) Then
                        edadDesde = Split(arrayInterface(indice), "a")(0)
                        edadHasta = Split(arrayInterface(indice), "a")(1)
                        If cadena <> "" Then
                            cadena = cadena & " AND "
                        End If
                        cadena = cadena & " (EDAD:  >= " & Split(arrayInterface(indice), "a")(0) - 1 & " AND EDAD:  <= " & Split(arrayInterface(indice), "a")(1) + 1 & ")"
                        Flog.writeline Espacios(Tabulador * 1) & "Campo edad obtenido"
                        Texto = "Campo edad obtenido"
                        Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        
                        If cadenaSql <> "" Then
                            cadenaSql = cadenaSql & " AND "
                        End If
                        cadenaSql = cadenaSql & "DATEDIFF(day,DATEADD(year," & Split(arrayInterface(indice), "a")(0) - 1 & ",terfecnac),GETDATE()))>=0 AND (DATEDIFF(day,DATEADD(year," & Split(arrayInterface(indice), "a")(1) + 1 & ",terfecnac),GETDATE()))<=0"
                    Else
                        Flog.writeline Espacios(Tabulador * 1) & "Alguna de las edades no es numerica formato para rango: NNaNN"
                        Texto = "Alguna de las edades no es numerica formato para rango: NNaNN"
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Exit Sub
                    End If
                Else
                    If IsNumeric(Split(arrayInterface(indice), "a")(0)) Then
                        If cadena <> "" Then
                            cadena = cadena & " AND "
                        End If
                        Flog.writeline Espacios(Tabulador * 1) & "Campo edad obtenido"
                        Texto = "Campo edad obtenido"
                        Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        
                        If cadenaSql <> "" Then
                            cadenaSql = cadenaSql & " AND "
                        End If
                        cadenaSql = cadenaSql & "DATEDIFF(day,DATEADD(year," & Split(arrayInterface(indice), "a")(0) & ",terfecnac),GETDATE()))>=0 AND (DATEDIFF(day,DATEADD(year," & Split(arrayInterface(indice), "a")(0) + 1 & ",terfecnac),GETDATE()))<=0"

                    Else
                        Flog.writeline Espacios(Tabulador * 1) & "La edad no es numerica formato para rango: NNaNN"
                        Texto = "La edad no es numerica formato para rango: NNaNN"
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Exit Sub
                    End If
                End If
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Edad no informado, campo obligatorio"
                Texto = "Edad no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
                        
        Case 11: 'sexo
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                If UCase(arrayInterface(indice)) = "MASCULINO" Or UCase(arrayInterface(indice)) = "FEMENINO" Or UCase(arrayInterface(indice)) = "INDISTINTO" Then
                    
                    If cadena <> "" Then
                        cadena = cadena & " AND "
                    End If
                    cadena = cadena & "SEXO:'" & arrayInterface(indice) & "'"
                    
                    Flog.writeline Espacios(Tabulador * 1) & "Campo sexo obtenido"
                    Texto = "Campo sexo obtenido"
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    
                    If cadenaSql <> "" Then
                        cadenaSql = cadenaSql & " AND "
                    End If
                    Select Case UCase(arrayInterface(indice))
                        Case "MASCULINO":
                            cadenaSql = cadenaSql & "(tersex = -1)"
                            Sexo = -1
                        Case "FEMENINO":
                            cadenaSql = cadenaSql & "(tersex = 0)"
                            Sexo = 0
                        Case "INDISTINTO":
                            cadenaSql = cadenaSql & "(tersex = 0 OR tersex = -1)"
                            Sexo = 1
                    End Select
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Campo sexo solo puede tener como valor: femenino, masculino o indistinto"
                    Texto = "Campo sexo solo puede tener como valor: femenino, masculino o indistinto"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Sexo no informado, campo obligatorio"
                Texto = "Sexo no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 12: 'nivel educacional
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
            StrSql = " SELECT nivnro, nivdesc FROM nivest WHERE upper(nivdesc) = '" & UCase(arrayInterface(indice)) & "'"
            OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    NivEst = rs_modelo!nivnro
                    Flog.writeline Espacios(Tabulador * 1) & "Nivel educacional configurado nivest: " & NivEst
                    Texto = "Nivel educacional configurado nivest: " & NivEst
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Nivel educacional (nivel de estudio) no existe en el sistema"
                    Texto = "Nivel educacional (nivel de estudio) no existe en el sistema"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Nivel educacional no informado, campo obligatorio"
                Texto = "Campo Nivel educacional no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If

        Case 13: 'especializacion
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                especializacion = Left(arrayInterface(indice), 60)
                Flog.writeline Espacios(Tabulador * 1) & "especializacion informada "
                Texto = "especializacion informada"
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                
            Else
                Flog.writeline Espacios(Tabulador * 1) & "especializacion, campo obligatorio"
                Texto = "especializacion, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 14: 'carrera - texto libre
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                carrera = Left(arrayInterface(indice), 60)
                Flog.writeline Espacios(Tabulador * 1) & "carrera informada "
                Texto = "carrera informada "
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "carrera, campo obligatorio"
                Texto = "carrera, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 15: 'nivel de especializacion - texto libre
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                nivelEspecializacion = Left(arrayInterface(indice), 60)
                Flog.writeline Espacios(Tabulador * 1) & "Nivel de especializacion informada "
                Texto = "Nivel de especializacion informada "
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Nivel de especializacion, campo obligatorio"
                Texto = "Nivel de especializacion, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 16: 'Experiencia profesional
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                expProfesional = Left(arrayInterface(indice), 200)
                Flog.writeline Espacios(Tabulador * 1) & "Experiencia Profesional informada "
                Texto = "Experiencia Profesional informada "
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Experiencia Profesional, campo obligatorio"
                Texto = "Experiencia Profesional, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
        
        Case 17: 'Personal a cargo
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                personalACargo = Left(arrayInterface(indice), 5)
                Flog.writeline Espacios(Tabulador * 1) & "Personal a cargo informado"
                Texto = "Personal a cargo informado"
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Personal a cargo no informado, campo obligatorio"
                Texto = "Personal a cargo no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 18: 'Manejo de equipamiento y maquinaria - Texto libre
                If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                    manejoEquipamiento = Left(arrayInterface(indice), 250)
                    Flog.writeline Espacios(Tabulador * 1) & "Manejo de equipamiento y maquinaria informada "
                    Texto = "Manejo de equipamiento y maquinaria informada "
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Manejo de equipamiento y maquinaria, campo obligatorio"
                    Texto = "Manejo de equipamiento y maquinaria, campo obligatorio"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
    
        Case 19: 'Otras especificaciones
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                otrasEspecif = Left(arrayInterface(indice), 300)
                Flog.writeline Espacios(Tabulador * 1) & "Otras especificaciones informada "
                Texto = "Otras especificaciones informada "
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Otras especificaciones, campo obligatorio"
                Texto = "Otras especificaciones, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
    
        Case 20: 'Mision del puesto
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                misionPuesto = Left(arrayInterface(indice), 250)
                Flog.writeline Espacios(Tabulador * 1) & "Mision del puesto informada "
                Texto = "Mision del puesto informada "
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Mision del puesto, campo obligatorio"
                Texto = "Mision del puesto, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 21: 'principales tareas
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                
                principalTarea = Left(arrayInterface(indice), 250)
                Flog.writeline Espacios(Tabulador * 1) & "Principal tarea el puesto encontrada"
                Texto = "Principal tarea el puesto encontrada"
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Principal tarea no informado, campo obligatorio"
                Texto = "Campo Principal tarea no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 22: 'Días de trabajo a cubrir
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                StrSql = " SELECT estrnro FROM estructura WHERE upper(estrdabr) = '" & UCase(arrayInterface(indice)) & "' AND tenro = 21"
                OpenRecordset StrSql, rs_modelo
                If Not rs_modelo.EOF Then
                    If cadena <> "" Then
                        cadena = cadena & " AND "
                    End If
                    cadena = cadena & "REGIMEN HORARIO:'" & UCase(arrayInterface(indice)) & "'"
                    
                    Flog.writeline Espacios(Tabulador * 1) & "Días de trabajo a cubrir (regimen horario) encontrado"
                    Texto = "Días de trabajo a cubrir (regimen horario) encontrado"
                    Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    
                    If cadenaSql <> "" Then
                        cadenaSql = cadenaSql & " AND "
                    End If

                    cadenaSql = cadenaSql & " tercero.ternro IN (SELECT ternro FROM estruc_aplica WHERE tenro= 21 AND estrnro=" & rs_modelo!Estrnro & " )"
                    cadenaSql = cadenaSql & " OR tercero.ternro IN (SELECT ternro FROM his_estructura WHERE  (htetdesde <= " & ConvFecha(Date) & " and ( htethasta >= " & ConvFecha(Date) & " or htethasta is null ))" & " and tenro= 21 AND estrnro=" & rs_modelo!Estrnro & " )"
                    regimenHorarioEstrnro = rs_modelo!Estrnro
                Else
                    Flog.writeline Espacios(Tabulador * 1) & "Días de trabajo a cubrir (regimen horario) no existe, se aborta la linea"
                    Texto = "Días de trabajo a cubrir (regimen horario) no existe, se aborta la linea"
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Exit Sub
                End If
                Call insertarAlcance(21)
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Días de trabajo a cubrir no informado, campo obligatorio"
                Texto = "Campo Días de trabajo a cubrir no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
            
        Case 23: 'Horario de trabajo a cubrir (detalle)
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                horarioACubrir = Left(arrayInterface(indice), 60)
                Flog.writeline Espacios(Tabulador * 1) & "Horario de trabajo a cubrir encontrada"
                Texto = "Horario de trabajo a cubrir encontrada"
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Horario de trabajo a cubrir no informado, campo obligatorio"
                Texto = "Campo Horario de trabajo a cubrir no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If

        Case 24: 'Puesto a cubrir
        
            If arrayInterface(indice) <> "" And UCase(arrayInterface(indice)) <> "N/A" Then
                PuestoACubrir = Left(arrayInterface(indice), 60)
                Flog.writeline Espacios(Tabulador * 1) & "Puesto a cubrir a cubrir encontrada"
                Texto = "Puesto a cubrir a cubrir encontrada"
                Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
            
            Else
                Flog.writeline Espacios(Tabulador * 1) & "Campo Puesto a cubrir no informado, campo obligatorio"
                Texto = "Campo Horario de trabajo a cubrir no informado, campo obligatorio"
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Exit Sub
            End If
    End Select
Next

'controlo que no exista un requerimiento con la misma descripcion
StrSql = " SELECT reqpernro FROM pos_reqpersonal WHERE upper(reqperdesabr) = '" & UCase(codigo) & "'"
OpenRecordset StrSql, rs_modelo
If rs_modelo.EOF Then

    Flog.writeline Espacios(Tabulador * 1) & "se termino de leer los datos del archivo"
    'inserto los valores en la tabla de requerimiento
    StrSql = " insert into pos_reqpersonal (reqperdesabr,reqpersolfec,reqpercarac,reqpercaracsql,puenro,reqperrep,motreqnro,motprinro,reqperpritar,estreqnro,reqperprires) VALUES " & _
             " ('" & codigo & "'," & ConvFecha(fechaSol) & ",'" & Replace(cadena, "'", "''") & "','" & Replace(cadenaSql, "'", "''") & "'," & Puesto & "," & reportaA & "," & motreqnro & "," & motprinro & ",'" & principalTarea & "',1,'" & misionPuesto & "')"
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline Espacios(Tabulador * 1) & "requerimiento insertado"
    reqpernro = getLastIdentity(objConn, "pos_reqpersonal")
    
    'inserto el complemento del requerimiento
    StrSql = " INSERT INTO pos_reqpersonal_comp (" & _
            " reqpernro, reqpercompedaddesde, reqpercompedadhasta, reqpercompsexo, reqpercompespec, reqpercompcarrera, reqpercompnivespec " & _
            " ,reqpercompexpprof, reqperperscargo, reqpercompmanequip, reqpercompmotespec, reqpercomphorario, reqpercomppuesto,nivEst) VALUES " & _
            " (" & reqpernro & ",'" & edadDesde & "','" & edadHasta & "'," & Sexo & ",'" & especializacion & "','" & carrera & "','" & nivelEspecializacion & "'" & _
            ",'" & expProfesional & "','" & personalACargo & "','" & manejoEquipamiento & "','" & otrasEspecif & "','" & horarioACubrir & "','" & PuestoACubrir & "'," & NivEst & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline Espacios(Tabulador * 1) & "complemento con datos informativos insertado"
    
    'inserto el Centro de Costo
    StrSql = " insert into pos_reqestr (reqpernro,tenro,estrnro) VALUES " & _
             " (" & reqpernro & ",5," & CentroCosto & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline Espacios(Tabulador * 1) & "Centro de Costo insertado en el requerimiento"
        
    'inserto la empresa
    StrSql = " insert into pos_reqestr (reqpernro,tenro,estrnro) VALUES " & _
             " (" & reqpernro & ",10," & Empresa & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline Espacios(Tabulador * 1) & "Empresa insertado en el requerimiento"
    
    'inserto la gerencia
    StrSql = " insert into pos_reqestr (reqpernro,tenro,estrnro) VALUES " & _
             " (" & reqpernro & ",6," & gerenciaEstrnro & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline Espacios(Tabulador * 1) & "Gerencia insertado en el requerimiento"
    
    'inserto sub centro de costo
    StrSql = " insert into pos_reqestr (reqpernro,tenro,estrnro) VALUES " & _
             " (" & reqpernro & "," & teSubcentoCosto & "," & SubcentoCostoEstrnro & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline Espacios(Tabulador * 1) & "Sub centro de costo insertado en el requerimiento"
    
    'inserto regimen horario
    StrSql = " insert into pos_reqestr (reqpernro,tenro,estrnro) VALUES " & _
             " (" & reqpernro & ",21," & regimenHorarioEstrnro & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline Espacios(Tabulador * 1) & "Regimen horario insertado en el requerimiento"
        
    'actualizo el proposito general del puesto
    StrSql = " update puesto set puepropgral = '" & principalTarea & "' WHERE puenro = " & Puesto
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline Espacios(Tabulador * 1) & "proposito general del puesto actualizado"
Else
    Flog.writeline Espacios(Tabulador * 1) & "El requerimiento ya existe en el sistema, no se insertara"
    Texto = "El requerimiento ya existe en el sistema, no se insertara"
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
End If
Fin:
'Cierro todo y libero
If rs_modelo.State = adStateOpen Then rs_modelo.Close

Set rs_modelo = Nothing

Texto = "Linea Procesada"
Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)

Exit Sub
    
Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin

End Sub
Public Sub LineaModelo_395(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación Dias de turismo - CAS-26789 - Santander Uruguay - Días de turismo - Licencia Paga - Licencia 25 años
' Autor      : Sebastian Stremel
' Fecha      : 12/11/2014
' ---------------------------------------------------------------------------------------------------------------
   
'--------------------------------------------------------
'FORMATO
'Empleado (numero) | Fecha(tipo fecha) | Comentario (texto)
'--------------------------------------------------------
Dim Tercero As Long

Dim NroLegajo As Long
Dim Fecha As String
Dim comentario As String

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Aux As New ADODB.Recordset

Dim ArrDatos
Dim error As Long

Dim fechaProcesamiento

On Error GoTo Manejador_De_Error

          
Tabs = 1

Texto = "Procesando linea " & strLinea
Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)

NroColumna = NroColumna + 1

fechaProcesamiento = Date
'Levanto los datos de la linea
ArrDatos = Split(strLinea, separador)

NroLegajo = ArrDatos(0)
Fecha = ArrDatos(1)
comentario = ArrDatos(2)
 
If IsNumeric(NroLegajo) = False Then
    Texto = ": " & "El N° de legajo no es numérico "
    FlogE.writeline "La fecha no es valida: "
    HuboError = True
    error = 3
End If

If Fecha = "" Then
    Texto = ": " & "El campo fecha no puede estar vacìo "
    HuboError = True
    'Error = 3
    'Exit Sub
Else
    If Not IsDate(Fecha) Then
        Texto = "La fecha no es valida: "
        HuboError = True
    End If
End If

If HuboError = True Then
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, error)
    HuboError = True
    Exit Sub
End If

' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'valido la longitud del comentario
If Len(comentario) > 100 Then
    Flog.writeline "La longitud del comentario excede los 200 caracteres, solo se insertan los 200 primeros"
    comentario = Mid(comentario, 1, 200)
End If

'Verifico que no exista ya cargado un dia de turismo para la fecha y el empleado
StrSql = "SELECT * FROM emp_diaTurismo "
StrSql = StrSql & " WHERE ternro=" & Tercero
StrSql = StrSql & " AND fecha=" & ConvFecha(Fecha)
OpenRecordset StrSql, rs_Aux
If rs_Aux.EOF Then
    Flog.writeline "Se va a insertar el dia de turismo"
    StrSql = "INSERT INTO emp_diaTurismo "
    StrSql = StrSql & " (ternro ,fecha,cantidad,comentario)"
    StrSql = StrSql & " VALUES "
    StrSql = StrSql & "("
    StrSql = StrSql & Tercero & ","
    StrSql = StrSql & ConvFecha(Fecha) & ","
    StrSql = StrSql & "1,"
    StrSql = StrSql & "'" & comentario & "'"
    StrSql = StrSql & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Se inserto el dia de turismo para el empleado:" & NroLegajo & " para la fecha: " & Fecha
Else
    Texto = "Ya hay un dia de turismo para el empleado:" & NroLegajo & " para la fecha: " & Fecha
    NroColumna = 1
    
End If
Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'hasta aca

Fin:
'Cierro y libero

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Aux.State = adStateOpen Then rs_Aux.Close

Set rs_Empleado = Nothing
Set rs_Aux = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub
Public Sub LineaModelo_394(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación Novedades Horarias - Medicus - CR
' Autor      : Sebastian Stremel
' Fecha      : 03/11/2014
' ---------------------------------------------------------------------------------------------------------------
   
Dim Tercero As Long
Dim NroLegajo As Long

Dim Aux As String

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Aux As New ADODB.Recordset

Dim ArrDatos
'------
Dim T_novedad, T_Motivo, Dia_completo, parcial_fijo, parcial_variable, Orden, maximojust, Desc, descext As String
Dim fec_ini, fec_hasta, hs_ini, hs_hasta, hs_just
Dim tipo_Dia As Integer

Dim tipoOperacion
Dim motnro
Dim gtnovnro
Dim gnovdesde
Dim gnovhasta
Dim gtnovdesabr
Dim gnovtipo
Dim gnovnro
Dim motdesabr
Dim elorden

Dim fechaProcesamiento
Dim actualizo As Boolean

Dim error As Long

Dim comentario As String
Dim Horas

Dim Inserta As Boolean

On Error GoTo Manejador_De_Error

          
Tabs = 1

Texto = "Procesando linea " & strLinea
Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)

NroColumna = NroColumna + 1

fechaProcesamiento = Date
'Levanto los datos de la linea
ArrDatos = Split(strLinea, separador)


NroLegajo = ArrDatos(0)
T_novedad = LCase(Trim(ArrDatos(1)))
T_Motivo = LCase(Trim(ArrDatos(2)))
fec_ini = ArrDatos(3)
fec_hasta = ArrDatos(4)
Dia_completo = ArrDatos(5)
parcial_fijo = ArrDatos(6)
parcial_variable = ArrDatos(7)
hs_ini = Replace(ArrDatos(8), ":", "")
hs_hasta = Replace(ArrDatos(9), ":", "")
elorden = ArrDatos(10)
hs_just = ArrDatos(11)
Desc = ArrDatos(12)
descext = ArrDatos(13)

 
If IsNumeric(NroLegajo) = False Then
    Texto = ": " & "El N° de legajo no es numérico "
    HuboError = True
    error = 3
ElseIf T_novedad = "" Then
    Texto = ": " & "El Tipo de novedad no puede estar vacìo "
    HuboError = True
    error = 3
ElseIf T_Motivo = "" Then
    Texto = ": " & "El Tipo de motivo no puede estar vacìo "
    HuboError = True
    error = 3
End If

If HuboError = True Then
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, error)
    HuboError = True
    Exit Sub
End If
' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'QUE EXISTA EL TIPO DE PERMISO
StrSql = "SELECT * FROM gti_tiponovedad "
StrSql = StrSql & "WHERE upper(gtnovdesabr) = '" & UCase(T_novedad) & "'"
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el tipo de novedad " & T_novedad
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 131)
    HuboError = True
    Exit Sub
Else
    gtnovnro = rs_Empleado!gtnovnro
    gtnovdesabr = rs_Empleado!gtnovdesabr
End If

'QUE EXISTA EL MOTIVO
StrSql = "SELECT * FROM gti_motivo "
StrSql = StrSql & "WHERE upper(motdesabr) = '" & UCase(T_Motivo) & "' "
OpenRecordset StrSql, rs_Empleado

If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el tipo de motivo " & T_Motivo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 132)
    HuboError = True
    Exit Sub
Else
    motnro = rs_Empleado!motnro
    motdesabr = rs_Empleado!motdesabr
End If



'VALIDA FECHA INICIO
If GetFecha(fec_ini) <> "NULL" Then
    gnovdesde = GetFecha(fec_ini)
Else
    Texto = ": " & "Error en la fecha de inicio de la novedad "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 4)
    HuboError = True
    Exit Sub
    
End If

'VALIDA FECHA HASTA
'If GetFecha(fec_hasta) <> False Then
If GetFecha(fec_hasta) <> "NULL" Then
    gnovhasta = GetFecha(fec_hasta)
Else
    Texto = ": " & "Error en la fecha de fin de la novedad "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 4)
    HuboError = True
    Exit Sub
    
End If

'VALIDA QUE FEC HASTA NO SEA MENOR QUE DESDE
If CDate(fec_hasta) < CDate(fec_ini) Then
    Texto = ": " & "La fecha Hasta no puede ser inferior a la Fecha Desde "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 47)
    HuboError = True
    Exit Sub
End If

'DIA COMPLETO
If UCase(Dia_completo) = "SI" Then
    tipo_Dia = -1
    hs_ini = Null
    hs_hasta = Null
    hs_just = "Null"
    gnovtipo = 1
    elorden = "NULL"
ElseIf UCase(Dia_completo) = "NO" Then
    tipo_Dia = 0
        
    If UCase(parcial_fijo) = "SI" Then
        tipo_Dia = 0
        'Parcial fija
        If hs_just = "" Then
            If hs_ini = "" And Len(hs_ini) < 4 Then
                Texto = ": " & "Error de Horas de inicio "
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(1, 37)
                HuboError = True
                Exit Sub
            ElseIf hs_hasta = "" And Len(hs_hasta) < 4 Then
                Texto = ": " & "Error de Horas Fin "
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(1, 37)
                HuboError = True
                Exit Sub
            End If
            hs_just = "Null"
            gnovtipo = 2
        End If
        elorden = "NULL"
    End If
    
    'Parcial variable
    If UCase(parcial_variable) = "SI" Then
        tipo_Dia = 0
        If hs_just <> "" And IsNumeric(hs_just) Then
            'NG - 13/06/2013
            hs_ini = Null
            hs_hasta = Null
        
            If IsNumeric(hs_just) = False Then
                Texto = ": " & "Error de formato en Horas a justificar "
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(1, 37)
                HuboError = True
                Exit Sub
            End If
            elorden = 1
            gnovtipo = 3
        End If
    End If
    
    
ElseIf Dia_completo = "" Then
    Dia_completo = Null
Else
    Texto = ": " & "Error de formato en Dia Completo "
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    HuboError = True
    Exit Sub
End If


'valido la longitud del comentario
If Len(comentario) > 100 Then
    Flog.writeline "La longitud del comentario excede los 100 caracteres, solo se insertan los 100 primeros"
    comentario = Mid(comentario, 1, 100)
End If

'FGZ - 29/07/2014 --------------------------------------------
If gnovtipo = 2 Then
    If CDate(fec_ini) = CDate(DateAdd("d", -1, fec_hasta)) Then
        If hs_hasta = "0000" Then
            hs_hasta = "2400"
            fec_hasta = fec_ini
        End If
    Else
        If fec_ini = fec_hasta Then
            If hs_hasta = "0000" Then
                hs_hasta = "2400"
            Else
                If hs_ini > hs_hasta Then
                    Texto = ": " & "Hora desde > Hora Hasta."
                    NroColumna = 8
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(1, 37)
                    HuboError = True
                    Exit Sub
                End If
            End If
        End If
    End If
End If
'FGZ - 29/07/2014 --------------------------------------------



If AccionNovedad = 0 Then 'ACCION MANTIENE NOVEDADES
    If gnovtipo = 1 Then 'inserto dia completo
        'valido que no exista una novedad para ese dia
        StrSql = " SELECT * FROM gti_novedad "
        StrSql = StrSql & " WHERE gnovotoa=" & Tercero & " and ((gnovdesde >=" & ConvFecha(fec_ini)
        StrSql = StrSql & " and gnovdesde <=" & ConvFecha(fec_hasta) & ") "
        StrSql = StrSql & " or (gnovhasta >=" & ConvFecha(fec_ini)
        StrSql = StrSql & " and gnovhasta <=" & ConvFecha(fec_hasta) & ") "
        StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_ini)
        StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_ini) & ") "
        StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_hasta)
        StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_hasta) & ")) "
        OpenRecordset StrSql, rs_Empleado
        If rs_Empleado.EOF Then
            'aca iba el codigo de insertar
            Inserta = True
        Else
            'muestro cartel de que no se puede insertar
            FlogE.writeline "No se pudo insertar, ya existe una novedad."
            Call InsertaError(1, 153)
        End If
    Else
        If gnovtipo = 2 Then 'inserto Parcial Fija
            'valido que no exista una novedad para ese dia
            StrSql = " SELECT * FROM gti_novedad "
            StrSql = StrSql & " WHERE gnovotoa=" & Tercero & " and ((gnovdesde >=" & ConvFecha(fec_ini)
            StrSql = StrSql & " and gnovdesde <=" & ConvFecha(fec_hasta) & ") "
            StrSql = StrSql & " or (gnovhasta >=" & ConvFecha(fec_ini)
            StrSql = StrSql & " and gnovhasta <=" & ConvFecha(fec_hasta) & ") "
            StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_ini)
            StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_ini) & ") "
            StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_hasta)
            StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_hasta) & ")) "
            OpenRecordset StrSql, rs_Empleado
            If Not rs_Empleado.EOF Then
                Do While Not rs_Empleado.EOF
                    Select Case rs_Empleado!gnovtipo
                        Case 1: 'Existe una novedad de Dia completo
                            FlogE.writeline "No se pudo insertar, ya existe una novedad de día completo."
                            Call InsertaError(1, 153)
                            Inserta = False
                        Case 2: 'Existe una novedad Parcial Fija
                            Horas = HorasInterseccion(fec_ini, hs_ini, fec_hasta, hs_hasta, rs_Empleado!gnovdesde, rs_Empleado!gnovhoradesde, rs_Empleado!gnovhasta, rs_Empleado!gnovhorahasta)
                            If Horas > 0 Then ' se intersectan por lo tanto no hago nada
                                FlogE.writeline "No se pudo insertar, las horas se intersectan"
                                Call InsertaError(1, 154)
                                Inserta = False
                                'Exit Sub
                            Else
                                'Aca iba codigo de insertar
                                Inserta = True
                            End If
                        Case 3: 'Existe una novedad Parcial Variable
                            Inserta = True
                    End Select
                rs_Empleado.MoveNext
                Loop
            Else
                'No hay ninguna novedad cargada inserto
                'inserto
                Inserta = True
            End If
        Else
            If gnovtipo = 3 Then 'Parcial variable
                StrSql = " SELECT * FROM gti_novedad "
                StrSql = StrSql & " WHERE gnovotoa=" & Tercero & " and ((gnovdesde >=" & ConvFecha(fec_ini)
                StrSql = StrSql & " and gnovdesde <=" & ConvFecha(fec_hasta) & ") "
                StrSql = StrSql & " or (gnovhasta >=" & ConvFecha(fec_ini)
                StrSql = StrSql & " and gnovhasta <=" & ConvFecha(fec_hasta) & ") "
                StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_ini)
                StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_ini) & ") "
                StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_hasta)
                StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_hasta) & ")) "
                OpenRecordset StrSql, rs_Empleado
                If Not rs_Empleado.EOF Then
                    Do While Not rs_Empleado.EOF
                        Select Case rs_Empleado!gnovtipo
                            Case 1: 'Existe una novedad de Dia completo
                                FlogE.writeline "No se inserta la novedad. Existe una novedad dia completo."
                                Call InsertaError(1, 153)
                                Inserta = False
                            Case 2: 'Existe una novedad Parcial Fija
                                Inserta = True
                            Case 3: 'Existe una novedad Parcial Variable
                                Inserta = False
                                FlogE.writeline "No se inserta la novedad. Ya existe una novedad dia parcial variable."
                                Call InsertaError(1, 155)
                        End Select
                    rs_Empleado.MoveNext
                    Loop
                Else
                    'inserto
                    Inserta = True
                End If
            End If
        End If
    End If
Else
    If AccionNovedad = -1 Then 'Reemplazar las novedades
        'valido que no exista una novedad para ese dia
        StrSql = " SELECT * FROM gti_novedad "
        StrSql = StrSql & " WHERE gnovotoa=" & Tercero & " and ((gnovdesde >=" & ConvFecha(fec_ini)
        StrSql = StrSql & " and gnovdesde <=" & ConvFecha(fec_hasta) & ") "
        StrSql = StrSql & " or (gnovhasta >=" & ConvFecha(fec_ini)
        StrSql = StrSql & " and gnovhasta <=" & ConvFecha(fec_hasta) & ") "
        StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_ini)
        StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_ini) & ") "
        StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_hasta)
        StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_hasta) & ")) "
        OpenRecordset StrSql, rs_Empleado
        If rs_Empleado.EOF Then
            'aca iba el codigo de insertar
            Inserta = True
        Else
            Do While Not rs_Empleado.EOF
                'borr la novedad existente e inserto
                'cn.BeginTrans
                StrSql = " DELETE FROM gti_justificacion "
                StrSql = StrSql & " WHERE juscodext=" & rs_Empleado!gnovnro
                objConn.Execute StrSql, , adExecuteNoRecords
                Flog.writeline "Se elimino la justificacion de la novedad existente"
                
                StrSql = " DELETE FROM gti_novedad "
                StrSql = StrSql & " WHERE gnovnro=" & rs_Empleado!gnovnro
                objConn.Execute StrSql, , adExecuteNoRecords
                Flog.writeline "Se elimino la novedad existente"
                'cn.CommitTrans
            rs_Empleado.MoveNext
            Loop
            Inserta = True
        End If
    Else
        If AccionNovedad = 1 Then 'Suma las novedades
            If gnovtipo = 1 Then 'Insertar dia completo
                'valido que no exista una novedad para ese dia
                StrSql = " SELECT * FROM gti_novedad "
                StrSql = StrSql & " WHERE gnovotoa=" & Tercero & " and ((gnovdesde >=" & ConvFecha(fec_ini)
                StrSql = StrSql & " and gnovdesde <=" & ConvFecha(fec_hasta) & ") "
                StrSql = StrSql & " or (gnovhasta >=" & ConvFecha(fec_ini)
                StrSql = StrSql & " and gnovhasta <=" & ConvFecha(fec_hasta) & ") "
                StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_ini)
                StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_ini) & ") "
                StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_hasta)
                StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_hasta) & ")) "
                OpenRecordset StrSql, rs_Empleado
                If rs_Empleado.EOF Then
                    'aca iba el codigo de insertar
                    Inserta = True
                Else
                    FlogE.writeline "No se inserta la novedad. Existe una novedad dia completo."
                    Call InsertaError(1, 153)
                End If
            Else
                If gnovtipo = 2 Then 'Inserto una novedad parcial fija
                    StrSql = " SELECT * FROM gti_novedad "
                    StrSql = StrSql & " WHERE gnovotoa=" & Tercero & " and ((gnovdesde >=" & ConvFecha(fec_ini)
                    StrSql = StrSql & " and gnovdesde <=" & ConvFecha(fec_hasta) & ") "
                    StrSql = StrSql & " or (gnovhasta >=" & ConvFecha(fec_ini)
                    StrSql = StrSql & " and gnovhasta <=" & ConvFecha(fec_hasta) & ") "
                    StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_ini)
                    StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_ini) & ") "
                    StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_hasta)
                    StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_hasta) & ")) "
                    OpenRecordset StrSql, rs_Empleado
                    If rs_Empleado.EOF Then
                        'no hay datos inserto
                        Inserta = True
                    Else
                        Do While Not rs_Empleado.EOF
                            Select Case rs_Empleado!gnovtipo
                                Case 1: 'existe novedad de dia completo
                                    FlogE.writeline "No se inserta la novedad. Existe una novedad dia completo."
                                    Call InsertaError(1, 153)
                                    Inserta = False
                                Case 2: 'existe una novedad de dia parcial fija
                                    Horas = HorasInterseccion(fec_ini, hs_ini, fec_hasta, hs_hasta, rs_Empleado!gnovdesde, rs_Empleado!gnovhoradesde, rs_Empleado!gnovhasta, rs_Empleado!gnovhorahasta)
                                    If Horas > 0 Then ' se intersectan por lo tanto no hago nada
                                        FlogE.writeline "No se pudo insertar, las horas se intersectan"
                                        Call InsertaError(1, 154)
                                        Inserta = False
                                        'Exit Sub
                                    Else
                                        'Aca iba codigo de insertar
                                        Inserta = True
                                    End If
                                Case 3: 'existe una novedad parcial variable
                                        Inserta = True
                            End Select
                        rs_Empleado.MoveNext
                        Loop
                    End If
                Else
                    If gnovtipo = 3 Then 'inserto una novedad parcial variable
                        StrSql = " SELECT * FROM gti_novedad "
                        StrSql = StrSql & " WHERE gnovotoa=" & Tercero & " and ((gnovdesde >=" & ConvFecha(fec_ini)
                        StrSql = StrSql & " and gnovdesde <=" & ConvFecha(fec_hasta) & ") "
                        StrSql = StrSql & " or (gnovhasta >=" & ConvFecha(fec_ini)
                        StrSql = StrSql & " and gnovhasta <=" & ConvFecha(fec_hasta) & ") "
                        StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_ini)
                        StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_ini) & ") "
                        StrSql = StrSql & " or (gnovdesde <=" & ConvFecha(fec_hasta)
                        StrSql = StrSql & " and gnovhasta >=" & ConvFecha(fec_hasta) & ")) "
                        OpenRecordset StrSql, rs_Empleado
                        If rs_Empleado.EOF Then
                            'no hay datos inserto
                            Inserta = True
                        Else
                            Select Case rs_Empleado!gnovtipo
                                Case 1: 'existe una dia completo
                                    FlogE.writeline "No se inserta la novedad. Existe una novedad dia completo."
                                    Call InsertaError(1, 153)
                                    Inserta = False
                                Case 2: 'existe una novedad parcial fija
                                    Inserta = True
                                Case 3:
                                    Inserta = True
                            End Select
                        End If
                    End If
                End If
            End If
        End If
    End If
End If

If Inserta Then
    'inserto
    StrSql = "INSERT INTO gti_novedad ( "
    StrSql = StrSql & "gnovdesabr , gnovdesext, motnro, gnovotox"
    StrSql = StrSql & ",gnovotoa, gnovdesde, gnovhasta, gnovestado"
    StrSql = StrSql & ",gtnovnro, gnovhoradesde, gnovhorahasta"
    StrSql = StrSql & ",gnovautoriza__1, gnovautoriza__2, gnovautoriza__3"
    StrSql = StrSql & ",gnovfecaut__1, gnovfecaut__2, gnovfecaut__3, gnovusuario__1"
    StrSql = StrSql & ",gnovusuario__2, gnovusuario__3, gnovdiacompleto, gnovtipo"
    StrSql = StrSql & ",gnovorden, gnovmaxhoras, ft, ftap, comentario,fechaProcesamiento "
    StrSql = StrSql & ") "
    StrSql = StrSql & "VALUES("
    StrSql = StrSql & "'" & gtnovdesabr & "','" & motdesabr & "'," & motnro & ",NULL," & Tercero
    StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",' '," & gtnovnro & ""
    If IsNull(hs_ini) Then
        StrSql = StrSql & ",NULL,NULL"
    Else
        StrSql = StrSql & ",'" & hs_ini & "','" & hs_hasta & "'"
    End If
    StrSql = StrSql & ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL," & tipo_Dia & "," & gnovtipo & "," & elorden & "," & Replace(hs_just, SeparadorDecimal, ".") & ",0,0"
    StrSql = StrSql & ",'" & comentario & "'," & ConvFecha(fechaProcesamiento)
    StrSql = StrSql & ")"
    
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Novedad Horaria insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    'Guarda ID del Ûlt. registro ingresado
    'gnovnro = getLastIdentity(objConn, "gnovnro")
    gnovnro = getLastIdentity(objConn, "gti_novedad")
    
    ' ====================================================================
    'INSERTO EN gti_justificacion
    ' ====================================================================
    StrSql = "INSERT INTO gti_justificacion("
    StrSql = StrSql & "jussigla , turnro, ternro, tjusnro, juscodext"
    StrSql = StrSql & ", jusdiacompleto, jusanterior, jusdesde, jushasta"
    StrSql = StrSql & ", jussistema, jusdesabr, juscanths, jushoradesde"
    StrSql = StrSql & ", jushorahasta, juseltipo, juselorden, juselmaxhoras "
    StrSql = StrSql & ")"
    StrSql = StrSql & " VALUES("
    StrSql = StrSql & "'NOV',0"
    StrSql = StrSql & "," & Tercero & ",1," & gnovnro & "," & tipo_Dia & "," & tipo_Dia
    StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",-1,NULL,NULL"
    StrSql = StrSql & ",'" & hs_ini & "','" & hs_hasta & "'," & gnovtipo & "," & elorden & "," & Replace(hs_just, SeparadorDecimal, ".")
    StrSql = StrSql & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Justificación insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    ' ====================================================================
End If
'If gnovtipo = 3 Then
'    StrSql = StrSql & " and gnovtipo =1"
'End If
'OpenRecordset StrSql, rs_Empleado

'actualizo = False
'Do While Not rs_Empleado.EOF
'
'    If gnovtipo = 2 Then
'        Horas = HorasInterseccion(fec_ini, hs_ini, fec_hasta, hs_hasta, rs_Empleado!gnovdesde, rs_Empleado!gnovhoradesde, rs_Empleado!gnovhasta, rs_Empleado!gnovhorahasta)
'        If Horas > 0 Then
'            'controlo que la novedad sea la misma para actualizarla
'            StrSql = " SELECT gnovnro FROM gti_novedad  WHERE gnovotoa = " & Tercero & " and gnovdesde = " & ConvFecha(fec_ini) & " AND gnovhasta = " & ConvFecha(fec_hasta) & _
'                     " AND gnovhoradesde = '" & hs_ini & "' AND gnovhorahasta = '" & hs_hasta & "' AND gnovtipo = 2 AND gtnovnro = " & rs_Empleado!gtnovnro & _
'                     " AND motnro = " & motnro
'            OpenRecordset StrSql, rs_Aux
'            If Not rs_Aux.EOF Then
'                StrSql = " UPDATE gti_novedad SET " & _
'                         " fechaprocesamiento = " & fechaProcesamiento & _
'                         " , gnovdesabr = '" & gtnovdesabr & "'" & _
'                         " WHERE gnovnro = " & rs_Aux!gnovnro
'                objConn.Execute StrSql, , adExecuteNoRecords
'                Texto = ": La novedad ya existe se actualiza "
'                NroColumna = 1
'                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'                actualizo = True
'            Else
'                Texto = ": " & "Esta novedad se superpone con otras cargadas anteriormente "
'                NroColumna = 1
'                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'                Call InsertaError(1, 54)
'                HuboError = True
'                Exit Sub
'            End If
'        End If
'    Else
'
'            'controlo que la novedad sea la misma para actualizarla
'            StrSql = " SELECT gnovnro FROM gti_novedad  WHERE gnovotoa = " & Tercero & " and gnovdesde = " & ConvFecha(fec_ini) & " AND gnovhasta = " & ConvFecha(fec_hasta) & _
'                     " AND gnovtipo <> 2 AND gtnovnro = " & rs_Empleado!gtnovnro & _
'                     " AND motnro = " & motnro
'            OpenRecordset StrSql, rs_Aux
'
'            If Not rs_Aux.EOF Then
'                StrSql = " UPDATE gti_novedad SET " & _
'                         " fechaprocesamiento = " & fechaProcesamiento & _
'                         " , gnovdesabr = '" & gtnovdesabr & "'" & _
'                         " WHERE gnovnro = " & rs_Aux!gnovnro
'                objConn.Execute StrSql, , adExecuteNoRecords
'                Texto = ": La novedad ya existe se actualiza "
'                NroColumna = 1
'                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'                actualizo = True
'            Else
'
'                Texto = ": " & "Esta novedad se superpone con otras cargadas anteriormente "
'                NroColumna = 1
'                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'                Call InsertaError(1, 54)
'                HuboError = True
'                Exit Sub
'            End If
'    End If
'
'    rs_Empleado.MoveNext
'Loop


' ====================================================================
' INSERTO NOVEDAD HORARIA
' ====================================================================
'If Not actualizo Then
'    'cysfirsecuencia = cysfirsecuencia + 1
'    StrSql = "INSERT INTO gti_novedad ( "
'    StrSql = StrSql & "gnovdesabr , gnovdesext, motnro, gnovotox"
'    StrSql = StrSql & ",gnovotoa, gnovdesde, gnovhasta, gnovestado"
'    StrSql = StrSql & ",gtnovnro, gnovhoradesde, gnovhorahasta"
'    StrSql = StrSql & ",gnovautoriza__1, gnovautoriza__2, gnovautoriza__3"
'    StrSql = StrSql & ",gnovfecaut__1, gnovfecaut__2, gnovfecaut__3, gnovusuario__1"
'    StrSql = StrSql & ",gnovusuario__2, gnovusuario__3, gnovdiacompleto, gnovtipo"
'    StrSql = StrSql & ",gnovorden, gnovmaxhoras, ft, ftap, comentario,fechaProcesamiento "
'    StrSql = StrSql & ") "
'    StrSql = StrSql & "VALUES("
'    StrSql = StrSql & "'" & gtnovdesabr & "','" & motdesabr & "'," & motnro & ",NULL," & Tercero
'    StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",''," & gtnovnro & ""
'
'    If IsNull(hs_ini) Then
'        StrSql = StrSql & ",NULL,NULL"
'    Else
'        StrSql = StrSql & ",'" & hs_ini & "','" & hs_hasta & "'"
'    End If
'    'StrSql = StrSql & ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL," & Dia_completo & "," & gnovtipo & ",NULL,NULL,0,0"
'    StrSql = StrSql & ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL," & Dia_completo & "," & gnovtipo & "," & orden & "," & hs_just & ",0,0"
'    StrSql = StrSql & ",'" & comentario & "'," & fechaProcesamiento
'    StrSql = StrSql & ")"
'
'    objConn.Execute StrSql, , adExecuteNoRecords
'    Texto = "Novedad Horaria insertada "
'    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
'
'    'Guarda ID del Ûlt. registro ingresado
'    'gnovnro = getLastIdentity(objConn, "gnovnro")
'    gnovnro = getLastIdentity(objConn, "gti_novedad")
'
'    ' ====================================================================
'    'INSERTO EN gti_justificacion
'    ' ====================================================================
'    StrSql = "INSERT INTO gti_justificacion("
'    StrSql = StrSql & "jussigla , turnro, ternro, tjusnro, juscodext"
'    StrSql = StrSql & ", jusdiacompleto, jusanterior, jusdesde, jushasta"
'    StrSql = StrSql & ", jussistema, jusdesabr, juscanths, jushoradesde"
'    StrSql = StrSql & ", jushorahasta, juseltipo, juselorden, juselmaxhoras "
'    StrSql = StrSql & ")"
'    StrSql = StrSql & " VALUES("
'    StrSql = StrSql & "'NOV',0"
'    StrSql = StrSql & "," & Tercero & ",1," & gnovnro & "," & tipo_Dia & "," & tipo_Dia
'    StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",-1,NULL,NULL"
'    'StrSql = StrSql & ",'" & hs_ini & "','" & hs_hasta & "'," & gnovtipo & ",NULL,NULL"
'    StrSql = StrSql & ",'" & hs_ini & "','" & hs_hasta & "'," & gnovtipo & "," & elorden & "," & hs_just
'    StrSql = StrSql & ")"
'    objConn.Execute StrSql, , adExecuteNoRecords
'    Texto = "Justificación insertada "
'    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    

Fin:
'Cierro y libero

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Aux.State = adStateOpen Then rs_Aux.Close

Set rs_Empleado = Nothing
Set rs_Aux = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub
Public Sub LineaModelo_349(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Interfaz de carga masiva de tarjetas para empleados en SYKES
' Autor      : Manterola Maria Magdalena
' Fecha      : 01/12/2011
' Descripcion:
' Ultima Mod.: 22/12/2011 - Manterola Maria Magdalena - Se eliminó la validación fija por longitud. Ahora se compara con el maximo obtenido de la tabla gti_tiptar para el tipo de tarjeta importado.
' ---------------------------------------------------------------------------------------------
' El formato es:    Legajo
'                   Tipo de tarjeta (Descripcion)
'                   Numero
'                   Fecha Desde
'                   Fecha Hasta
' ---------------------------------------------------------------------------------------------
Dim I As Long
Dim datos
Dim l_empleg As Long 'legajo del empleado
Dim l_ternro As Long 'Codigo interno del empleado
Dim l_tptrdes As String 'Descripcion abreviada de la tarjeta
Dim l_tptlong As Long 'Longitud maxima del numero de tarjeta
Dim l_tptrnro As String 'Codigo interno tarjeta
Dim l_hstjnrotar As String 'Numero de tarjeta
Dim l_hstjfecdes As String 'Fecha desde
Dim l_hstjfechas  As String 'Fecha Hasta
Dim l_hstjemp As Integer
Dim l_prueba As String 'variable auxiliar
Dim l_FecDesdeBD As Date 'variable auxiliar
Dim l_FecHastaBD As Date 'variable auxiliar
Dim l_FecDesdeArch As Date 'variable auxiliar
Dim l_FecHastaArch As Date 'variable auxiliar
Dim Grabar As Boolean 'variable auxiliar
Dim l_hastaString As String
Dim condicion As Boolean
Dim rs_consulta As New ADODB.Recordset
Dim rs_motivo As New ADODB.Recordset
    
    On Error GoTo Manejador_De_Error:

    Flog.writeline "procesando linea " & strLinea
    Flog.writeline " "
    datos = Split(strLinea, separador)
    
    'Controlo que la linea tenga los 5 registros
    If UBound(datos) <> 4 Then
        If UBound(datos) < 4 Then
            Flog.writeline "    ERROR. La cantidad de registros de la línea es menor a la esperada."
        Else
            Flog.writeline "    ERROR. La cantidad de registros de la línea es mayor a la esperada."
        End If
        Exit Sub
    End If
   
    For I = 0 To UBound(datos)
        datos(I) = Trim(datos(I))
    Next I


    'Legajo
    If Not IsNumeric(datos(0)) Then
        Flog.writeline "El legajo: " & datos(0) & " no es numérico"
        Exit Sub
    End If

    
    l_empleg = datos(0)

    'Busco el numero interno del empleado
    StrSql = "SELECT * FROM empleado where empleg = " & l_empleg
    OpenRecordset StrSql, rs_consulta
    If rs_consulta.EOF Then
        Flog.writeline "El numero de legajo: " & datos(0) & " no existe"
        rs_consulta.Close
        Exit Sub
    Else
       
        l_ternro = rs_consulta!Ternro
        rs_consulta.Close
    End If

    'Tipo de tarjeta
    'Verifico el largo del campo
    If Len(datos(1)) > 30 Then
        Flog.writeline "El tipo de tarjeta: " & datos(1) & " tiene más de 30 caracteres"
        Exit Sub
    End If
    
    'Que no sea nulo o vacio
    If EsNulo(datos(1)) Then
        Flog.writeline "El tipo de tarjeta es nulo o vacio: "
        Exit Sub
    End If
    
    'Busco tipo de tarjeta y obtengo el codigo interno
    l_tptrdes = datos(1)
    StrSql = "SELECT tptrnro, tptrdes, tptrext FROM gti_tiptar " & _
            " WHERE tptrdes = '" & l_tptrdes & "'"
    OpenRecordset StrSql, rs_consulta
    
    If rs_consulta.EOF Then
        rs_consulta.Close
        Flog.writeline "No se encontró el tipo de tarjeta con esa descripcion: " & l_tptrdes
        Exit Sub
    Else
        l_tptrnro = rs_consulta!tptrnro
        'Guardo la longitud maxima
        l_tptlong = rs_consulta!tptrext
        rs_consulta.Close
        
    End If

    'Numero de tarjeta
    'Verifico que no sea nulo o vacio
    If EsNulo(datos(2)) Then
        Flog.writeline "El Numero de tarjeta es nulo o vacio: "
        Exit Sub
    End If
    
    'Verifico el largo del campo
    If Len(datos(2)) > l_tptlong Then
        Flog.writeline "El numero de tarjeta: " & datos(2) & " tiene más de " & l_tptlong & "caracteres"
        Exit Sub
    End If

    l_hstjnrotar = datos(2)

    'Fecha DESDE
    If EsNulo(datos(3)) Then
        Flog.writeline "La fecha es nula o esta vacia: "
        Exit Sub
    Else
    If Not IsDate(datos(3)) Then
        Flog.writeline "La fecha desde no es valida: "
        Exit Sub
    End If
    l_hstjfecdes = ConvFecha(CDate(datos(3)))
    l_FecDesdeArch = CDate(datos(3))
   
    'Fecha HASTA
    If EsNulo(datos(4)) Then
        l_hstjfechas = "Null"
    Else
          If Not IsDate(datos(4)) Then
              Flog.writeline "La fecha hasta no es valida: "
              Exit Sub
          End If
        l_hstjfechas = ConvFecha(CDate(datos(4)))
        l_FecHastaArch = CDate(datos(4))
    End If
'    Verifico si el empleado tiene asociado ese tipo de tarjeta
    
    StrSql = "SELECT * FROM gti_histarjeta  WHERE "
    StrSql = StrSql & " ternro = " & l_ternro
    StrSql = StrSql & " AND tptrnro = " & l_tptrnro
    StrSql = StrSql & " AND hstjnrotar = '" & l_hstjnrotar & "'"
    StrSql = StrSql & " ORDER BY hstjfecdes DESC "
    
    OpenRecordset StrSql, rs_consulta
    
    Grabar = True
    condicion = False
    
    If rs_consulta.EOF Then
    
        'Si no encontre ningun registro con esas condiciones --> primero tengo que ver si otro empleado tiene la misma tarjeta
        'Sino --> Hago el INSERT
                
        rs_consulta.Close
        StrSql = "SELECT * FROM gti_histarjeta  WHERE "
        StrSql = StrSql & " ternro <> " & l_ternro
        StrSql = StrSql & " AND tptrnro = " & l_tptrnro
        StrSql = StrSql & " AND hstjnrotar = '" & l_hstjnrotar & "'"
        StrSql = StrSql & " AND hstjfecdes <= " & l_hstjfecdes
        StrSql = StrSql & " AND (hstjfechas >= " & l_hstjfechas
        StrSql = StrSql & " OR hstjfechas IS NULL) "
    
        OpenRecordset StrSql, rs_consulta
        
        If rs_consulta.EOF Then
            Grabar = True
        Else
            'Escribo en el Log
            Flog.writeline "Existe otro empleado con ese numero y tipo de tarjeta, en un periodo superpuesto al que se quiso registrar"
            Grabar = False
        End If
                
    Else
    
        'Tengo que ver si hay o no superposicion de fechas
        'Si tengo superposicion de fechas --> actualizo
        'sino --> genero un nuevo registro, para guardar el historico
               
        l_FecDesdeBD = rs_consulta!hstjfecdes
        If Not IsNull(rs_consulta!hstjfechas) Then
            l_FecHastaBD = rs_consulta!hstjfechas
        End If
        l_hastaString = IIf(IsNull(rs_consulta!hstjfechas), "", rs_consulta!hstjfechas)
        
        
        StrSql = "SELECT * FROM gti_histarjeta  WHERE "
        StrSql = StrSql & " ternro <> " & l_ternro
        StrSql = StrSql & " AND tptrnro = " & l_tptrnro
        StrSql = StrSql & " AND hstjnrotar = '" & l_hstjnrotar & "'"
        StrSql = StrSql & " AND hstjfecdes <= " & ConvFecha(l_FecDesdeBD)
        
        If Not IsNull(rs_consulta!hstjfechas) Then
            StrSql = StrSql & " AND (hstjfechas >= " & ConvFecha(l_FecHastaBD)
            StrSql = StrSql & " OR hstjfechas IS NULL) "
        End If
        
        rs_consulta.Close
        OpenRecordset StrSql, rs_consulta
        
        If rs_consulta.EOF Then
        
            rs_consulta.Close

            StrSql = "SELECT * FROM gti_histarjeta  WHERE "
            StrSql = StrSql & " ternro = " & l_ternro
            StrSql = StrSql & " AND tptrnro = " & l_tptrnro
            StrSql = StrSql & " AND hstjnrotar = '" & l_hstjnrotar & "'"
            StrSql = StrSql & " ORDER BY hstjfecdes DESC "
                        
            OpenRecordset StrSql, rs_consulta
                    
            condicion = True
                      
            If Not rs_consulta.EOF Then
                ' Asigno las fechas leidas del archivo y las leidas de la BD a variables auxiliares para poder compararlas
                l_FecDesdeBD = rs_consulta!hstjfecdes
                If Not IsNull(rs_consulta!hstjfechas) Then
                    l_FecHastaBD = rs_consulta!hstjfechas
                End If
                ' Segun si tiene fecha hasta el registro del archivo hago diferentes comparaciones
                If Not EsNulo(datos(4)) Then
                    l_FecHastaArch = CDate(datos(4))
                                        
                    If Not IsNull(rs_consulta!hstjfechas) Then
                        condicion = Not ((l_FecDesdeArch >= l_FecDesdeBD And l_FecHastaBD <= l_FecDesdeArch) Or (l_FecDesdeArch <= l_FecDesdeBD And l_FecHastaArch <= l_FecDesdeBD))
                    Else
                        condicion = l_FecDesdeArch >= l_FecDesdeBD
                    End If
                    
                Else
                    If Not IsNull(rs_consulta!hstjfechas) Then
                        condicion = Not (l_FecDesdeArch >= l_FecDesdeBD And l_FecHastaBD <= l_FecDesdeArch)
                    Else
                        condicion = l_FecDesdeArch >= l_FecDesdeBD
                    End If
                End If
            End If
            If condicion Then
      
                'TENGO QUE ACTUALIZAR
                Grabar = False
                
                StrSql = "UPDATE gti_histarjeta SET hstjfechas = " & l_hstjfechas & ","
                StrSql = StrSql & " hstjfecdes = " & l_hstjfecdes
                StrSql = StrSql & " WHERE ternro = " & l_ternro
                StrSql = StrSql & " AND tptrnro = " & l_tptrnro
                StrSql = StrSql & " AND hstjnrotar = '" & l_hstjnrotar & "'"
                StrSql = StrSql & " AND hstjfecdes = '" & l_FecDesdeBD & "'"
                StrSql = StrSql & " AND (hstjfechas = '" & l_FecHastaBD & "'"
                StrSql = StrSql & " OR hstjfechas IS NULL)"
        
                objConn.Execute StrSql, , adExecuteNoRecords
                
                'Escribo en el Log
                Flog.writeline "Se modifico en gti_histarjeta:  Fecha Desde: " & l_hstjfecdes & " - Fecha Hasta: " & l_hstjfechas & " - para el empleado Numero: " & l_ternro & " - Numero de Tarjeta: " & l_hstjnrotar
        
            Else
                'TENGO QUE INSERTAR LA NUEVA ESTRUCTURA
                'NO HAY SUPERPOSICION DE FECHAS
                
                Grabar = True
                
            End If
        Else
            'Escribo en el Log
            Flog.writeline "Existe otro empleado con ese numero y tipo de tarjeta, en un periodo superpuesto al que se quiso registrar"
        End If
        
    End If

    rs_consulta.Close
        
    If Grabar Then
        l_hstjemp = 0 'Se le asigna 0 por default
        
        'Grabo en la tabla  gti_histarjeta el registro
        StrSql = "INSERT INTO gti_histarjeta ("
        StrSql = StrSql & "hstjfecdes,"
        StrSql = StrSql & "hstjfechas,"
        StrSql = StrSql & "ternro,"
        StrSql = StrSql & "hstjemp,"
        StrSql = StrSql & "tptrnro,"
        StrSql = StrSql & "devuelta,"
        StrSql = StrSql & "hstjnrotar"
        StrSql = StrSql & ") VALUES ("
        StrSql = StrSql & "" & l_hstjfecdes & ","
        StrSql = StrSql & "" & l_hstjfechas & ","
        StrSql = StrSql & "" & l_ternro & ","
        StrSql = StrSql & "" & l_hstjemp & ","
        StrSql = StrSql & "" & l_tptrnro & ","
        StrSql = StrSql & "0," & "'" & l_hstjnrotar & "'"
        StrSql = StrSql & ")"
            
        objConn.Execute StrSql, , adExecuteNoRecords
            
        'Escribo en en Log
        Flog.writeline "Se inserto el gti_histarjeta: Fecha Desde: " & l_hstjfecdes & " - Fecha Hasta: " & l_hstjfechas & " - Cod interno del empleado: " & l_ternro & " - hstjemp: " & l_hstjemp & " - Codigo Interno: " & l_tptrnro & " - Numero de Tarjeta: " & l_hstjnrotar
    End If
    
    End If
    
    'cierro y libero
    If rs_consulta.State = adStateOpen Then rs_consulta.Close
    Set rs_consulta = Nothing

Fin:
    Exit Sub

Manejador_De_Error:
    HuboError = True
    'Resume Next
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    If InStr(1, Err.Description, "ODBC") > 0 Then
        'Fue error de Consulta de SQL
        Flog.writeline
        Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
        Flog.writeline
    End If
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    GoTo Fin
End Sub

Public Sub LineaModelo_351(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Novedades de Horas - Custom para PKF
' Autor      : Zamarbide Juan
'              El formato lo aporta el Confrep Nº 368: Son 6 columnas Fijas y los Conceptos/Parámetros se determinan ahí.
'              Formato fijo, es decir, siempre esas columnas y con posiciones fijas.
'
' Fecha      : 11/04/2012
' Ultima Mod.:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim Aux As String
Dim entero As String
Dim decimale As String
Dim rs_Confrep As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset
Dim rs_TipoPar As New ADODB.Recordset
Dim rs_Empleado As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim Legajo As Long
Dim AConValor As Double
Dim Columna1 As Double
Dim Columna2 As Double
Dim Columna3 As Double
Dim Columna4 As Double
Dim Columna5 As Double
Dim Columna6 As Double
Dim Tercero As Long
Dim HuboError As Boolean
Dim NroColumna As Integer
Dim Texto As String
Dim ConcNro As Long
Dim ConcCod As String
Dim fornro As Long
Dim tpanro As Long
Dim Encontro As Boolean
Dim TipoMotivo As String
Dim Motivo As String
Dim objhad As New FechasHoras
Dim auxSumaHs(3) As String


On Error GoTo Manejador_De_Error

'Nro Legajo
Aux = "80" & Mid(strLinea, 3, 4)

If Aux <> "----" Then
    If IsNumeric(Aux) Then
        Legajo = CLng(Aux)
    Else
        Legajo = 0
    End If
Else
    Legajo = 0
End If

If Legajo <> 0 Then
    'Columna1
    Aux = Mid(strLinea, 27, 7)
    Aux = Replace(Aux, ":", ".")
    If CDbl(Aux) > 0 Then
        pos1 = InStr(1, Aux, ".")
        entero = Mid(Aux, 1, pos1 - 1)
        decimale = Mid(Aux, pos1 + 1, Len(Aux))
        Columna1 = objhad.Horas_A_Decimal(entero, decimale, 2)
        auxSumaHs(0) = Right(Replace(Aux, ".", ""), 7)
     Else
        auxSumaHs(0) = "0000000"
    End If
    
    'Columna2
    Aux = Mid(strLinea, 35, 7)
    Aux = Replace(Aux, ":", ".")
    If CDbl(Aux) > 0 Then
        pos1 = InStr(1, Aux, ".")
        entero = Mid(Aux, 1, pos1 - 1)
        decimale = Mid(Aux, pos1 + 1, Len(Aux))
        auxSumaHs(1) = Right(Replace(Aux, ".", ""), 7)
        Columna2 = objhad.Horas_A_Decimal(entero, decimale, 2)
    Else
        auxSumaHs(1) = "0000000"
    End If
    
    'Columna3
    Aux = Mid(strLinea, 43, 7)
    Aux = Replace(Aux, ":", ".")
    If CDbl(Aux) > 0 Then
        pos1 = InStr(1, Aux, ".")
        entero = Mid(Aux, 1, pos1 - 1)
        decimale = Mid(Aux, pos1 + 1, Len(Aux))
        Columna3 = objhad.Horas_A_Decimal(entero, decimale, 2)
        auxSumaHs(2) = Right(Replace(Aux, ".", ""), 7)
    Else
        auxSumaHs(2) = "0000000"
    End If
    
    'EAM- Sumo las horas al 50% y las horas al 100% y la gurado en la pos 3 del array para luego restarlas a las horas normales
    Call SumoHorasV2(Date, auxSumaHs(1), auxSumaHs(2), Date, Aux)
    'Call objhad.SumoHoras(Date, auxSumaHs(1), auxSumaHs(2), Date, aux)
    auxSumaHs(3) = Replace(Aux, ":", "")
        
    'Resta las horas y luego lo pasa a formato a decimal para insertar en la novedad
    Aux = RestarHoras(auxSumaHs(0), auxSumaHs(3))
    Call objhad.Convertir_A_Hora(CStr(Aux), Aux)
    Columna1 = objhad.Horas_A_Decimal(Left(Aux, Len(Aux) - 2), Right(Aux, 2), 2)
    
    
    'Columna4
    Aux = Mid(strLinea, 51, 7)
    Aux = Replace(Aux, ":", ".")
    If CDbl(Aux) > 0 Then
        pos1 = InStr(1, Aux, ".")
        entero = Mid(Aux, 1, pos1 - 1)
        decimale = Mid(Aux, pos1 + 1, Len(Aux))
        Columna4 = objhad.Horas_A_Decimal(entero, decimale, 2)
    End If
    
    'Columna5
    Aux = Mid(strLinea, 59, 7)
    Aux = Replace(Aux, ":", ".")
    If CDbl(Aux) > 0 Then
        pos1 = InStr(1, Aux, ".")
        entero = Mid(Aux, 1, pos1 - 1)
        decimale = Mid(Aux, pos1 + 1, Len(Aux))
        Columna5 = objhad.Horas_A_Decimal(entero, decimale, 2)
    End If
    
    'Columna6
    Aux = Mid(strLinea, 67, 7)
    Aux = Replace(Aux, ":", ".")
    If CDbl(Aux) > 0 Then
        pos1 = InStr(1, Aux, ".")
        entero = Mid(Aux, 1, pos1 - 1)
        decimale = Mid(Aux, pos1 + 1, Len(Aux))
        Columna6 = objhad.Horas_A_Decimal(entero, decimale, 2)
    End If
End If
'Busco el Ternro del Empleado
StrSql = "SELECT * FROM empleado where empleg = " & Legajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontro el legajo " & Legajo & " No se procesaran las novedades"
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 8)
    'HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If



'Busco las columnas configuradas en el Confrep, y dependiendo de la columna que sea inserto las novedades
    StrSql = "SELECT * FROM confrep "
    StrSql = StrSql & " WHERE repnro = 368 ORDER BY confnrocol"
    OpenRecordset StrSql, rs_Confrep
    
    Do While Not rs_Confrep.EOF
        NroColumna = NroColumna + 1
        ConcCod = rs_Confrep!confval2
        tpanro = rs_Confrep!Confval
        Select Case rs_Confrep!confnrocol
            Case 1:
                AConValor = Columna1
            Case 2:
                AConValor = Columna2
            Case 3:
                AConValor = Columna3
            Case 4:
                AConValor = Columna4
            Case 5:
                AConValor = Columna5
            Case 6:
                AConValor = Columna6
        End Select
        'Que exista el concepto
        StrSql = "SELECT * FROM concepto WHERE conccod = '" & ConcCod & "'"
        'StrSql = StrSql & " OR conccod = '" & Conccod & "'"
        OpenRecordset StrSql, rs_Concepto
        If rs_Concepto.EOF Then
            Texto = ": " & "No se encontro el Concepto configurado en Confrep - Concepto = " & ConcCod
            NroColumna = 2
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(2, 10)
            'HuboError = True
            Exit Sub
        Else
            ConcNro = rs_Concepto!ConcNro
            fornro = rs_Concepto!fornro
        End If
        
        'Que exista el tipo de Parametro
        StrSql = "SELECT * FROM tipopar WHERE tpanro = " & tpanro
        OpenRecordset StrSql, rs_TipoPar
        
        If rs_TipoPar.EOF Then
            Texto = ": " & "No se encontro el Tipo de Parametro " & tpanro
            NroColumna = 3
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(3, 11)
            'HuboError = True
        End If
        
        'Que se encuentren asociados concepto-paramtetro-fornro
        StrSql = "SELECT * FROM con_for_tpa "
        StrSql = StrSql & " WHERE concnro = " & ConcNro
        StrSql = StrSql & " AND fornro =" & fornro
        StrSql = StrSql & " AND tpanro =" & tpanro
        OpenRecordset StrSql, rs_con_for_tpa
        
        If rs_con_for_tpa.EOF Then
            Texto = ": " & "El parametro " & tpanro & " no esta asociado a la formula del concepto " & ConcNro
            NroColumna = 3
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(3, 11)
            'HuboError = True
        Else
            Encontro = False
            Do While Not Encontro And Not rs_con_for_tpa.EOF
                If Not CBool(rs_con_for_tpa!cftauto) Then
                    Encontro = True
                End If
                rs_con_for_tpa.MoveNext
            Loop
            If Not Encontro Then
                Texto = ": " & "El parametro " & tpanro & " del concepto " & ConcNro & " no se resuelve por novedad "
                NroColumna = 3
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(3, 11)
                'HuboError = True
            End If
        End If
        TipoMotivo = "null"
        Motivo = ""
        'Verifico si Existe La Novedad Cargada
        StrSql = "SELECT * FROM novemp WHERE "
        StrSql = StrSql & " concnro = " & ConcNro
        StrSql = StrSql & " AND tpanro = " & tpanro
        StrSql = StrSql & " AND empleado = " & Tercero
        StrSql = StrSql & " AND (nevigencia = -1 OR nevigencia = 0) "
        StrSql = StrSql & " ORDER BY nevigencia "
            
        If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
        OpenRecordset StrSql, rs_NovEmp
            'Ver que pasa con la vigenciaaaaaaaaaaaaa - Estudiarlooooooooo
        If rs_NovEmp.EOF Then 'Si no existe
            StrSql = "INSERT INTO novemp (empleado,concnro,tpanro,nevalor,nevigencia"
            StrSql = StrSql & ",tipmotnro,motivo"
            StrSql = StrSql & ") VALUES (" & Tercero & _
                                 "," & ConcNro & _
                                 "," & tpanro & _
                                 "," & AConValor & _
                                 ",0"
            StrSql = StrSql & "," & TipoMotivo & _
                              ",'" & Motivo & "'"
            StrSql = StrSql & " )"

            objConn.Execute StrSql, , adExecuteNoRecords
            Texto = "Novedad Insertada "
            Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)

        Else
            Select Case CInt(AccionNovedad)
                Case -1: 'Actualizo la Novedad
                    StrSql = "UPDATE novemp SET nevalor = " & AConValor
                        StrSql = StrSql & " , tipmotnro =  " & TipoMotivo & _
                        " , motivo =  '" & Motivo & "'"
                    StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro

                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = "Novedad Actualizada "
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                    'Flog.Writeline Espacios(Tabulador * 1) & "Novedad Actualizada "
                Case 0: 'Mantiene Novedades
                    Texto = "No se insertó la novedad. Ya existe y no se pisa."
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                Case 1: 'Suma Novedades
                    StrSql = "UPDATE novemp SET nevalor = nevalor + " & AConValor
                    StrSql = StrSql & " , tipmotnro =  " & TipoMotivo
                    StrSql = StrSql & " , motivo =  '" & Motivo & "'"
                    StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Texto = "Novedad Sumada "
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            End Select

        End If
        rs_Confrep.MoveNext
    Loop

'Cierro todo
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Confrep.State = adStateOpen Then rs_Confrep.Close
If rs_con_for_tpa.State = adStateOpen Then rs_con_for_tpa.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close
If rs_TipoPar.State = adStateOpen Then rs_TipoPar.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
Set rs_NovEmp = Nothing
Set rs_Confrep = Nothing
Set rs_con_for_tpa = Nothing
Set rs_Concepto = Nothing
Set rs_TipoPar = Nothing
Set rs_Empleado = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    'GoTo Fin
End Sub

Public Sub LineaModelo_343(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Registraciones Manuales
' Autor      : Gonzalez Nicolás
' Fecha      : 27/05/2011
' Ultima Mod.:  FGZ - 12/10/2011 - ahora no se graba el bpronro
' Ultima Mod.:  FGZ - 10/01/2011 - Se le agregó depuracioon por vigencia
' ---------------------------------------------------------------------------------------------
Dim Texto As String
Dim Arr_Datos
Dim bpronro As Long
Dim idtarjeta As String
Dim tiptarnro As Integer
Dim Ternro As Integer
Dim fechor As Date
Dim fecinidia As Date
Dim fecfindia As Date
Dim horini As String
Dim horfin As String
Dim desmin As Long
Dim legautor As Integer
Dim manual As Integer
Dim fecDesde As Date
Dim fecHasta As Date
'Dim ItemCol As String

'Formato: Idtarjeta,fechor,fecinidia,fecfindia,horini,horfin,desmin,manual,fecdesde,fechasta
'On Error GoTo Manejador_De_Error
    HuboError = True
    Tabs = 1
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    NroColumna = NroColumna + 1
    
    Arr_Datos = Split(strLinea, ",")
    
    'Valida si falta algun campo
    If UBound(Arr_Datos) <> 9 Then
        Texto = "Error en formato de Archivo "
        Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
        Call InsertaError(1, 2)
        HuboError = True
        Exit Sub
    Else
        bpronro = NroProcesoBatch
        tiptarnro = 0
        Ternro = 0
        legautor = 0
        
        'manual = Arr_Datos(7)
        manual = -1 'Este campo fa fijo con -1
        
        
        
        HuboError = False
        
        'VALIDO CAMPOS
        If Len(Arr_Datos(0)) > 30 Then
            Texto = "El N° de identificación de la tarjeta supera el límite permitido"
            Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
            Call InsertaError(1, 1)
            HuboError = True
            Exit Sub
        Else
            idtarjeta = Arr_Datos(0)
        End If
        
        If Not IsDate(Arr_Datos(1)) Then
            Texto = "El Formato de la columna Desmin debe ser numérico"
            Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
            Call InsertaError(1, 4)
            HuboError = True
            Exit Sub
        Else
            fechor = Arr_Datos(1)
        End If
            
        If Not IsDate(Arr_Datos(2)) Then
            Texto = "El formato de la fecha de inicio del día es incorrecta"
            Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
            Call InsertaError(1, 4)
            HuboError = True
            Exit Sub
        Else
            fecinidia = Arr_Datos(2)
        End If
        
        If Not IsDate(Arr_Datos(3)) Then
            Texto = "El formato de la fecha de fin del día es incorrecta"
            Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
            Call InsertaError(1, 4)
            HuboError = True
            Exit Sub
        Else
            fecfindia = Arr_Datos(3)
        End If
            
        If Len(Arr_Datos(4)) <> 4 Then
            Texto = "El Formato de la hora de inicio es incorrecto"
            Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
            Call InsertaError(1, 1)
            HuboError = True
            Exit Sub
        Else
            horini = Arr_Datos(4)
        End If
        
        If Len(Arr_Datos(5)) <> 4 Then
            Texto = "El Formato de la hora de finalización es incorrecto"
            Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
            Call InsertaError(1, 1)
            HuboError = True
            Exit Sub
        Else
            horfin = Arr_Datos(5)
        End If
            
        If Not IsNumeric(Arr_Datos(6)) Then
            Texto = "El Formato de la hora de finalización es incorrecto"
            Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
            Call InsertaError(1, 3)
            HuboError = True
            Exit Sub
        Else
            desmin = Arr_Datos(6)
        End If
            
        If Not IsDate(Arr_Datos(8)) Then
            Texto = "El formato de la fecha desde es incorrecto"
            Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
            Call InsertaError(1, 4)
            HuboError = True
            Exit Sub
        Else
            fecDesde = Arr_Datos(8)
        End If
        
        If Not IsDate(Arr_Datos(9)) Then
            Texto = "El formato de la fecha hasta es incorrecto"
            Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
            Call InsertaError(1, 4)
            HuboError = True
            Exit Sub
        Else
            fecHasta = Arr_Datos(9)
        End If
            
        '----------------------
        'INSERTO
        '----------------------
        If HuboError = False Then
            
            'FGZ - 19/01/2012 ------------------------------------------
            'ItemCol = idtarjeta & "@" & FecDesde & "@" & FecHasta
            
            StrSql = "SELECT idtarjeta FROM " & TTempWF_MOV_HORARIOS
            StrSql = StrSql & " WHERE idtarjeta = '" & idtarjeta & "'"
            StrSql = StrSql & " AND fecdesde = " & ConvFecha(fecDesde) & " AND fechasta = " & ConvFecha(fecHasta)
            OpenRecordset StrSql, rs
            'If Exists(Lista_WC, ItemCol) Then
            If Not rs.EOF Then
                'ya borré
                Texto = "ya borré"
            Else
                'borro e inserto
                
                StrSql = "DELETE FROM WC_MOV_HORARIOS "
                StrSql = StrSql & " WHERE idtarjeta = '" & idtarjeta & "'"
                StrSql = StrSql & " AND fecdesde = " & ConvFecha(fecDesde) & " AND fechasta = " & ConvFecha(fecHasta)
                objConn.Execute StrSql, , adExecuteNoRecords
                
                'Clave_Lista_WC = Clave_Lista_WC + 1
                'Lista_WC.Add Clave_Lista_WC, ItemCol
                'insertar
                Call Insertar_WF_MOV_HORARIOS(idtarjeta, fecDesde, fecHasta)
            End If
            'FGZ - 10/01/2012 ------------------------------------------
        
        
            StrSql = "INSERT INTO WC_MOV_HORARIOS ("
            StrSql = StrSql & "bpronro,idtarjeta,tiptarnro,ternro,fechor,fecinidia,fecfindia"
            StrSql = StrSql & ",horini,horfin,desmin,legautor,manual,fecdesde,fechasta"
            StrSql = StrSql & ")"
            StrSql = StrSql & "VALUES("
            'FGZ - 12/10/2011 --------------------------------------------------------------
            'StrSql = StrSql & bpronro & ",'" & idtarjeta & "'," & tiptarnro & "," & Ternro
            StrSql = StrSql & 0 & ",'" & idtarjeta & "'," & tiptarnro & "," & Ternro
            'FGZ - 12/10/2011 --------------------------------------------------------------
            StrSql = StrSql & "," & ConvFecha(fechor) & "," & ConvFecha(fecinidia) & "," & ConvFecha(fecfindia)
            StrSql = StrSql & ",'" & horini & "','" & horfin & "'," & desmin & "," & legautor
            StrSql = StrSql & "," & manual & "," & ConvFecha(fecDesde) & "," & ConvFecha(fecHasta)
            StrSql = StrSql & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
            Texto = "Línea N° " & NroLinea & " Insertada"
            Call Escribir_Log("flogp", NroLinea, NroColumna, Texto, Tabs, strLinea)
        End If
    End If 'Valida si falta algun campo
 
 
End Sub
Public Sub LineaModelo_344(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Licencia segun formato (Duplicado interfaz 233 + Circuito de firmas)
' Autor      : Gonzalez Nicolás
'              El formato es: Legajo,
'                             tipo de licencia (Char de 25 buscar con descripcion de tipo de dia),
'                             fecha desde,
'                             fecha hasta,
'                             dia completo (si/no),
'                             hora desde,
'                             hora hasta,
'                             cant de horas,
'                             estado (Char de 100 buscar con descripcion de tipo de estado).
'                             Usuario
' Fecha      : 09/06/2011
' Ultima Mod.: 13/12/2011 - Manterola Maria Magdalena
' Descripcion: Se agregó un campo mas, días hábiles. Si es cero, entonces queda en nulo como hasta ahora,
'              si es distinto de cero se inserta en elcantdiashab.
'              El campo debería venir después de la fecha hasta.
'            : 23/01/2012 - Gonzalez Nicolás - Se seteo elorden y juselorden en -1 para las licencias de tipo 18 y 19 afecta a tablas emp_lic, y  gti_justificacion
'            : 06/03/2012 - Gonzalez Nicolás - Se valida que no haya cargada una licencia de tipo 8,9 y 45 posterior a la fecha de la nueva licencia
'                         - Se valida que fechadesde > fechahasta
'                         - Se agrego update faltante en gti_justificacion (no updateaba la fecha hasta)
'                         - Se configuran las licencias habilitadas para insertar desde confrep (366)
'           : 24/05/2012 - Gonzalez Nicolás - Se toman en cuenta las licencias 46 y 48 para partición de lic. 8
'           : 28/06/2012 - Gonzalez Nicolás - Si no se informa el usuario destino de firma, busca al Reporta A. (DEBE TENER ASOCIADO UN USUARIO AL REPORTA A)
'           : 30/07/2012 - Gonzalez Nicolás - Se corrigió error que se producía cuando se insertaban licencias menores a 3 días de tipo 8 para un mismo empleado.
'                        - Para lic. tipo 8 busca a 30 días de la fecha desde de la nueva licencia, para ver si se debe partir o no.
'           :18/09/2012 - Gonzalez Nicolás - CAS-16578 - Sykes - Error de Licencias CR - Se calcula la cantidad de dias de la lic. 18 Según límite por evento.
'           :19/10/2012 - Gonzalez Nicolás - CAS-16578 - Sykes - Error de Licencias CR - Se comenta para SYKES. Se comenta validacion de licencias posteriores.
' ---------------------------------------------------------------------------------------------------------------------------------

Dim pos1 As Long
Dim pos2 As Long
    
Dim objHoras As New FechasHoras

Dim Tercero As Long
Dim NroLegajo As Long
Dim diasHab As Integer
Dim Licencia_Descripcion As String
Dim TDNro As Long
Dim DiaCompleto As Boolean
Dim FechaDesde As Date
Dim FechaHasta As Date
Dim HoraDesde As String
Dim HoraHasta As String
Dim CantidadHoras As Single
Dim Estado As String
Dim id_autoriz As String

Dim PeriodoVac As Long

Dim LicEstNro As Long
Dim emp_licnro As Long
Dim LicTipo As Long

Dim vacfecdesde As Date
Dim vacfechasta As Date
Dim vdiascorcant As Long
Dim dias_vac As Long
Dim dias_tomados As Long
Dim inserto_complemento As Boolean
Dim Aux As String
Dim Estrnro_SitRev

Dim textoError As String

Dim rs_Empleado As New ADODB.Recordset
Dim rs_Lic As New ADODB.Recordset
Dim rs_TipDia As New ADODB.Recordset
Dim rs_estado As New ADODB.Recordset
Dim rs As New ADODB.Recordset
Dim rs_Est As New ADODB.Recordset
Dim rs_Vacacion As New ADODB.Recordset

'CIRCUITO DE FIRMAS
Dim firmas_ok
Dim Firmas
Dim cysfirautoriza
Dim cysfirusuario
Dim cysfirdestino
Dim cysfirfin
Dim cysfiryaaut
Dim cysfirrecha
Dim cystipnro
Dim l_listperfnro
Dim tipoorigen
Dim Esfin
cystipnro = 6
'-------------
'Licencia tipo 8
Dim l_ultimafecha
Dim l_diasgastados
Dim l_difdias
Dim l_dias
Dim l_licemp
Dim l_licccss
Dim l_canthab
Dim l_cantferi
Dim l_emp_licnro
Dim l_fechadesdeaux
Dim l_fechahastaaux
Dim l_restodias
Dim l_restanempresa
Dim l_emp_licnroaux
Dim l_elorden
Dim l_licenfalta
Dim l_elcantdias
Dim calculaFeri
'--------------

Dim LicPermitidas
Dim LimiteXevento

Dim diasCorresp
Dim diasGozados
Dim diasBeneficio
Dim vacvendidos
Dim saldo As Double

Dim insertar As Boolean

insertar = False
inserto_complemento = False




'Formato
' ------------------------------------------------------------------------------------------
'Campo              Columna Tipo de Dato    Formato         Ejemplo             Obligatorio
' ------------------------------------------------------------------------------------------
'Legajo                 1   Entero              9(6)        1
'Tipo de Licencia       2   Carácter            X(25)       Licencia por Examen
'Fecha Desde            3   Fecha           DD/MM/AAAA      01/01/2004
'Fecha Hasta            4   Fecha           DD/MM/AAAA      14/01/2004
'Dias Habiles           5   Entero
'Día Completo           6   Logico              Si/No       Si
'Hora Desde             7   Carácter            X(5)        00:00
'Hora Hasta             8   Carácter            X(5)        23:59
'Cantidad de Horas      9   Decimal          9(15).999      8.5
'Estado                10   Carácter           X(100)       Pendiente
'Usuario               11  Carácter           X(100)       rhpro
' ------------------------------------------------------------------------------------------
On Error GoTo Manejador_De_Error


    'Nro de Legajo
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        NroLegajo = Mid$(strLinea, pos1, pos2 - pos1)
    Else
        
        FlogE.writeline
        FlogE.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO "
        FlogE.writeline Espacios(Tabulador * 1) & "-------------------------------------"
        FlogE.writeline Espacios(Tabulador * 2) & "Linea " & NroLinea & ": El número de legajo no es numerico. " & Licencia_Descripcion
        
        InsertaError 1, 8
        HuboError = True
        Exit Sub
    End If
    
    'Tipo de Licencia
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    Licencia_Descripcion = UCase(Mid(strLinea, pos1, pos2 - pos1))
    Licencia_Descripcion = EliminarCHInvalidosII(Licencia_Descripcion, 1, "")

    'Fecha desde
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    FechaDesde = Mid(strLinea, pos1, pos2 - pos1)
            
    'Fecha Hasta
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    FechaHasta = Mid(strLinea, pos1, pos2 - pos1)
                
    'Dias Habiles
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    diasHab = Mid$(strLinea, pos1, pos2 - pos1)
    
    'Dia Completo
    pos1 = pos2 + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    If pos2 > 0 Then
        Aux = Mid(strLinea, pos1, pos2 - pos1)
        If UCase(Aux) = "SI" Then
            DiaCompleto = True
            LicTipo = 1
        Else
            DiaCompleto = False
        End If
    Else
        pos2 = Len(strLinea)
        Aux = CBool(Mid(strLinea, pos1, pos2 - pos1))
        If UCase(Aux) = "S" Then
            DiaCompleto = True
            LicTipo = 1
        Else
            DiaCompleto = False
        End If
    End If
    
    'Hora desde
    pos1 = pos2 + 1
    pos2 = InStr(pos1, strLinea, separador)
    HoraDesde = Mid(strLinea, pos1, pos2 - pos1)
    
    If objHoras.ValidarHora(HoraDesde) = False Then
        HoraDesde = ""
    End If
    
    
    'Hora hasta
    pos1 = pos2 + 1
    pos2 = InStr(pos1, strLinea, separador)
    HoraHasta = Mid(strLinea, pos1, pos2 - pos1)
    
    If objHoras.ValidarHora(HoraHasta) = False Then
        HoraHasta = ""
    End If
            
    'Cantidad de Horas
    pos1 = pos2 + 1
    pos2 = InStr(pos1, strLinea, separador)
    If Mid(strLinea, pos1, pos2 - pos1) = ";" Or Mid(strLinea, pos1, pos2 - pos1) = "" Then
        CantidadHoras = 0
    Else
        CantidadHoras = CSng(Mid(strLinea, pos1, pos2 - pos1))
    End If

    'Estado
    pos1 = pos2 + 1
    'pos2 = Len(strLinea) + 1
    pos2 = InStr(pos1 + 1, strLinea, separador)
    'Estado = UCase(Mid(strLinea, pos1, pos2 - pos1))
    'Estado = EliminarCHInvalidosII(Estado, 1, "")
      
    'Usuario
    'pos1 = pos2 + 1
    'pos2 = Len(strLinea) + 1
    'id_autoriz = UCase(Mid(strLinea, pos1, pos2 - pos1))
    'id_autoriz = EliminarCHInvalidosII(id_autoriz, 1, "")
    
    
    
    If pos2 = 0 Or Len(strLinea) = pos2 Then
        pos2 = Len(strLinea) + 1
        Estado = UCase(Mid(strLinea, pos1, pos2 - pos1))
        Estado = EliminarCHInvalidosII(Replace(Estado, ";", ""), 1, "")
        Estado = Replace(Estado, ",", "")
        id_autoriz = ""
    Else
       Estado = UCase(Mid(strLinea, pos1, pos2 - pos1))
       Estado = EliminarCHInvalidosII(Estado, 1, "")
      
      'Período de vacaciones
       pos1 = pos2 + 1
       pos2 = Len(strLinea) + 1
       'PeriodoVac = UCase(Mid(strLinea, pos1, pos2 - pos1))
       'PeriodoVac = EliminarCHInvalidosII(PeriodoVac, 1, "")
       id_autoriz = LCase(Mid(strLinea, pos1, pos2 - pos1))
       id_autoriz = EliminarCHInvalidosII(id_autoriz, 1, "")
 
    End If
    
    
    
    
' ====================================================================
'   Validar los parametros Levantados

Flog.writeline
Flog.writeline
Flog.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO: " & NroLegajo
Flog.writeline Espacios(Tabulador * 1) & "-------------------------------------------------------"
'Que exista el legajo
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado

If rs_Empleado.EOF Then
    Flog.writeline Espacios(Tabulador * 2) & "No se encontro el legajo " & NroLegajo
    
    FlogE.writeline
    FlogE.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO: " & NroLegajo
    FlogE.writeline Espacios(Tabulador * 1) & "-------------------------------------"
    FlogE.writeline Espacios(Tabulador * 2) & "Linea " & NroLinea & ": No se encontro el legajo " & NroLegajo
    
    InsertaError 1, 8
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If



'________________________________________________
'VALIDO QUE FECHA DESDE < FECHA HASTA
'------------------------------------------------
If FechaDesde > FechaHasta Then
    Flog.writeline Espacios(Tabulador * 2) & "La fecha desde no puede ser mayor que la fecha hasta "
    FlogE.writeline
    FlogE.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO: " & NroLegajo
    FlogE.writeline Espacios(Tabulador * 1) & "-------------------------------------"
    FlogE.writeline Espacios(Tabulador * 2) & "Linea " & NroLinea & ": La fecha desde no puede ser mayor que la fecha hasta "
    
    InsertaError 1, 47
    HuboError = True
    Exit Sub


End If




'________________________________________________
'BUSCO CODIGOS DE LICENCIA AUTORIZADOS A INSERTAR
'------------------------------------------------
StrSql = "SELECT confval FROM confrep"
StrSql = StrSql & " WHERE repnro = 366"
OpenRecordset StrSql, rs_TipDia
If Not rs_TipDia.EOF Then
    LicPermitidas = "0"
    Do While Not rs_TipDia.EOF
        LicPermitidas = LicPermitidas & "," & rs_TipDia!Confval
        rs_TipDia.MoveNext
    Loop
    Flog.writeline Espacios(Tabulador * 1) & "Licencias habilitadas: " & Replace(LicPermitidas, "0,", "")
Else
    LicPermitidas = ""
    Flog.writeline Espacios(Tabulador * 1) & "No se encuentra configurado el confrep N° 366. Las licencias se encuentran todas habilitadas."

End If


'Que exista el Tipo de Licencia
StrSql = "SELECT * FROM tipdia WHERE upper(tddesc) = '" & Licencia_Descripcion & "'"
If LicPermitidas <> "" Then
    StrSql = StrSql & " AND tdnro IN (" & LicPermitidas & ")"
End If

OpenRecordset StrSql, rs_TipDia
If rs_TipDia.EOF Then
    Flog.writeline Espacios(Tabulador * 2) & "No se encontro el Tipo de Licencia " & Licencia_Descripcion
    
    FlogE.writeline
    FlogE.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO: " & NroLegajo
    FlogE.writeline Espacios(Tabulador * 1) & "-------------------------------------"
    FlogE.writeline Espacios(Tabulador * 2) & "Linea " & NroLinea & ": No se encontro el Tipo de Licencia " & Licencia_Descripcion
    
    InsertaError 1, 136
    HuboError = True
    Exit Sub
Else
    TDNro = rs_TipDia!TDNro
End If

If Not DiaCompleto Then
    ' Es tipo 2 si las horas son validas
    ' Es tipo 3 si la cant de horas es valida
    ' Es tipo 2 si todos los param son validos, tomo las horas
    
    LicTipo = 0
    'Valido la cantidad de Horas
    If CantidadHoras <> 0 Then 'el parametro es valido, puede ser tipo 3
        LicTipo = 3
    End If
    
    'Validar Horas
    If objHoras.ValidarHora(HoraDesde) And objHoras.ValidarHora(HoraHasta) Then
        LicTipo = 2
    Else 'puede que sea tipo 3
        If LicTipo = 0 Then 'no, no es tipo 3
            If Not objHoras.ValidarHora(HoraDesde) Then
                Flog.writeline Espacios(Tabulador * 2) & "formato de Hora Desde incorrecto " & HoraDesde
                        
                FlogE.writeline
                FlogE.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO: " & NroLegajo
                FlogE.writeline Espacios(Tabulador * 1) & "-------------------------------------"
                FlogE.writeline Espacios(Tabulador * 2) & "Linea " & NroLinea & ": formato de Hora Desde incorrecto " & HoraDesde
                
                InsertaError 6, 98
                HuboError = True
                Exit Sub
            End If
            If Not objHoras.ValidarHora(HoraHasta) Then
                Flog.writeline Espacios(Tabulador * 2) & "formato de Hora Hasta incorrecto " & HoraHasta
                
                FlogE.writeline
                FlogE.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO: " & NroLegajo
                FlogE.writeline Espacios(Tabulador * 1) & "-------------------------------------"
                FlogE.writeline Espacios(Tabulador * 2) & "Linea " & NroLinea & ": formato de Hora Hasta incorrecto " & HoraHasta
                
                InsertaError 7, 98
                HuboError = True
                Exit Sub
            End If
        End If
    End If
    If LicTipo = 3 And CantidadHoras > rs_TipDia!tdcanthoras Then ' si era tipo 3 que no exceda el limite
        Flog.writeline Espacios(Tabulador * 2) & "La cantidad de Horas " & CantidadHoras & " excede el maximo " & rs_TipDia!tdcanthoras
        CantidadHoras = rs_TipDia!tdcanthoras
    End If
End If

'Que exista el Tipo de Estado
StrSql = "SELECT * FROM lic_estado WHERE upper(licestdesabr) = '" & Estado & "'"
OpenRecordset StrSql, rs_estado
If rs_estado.EOF Then
    Flog.writeline Espacios(Tabulador * 2) & "No se encontro el Tipo de Estado " & Estado
    
    FlogE.writeline
    FlogE.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO: " & NroLegajo
    FlogE.writeline Espacios(Tabulador * 1) & "-------------------------------------"
    FlogE.writeline Espacios(Tabulador * 2) & "Linea " & NroLinea & ": No se encontro el Tipo de Estado " & Estado
    
    InsertaError 9, 97
    HuboError = True
    Exit Sub
Else
    LicEstNro = rs_estado!LicEstNro
End If


'¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
'SI ES DE TIPO VACACION
'¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
'Valido que existe período de vacaciones
'If TDNro = 2 Then
'    StrSql = "SELECT vacfecdesde,vacfechasta,vacestado FROM vacacion"
'    StrSql = StrSql & " WHERE vacnro = " & PeriodoVac & " And vacestado = -1"
'    OpenRecordset StrSql, rs_Vacacion
'    If rs_Vacacion.EOF Then
'        Flog.writeline Espacios(Tabulador * 2) & "No existe el período de tipo " & PeriodoVac & " o esta cerrado"
'        InsertaError 1, 50
'        HuboError = True
'        Exit Sub
'    Else
'        vacfecdesde = rs_Vacacion!vacfecdesde
'        vacfechasta = rs_Vacacion!vacfechasta
'    End If
'    rs_Vacacion.Close
'    '_______________________________
'    'Verifico que tenga dias de vacaciones
'    StrSql = "SELECT vacdiascor.vdiascorcant,vacdiascor.tipvacnro FROM vacdiascor"
'    StrSql = StrSql & " WHERE vacdiascor.vacnro = " & PeriodoVac & " AND ternro = " & Tercero
'    OpenRecordset StrSql, rs_Vacacion
'    If rs_Vacacion.EOF Then
'        Flog.writeline Espacios(Tabulador * 2) & "El empleado no tiene días disponibles para el período " & PeriodoVac
'        InsertaError 1, 50
'        HuboError = True
'        Exit Sub
'    Else
'        vdiascorcant = rs_Vacacion!vdiascorcant
'    End If
'    rs_Vacacion.Close
'
'    'Valida que las fechas esten dentro del período seleccionado
'    StrSql = "SELECT vacfecdesde,vacfechasta,vacestado FROM vacacion"
'    StrSql = StrSql & " WHERE vacnro = " & PeriodoVac & " And vacestado = -1"
'    StrSql = StrSql & " AND vacfecdesde <= " & ConvFecha(FechaDesde) & " AND vacfechasta >= " & ConvFecha(FechaHasta)
'    OpenRecordset StrSql, rs_Vacacion
'    If rs_Vacacion.EOF Then
'        Flog.writeline Espacios(Tabulador * 2) & "Las fechas de la licencia no estan contenidas en el período " & PeriodoVac
'        InsertaError 1, 49
'        HuboError = True
'        Exit Sub
'    Else
'        dias_vac = DateDiff("d", FechaDesde, FechaHasta) + 1
'    End If
'    rs_Vacacion.Close
'
'    'SUMO DIAS TOMADOS EN PERIODO
'    StrSql = "SELECT SUM(elcantdias) total FROM emp_lic"
'    StrSql = StrSql & " WHERE Empleado = " & Tercero & " And tdnro = " & TDNro
'    StrSql = StrSql & " AND elfechadesde >= " & ConvFecha(vacfecdesde) & " and elfechahasta <= " & ConvFecha(vacfechasta)
'    OpenRecordset StrSql, rs_Vacacion
'    If Not rs_Vacacion.EOF Then
'        If IsNull(rs_Vacacion!total) Then
'            dias_tomados = 0
'        Else
'            dias_tomados = rs_Vacacion!total
'        End If
'    Else
'        dias_tomados = 0
'    End If
'    rs_Vacacion.Close
'
'    'Valido que tenga dias disponibles
'    If (vdiascorcant - dias_tomados) >= dias_vac Then
'        inserto_complemento = True
'    Else
'        inserto_complemento = False
'        Flog.writeline Espacios(Tabulador * 2) & "El empleado no tiene días disponibles para el período " & PeriodoVac
'        InsertaError 1, 50
'        HuboError = True
'        Exit Sub
'    End If
'
'End If
'¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

'======================================================================
'SEBASTIAN STREMEL - 07/11/2013


If TDNro = 2 Then
    diasCorresp = TotalDiasCorrespondientes(Tercero)
    diasGozados = TotalDiasGozados(Tercero)
    diasBeneficio = TotalDiasBeneficio(Tercero)
    vacvendidos = TotalDiasVendidos(Tercero)
    'calculo el saldo de vacacion
    saldo = Round((CDbl(diasCorresp) + CDbl(diasBeneficio)) - CDbl(diasGozados) - CDbl(vacvendidos), 2)
    
    If FechaDesde = FechaHasta Then
        If saldo < 1 Then
            Flog.writeline " No tiene saldo disponible para la licencia para el tercero: " & Tercero
            FlogE.writeline " No tiene saldo disponible para la licencia para el tercero: " & Tercero
            insertar = False
        Else
            insertar = True
        End If
    Else
        Flog.writeline " Los dias de vacaciones se deben cargar de a uno. "
        FlogE.writeline " Los dias de vacaciones se deben cargar de a uno. Error en los dias de vacaciones "
        insertar = False
    End If
Else
    insertar = True
End If
'======================================================================


'=============================================================
'VALIDO QUE ESTE ACTIVO EL CIRCUITO
'=============================================================
StrSql = "SELECT cystipact FROM cystipo "
StrSql = StrSql & "WHERE cystipnro = " & cystipnro & " AND cystipact = -1"
OpenRecordset StrSql, rs
If Not rs.EOF Then
    Firmas = "OK"
Else
    Firmas = ""
End If

'____________________________
'SI EL CIRCUITO ESTA ACTIVO
'____________________________
If Firmas = "OK" Then
    

    'Seteo todo en 0
    cysfirusuario = ""
    cysfirautoriza = ""
    cysfirdestino = ""
    cysfirfin = 0
    cysfiryaaut = 0
    cysfirrecha = 0
    tipoorigen = ""
    l_listperfnro = ""
    
    
    '=====================================
    'FIN DE FIRMA
    '=====================================
    StrSql = "SELECT * FROM cysfincirc "
    StrSql = StrSql & " WHERE userid = '" & usuario & "' and cystipnro = " & cystipnro
    OpenRecordset StrSql, rs_Empleado
    If Not rs_Empleado.EOF Then
        Esfin = True
        cysfirusuario = usuario
        cysfirautoriza = usuario
        cysfirdestino = ""
        cysfirfin = -1
        cysfiryaaut = -1
        cysfirrecha = 0
    Else
        Esfin = False
    End If
    rs_Empleado.Close
    
    If Esfin = False Then
        '=====================================
        'QUE TENGA DELEGADO UN PERMISO
        '=====================================
        StrSql = "SELECT bk_cab.iduser, bkcystipnro "
        StrSql = StrSql & " From bk_cab "
        StrSql = StrSql & " INNER JOIN bk_firmas on bk_firmas.bkcabnro = bk_cab.bkcabnro "
        StrSql = StrSql & " Where fdesde <= " & ConvFecha(Date)
        StrSql = StrSql & " AND (fhasta >= " & ConvFecha(Date) & " OR fhasta IS NULL)"
        StrSql = StrSql & " AND bk_firmas.iduser = '" & usuario & "'"
        StrSql = StrSql & " AND bkcystipnro = " & cystipnro
        StrSql = StrSql & " AND bk_cab.iduser <> '" & usuario & "'"
        OpenRecordset StrSql, rs_Empleado
        
        If Not rs_Empleado.EOF Then
            Esfin = True
            cysfirusuario = rs_Empleado!iduser
            cysfirautoriza = usuario
            cysfirdestino = ""
            
            cysfirfin = -1
            cysfiryaaut = -1
            cysfirrecha = 0
        Else
            
            If id_autoriz <> "" Then
                '-----------------------------
                'QUE EXISTA EL USUARIO
                '-----------------------------
                 StrSql = "SELECT iduser FROM user_per "
                 StrSql = StrSql & "WHERE iduser='" & id_autoriz & "'"
                 OpenRecordset StrSql, rs_estado
                 If rs_estado.EOF Or UCase(usuario) = UCase(id_autoriz) Then
                     Texto = ": " & "No se encontro el usuario " & id_autoriz
                     NroColumna = 1
                     Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                     Call InsertaError(1, 128)
                     HuboError = True
                     Exit Sub
                End If
                rs_estado.Close
            Else
                '------------------------------------------------------------
                'SI NO SE INFORMA EL USUARIO, BUSCA EL REPORTA A DEL EMPLEADO
                '------------------------------------------------------------
                StrSql = "SELECT user_ter.iduser FROM empleado"
                StrSql = StrSql & " INNER JOIN user_ter ON user_ter.ternro = empleado.empreporta"
                StrSql = StrSql & " WHERE Empleado.Ternro = " & Tercero
                OpenRecordset StrSql, rs_estado
                 If rs_estado.EOF Then
                     Texto = ": " & "No se encontro Reporta A para el Legajo: " & NroLegajo
                     NroColumna = 1
                     Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                     Call InsertaError(1, 128)
                     HuboError = True
                     Exit Sub
                Else
                    id_autoriz = rs_estado!iduser
                End If
                rs_estado.Close
            
            End If
            '---------------------------
            cysfirusuario = usuario
            cysfirautoriza = usuario
            cysfirdestino = id_autoriz
            
            cysfirfin = 0
            cysfiryaaut = 0
            cysfirrecha = 0
        End If
        rs_Empleado.Close
    
    
    End If
    '-----
End If




'CAS-16578 - Sykes - Error de Licencias CR - Se comenta para SYKES.
'_________________________________________________________________________________________
'VALIDO QUE NO EXISTA CARGADA UNA LICENCIA CON FECHA POSTERIOR AL DIA DE HOY - 05/03/2012
'----SOLO PARA LICENCIAS DEL TIPO 8, 9 Y 45
'-----------------------------------------------------------------------------------------
' If (TDNro = 8 Or TDNro = 9 Or TDNro = 45) Then
'    l_licemp = 18
'
'    StrSql = "SELECT elfechadesde,tddesc FROM emp_lic "
'    StrSql = StrSql & " INNER JOIN tipdia ON tipdia.tdnro = emp_lic.tdnro"
'    StrSql = StrSql & " WHERE elfechadesde >= " & ConvFecha(FechaDesde)
'
'    Select Case TDNro
'        Case 8:
'            StrSql = StrSql & " AND emp_lic.tdnro = " & l_licemp
'        Case Else
'            StrSql = StrSql & " AND emp_lic.tdnro = " & TDNro
'    End Select
'
'    StrSql = StrSql & " AND empleado = " & Tercero
'    OpenRecordset StrSql, rs
'    If Not rs.EOF Then
'       Flog.writeline Espacios(Tabulador * 1) & "Existe una licencia de tipo """ & rs!tddesc & """ cargada con fecha posterior."
'       FlogE.writeline
'       FlogE.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO: " & NroLegajo
'       FlogE.writeline Espacios(Tabulador * 1) & "-------------------------------------"
'       FlogE.writeline Espacios(Tabulador * 1) & "Linea " & NroLinea & ": Existe una licencia de tipo """ & rs!tddesc & """ cargada con fecha posterior."
'
'       InsertaError 1, 134
'       HuboError = True
'       Exit Sub
'    End If
' End If
'--------------
'=============================================================
'Busco si existe la Licencia
StrSql = "SELECT * FROM emp_lic "
StrSql = StrSql & " WHERE (empleado = " & Tercero & " )"
StrSql = StrSql & " AND elfechadesde <=" & ConvFecha(FechaHasta)
StrSql = StrSql & " AND elfechahasta >= " & ConvFecha(FechaDesde)
If diasHab <> 0 Then
   StrSql = StrSql & " AND elcantdiashab = " & diasHab
End If
         
         
OpenRecordset StrSql, rs_Lic

    If Not rs_Lic.EOF Then
            Flog.writeline Espacios(Tabulador * 2) & "No se puede insertar la Licencia porque se superpone con otra ya existente"
            Flog.writeline Espacios(Tabulador * 2) & "(" & rs_Lic!emp_licnro & ") desde " & rs_Lic!elfechadesde & " hasta " & rs_Lic!elfechahasta & " de tipo " & rs_Lic!TDNro
            
            FlogE.writeline
            FlogE.writeline Espacios(Tabulador * 1) & "PROCESANDO LEGAJO: " & NroLegajo
            FlogE.writeline Espacios(Tabulador * 1) & "-------------------------------------"
            FlogE.writeline Espacios(Tabulador * 2) & "Linea " & NroLinea & ": No se puede insertar la Licencia porque se superpone con otra ya existente"
            FlogE.writeline Espacios(Tabulador * 2) & "         (" & rs_Lic!emp_licnro & ") desde " & rs_Lic!elfechadesde & " hasta " & rs_Lic!elfechahasta & " de tipo " & rs_Lic!TDNro
            
            InsertaError 1, 135
            HuboError = True
            Exit Sub
    Else
            
        If insertar Then
            'Inserto la Licencia
            StrSql = "INSERT INTO emp_lic ("
            StrSql = StrSql & "empleado,elfechadesde,elfechahasta,tdnro,eldiacompleto,eltipo,elorden"
            If LicTipo = 2 Then
                StrSql = StrSql & ",elhoradesde,elhorahasta"
            End If
            If LicTipo = 3 Then
                StrSql = StrSql & ",elmaxhoras,elcanthrs"
            End If
            StrSql = StrSql & ",elcantdias,licestnro"
            If diasHab <> 0 Then
                StrSql = StrSql & " ,elcantdiashab "
            End If
            StrSql = StrSql & ") VALUES ("
            StrSql = StrSql & Tercero
            StrSql = StrSql & "," & ConvFecha(FechaDesde)
            StrSql = StrSql & "," & ConvFecha(FechaHasta)
            StrSql = StrSql & "," & TDNro
            StrSql = StrSql & "," & CLng(DiaCompleto)
            StrSql = StrSql & "," & LicTipo ' 1 = Dia Completo
            
            StrSql = StrSql & ",1" ' 23/12/2012
            
            If LicTipo = 2 Then ' Parcial Fija
                StrSql = StrSql & ",'" & HoraDesde & "'"
                StrSql = StrSql & ",'" & HoraHasta & "'"
            End If
            If LicTipo = 3 Then ' Parcial Variable
                StrSql = StrSql & "," & CantidadHoras
                StrSql = StrSql & "," & CantidadHoras
            End If
            
            StrSql = StrSql & "," & (DateDiff("d", FechaDesde, FechaHasta) + 1)
            StrSql = StrSql & "," & LicEstNro
            If diasHab <> 0 Then
                StrSql = StrSql & "," & diasHab
            End If
            StrSql = StrSql & " )"
            objConn.Execute StrSql, , adExecuteNoRecords
            Flog.writeline Espacios(Tabulador * 2) & "Licencia insertada "
                
            emp_licnro = getLastIdentity(objConn, "emp_lic")
            
            
           ' ====================================================================
           'INSERTO EN cysfirmas
           ' ====================================================================
            If Firmas = "OK" And emp_licnro <> 0 Then
                StrSql = "INSERT INTO cysfirmas ("
                StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
                StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
                StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
                StrSql = StrSql & ")"
                StrSql = StrSql & "VALUES("
                StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
                StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & emp_licnro & ",1,'Licencia desde interfaz'"
                StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
                StrSql = StrSql & ")"
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Autorización insertada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            End If
            
            
            '__________________________________
            'INSERTO COMPLEMENTOS
            '----------------------------------
            If inserto_complemento = True Then
                Select Case TDNro
                    Case 2:
                        'Inserto Complemento de vacaciones
                        StrSql = "INSERT INTO lic_vacacion  (emp_licnro,vacnro,vacnotifnro,licvacmanual) "
                        StrSql = StrSql & " VALUES ("
                        StrSql = StrSql & emp_licnro & "," & PeriodoVac & ",NULL,-1"
                        StrSql = StrSql & ")"
                        objConn.Execute StrSql, , adExecuteNoRecords
                        Flog.writeline Espacios(Tabulador * 2) & "Complemento de Vacaciones Insertado "
                        '------------------------------------
                End Select
            End If
            
            
            'Genero la Justificacion
             StrSql = " INSERT INTO gti_justificacion ( jusanterior,juscodext,jusdesde,jusdiacompleto,jushasta,jussigla,jussistema,ternro,tjusnro,turnro,jushoradesde,jushorahasta,juseltipo,juselmaxhoras,juselorden ) VALUES ("
             StrSql = StrSql & "-1"
             StrSql = StrSql & "," & emp_licnro
             StrSql = StrSql & "," & ConvFecha(FechaDesde)
             StrSql = StrSql & ",-1"
             StrSql = StrSql & "," & ConvFecha(FechaHasta)
             StrSql = StrSql & ",'LIC'"
             StrSql = StrSql & ",-1"
             StrSql = StrSql & "," & Tercero
             StrSql = StrSql & ",1"
             StrSql = StrSql & ",0"
             StrSql = StrSql & ",'" & HoraDesde & "'"
             StrSql = StrSql & ",'" & HoraHasta & "'"
             'FGZ - 17/06/2011 -----------------
             'StrSql = StrSql & "," & TDNro
             StrSql = StrSql & "," & LicTipo
             StrSql = StrSql & "," & CantidadHoras
             StrSql = StrSql & ",1" '23/01/2012
             StrSql = StrSql & ")"
             objConn.Execute StrSql, , adExecuteNoRecords
             Flog.writeline Espacios(Tabulador * 2) & "Justificacion insertada "
             
             
            ' Codigo de Sit. Revista
            ' ___________________________________________________________
             Flog.writeline Espacios(Tabulador * 2) & "Situacion de revista"
            
            
            StrSql = "SELECT estrnro, tdnro FROM csijp_srtd "
            StrSql = StrSql & " WHERE tdnro =" & TDNro
            If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                Estrnro_SitRev = rs!Estrnro
            End If
            If rs.State = adStateOpen Then rs.Close
            
            
            If Trim(Estrnro_SitRev) <> "" Then
                
                    'Busco el tipo de la situacion de revista anterior
                    StrSql = "SELECT * FROM his_estructura "
                    StrSql = StrSql & " WHERE tenro = 30 "
                    StrSql = StrSql & " AND ternro = " & Tercero
                    StrSql = StrSql & " AND htetdesde <= " & ConvFecha(FechaDesde)
                    StrSql = StrSql & " AND ( htethasta >= " & ConvFecha(FechaDesde) & " OR htethasta IS Null )"
                    If rs_Est.State = adStateOpen Then rs_Est.Close
                    OpenRecordset StrSql, rs_Est
                    
                    If Not rs_Est.EOF Then
                        'la cierro un dia antes
                        If EsNulo(rs_Est!htethasta) Then
                            If Not (rs_Est!htetdesde = FechaDesde) Then
                                StrSql = " UPDATE his_estructura SET "
                                StrSql = StrSql & " htethasta = " & ConvFecha(CDate(FechaDesde - 1))
                                StrSql = StrSql & " WHERE tenro   = 30 "
                                StrSql = StrSql & " AND   estrnro  = " & rs_Est!Estrnro
                                StrSql = StrSql & " AND   ternro  = " & Tercero
                                StrSql = StrSql & " AND   htetdesde = " & ConvFecha(rs_Est!htetdesde)
                                StrSql = StrSql & " AND   htethasta  is null "
                                objConn.Execute StrSql, , adExecuteNoRecords
                            Else
                                'la borro porque se va superponer con la licencia
                                StrSql = " DELETE his_estructura "
                                StrSql = StrSql & " WHERE tenro   = 30 "
                                StrSql = StrSql & " AND   estrnro  = " & rs_Est!Estrnro
                                StrSql = StrSql & " AND   ternro =" & Tercero
                                StrSql = StrSql & " AND   htetdesde = " & ConvFecha(rs_Est!htetdesde)
                                StrSql = StrSql & " AND   htethasta  is null "
                                objConn.Execute StrSql, , adExecuteNoRecords
                            End If
                            
                            'Inserto la misma situacion despues de la nueva situacion (la de la licencia)
                            StrSql = "INSERT INTO his_estructura(tenro, ternro, estrnro, htetdesde)"
                            StrSql = StrSql & " VALUES (30, " & Tercero & ", " & rs_Est!Estrnro & ", "
                            StrSql = StrSql & ConvFecha(CDate(FechaHasta + 1)) & ")"
                            objConn.Execute StrSql, , adExecuteNoRecords
                            
                        Else
                            If rs_Est!htethasta > FechaHasta Then
                                If rs_Est!htetdesde > FechaDesde Then
                                    StrSql = " UPDATE his_estructura SET "
                                    StrSql = StrSql & " htethasta = " & ConvFecha(CDate(FechaDesde - 1))
                                    StrSql = StrSql & " WHERE tenro   = 30 "
                                    StrSql = StrSql & " AND   ternro  = " & Tercero
                                    StrSql = StrSql & " AND   htetdesde = " & ConvFecha(rs_Est!htetdesde)
                                    StrSql = StrSql & " AND   htethasta  = " & ConvFecha(rs_Est!htethasta)
                                    objConn.Execute StrSql, , adExecuteNoRecords
                                Else
                                    'la borro porque se va superponer con la licencia
                                    StrSql = " DELETE his_estructura "
                                    StrSql = StrSql & " WHERE tenro = 30 "
                                    StrSql = StrSql & " AND   estrnro = " & rs_Est!Estrnro
                                    StrSql = StrSql & " AND   ternro  = " & Tercero
                                    StrSql = StrSql & " AND   htetdesde = " & ConvFecha(rs_Est!htetdesde)
                                    StrSql = StrSql & " AND   htethasta  = " & ConvFecha(rs_Est!htethasta)
                                    objConn.Execute StrSql, , adExecuteNoRecords
                                End If
                                
                                'Inserto la misma situacion despues de la nueva situacion (la de la licencia)
                                StrSql = "INSERT INTO his_estructura "
                                StrSql = StrSql & " (tenro, ternro, estrnro, htetdesde,htethasta) "
                                StrSql = StrSql & " VALUES (30, " & Tercero & ", " & rs_Est!Estrnro & ", "
                                StrSql = StrSql & ConvFecha(CDate(FechaHasta + 1)) & ", " & ConvFecha(rs_Est!htethasta) & ")"
                                objConn.Execute StrSql, , adExecuteNoRecords
                                
                            Else
                                If rs_Est!htetdesde > FechaDesde Then
                                    StrSql = " UPDATE his_estructura SET "
                                    StrSql = StrSql & " htethasta = " & ConvFecha(CDate(FechaDesde - 1))
                                    StrSql = StrSql & " WHERE tenro   = 30 "
                                    StrSql = StrSql & " AND   ternro  = " & Tercero
                                    StrSql = StrSql & " AND   htetdesde = " & ConvFecha(rs_Est!htetdesde)
                                    StrSql = StrSql & " AND   htethasta  is null "
                                    objConn.Execute StrSql, , adExecuteNoRecords
                                Else
                                    'la borro porque se va superponer con la licencia
                                    StrSql = " DELETE his_estructura "
                                    StrSql = StrSql & " WHERE tenro = 30 "
                                    StrSql = StrSql & "     AND estrnro  = " & rs_Est!Estrnro
                                    StrSql = StrSql & "     AND ternro  = " & Tercero
                                    StrSql = StrSql & "     AND htetdesde = " & ConvFecha(rs_Est!htetdesde)
                                    StrSql = StrSql & "     AND htethasta  = " & ConvFecha(rs_Est!htethasta)
                                    objConn.Execute StrSql, , adExecuteNoRecords
                                End If
                            End If
                        End If
                    End If
                
                    StrSql = "INSERT INTO his_estructura(tenro, ternro, estrnro, htetdesde,htethasta) "
                    StrSql = StrSql & " VALUES (30, " & Tercero & ", " & Estrnro_SitRev & ", "
                    StrSql = StrSql & ConvFecha(FechaDesde) & ", " & ConvFecha(FechaHasta) & ")"
                    objConn.Execute StrSql, , adExecuteNoRecords
                    
                Else
                    Flog.writeline Espacios(Tabulador * 2) & "La Licencia no tienen Situacion de Revista asociado"
                End If
                
                
'_______________________________________________________________________________________
'Se encarga de partir la lic por enfermedad en 1 o 2 sublicencias segun corresponda
'---------------------------------------------------------------------------------------
        If TDNro = 8 Then
            l_licemp = 18
            l_licccss = 19
            l_ultimafecha = ""
            'l_elorden = LicTipo
            l_elorden = 1
            
            
            'BUSCO EL LÍMITE POR EVENTO PARA LA LIC A CARGO DE LA EMPRESA
            StrSql = "SELECT tdinteger1 FROM tipdia WHERE tdnro = " & l_licemp
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                LimiteXevento = rs!tdinteger1
            Else
                'Por defecto = 3
                LimiteXevento = 3
            End If
            'LimiteXevento =
            
            '---
            
            If HoraHasta = "" Then
                HoraHasta = "NULL"
            End If
            If HoraDesde = "" Then
                HoraDesde = "NULL"
            End If
            
            
            'Recupero la ultima licencia gozada de este tipo (es la ultima porque las ordeno DESC y uso solo 1) si es que existe.
           StrSql = "SELECT elfechahasta, elcantdias,tdnro from emp_lic "
           StrSql = StrSql & " WHERE empleado = " & Tercero
           'StrSql = StrSql & " AND (tdnro = " & l_licemp & " OR tdnro = " & l_licccss & " OR tdnro = 46 OR tdnro = 48) AND elfechahasta < " & ConvFecha(FechaDesde) & "  ORDER BY elfechahasta DESC"
           'StrSql = StrSql & " AND (tdnro = " & l_licemp & " OR tdnro = 46) AND elfechahasta < " & ConvFecha(FechaDesde) & "  ORDER BY elfechahasta DESC"
           StrSql = StrSql & " AND (tdnro = " & l_licemp & " OR tdnro = " & l_licccss & " OR tdnro = 46 OR tdnro = 48) AND elfechahasta < " & ConvFecha(FechaDesde) & "  ORDER BY elfechahasta DESC"
           OpenRecordset StrSql, rs
           If Not rs.EOF Then
                l_ultimafecha = rs!elfechahasta
           Else 'no se tomo ninguna licencia de este tipo todavia
                l_diasgastados = 0
                l_ultimafecha = ""
           End If
           rs.Close
           
            StrSql = "SELECT SUM(elcantdias) elcantdias from emp_lic"
            StrSql = StrSql & " Where Empleado = " & Tercero
            StrSql = StrSql & " AND (tdnro = " & l_licemp & " OR tdnro = 46)"
            StrSql = StrSql & " AND (elfechahasta <= " & ConvFecha(FechaDesde)
            StrSql = StrSql & " AND elfechadesde >= " & ConvFecha(DateAdd("d", -30, CDate(FechaDesde)))
            
            'NG - 17/09/2012
            'StrSql = StrSql & " OR elfechahasta >= " & ConvFecha(DateAdd("d", -30, CDate(FechaDesde)))
            StrSql = StrSql & ")"
            
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                l_diasgastados = l_diasgastados + rs!elcantdias
            Else
                l_diasgastados = 0
            End If
            
            If EsNulo(l_diasgastados) Then
                l_diasgastados = 0
            End If
            '_________________________________________
            'Dias que pasaron desde la ultima licencia
            '-----------------------------------------
            If (l_ultimafecha <> "") Then
                l_difdias = DateDiff("d", l_ultimafecha, FechaDesde) + 1
            Else
                l_difdias = 31
            End If
            
            
            '_______________________________________________
            'Guardo la cantidad total de dias de la licencia
            l_dias = DateDiff("d", FechaDesde, FechaHasta) + 1
            '________________________________________________
            'l_dias = l_elcantdias 'dias que tiene la licencia
            

            If (l_difdias >= 30) And LimiteXevento > 0 Then 'la empresa puede cubrir los 3 primeros dias de la licencia y luego se hace cargo la CCSS
            
                If (l_dias <= LimiteXevento) Then 'va todo a cargo de la empresa
                
                    'Call calcularhabyferi(l_dias, FechaDesde)
                    calculaFeri = calcularhabyferi(l_dias, FechaDesde)
                    l_cantferi = Mid(calculaFeri, 1, InStr(1, calculaFeri, "@", 0) - 1)
                    l_canthab = Mid(calculaFeri, InStr(1, calculaFeri, "@", 0) + 1, Len(calculaFeri))
                    '---------
                    StrSql = "UPDATE emp_lic SET "
                    StrSql = StrSql & " tdnro = " & l_licemp & ","
                    StrSql = StrSql & " elcantdias = " & l_dias & ","
                    StrSql = StrSql & " emp_lic.elfechahasta  = " & ConvFecha(FechaHasta) & ","
                    StrSql = StrSql & " emp_lic.elcantdiasfer = " & l_cantferi & ","
                    StrSql = StrSql & " emp_lic.elcantdiashab = " & l_canthab
                    
                    '___23/01/2012
                    StrSql = StrSql & ", emp_lic.elorden = " & l_elorden
                    
                    StrSql = StrSql & " WHERE emp_licnro  = " & emp_licnro
                    objConn.Execute StrSql, , adExecuteNoRecords
                
                Else 'van los 3 primeros dias a cargo de la empresa y despues creo el resto
                
                    'Call calcularhabyferi(3, FechaDesde)
                    'calculaFeri = calcularhabyferi(3, FechaDesde)
                    calculaFeri = calcularhabyferi(LimiteXevento, FechaDesde)
                    l_cantferi = Mid(calculaFeri, 1, InStr(1, calculaFeri, "@", 0) - 1)
                    l_canthab = Mid(calculaFeri, InStr(1, calculaFeri, "@", 0) + 1, Len(calculaFeri))
                    
                    '---------
                    'Guardo la fecha tope de la primera licencia
                    'l_fechahastaaux = DateAdd("d", 2, CDate(FechaDesde))
                    l_fechahastaaux = DateAdd("d", (LimiteXevento - 1), CDate(FechaDesde))
                    
                    StrSql = "UPDATE emp_lic SET "
                    StrSql = StrSql & " tdnro = " & l_licemp & ","
                    StrSql = StrSql & " elcantdias = " & LimiteXevento & ","
                    StrSql = StrSql & " emp_lic.elfechahasta  = " & ConvFecha(l_fechahastaaux) & ","
                    StrSql = StrSql & " emp_lic.elcantdiasfer = " & l_cantferi & ","
                    StrSql = StrSql & " emp_lic.elcantdiashab = " & l_canthab
                    
                    '___23/01/2012
                    StrSql = StrSql & ", emp_lic.elorden = " & l_elorden
                    
                    StrSql = StrSql & " WHERE emp_licnro  = " & emp_licnro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    '-----------------------------------------------------
                    '-----------------------------------------------------
                    'Actualizo gti_justificacion
                    StrSql = "UPDATE gti_justificacion SET jushasta = " & ConvFecha(l_fechahastaaux)
                    StrSql = StrSql & " WHERE juscodext  = " & emp_licnro
                    StrSql = StrSql & " AND jussigla  = 'LIC'"
                    objConn.Execute StrSql, , adExecuteNoRecords
                    
                    '-----------------------------------------------------
                    '-----------------------------------------------------
                    

                    '-----------------------------------------------------
                    '-----------------------------------------------------
                    
                    
                    
                    l_fechadesdeaux = DateAdd("d", 1, CDate(l_fechahastaaux))
                    
                    'l_restodias = l_dias - 3
                    l_restodias = l_dias - LimiteXevento
                    
                    If l_restodias > 0 Then 'el resto de los dias van a cargo de CCSS
                    
                        'Call calcularhabyferi(l_restodias, l_fechadesdeaux)
                        calculaFeri = calcularhabyferi(l_restodias, l_fechadesdeaux)
                        l_cantferi = Mid(calculaFeri, 1, InStr(1, calculaFeri, "@", 0) - 1)
                        l_canthab = Mid(calculaFeri, InStr(1, calculaFeri, "@", 0) + 1, Len(calculaFeri))
                    
                        'Guardo la fecha tope de la primera licencia
                        'l_fechahastaaux = DateAdd("d", 2, CDate(FechaDesde))
                        l_fechahastaaux = DateAdd("d", (LimiteXevento - 1), CDate(FechaDesde))
                        
                        StrSql = "INSERT INTO emp_lic "
                        StrSql = StrSql & " (tdnro, empleado, elfechadesde, elfechahasta, "
                        StrSql = StrSql & "  elcantdias, elcantdiasfer, elcantdiashab, "
                        StrSql = StrSql & "  elorden, eltipo, elhoradesde, elhorahasta, licestnro, elobs )"
                        StrSql = StrSql & " VALUES (" & l_licccss & "," & Tercero & ", " & ConvFecha(l_fechadesdeaux) & ", " & ConvFecha(FechaHasta)
                        StrSql = StrSql & ", " & l_restodias & ", " & l_cantferi & ", " & l_canthab & ", "
                        StrSql = StrSql & LicTipo & ", " & LicTipo & ", Null, Null," & LicEstNro & ", '')"
                        objConn.Execute StrSql, , adExecuteNoRecords
                        
                        l_restodias = 0
                                            
                        'Busco el nro de la licencia recien creada
                        l_emp_licnroaux = getLastIdentity(objConn, "emp_lic")
                        
                        '_______________________
                        'linkeo las licencias
                        StrSql = "UPDATE emp_lic SET "
                        StrSql = StrSql & " licnrosig = " & l_emp_licnroaux
                        StrSql = StrSql & " WHERE emp_licnro  = " & emp_licnro
                        objConn.Execute StrSql, , adExecuteNoRecords
                        
                        l_emp_licnro = l_emp_licnroaux
                        
                        '____________________________________________________________
                        'creo la entrada correspondiente a la licencia por enfermedad
                        StrSql = "INSERT INTO lic_enfer "
                        StrSql = StrSql & "(emp_licnro, licenfalta, vismednro) "
                        StrSql = StrSql & "values (" & l_emp_licnro & ",0,0)"
                        objConn.Execute StrSql, , adExecuteNoRecords
                        
                        '____________________________________________________________
                        'Creo la justificacion para la licencia recien creada
                        StrSql = "INSERT INTO gti_justificacion (jusanterior,juscodext,jusdesde,jusdiacompleto,jushasta,jussigla,jussistema,ternro," & _
                        "tjusnro,turnro,jushoradesde,jushorahasta,juseltipo,juselorden,juselmaxhoras )" & _
                        " VALUES( -1," & l_emp_licnro & "," & ConvFecha(l_fechadesdeaux) & ",-1," & ConvFecha(FechaHasta) & ",'LIC',-1," & _
                        Tercero & ",1,0," & HoraDesde & "," & HoraHasta & "," & LicTipo & "," & l_elorden & "," & CantidadHoras & ")"
                        objConn.Execute StrSql, , adExecuteNoRecords
                        
                       
                       
                        '____________________________________________________________
                        'Genero firmas
                         If Firmas = "OK" And emp_licnro <> 0 Then
                            StrSql = "INSERT INTO cysfirmas ("
                            StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
                            StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
                            StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
                            StrSql = StrSql & ")"
                            StrSql = StrSql & "VALUES("
                            StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
                            StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & l_emp_licnroaux & ",1,'Licencia desde interfaz'"
                            StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
                            StrSql = StrSql & ")"
                            objConn.Execute StrSql, , adExecuteNoRecords
                            Texto = "Autorización insertada "
                            Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                        End If
                            
                    End If
                            
                End If
                
            Else 'no pasaron 30 dias desde la ultima licencia, por lo tanto tengo que ver si quedan dias a cargo de la empresa o directamente lo cubre todo CCSS
                                
                'l_restanempresa = 3 - l_diasgastados
                l_restanempresa = LimiteXevento - l_diasgastados
                
                
                If l_restanempresa > 0 Then 'quedan dias a cargo de la empresa
                
                    'Call calcularhabyferi(l_restanempresa, FechaDesde)
                    calculaFeri = calcularhabyferi(l_restanempresa, FechaDesde)
                    l_cantferi = Mid(calculaFeri, 1, InStr(1, calculaFeri, "@", 0) - 1)
                    l_canthab = Mid(calculaFeri, InStr(1, calculaFeri, "@", 0) + 1, Len(calculaFeri))
                    
                    'Guardo la fecha tope de la primera licencia
                    'l_fechahastaaux = DateAdd("d", l_restanempresa - 1, CDate(FechaDesde)) ' NG - 30/07/2012 - Sumaba un dia a la fecha hasta
                    
                    If (DateDiff("d", FechaDesde, FechaHasta) + 1) > l_restanempresa Then
                        l_fechahastaaux = DateAdd("d", l_restanempresa - 1, CDate(FechaDesde))
                        l_elcantdias = l_restanempresa
                    Else
                        l_fechahastaaux = CDate(FechaHasta)
                        l_elcantdias = DateDiff("d", FechaDesde, FechaHasta) + 1
                        'l_dias = l_dias + DateDiff("d", FechaDesde, FechaHasta) + 1
                    End If
                    
                    StrSql = "UPDATE emp_lic SET "
                    StrSql = StrSql & " tdnro = " & l_licemp & ","
                    'StrSql = StrSql & " elcantdias = " & l_restanempresa & ","
                    StrSql = StrSql & " elcantdias = " & l_elcantdias & ","
                    StrSql = StrSql & " emp_lic.elfechahasta  = " & ConvFecha(l_fechahastaaux) & ","
                    StrSql = StrSql & " emp_lic.elcantdiasfer = " & l_cantferi & ","
                    StrSql = StrSql & " emp_lic.elcantdiashab = " & l_canthab
                    
                    '___23/01/2012
                    StrSql = StrSql & " , emp_lic.elorden = " & l_elorden
                    
                    StrSql = StrSql & " WHERE emp_licnro  = " & emp_licnro
                    objConn.Execute StrSql, , adExecuteNoRecords
                
                    '________________________________________________________
                    'Actualizo gti_justificacion
                    StrSql = "UPDATE gti_justificacion SET jushasta = " & ConvFecha(l_fechahastaaux)
                    StrSql = StrSql & " WHERE juscodext  = " & emp_licnro
                    StrSql = StrSql & " AND jussigla  = 'LIC'"
                    objConn.Execute StrSql, , adExecuteNoRecords
                
                

                    l_restodias = l_dias - l_restanempresa
                    
                    If l_restodias > 0 Then 'el resto de los dias van a cargo de CCSS
                    
                        'Call calcularhabyferi(l_restodias, l_fechadesdeaux)
                        calculaFeri = calcularhabyferi(l_restodias, l_fechadesdeaux)
                        l_cantferi = Mid(calculaFeri, 1, InStr(1, calculaFeri, "@", 0) - 1)
                        l_canthab = Mid(calculaFeri, InStr(1, calculaFeri, "@", 0) + 1, Len(calculaFeri))
                        
                        
                        l_fechadesdeaux = DateAdd("d", l_restanempresa, CDate(FechaDesde))
                        l_fechahastaaux = DateAdd("d", l_restodias, CDate(l_fechahastaaux))
                        
                        StrSql = "insert into emp_lic "
                        StrSql = StrSql & " (tdnro, empleado, elfechadesde, elfechahasta, "
                        StrSql = StrSql & "  elcantdias, elcantdiasfer, elcantdiashab, "
                        StrSql = StrSql & "  elorden, eltipo, elhoradesde, elhorahasta, elfechacert, licestnro, elobs )"
                        StrSql = StrSql & " VALUES (" & l_licccss & "," & Tercero & ", " & ConvFecha(l_fechadesdeaux) & ", " & ConvFecha(l_fechahastaaux)
                        StrSql = StrSql & ", " & l_restodias & ", " & l_cantferi & ", " & l_canthab & ", "
                        StrSql = StrSql & LicTipo & ", " & LicTipo & ", Null, Null, Null, " & LicEstNro & ", '')"
                        objConn.Execute StrSql, , adExecuteNoRecords
                        
                        l_restodias = 0
                                            
                        '________________________________________________
                        'Busco el nro de la licencia recien creada

                        'emp_licnro = getLastIdentity(objConn, "emp_lic")
                        'l_emp_licnroaux = rs!codigo
                        l_emp_licnroaux = getLastIdentity(objConn, "emp_lic")
                        
                        '________________________________________________
                        'linkeo las licencias
                        'Set l_cm = Server.CreateObject("ADODB.Command")
                        StrSql = "UPDATE emp_lic SET "
                        StrSql = StrSql & " licnrosig = " & l_emp_licnroaux
                        StrSql = StrSql & " WHERE emp_licnro  = " & emp_licnro
                        objConn.Execute StrSql, , adExecuteNoRecords
                        
                        l_emp_licnro = l_emp_licnroaux
                        
                        '____________________________________________________________
                        'creo la entrada correspondiente a la licencia por enfermedad
                        StrSql = "INSERT INTO lic_enfer "
                        StrSql = StrSql & "(emp_licnro, licenfalta, vismednro) "
                        StrSql = StrSql & "values (" & l_emp_licnro & ",0,0)"
                        objConn.Execute StrSql, , adExecuteNoRecords
                          
                        '________________________________________________
                        'Creo la justificacion para la licencia recien creada
                        StrSql = "INSERT INTO gti_justificacion (jusanterior,juscodext,jusdesde,jusdiacompleto,jushasta,jussigla,jussistema,ternro," & _
                        "tjusnro,turnro,jushoradesde,jushorahasta,juseltipo,juselorden,juselmaxhoras )" & _
                        " VALUES( -1," & l_emp_licnro & "," & ConvFecha(l_fechadesdeaux) & ",-1," & ConvFecha(FechaHasta) & ",'LIC',-1," & _
                        Tercero & ",1,0," & HoraDesde & "," & HoraHasta & "," & LicTipo & "," & l_elorden & "," & CantidadHoras & ")"
                        objConn.Execute StrSql, , adExecuteNoRecords
                         
                        
                        '________________________________________________
                        'Genero las Firmas
                        If Firmas = "OK" And emp_licnro <> 0 Then
                            StrSql = "INSERT INTO cysfirmas ("
                            StrSql = StrSql & "cysfirautoriza,cysfirfecaut,cysfirmhora,cysfirusuario,"
                            StrSql = StrSql & "cysfirdestino,cystipnro,cysfircodext,cysfirsecuencia,cysfirdes"
                            StrSql = StrSql & ",cysfirfin,cysfiryaaut,cysfirrecha"
                            StrSql = StrSql & ")"
                            StrSql = StrSql & "VALUES("
                            StrSql = StrSql & "'" & cysfirautoriza & "'," & ConvFecha(Date) & ",'" & FormatDateTime(Now(), vbShortTime) & "'"
                            StrSql = StrSql & ",'" & cysfirusuario & "','" & cysfirdestino & "'," & cystipnro & "," & l_emp_licnro & ",1,'Licencia desde interfaz'"
                            StrSql = StrSql & "," & cysfirfin & "," & cysfiryaaut & "," & cysfirrecha
                            StrSql = StrSql & ")"
                            objConn.Execute StrSql, , adExecuteNoRecords
                            Texto = "Autorización insertada "
                            Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                        End If
            
                    End If
        
            Else 'no quedan dias a cargo de la empresa, va todo a CCSS
            
                'Call calcularhabyferi(l_dias, FechaDesde)
                calculaFeri = calcularhabyferi(l_dias, FechaDesde)
                l_cantferi = Mid(calculaFeri, 1, InStr(1, calculaFeri, "@", 0) - 1)
                l_canthab = Mid(calculaFeri, InStr(1, calculaFeri, "@", 0) + 1, Len(calculaFeri))
                
                StrSql = "UPDATE emp_lic SET "
                StrSql = StrSql & " tdnro = " & l_licccss & ","
                StrSql = StrSql & " elcantdias = " & l_dias & ","
                StrSql = StrSql & " emp_lic.elfechahasta  = " & ConvFecha(FechaHasta) & ","
                StrSql = StrSql & " emp_lic.elcantdiasfer = " & l_cantferi & ","
                StrSql = StrSql & " emp_lic.elcantdiashab = " & l_canthab
                
                '___23/01/2012
                StrSql = StrSql & ", emp_lic.elorden = " & l_elorden
                
                StrSql = StrSql & " WHERE emp_licnro  = " & emp_licnro
                objConn.Execute StrSql, , adExecuteNoRecords
                
            End If
            
            End If
            '--------------------------------------------------------------------
            
            
        End If
        '_______________________________________________________________________________________
        'FIN ---- Se encarga de partir la lic por enfermedad en 1 o 2 sublicencias segun corresponda
        '---------------------------------------------------------------------------------------
            
        Else
            Flog.writeline "No tiene saldo de vacaciones para insertar la licencia "
        End If
    End If

Fin:
'Cierro todo y libero
If rs_Lic.State = adStateOpen Then rs_Lic.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_TipDia.State = adStateOpen Then rs_TipDia.Close
If rs_estado.State = adStateOpen Then rs_estado.Close
If rs_Est.State = adStateOpen Then rs_Est.Close
'If rs_Vacacion = adStateOpen Then rs_Vacacion.Close

Set rs_Lic = Nothing
Set rs_Empleado = Nothing
Set rs_TipDia = Nothing
Set rs_estado = Nothing
Set rs_Est = Nothing
Set rs_Vacacion = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    
    FlogE.writeline
    FlogE.writeline Espacios(Tabulador * 1) & "***************************************************"
    FlogE.writeline Espacios(Tabulador * 1) & "Error insalvable en la Linea " & NroLinea
    FlogE.writeline Espacios(Tabulador * 1) & "   " & strLinea
    FlogE.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    FlogE.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    FlogE.writeline Espacios(Tabulador * 1) & "***************************************************"
    FlogE.writeline
    
    
    GoTo Fin

End Sub

Public Function FechaAltaEmpleado(Ternro) As Date
' ---------------------------------------------------------------------------------------------
' Descripcion: Calcula el año de Vacaciones (Sykes)
' Autor      : Deluchi Ezequiel
' Fecha      : 04/10/2011
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------

    Dim StrSql As String
    Dim rsFases As New ADODB.Recordset
    Dim i_dia As Integer
    Dim i_mes As Integer
    Dim i_anio As Integer
    
    StrSql = "SELECT * FROM fases where fases.empleado = " & Ternro & " AND fases.fasrecofec = -1 "
    OpenRecordset StrSql, rsFases
    If rsFases.EOF Then
        FechaAltaEmpleado = Empty
        Flog.writeline "El empleado no tiene fase con alta reconocida."
    Else
        If IsNull(rsFases("altfec")) Then
            FechaAltaEmpleado = ""
        Else
            FechaAltaEmpleado = CDate(rsFases("altfec"))
        End If
    End If
    
    If rsFases.State = adStateOpen Then rsFases.Close
    Set rsFases = Nothing
    
End Function
Public Sub LineaModelo_345(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Actualiza el Historico de Vacaciones (Sykes)
' Autor      : Deluchi Ezequiel
' Fecha      : 04/10/2011
' Ultima Mod.:
' Descripcion:
' ---------------------------------------------------------------------------------------------


Dim NroLegajo As Long                       'Nro de legajo del empleado
Dim Tercero As Long                         'Nro de tercero del empleado
Dim fechaAlta As Date                       'Fecha de Alta del empleado
Dim FechaDesde As Date                      'Fecha Desde Vacaciones
Dim FechaHasta As Date                      'Fecha Hasta Vacaciones
Dim vacacionAnio As Integer                 'Anio Correspondiente al Periodo de Vacaciones
Dim cantdias As Double                     'Cantidad de dias de Vacaciones
Dim TipoDia As Integer                         'Tipo de dia (Regular o Beneficio)
Dim fechaGeneracion As Date                 'Fecha de Generacion Proceso
Dim codVac As Integer                       'Ultimo identity insertado en la tabla vacacion
Dim arrayDatos                              'Array de Datos
Dim rs_Empleado As New ADODB.Recordset
Dim rs_Vacacion As New ADODB.Recordset
Dim rs_vacdiascor As New ADODB.Recordset
Dim StrSql As String


arrayDatos = Split(strLinea, ";")
If UBound(arrayDatos) + 1 <> 6 Then
    Flog.writeline Espacios(Tabulador * 2) & "Faltan Datos en el Archivo de Exportacion."
    Flog.writeline Espacios(Tabulador * 2) & "El formato debe ser:"
    Flog.writeline Espacios(Tabulador * 2) & "legajo;fecha desde;fecha hasta;cantidad de dias;tipo de dia;fecha generacion:"
    Flog.writeline
End If
NroLegajo = arrayDatos(0)
FechaDesde = arrayDatos(1)
FechaHasta = arrayDatos(2)
cantdias = arrayDatos(3)
TipoDia = arrayDatos(4)
fechaGeneracion = arrayDatos(5)

'Chequeo que exista nro de legajo

If NroLegajo < 1 Then
    Flog.writeline Espacios(Tabulador * 2) & "No se encontro el legajo."
    Flog.writeline
    
    HuboError = True
    Exit Sub
Else
    StrSql = " SELECT ternro FROM empleado WHERE empleg = " & NroLegajo
    OpenRecordset StrSql, rs_Empleado

'Chequeo que exista algun empleado con ese nro de legajo
    If rs_Empleado.EOF Then
        Flog.writeline Espacios(Tabulador * 2) & "No se encontro el legajo " & NroLegajo
        Flog.writeline
        
        HuboError = True
        Exit Sub
    Else
        Tercero = rs_Empleado!Ternro
    End If
    If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
End If

'Chequeo que exista fecha desde de vacacion
If arrayDatos(1) = "" Then
    Flog.writeline Espacios(Tabulador * 2) & "No existe fecha desde de vacacion "
    Flog.writeline
    
    HuboError = True
    Exit Sub
End If

'Chequeo que exista fecha hasta de vacacion
If arrayDatos(2) = "" Then
    Flog.writeline Espacios(Tabulador * 2) & "No existe hasta desde de vacacion "
    Flog.writeline
    
    HuboError = True
    Exit Sub
End If

'Chequeo que la cantidad de dias sea mayor a 0
If cantdias <= 0 Then
    Flog.writeline Espacios(Tabulador * 2) & "La cantidad de dias debe ser mayor a 0 "
    Flog.writeline
    
    HuboError = True
    Exit Sub
End If

If arrayDatos(4) <> 0 And arrayDatos(4) <> 3 Then
    Flog.writeline Espacios(Tabulador * 2) & "El tipo de dia es incorrecto "
    Flog.writeline
    
    HuboError = True
    Exit Sub
End If


'Chequeo que exista fecha generacion
If arrayDatos(5) = "" Then
    Flog.writeline Espacios(Tabulador * 2) & "No existe fecha de generacion "
    Flog.writeline
    
    HuboError = True
    Exit Sub
End If


'Calculo el Año de vacacion Correpondiente
fechaAlta = FechaAltaEmpleado(Tercero)
If FechaDesde < CDate(Day(fechaAlta) & "/" & Month(fechaAlta) & "/" & Year(FechaDesde)) Then
    vacacionAnio = Year(FechaDesde) - 1
Else
    vacacionAnio = Year(FechaDesde)
End If

'Consulto si existe vacacion para el empleado en el año
StrSql = " SELECT vacnro, vacanio FROM vacacion WHERE ternro = " & Tercero & " AND vacanio = " & vacacionAnio
OpenRecordset StrSql, rs_Vacacion
If rs_Vacacion.EOF Then
        StrSql = "INSERT INTO vacacion"
        StrSql = StrSql & " (vacdesc, vacfecdesde, vacfechasta, vacanio, vacestado, ternro) VALUES "
        StrSql = StrSql & " ('saldo-" & vacacionAnio & "', "
        StrSql = StrSql & ConvFecha(FechaDesde) & ", "
        StrSql = StrSql & ConvFecha(FechaHasta) & ", "
        StrSql = StrSql & vacacionAnio & ", "
        StrSql = StrSql & "-1, "
        StrSql = StrSql & Tercero & " )"
        objConn.Execute StrSql, , adExecuteNoRecords
        codVac = getLastIdentity(objConn, "vacacion")
'Borro en la tabla vacdiascor, por si existiesen incosistencias
        StrSql = "SELECT vacnro, venc FROM vacdiascor WHERE vacnro=" & codVac
        OpenRecordset StrSql, rs_vacdiascor
        If Not rs_vacdiascor.EOF Then
            Do While Not rs_vacdiascor.EOF
                StrSql = "DELETE FROM vacdiascor WHERE vacnro=" & codVac & " AND venc=" & rs_vacdiascor!venc
                objConn.Execute StrSql, , adExecuteNoRecords
            Loop
            
        End If
        If rs_vacdiascor.State = adStateOpen Then rs_vacdiascor.Close
        
'Inserto en la tabla vacdiascor, como no existia vacacion no hay nada cargado
        StrSql = "INSERT INTO vacdiascor "
        StrSql = StrSql & " (vacnro, ternro, vdiascorcant, venc, vdiasfechasta) VALUES "
        StrSql = StrSql & "( " & codVac & " , "
        StrSql = StrSql & Tercero & " , "
        StrSql = StrSql & cantdias & " , "
        StrSql = StrSql & TipoDia & " , "
        StrSql = StrSql & ConvFecha(fechaGeneracion) & " )"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Flog.writeline Espacios(Tabulador * 2) & "Se actualizaron los dias correspondientes "
        Flog.writeline
Else
    'Chequeo que el año sea mayor o igual al que tenia
    StrSql = "SELECT vacnro, venc, vdiasfechasta FROM vacdiascor "
    StrSql = StrSql & " Where vacnro = " & rs_Vacacion!vacnro
    StrSql = StrSql & " AND ternro=" & Tercero
    StrSql = StrSql & " AND venc=" & TipoDia
    OpenRecordset StrSql, rs_vacdiascor
    
    If Not rs_vacdiascor.EOF Then
        If rs_vacdiascor!vdiasfechasta < fechaGeneracion Then
            
    'Actualizo la tabla vacacion
            StrSql = "Update vacacion Set "
            StrSql = StrSql & " vacdesc = 'saldo-" & vacacionAnio & "',"
            StrSql = StrSql & " vacfecdesde = " & ConvFecha(FechaDesde) & ","
            StrSql = StrSql & " vacfechasta = " & ConvFecha(FechaHasta) & ","
            StrSql = StrSql & " vacestado = -1 "
            StrSql = StrSql & " WHERE ternro = " & Tercero
            StrSql = StrSql & " AND vacanio = " & vacacionAnio
            objconnProgreso.Execute StrSql, , adExecuteNoRecords
            
            Flog.writeline Espacios(Tabulador * 2) & "Se actualizaron las vacaciones y los dias correspondientes para el empleado " & NroLegajo
            Flog.writeline
            Flog.writeline Espacios(Tabulador * 2) & "En el Año " & vacacionAnio
            Flog.writeline
            
    'Actualizo la tabla vacdiascor
            StrSql = "Update vacdiascor Set "
            StrSql = StrSql & " vdiascorcant = " & cantdias & ","
            StrSql = StrSql & " vdiasfechasta = " & ConvFecha(fechaGeneracion)
            StrSql = StrSql & " WHERE vacnro = " & rs_Vacacion!vacnro
            StrSql = StrSql & " AND ternro = " & Tercero
            StrSql = StrSql & " AND venc=" & TipoDia
            objconnProgreso.Execute StrSql, , adExecuteNoRecords
            
            Flog.writeline Espacios(Tabulador * 2) & "Se actualizaron las vacaciones y los dias correspondientes "
            Flog.writeline
        Else
            Flog.writeline Espacios(Tabulador * 2) & "La fecha de generacion es menor a una ya generada para el empleado " & NroLegajo
            Flog.writeline
        End If
    Else
        StrSql = "INSERT INTO vacdiascor "
        StrSql = StrSql & " (vacnro, ternro, vdiascorcant, venc, vdiasfechasta) VALUES "
        StrSql = StrSql & "( " & rs_Vacacion!vacnro & " , "
        StrSql = StrSql & Tercero & " , "
        StrSql = StrSql & cantdias & " , "
        StrSql = StrSql & TipoDia & " , "
        StrSql = StrSql & ConvFecha(fechaGeneracion) & " )"
        objConn.Execute StrSql, , adExecuteNoRecords
        
        Flog.writeline Espacios(Tabulador * 2) & "Se Inserto los dias correspondientes "
        Flog.writeline

    End If
    If rs_vacdiascor.State = adStateOpen Then rs_vacdiascor.Close
End If
If rs_Vacacion.State = adStateOpen Then rs_Vacacion.Close
End Sub


Public Sub LineaModelo_352(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Novedad segun formato
' Autor      : FGZ
'              El formato es:
'                       DNI{;monto}1..n
'
' Fecha      : 19/06/2012
' Ultima Mod.:
' ---------------------------------------------------------------------------------------------

Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As String
Dim TipoTer As String
Dim Estrnro As String
Dim TipoEstr As String
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As String
Dim fornro As Long

Dim tpanro As Long
Dim Aux_Monto As String
Dim Monto As Double
Dim FechaDesde As String
Dim FechaHasta As String

Dim PeriodoDesde
Dim PeriodoHasta
Dim TieneVigencia As Boolean
Dim EsRetroactivo As Boolean

Dim TipoMotivo As String
Dim Motivo As String

Dim Aux As String
Dim Encontro As Boolean

Dim perfsegcon As Integer
Dim tienePermiso As Integer

Dim sinVig As Boolean

Dim rs_Periodo As New ADODB.Recordset
Dim rs_tercero As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_NovEstr As New ADODB.Recordset

Dim cant_cols As Long
Dim I As Integer

' El formato es:
    
    On Error GoTo Manejador_De_Error
    Tabs = 1
    
    TieneVigencia = False
    EsRetroactivo = False

    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    
    'Busco el periodo
    Texto = "Busco fechas del periodo: " & Pliqnro
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    StrSql = " SELECT pliqdesde, pliqhasta FROM periodo WHERE pliqnro = " & Pliqnro
    OpenRecordset StrSql, rs_Periodo
    If rs_Periodo.EOF Then
        Texto = "El periodo  " & Pliqnro & " no existe."
        Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    End If
    Texto = "Fecha desde del periodo:  " & rs_Periodo!pliqdesde
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Texto = "Fecha hasta del periodo:  " & rs_Periodo!pliqhasta
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
        
    'Nro De documento por ahora
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        
        StrSql = " SELECT tipnro, tenro, estructura.estrnro, ter_tip.ternro ternro"
        StrSql = StrSql & " From ter_tip "
        StrSql = StrSql & " INNER JOIN ter_doc ON ter_doc.ternro = ter_tip.ternro AND nrodoc = '" & Mid$(strLinea, pos1, pos2 - pos1) & "'"
        StrSql = StrSql & " LEFT JOIN replica_estr ON replica_estr.origen = ter_tip.ternro "
        StrSql = StrSql & " LEFT JOIN estructura ON estructura.estrnro = replica_estr.estrnro "
        StrSql = StrSql & " ORDER BY tipnro ASC "
        OpenRecordset StrSql, rs_tercero
        
        If Not rs_tercero.EOF Then
            TipoTer = rs_tercero!tipnro
        
            If Not (EsNulo(rs_tercero!Tenro)) Then
                TipoEstr = rs_tercero!Tenro
                Texto = "Tipo de Tercero: " & rs_tercero!Tenro
                Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Else
                TipoEstr = ""
            End If
            
            Tercero = rs_tercero!Ternro
            
            If Not (EsNulo(rs_tercero!Estrnro)) Then
                Estrnro = rs_tercero!Estrnro
            Else
                Estrnro = ""
            End If
        Else
            Texto = ": " & "El documento no es numerico "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 8)
            HuboError = True
            Exit Sub
        End If
    Else
        Texto = ": EL tercero no tiene documento asociado "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 9)
        HuboError = True
        Exit Sub
    End If
   
    ReDim valores(UBound(Split(strLinea, separador))) As String
    
    valores = Split(strLinea, separador)
    'cant_cols = UBound(valores)
    
    'Recorro las columnas del archivo segun lo configurado en el confrep
     cant_cols = UBound(ArrConfrep) - 1
    'Monto - posicion 0 es el documento, lo salteo
    For I = 1 To cant_cols
        
        'Salteo lo que no sean conceptos
        If CStr(ArrConfrep(I).ConcNro) <> "" Then
            If CStr(TipoTer) = "1" Then
                 'Chequeo que el archivo no tenga mas columnas que el confrep
                 If I <= UBound(valores) Then
                     Aux_Monto = valores(I)
                     Monto = CDbl(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
            
                     'Consulto si la novedad existe
                     StrSql = " SELECT nenro FROM novemp WHERE"
                     StrSql = StrSql & " concnro = " & ArrConfrep(I).ConcNro
                     StrSql = StrSql & " AND tpanro = " & ArrConfrep(I).tpanro
                     StrSql = StrSql & " AND empleado = " & Tercero
                     StrSql = StrSql & " AND nedesde >= " & ConvFecha(rs_Periodo!pliqdesde)
                     StrSql = StrSql & " AND nehasta <= " & ConvFecha(rs_Periodo!pliqhasta)
                     OpenRecordset StrSql, rs_NovEmp
                     If rs_NovEmp.EOF Then
                         'insertar novedad para tpanro-concnro
                         StrSql = "INSERT INTO novemp (" & _
                                  "empleado,concnro,tpanro,nevalor,nevigencia,nedesde,nehasta,neretro"
                         StrSql = StrSql & ") VALUES (" & Tercero & _
                                  "," & ArrConfrep(I).ConcNro & _
                                  "," & ArrConfrep(I).tpanro & _
                                  "," & Monto & _
                                  ",-1," & ConvFecha(rs_Periodo!pliqdesde) & ", " & ConvFecha(rs_Periodo!pliqhasta)    'vigencia
                         StrSql = StrSql & ",0"
                         StrSql = StrSql & " )"
                         
                         objConn.Execute StrSql, , adExecuteNoRecords
                         Texto = "Novedad Insertada para tercero: " & Tercero
                     Else
                        'La novedad para empleado existe, se actualiza
                         StrSql = "UPDATE novemp SET "
                         StrSql = StrSql & " nevalor = " & Monto
                         StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                         StrSql = StrSql & " AND empleado = " & Tercero
                         StrSql = StrSql & " AND concnro = " & ArrConfrep(I).ConcNro
                         StrSql = StrSql & " AND tpanro = " & ArrConfrep(I).tpanro
                         StrSql = StrSql & " AND nedesde = " & ConvFecha(rs_Periodo!pliqdesde)
                         StrSql = StrSql & " AND nehasta = " & ConvFecha(rs_Periodo!pliqhasta)
                         
                         objConn.Execute StrSql, , adExecuteNoRecords
                         Texto = "Novedad por empleado Actualizada para tercero: " & Tercero
                     End If
                     Call Escribir_Log("flogp", NroLinea, I, Texto, Tabs, strLinea)
                 End If
                 If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
            Else
             Texto = "Tipo de Tercero no es empleado "
             Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
             'insertar en novestr
             If CStr(TipoEstr) = CStr(TERevendedor) Then
                Texto = "Tipo estructura es el configurado en el reporte "
                Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
                 'Chequeo que el archivo no tenga mas columnas que el confrep
                 If I <= UBound(valores) Then
                     Aux_Monto = valores(I)
                     Monto = CDbl(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
            
                     'Consulto si la novedad existe
                     StrSql = " SELECT ntenro FROM novestr WHERE"
                     StrSql = StrSql & " concnro = " & ArrConfrep(I).ConcNro
                     StrSql = StrSql & " AND tpanro = " & ArrConfrep(I).tpanro
                     StrSql = StrSql & " AND estrnro = " & Estrnro
                     StrSql = StrSql & " AND tenro = " & TipoEstr
                     StrSql = StrSql & " AND ntedesde >= " & ConvFecha(rs_Periodo!pliqdesde)
                     StrSql = StrSql & " AND ntehasta <= " & ConvFecha(rs_Periodo!pliqhasta)
                     OpenRecordset StrSql, rs_NovEstr
                     If rs_NovEstr.EOF Then
                         'insertar novedad para tpanro-concnro
                         StrSql = "INSERT INTO novestr (" & _
                                  "concnro,tpanro,estrnro,tenro,ntevalor,ntevigencia,ntedesde,ntehasta,nteretro"
                         StrSql = StrSql & ") VALUES ( "
                         StrSql = StrSql & ArrConfrep(I).ConcNro & _
                                  "," & ArrConfrep(I).tpanro & _
                                  "," & Estrnro & _
                                  "," & TipoEstr & _
                                  "," & Monto & _
                                  ",-1," & ConvFecha(rs_Periodo!pliqdesde) & ", " & ConvFecha(rs_Periodo!pliqhasta)    'vigencia
                         StrSql = StrSql & ",0"
                         StrSql = StrSql & " )"
                         
                         objConn.Execute StrSql, , adExecuteNoRecords
                         Texto = "Novedad por Estrucutra Insertada para la estructura: " & Estrnro
                     Else
                        'La novedad por estructura existe, se actualiza
                         StrSql = "UPDATE novestr SET "
                         StrSql = StrSql & " ntevalor = " & Monto
                         StrSql = StrSql & " WHERE ntenro = " & rs_NovEstr!ntenro
                         StrSql = StrSql & " AND concnro = " & ArrConfrep(I).ConcNro
                         StrSql = StrSql & " AND tpanro = " & ArrConfrep(I).tpanro
                         StrSql = StrSql & " AND estrnro = " & Estrnro
                         StrSql = StrSql & " AND ntedesde = " & ConvFecha(rs_Periodo!pliqdesde) 'No olvidar vigencia
                         StrSql = StrSql & " AND ntehasta = " & ConvFecha(rs_Periodo!pliqhasta) 'No olvidar vigencia
                         
                         objConn.Execute StrSql, , adExecuteNoRecords
                         Texto = "Novedad por Estructura Actualizada para la estructura: " & Estrnro
                     End If
                     Call Escribir_Log("flogp", NroLinea, I, Texto, Tabs, strLinea)
                     If rs_NovEstr.State = adStateOpen Then rs_NovEstr.Close
                 End If
            End If
               
            
            End If
        End If
   Next I
   


Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
If rs_tercero.State = adStateOpen Then rs_tercero.Close
If rs_NovEstr.State = adStateOpen Then rs_NovEstr.Close

Set rs_NovEmp = Nothing
Set rs_NovEstr = Nothing
Set rs_Periodo = Nothing
Set rs_tercero = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_353(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Novedad segun formato
' Autor      : LED
'              El formato es:
'                       DNI{;cantidad}1..n
'
' Fecha      : 25/06/2012
' Ultima Mod.:
' ---------------------------------------------------------------------------------------------

Dim pos1 As Long
Dim pos2 As Long
    
Dim Tercero As String
Dim TipoTer As String
Dim Estrnro As String
Dim TipoEstr As String
Dim NroLegajo As Long

Dim ConcNro As Long
Dim ConcCod As String
Dim fornro As Long

Dim tpanro As Long
Dim Aux_Monto As String
Dim Monto As Double
Dim FechaDesde As String
Dim FechaHasta As String

Dim PeriodoDesde
Dim PeriodoHasta
Dim TieneVigencia As Boolean
Dim EsRetroactivo As Boolean

Dim TipoMotivo As String
Dim Motivo As String

Dim Aux As String
Dim Encontro As Boolean

Dim perfsegcon As Integer
Dim tienePermiso As Integer

Dim sinVig As Boolean

Dim rs_Periodo As New ADODB.Recordset
Dim rs_tercero As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_NovEstr As New ADODB.Recordset

Dim cant_cols As Long
Dim I As Integer

' El formato es:
    
    On Error GoTo Manejador_De_Error
    Tabs = 1
    
    TieneVigencia = False
    EsRetroactivo = False

    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    NroColumna = NroColumna + 1
    
    'Busco el periodo
    Texto = "Busco fechas del periodo: " & Pliqnro
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    StrSql = " SELECT pliqdesde, pliqhasta FROM periodo WHERE pliqnro = " & Pliqnro
    OpenRecordset StrSql, rs_Periodo
    If rs_Periodo.EOF Then
        Texto = "El periodo  " & Pliqnro & " no existe."
        Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    End If
    Texto = "Fecha desde del periodo:  " & rs_Periodo!pliqdesde
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Texto = "Fecha hasta del periodo:  " & rs_Periodo!pliqhasta
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
        
    'Nro De documento por ahora
    pos1 = 1
    pos2 = InStr(pos1, strLinea, separador)
    If IsNumeric(Mid$(strLinea, pos1, pos2 - pos1)) Then
        
        StrSql = " SELECT tipnro, tenro, estructura.estrnro, ter_tip.ternro ternro"
        StrSql = StrSql & " From ter_tip "
        StrSql = StrSql & " INNER JOIN ter_doc ON ter_doc.ternro = ter_tip.ternro AND nrodoc = '" & Mid$(strLinea, pos1, pos2 - pos1) & "'"
        StrSql = StrSql & " LEFT JOIN replica_estr ON replica_estr.origen = ter_tip.ternro "
        StrSql = StrSql & " LEFT JOIN estructura ON estructura.estrnro = replica_estr.estrnro "
        StrSql = StrSql & " ORDER BY tipnro ASC "
        OpenRecordset StrSql, rs_tercero
        
        If Not rs_tercero.EOF Then
            TipoTer = rs_tercero!tipnro
            If Not (EsNulo(rs_tercero!Tenro)) Then
                TipoEstr = rs_tercero!Tenro
            Else
                TipoEstr = ""
            End If
            
            Tercero = rs_tercero!Ternro
            
            If Not (EsNulo(rs_tercero!Estrnro)) Then
                Estrnro = rs_tercero!Estrnro
            Else
                Estrnro = ""
            End If
        Else
            Texto = ": " & "El documento no es numerico "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 8)
            HuboError = True
            Exit Sub
        End If
    Else
        Texto = ": EL tercero no tiene documento asociado "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 9)
        HuboError = True
        Exit Sub
    End If
    
   
    ReDim valores(UBound(Split(strLinea, separador))) As String
    
    valores = Split(strLinea, separador)
    'cant_cols = UBound(valores)
    
    'Recorro las columnas del archivo segun lo configurado en el confrep
     cant_cols = UBound(ArrConfrep) - 1
    'Monto - posicion 0 es el documento, lo salteo
    For I = 1 To cant_cols
        
        'Salteo lo que no sean conceptos
        If CStr(ArrConfrep(I).ConcNro) <> "" Then
            If CStr(TipoTer) = "1" Then
                 'Chequeo que el archivo no tenga mas columnas que el confrep
                 If I <= UBound(valores) Then
                     Aux_Monto = valores(I)
                     Monto = CDbl(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
            
                     'Consulto si la novedad existe
                     StrSql = " SELECT nenro FROM novemp WHERE"
                     StrSql = StrSql & " concnro = " & ArrConfrep(I).ConcNro
                     StrSql = StrSql & " AND tpanro = " & ArrConfrep(I).tpanro
                     StrSql = StrSql & " AND empleado = " & Tercero
                     StrSql = StrSql & " AND nedesde >= " & ConvFecha(rs_Periodo!pliqdesde)
                     StrSql = StrSql & " AND nehasta <= " & ConvFecha(rs_Periodo!pliqhasta)
                      OpenRecordset StrSql, rs_NovEmp
                     If rs_NovEmp.EOF Then
                         'insertar novedad para tpanro-concnro
                         StrSql = "INSERT INTO novemp (" & _
                                  "empleado,concnro,tpanro,nevalor,nevigencia,nedesde,nehasta,neretro"
                         StrSql = StrSql & ") VALUES (" & Tercero & _
                                  "," & ArrConfrep(I).ConcNro & _
                                  "," & ArrConfrep(I).tpanro & _
                                  "," & Monto & _
                                  ",-1," & ConvFecha(rs_Periodo!pliqdesde) & ", " & ConvFecha(rs_Periodo!pliqhasta)    'vigencia
                         StrSql = StrSql & ",0"
                         StrSql = StrSql & " )"
                         
                         objConn.Execute StrSql, , adExecuteNoRecords
                         Texto = "Novedad Insertada para tercero: " & Tercero
                     Else
                        'La novedad para empleado existe, se actualiza
                         StrSql = "UPDATE novemp SET "
                         StrSql = StrSql & " nevalor = " & Monto
                         StrSql = StrSql & " WHERE nenro = " & rs_NovEmp!nenro
                         StrSql = StrSql & " AND empleado = " & Tercero
                         StrSql = StrSql & " AND concnro = " & ArrConfrep(I).ConcNro
                         StrSql = StrSql & " AND tpanro = " & ArrConfrep(I).tpanro
                         StrSql = StrSql & " AND nedesde = " & ConvFecha(rs_Periodo!pliqdesde)
                         StrSql = StrSql & " AND nehasta = " & ConvFecha(rs_Periodo!pliqhasta)
                         
                          objConn.Execute StrSql, , adExecuteNoRecords
                         Texto = "Novedad por empleado Actualizada para tercero: " & Tercero
                     End If
                     Call Escribir_Log("flogp", NroLinea, I, Texto, Tabs, strLinea)
                 End If
                 If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
            Else
                Texto = "Tipo de Tercero no es empleado "
                Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)

                'insertar en novestr
                 If CStr(TipoEstr) = CStr(TERevendedor) Then
                    Texto = "Tipo estructura es el configurado en el reporte "
                    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)

                     'Chequeo que el archivo no tenga mas columnas que el confrep
                     If I <= UBound(valores) Then
                         Aux_Monto = valores(I)
                         Monto = CDbl(Replace(CStr(Aux_Monto), SeparadorDecimal, "."))
                
                         'Consulto si la novedad existe
                         StrSql = " SELECT ntenro FROM novestr WHERE"
                         StrSql = StrSql & " concnro = " & ArrConfrep(I).ConcNro
                         StrSql = StrSql & " AND tpanro = " & ArrConfrep(I).tpanro
                         StrSql = StrSql & " AND estrnro = " & Estrnro
                         StrSql = StrSql & " AND tenro = " & TipoEstr
                         StrSql = StrSql & " AND ntedesde >= " & ConvFecha(rs_Periodo!pliqdesde)
                         StrSql = StrSql & " AND ntehasta <= " & ConvFecha(rs_Periodo!pliqhasta)
                         OpenRecordset StrSql, rs_NovEstr
                         If rs_NovEstr.EOF Then
                             'insertar novedad para tpanro-concnro
                             StrSql = "INSERT INTO novestr (" & _
                                      "concnro,tpanro,estrnro,tenro,ntevalor,ntevigencia,ntedesde,ntehasta,nteretro"
                             StrSql = StrSql & ") VALUES ( "
                             StrSql = StrSql & ArrConfrep(I).ConcNro & _
                                      "," & ArrConfrep(I).tpanro & _
                                      "," & Estrnro & _
                                      "," & TipoEstr & _
                                      "," & Monto & _
                                      ",-1," & ConvFecha(rs_Periodo!pliqdesde) & ", " & ConvFecha(rs_Periodo!pliqhasta)    'vigencia
                             StrSql = StrSql & ",0"
                             StrSql = StrSql & " )"
                             
                             objConn.Execute StrSql, , adExecuteNoRecords
                             Texto = "Novedad por Estrucutra Insertada para la estructura: " & Estrnro
                         Else
                            'La novedad por estructura existe, se actualiza
                             StrSql = "UPDATE novestr SET "
                             StrSql = StrSql & " ntevalor = " & Monto
                             StrSql = StrSql & " WHERE ntenro = " & rs_NovEstr!ntenro
                             StrSql = StrSql & " AND concnro = " & ArrConfrep(I).ConcNro
                             StrSql = StrSql & " AND tpanro = " & ArrConfrep(I).tpanro
                             StrSql = StrSql & " AND estrnro = " & Estrnro
                             StrSql = StrSql & " AND ntedesde = " & ConvFecha(rs_Periodo!pliqdesde) 'No olvidar vigencia
                             StrSql = StrSql & " AND ntehasta = " & ConvFecha(rs_Periodo!pliqhasta) 'No olvidar vigencia
                             
                             objConn.Execute StrSql, , adExecuteNoRecords
                             Texto = "Novedad por Estructura Actualizada para la estructura: " & Estrnro
                         End If
                         Call Escribir_Log("flogp", NroLinea, I, Texto, Tabs, strLinea)
                         If rs_NovEstr.State = adStateOpen Then rs_NovEstr.Close
                     End If
                End If
               
            
            End If
        End If
   Next I
   


Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Periodo.State = adStateOpen Then rs_Periodo.Close
If rs_tercero.State = adStateOpen Then rs_tercero.Close
If rs_NovEstr.State = adStateOpen Then rs_NovEstr.Close

Set rs_NovEmp = Nothing
Set rs_NovEstr = Nothing
Set rs_Periodo = Nothing
Set rs_tercero = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_396(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación de Partes Horarios - Hs- Medicus
' Autor      : LED
' Fecha      : 20/11/2014
' Modificado :
' ---------------------------------------------------------------------------------------------------------------
' Formato de texto ingresado:
'Empleado,Tipo Hora,Fecha desde,Fecha hasta,Horas,autorizable
'1,6,05/01/2011,05/01/2011,4,Si
'2,7,10/01/2011,10/01/2011,1,No
' ---------------------------------------------------------------------------------------------------------------

Dim rs_Empleado As New ADODB.Recordset


Dim ArrDatos
Dim fec_ini, fec_hasta, cod_tipohora, cant_hs As String
Dim Tercero As String
Dim NroLegajo As String
Dim gtpnro As String
Dim GcpDesAbr As String
Dim gcpnro As String
Dim thnro As String
Dim autorizable As Integer
Dim indice As Long
Dim error As Long


On Error GoTo Manejador_De_Error

          
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
        
    ArrDatos = Split(strLinea, separador)
        
    For indice = 0 To UBound(ArrDatos)
        Select Case CLng(indice)
            '------------------------------------------------------------------------------------------------------------------
            Case 0  'Legajo
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    If IsNumeric(ArrDatos(indice)) Then
                        If Len(ArrDatos(indice)) <= 6 Then
                            NroLegajo = ArrDatos(indice)
                        Else
                            Texto = ": El legajo debe tener como maximo longitud 6 "
                            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                            Call InsertaError(1, 129)
                            HuboError = True
                            Exit Sub
                        End If
                    Else
                        Texto = ": El legajo debe ser numerico "
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Call InsertaError(1, 129)
                        HuboError = True
                        Exit Sub
                    End If
                Else
                    Texto = ": El N° de legajo es obligatorio "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(1, 129)
                    HuboError = True
                    Exit Sub
                End If
                
            '------------------------------------------------------------------------------------------------------------------
            Case 1  'tipo de hora
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    If IsNumeric(ArrDatos(indice)) Then
                        If Len(ArrDatos(indice)) <= 6 Then
                            cod_tipohora = ArrDatos(indice)
                        Else
                            Texto = ": El tipo de hora debe tener longitud 6 como maximo "
                            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                            Call InsertaError(1, 37)
                            HuboError = True
                            Exit Sub
                        End If
                    Else
                        Texto = ": El tipo de hora debe ser numerico "
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Call InsertaError(1, 37)
                        HuboError = True
                        Exit Sub
                    End If
                Else
                    Texto = ": El tipo de hora es obligatorio "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(1, 37)
                    HuboError = True
                    Exit Sub
                End If
            
            '------------------------------------------------------------------------------------------------------------------
            Case 2  'fecha desde
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    fec_ini = ArrDatos(indice)
                Else
                    Texto = ": La Fecha de inicio es obligatoria "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(1, 20)
                    HuboError = True
                    Exit Sub
                End If
                
    
            '------------------------------------------------------------------------------------------------------------------
            Case 3  'fecha hasta
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    fec_hasta = ArrDatos(indice)
                Else
                    Texto = ": La Fecha de fin es obligatoria "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(1, 21)
                    HuboError = True
                    Exit Sub
                End If
            
            '------------------------------------------------------------------------------------------------------------------
            Case 4  'cantidad de horas
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    If IsNumeric(ArrDatos(indice)) Then
                        If Len(ArrDatos(indice)) <= 5 Then
                            cant_hs = ArrDatos(indice)
                        Else
                            Texto = ": La cantidad de horas debe tener longitud 5 como maximo "
                            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                            Call InsertaError(1, 38)
                            HuboError = True
                            Exit Sub
                        End If
                    Else
                        Texto = ": La cantidad de horas debe ser numerico "
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Call InsertaError(1, 38)
                        HuboError = True
                        Exit Sub
                    End If
                Else
                    Texto = ": La cantidad de horas es obligatorio "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(1, 38)
                    HuboError = True
                    Exit Sub

                End If
            
            Case 5  'Autorizable
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    If UCase(Trim(ArrDatos(indice))) = "SI" Then
                        autorizable = -1
                    Else
                        autorizable = 0
                    End If
                Else
                    Texto = ": Campo Autorizable no informado, obligatorio "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(1, 21)
                    HuboError = True
                    Exit Sub
                End If
            
        End Select
    Next
    
    'ID Partes Autorizacion de Horas
    gtpnro = 4


' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'______________________
'QUE EXISTA EL LEGAJO
StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": No se encontró el legajo " & NroLegajo
    Call Escribir_Log("floge", NroLinea, 1, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    Tercero = rs_Empleado!Ternro
End If

'____________________________________
'VALIDA TIPO DE HS
StrSql = "SELECT thnro,thdesc FROM tiphora WHERE thnro = " & cod_tipohora
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": El Tipo de Hora no existe "
    Call Escribir_Log("floge", NroLinea, 2, Texto, Tabs, strLinea)
    Call InsertaError(1, 37)
    HuboError = True
    Exit Sub
Else
    GcpDesAbr = "Aut. " & NroLegajo & " - " & rs_Empleado!thdesc
    thnro = rs_Empleado!thnro
    If Len(GcpDesAbr) > 30 Then
        GcpDesAbr = Mid(GcpDesAbr, 4, 30)
    End If
End If


'VALIDA QUE FEC HASTA NO SEA MENOR QUE DESDE
If CDate(fec_hasta) < CDate(fec_ini) Then
    Texto = ": La fecha Hasta no puede ser menor a la fecha desde "
    Call Escribir_Log("floge", NroLinea, 3, Texto, Tabs, strLinea)
    Call InsertaError(1, 12)
    HuboError = True
    Exit Sub
End If



' ====================================================================
' VALIDO QUE YA NO EXISTA UN DETALLE
' ====================================================================

StrSql = " SELECT ternro,gti_cabparte.gcpnro, gti_autdet.gadhoras from gti_autdet "
StrSql = StrSql & "INNER JOIN gti_cabparte ON gti_cabparte.gcpnro = gti_autdet.gcpnro "
StrSql = StrSql & " WHERE  ternro = " & Tercero
StrSql = StrSql & " AND thnro = " & thnro
StrSql = StrSql & " AND ( (gadfecdesde <=" & ConvFecha(fec_ini)
StrSql = StrSql & " AND " & ConvFecha(fec_ini) & "<=gadfechasta) "
StrSql = StrSql & " OR (gadfecdesde <=" & ConvFecha(fec_hasta)
StrSql = StrSql & " AND " & ConvFecha(fec_hasta) & "<=gadfechasta) "
StrSql = StrSql & " OR (" & ConvFecha(fec_ini)
StrSql = StrSql & " <= gadfecdesde and gadfecdesde <=" & ConvFecha(fec_hasta) & ")) "
OpenRecordset StrSql, rs_Empleado
    
    Select Case CLng(AccionNovedad)
        '-----------------------------------------------------------------------------------------------
        Case -1 'reemplaza
            If Not rs_Empleado.EOF Then
                
                Flog.writeline Espacios(Tabulador * 1) & "Se escogio la opcion reemplaza"
                Do While Not rs_Empleado.EOF
                    'borro todos registro que se encontraron
                    StrSql = " DELETE FROM gti_autdet WHERE gcpnro = " & rs_Empleado!gcpnro
                    objConn.Execute StrSql, , adExecuteNoRecords
    
                    'borro todos registro de la cabecera
                    StrSql = " DELETE FROM gti_cabparte WHERE gcpnro = " & rs_Empleado!gcpnro
                    objConn.Execute StrSql, , adExecuteNoRecords
                    
                    rs_Empleado.MoveNext
                Loop
                
            End If
            
        '-----------------------------------------------------------------------------------------------
        Case 0 'mantiene
            Flog.writeline Espacios(Tabulador * 1) & "Se escogio la opcion mantiene"
            If Not rs_Empleado.EOF Then
                Texto = ": " & "El empleado ya tiene autorizadas horas de ese tipo para la fecha indicada. Código: " & rs_Empleado!gcpnro
                NroColumna = 1
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(1, 37)
                HuboError = True
                Exit Sub
            End If
        
        '-----------------------------------------------------------------------------------------------
        Case 1  'Suma
    
            Flog.writeline Espacios(Tabulador * 1) & "Se escogio la opcion suma"
            If Not rs_Empleado.EOF Then
                
                cant_hs = CDbl(cant_hs) + CDbl(rs_Empleado!gadhoras)
                StrSql = " UPDATE gti_autdet SET gadhoras = " & cant_hs & _
                         " WHERE gcpnro = " & rs_Empleado!gcpnro & " AND  ternro = " & Tercero
                objConn.Execute StrSql, , adExecuteNoRecords
                
            Else
                'si no existe la registro inserto
                ' ====================================================================
                ' INSERTO CABECERA
                ' ====================================================================
                StrSql = "INSERT INTO gti_cabparte ( "
                StrSql = StrSql & "gcpdesabr , gcpdesext, gcpdesde, gcphasta "
                StrSql = StrSql & ", Empnro, gtpnro, gcpcerrado, gcpfeccierre, gcpusrcierre, ft, ftap "
                StrSql = StrSql & ")"
                StrSql = StrSql & "VALUES( "
                StrSql = StrSql & "'" & GcpDesAbr & "',''," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",0"
                StrSql = StrSql & "," & gtpnro & ",0,NULL,NULL,0,0"
                StrSql = StrSql & ")"
                    
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Cabecera insertada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                
                gcpnro = getLastIdentity(objConn, "gti_cabparte")
                
                ' ====================================================================
                'INSERTO gti_autdet
                ' ====================================================================
                StrSql = "INSERT INTO gti_autdet("
                StrSql = StrSql & "gcpnro , ternro, thnro, gadhoras, gadhorreales"
                StrSql = StrSql & ", gadfecdesde, gadfechasta, gadhoradesde"
                StrSql = StrSql & ", gadhorahasta, gadhs_fecha, gadautorizable, gadobservacion "
                StrSql = StrSql & ") "
                StrSql = StrSql & "VALUES("
                StrSql = StrSql & gcpnro & "," & Tercero & "," & thnro & ""
                StrSql = StrSql & "," & Replace(cant_hs, SeparadorDecimal, ".") & ",NULL"
                StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta)
                StrSql = StrSql & ",'','',-1," & autorizable & ",''"
                StrSql = StrSql & ")"
                
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Detalle de la cabecera insertado"
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                
            End If
    
    End Select

'es AccionNovedad = 1 ' suma se resuelve en el case
If AccionNovedad <> 1 Then
    ' ====================================================================
    ' INSERTO CABECERA
    ' ====================================================================
    StrSql = "INSERT INTO gti_cabparte ( "
    StrSql = StrSql & "gcpdesabr , gcpdesext, gcpdesde, gcphasta "
    StrSql = StrSql & ", Empnro, gtpnro, gcpcerrado, gcpfeccierre, gcpusrcierre, ft, ftap "
    StrSql = StrSql & ")"
    StrSql = StrSql & "VALUES( "
    StrSql = StrSql & "'" & GcpDesAbr & "',''," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta) & ",0"
    StrSql = StrSql & "," & gtpnro & ",0,NULL,NULL,0,0"
    StrSql = StrSql & ")"
        
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Cabecera insertada "
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    gcpnro = getLastIdentity(objConn, "gti_cabparte")
    
    ' ====================================================================
    'INSERTO gti_autdet
    ' ====================================================================
    StrSql = "INSERT INTO gti_autdet("
    StrSql = StrSql & "gcpnro , ternro, thnro, gadhoras, gadhorreales"
    StrSql = StrSql & ", gadfecdesde, gadfechasta, gadhoradesde"
    StrSql = StrSql & ", gadhorahasta, gadhs_fecha, gadautorizable, gadobservacion "
    StrSql = StrSql & ") "
    StrSql = StrSql & "VALUES("
    StrSql = StrSql & gcpnro & "," & Tercero & "," & thnro & ""
    StrSql = StrSql & "," & Replace(cant_hs, SeparadorDecimal, ".") & ",NULL"
    StrSql = StrSql & "," & ConvFecha(fec_ini) & "," & ConvFecha(fec_hasta)
    StrSql = StrSql & ",'','',-1," & autorizable & ",''"
    StrSql = StrSql & ")"
    
    objConn.Execute StrSql, , adExecuteNoRecords
    Texto = "Detalle de la cabecera insertado"
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
End If

Fin:
'Cierro y libero

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
Set rs_Empleado = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_397(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Novedad o pisa novedades de liquidacion
' Autor      : LED
' Fecha      : 08/01/2015 - CAS-28695 - NGA - Citricos - Interface I-Time
' Formato    : Legajo ; conccod 1 ; ... ; conccod N
'              Legajo ; valor 1   ; ... ; valor N
'
' Ultima Mod.:
' ---------------------------------------------------------------------------------------------

Dim Tercero As Long
Dim NroLegajo As Long
Dim tpanro As Long
Dim Aux As String
Dim Encontro As Boolean

Dim rs_Empleado As New ADODB.Recordset
Dim rs_NovEmp As New ADODB.Recordset
Dim rs_con_for_tpa As New ADODB.Recordset
Dim rs_Concepto As New ADODB.Recordset

Dim datos
Dim indice As Integer
Dim ConcNro As Long
Dim ConcCod As String
Dim fornro As Long
Dim insertar As Boolean
Dim maxColumna As Integer
Dim datosConfrep(50) As T_NovedadConfrep
Dim objFechasHoras As New FechasHoras
Dim Monto As String
    On Error GoTo Manejador_De_Error
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    StrSql = " SELECT confval, confval2 FROM confrep WHERE repnro = 469 Order by confnrocol "
    OpenRecordset StrSql, rs_Empleado
    maxColumna = 1
    Do While Not rs_Empleado.EOF
        datosConfrep(maxColumna).concepto = rs_Empleado!confval2
        datosConfrep(maxColumna).Parametro = rs_Empleado!Confval
        maxColumna = maxColumna + 1
        rs_Empleado.MoveNext
    Loop
    maxColumna = maxColumna - 1
    datos = Split(strLinea, separador)
    
    For indice = 0 To UBound(datos) - 1
        'cuando el indice es 0, estamos en la posicion del legajo
        insertar = True
        If indice = 0 Then
            NroColumna = 1
            If IsNumeric(datos(indice)) Then
                NroLegajo = datos(indice)
                
                'Controlo Que exista el legajo
                StrSql = "SELECT * FROM empleado where empleg = " & NroLegajo
                OpenRecordset StrSql, rs_Empleado
                If Not rs_Empleado.EOF Then
                    Tercero = rs_Empleado!Ternro
                Else
                    Texto = ": " & "No se encontro el legajo " & NroLegajo
                    NroColumna = 1
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(1, 8)
                    HuboError = True
                    Exit Sub
                
                End If
            
            Else
                Texto = ": El legajo no es numerico "
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(1, 8)
                HuboError = True
                Exit Sub
            End If
        Else
            'cuando el indice NO es 0, estamos en la columna de valores
            NroColumna = NroColumna + 1
            'controlo que existan mas conceptos en el archivo que los configurados
            If maxColumna >= indice Then
                
                '--------------------------------------------------------------------------------------
                'Obtengo el codigo del concepto
                ConcCod = datosConfrep(indice).concepto
                
                'Controlo que exista el concepto
                StrSql = "SELECT ConcNro, fornro FROM concepto WHERE conccod = '" & ConcCod & "'"
                OpenRecordset StrSql, rs_Concepto
                If rs_Concepto.EOF Then
                    Texto = ": No se encontro el Concepto " & ConcCod
                    NroColumna = 2
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(2, 10)
                    HuboError = True
                    Exit Sub
                Else
                    ConcNro = rs_Concepto!ConcNro
                    fornro = rs_Concepto!fornro
                End If
                '--------------------------------------------------------------------------------------
                
                '--------------------------------------------------------------------------------------
                'Obtengo el parametro
                tpanro = datosConfrep(indice).Parametro
                'Faltaria revisar que el par concepto-parametro se resuelva por novedad
                StrSql = "SELECT * FROM con_for_tpa "
                StrSql = StrSql & " WHERE concnro = " & ConcNro
                StrSql = StrSql & " AND fornro =" & fornro
                StrSql = StrSql & " AND tpanro =" & tpanro
                OpenRecordset StrSql, rs_con_for_tpa
                
                If rs_con_for_tpa.EOF Then
                    Texto = ": El parametro " & tpanro & " no esta asociado a la formula del concepto " & ConcCod
                    NroColumna = 3
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    Call InsertaError(3, 11)
                    HuboError = True
                    Exit Sub
                Else
                    Encontro = False
                    Do While Not Encontro And Not rs_con_for_tpa.EOF
                        If Not CBool(rs_con_for_tpa!cftauto) Then
                            Encontro = True
                        End If
                        rs_con_for_tpa.MoveNext
                    Loop
                    If Not Encontro Then
                        Texto = ": " & "El parametro " & tpanro & " del concepto " & ConcCod & " no se resuelve por novedad "
                        NroColumna = 3
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        Call InsertaError(3, 11)
                        HuboError = True
                        Exit Sub
                    End If
                End If
                '--------------------------------------------------------------------------------------
                
                '--------------------------------------------------------------------------------------
                'Obtengo el monto
                If InStr(datos(indice), ":") Then
                    Monto = objFechasHoras.Horas_A_Decimal(CStr(Split(datos(indice), ":")(0)), CStr(Split(datos(indice), ":")(1)), 2)
                Else
                    Monto = FormatNumber(CDbl(Replace(CStr(datos(indice)), SeparadorDecimal, ".")), 2)
                End If
                If Monto = 0 Then
                    Texto = ": El monto fue informado con valor 0, no se tiene en cuenta la novedad "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    insertar = False
                End If
                
                'controlo si la novedad existe
                StrSql = " SELECT * FROM novemp WHERE concnro = " & ConcNro & _
                         " AND tpanro = " & tpanro & " And Empleado = " & Tercero
                OpenRecordset StrSql, rs_NovEmp
                If insertar Then
                    If Not rs_NovEmp.EOF Then
                        'existe la novedad la piso
                        StrSql = " UPDATE novemp SET nevalor = " & Monto & ", nedesde = null, nehasta = null " & _
                                 " , neretro = null, nepliqdesde = null, nepliqhasta = null " & _
                                 " WHERE concnro = " & ConcNro & " AND tpanro = " & tpanro & _
                                 " AND empleado = " & Tercero
                        objConn.Execute StrSql, , adExecuteNoRecords
                        Texto = "Novedad Actualizada "
                        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                    Else
                        'No existe la novedad la inserto
                        StrSql = " INSERT INTO novemp (empleado,concnro,tpanro,nevalor,nevigencia) VALUES (" & _
                                   Tercero & " ," & ConcNro & " ," & tpanro & " ," & Monto & ",0)"
                        objConn.Execute StrSql, , adExecuteNoRecords
                
                        Texto = "Novedad insertada "
                        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                    End If
                End If
            Else
                Texto = ": No existe la columna configurada para el concepto "
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            End If
        End If
        
    Next
'------------------------------------

Fin:
'Cierro todo y libero
If rs_NovEmp.State = adStateOpen Then rs_NovEmp.Close
If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
If rs_Concepto.State = adStateOpen Then rs_Concepto.Close
If rs_con_for_tpa.State = adStateOpen Then rs_con_for_tpa.Close

Set rs_NovEmp = Nothing
Set rs_Empleado = Nothing
Set rs_Concepto = Nothing
Set rs_con_for_tpa = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub


Public Sub LineaModelo_398(ByVal strReg As String, ByRef OK As Boolean)
' ---------------------------------------------------------------------------------------------
' Descripcion: Migracion de Familiares (SIN DOMICILIOS) - CTM
' Autor      : Miriam Ruiz
' Fecha      : 15/01/2015
' Ultima Mod.:
' ---------------------------------------------------------------------------------------------
Dim Legajo          As Long    ' Legajo del Empleado
Dim Apellido()      As String  ' Apellido del Familiar
Dim Apellido1       As String  ' Apellido del Familiar
Dim Apellido2       As String  ' Apellido del Familiar
Dim nombre()        As String  ' Nombre del Familiar
Dim nombre1         As String  ' Nombre del Familiar
Dim nombre2         As String  ' Nombre del Familiar
Dim Fnac            As String  ' Fecha de Nacimiento del Familiar
Dim NAC             As String  ' Nacionalidad del Familiar
Dim PaisNac         As String  ' Pais de Nacimiento
Dim EstCiv          As String  ' Estado Civil
Dim Sexo            As String  ' Sexo del Familiar
Dim GPare           As String  ' Grado de Parentesco
Dim Disc            As String  ' Discapacitado
Dim Estudia         As String  ' Estudia
Dim NivEst          As String  ' Nivel de Estudio
Dim TipDoc          As String  ' Tipo de Documento del Familiar
Dim NroDoc          As String  ' Nº de Documento del Familiar
Dim ObraSocial      As String   'Obra Social
Dim PlanOSocial     As String   'Plan Obra Social
Dim AvisoEmer       As String   'Aviso ante Emergencia
Dim PagaSalario     As String   'Paga Salario Familiar
Dim Ganancias       As String   'Se lo toma para ganancias
Dim fechaInicio     As String   ' Fecha de inicio de familiar
Dim fechaVto        As String   ' Fecha de vencimiento de familiar
Dim Cuil            As String  ' CUIL del Familiar
Dim ESC             As String  ' Escolaridad
Dim GRADO           As String  ' Grado al que concurre
Dim NroTDoc         As String
Dim TipDoc2          As String  ' Tipo de Documento 2 del Familiar
Dim NroDoc2          As String  ' Nº de Documento 2 del Familiar
Dim Guarderia        As String  ' SI/NO
Dim EmergenciaMedica    As String  ' estructura del tipo 101
Dim Nro_TDocumento2  As Long
Dim pos1            As Long
Dim pos2            As Long
Dim NroTercero      As Long
Dim NroEmpleado     As Long
Dim CodTerFam       As String
Dim Nro_TDocumento  As Long
Dim nro_nacionalidad As Long
Dim nro_paisnac      As Long
Dim nro_estciv      As Long
Dim nro_Sexo        As Long
Dim nro_estudia     As Long
Dim nro_nivest      As String
Dim nro_osocial     As Long
Dim nro_planos      As Long
Dim nro_aviso       As Long
Dim nro_salario     As Long
Dim nro_gan         As Long
Dim nro_disc        As Long
Dim nro_paren        As Long
Dim OSocial             As String
Dim ter_osocial         As Long
Dim Inserto_estr        As Boolean
Dim Nro_Institucion As Long
Dim Item_DDJJ         As Long
Dim Anio_DDJJ         As String
Dim Desde_DDJJ        As String
Dim Hasta_DDJJ        As String
Dim rs_Sql          As New ADODB.Recordset
Dim rs              As New ADODB.Recordset
Dim rs_Tel          As New ADODB.Recordset
Dim rs_Doc          As New ADODB.Recordset
Dim b
Dim a
'-----------MDF-------------
Dim fecdocu
Dim acta
Dim tomo
Dim folio
Dim tribunal
Dim juzgado
Dim secretaria
Dim comuna
'-------- fin MDF-----
    LineaCarga = LineaCarga + 1
    Tabs = 1
    
    On Error GoTo SaltoLinea
    
    Flog.writeline
    FlogE.writeline
    FlogP.writeline
    
    'Legajo
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Legajo"
    pos1 = 1
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    If IsNumeric(Aux) Then
        Legajo = Aux
    Else
        Texto = ": " & "El legajo no es numerico "
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        InsertaError 1, 8
        RegError = RegError + 1
        Exit Sub
    End If
    
    'Busco el empleado asociado
    StrSql = "SELECT ternro FROM empleado WHERE empleg = " & Legajo
    If rs.State = adStateOpen Then rs.Close
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        NroEmpleado = rs!Ternro
    Else
        Texto = ": " & " - Campo " & Campoetiqueta & " El legajo no existe"
        NroColumna = 1
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    
    'Apellido
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Apellido"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
  
    Apellido = Split(Left(Aux, 25), "@")
    
    If UBound(Apellido) = 0 Then
        'Si no se ingreso el apellido separado con @, todo el apellido ingresado se guarda en terape
        Apellido1 = Apellido(0)
        Apellido2 = ""
    Else
        Apellido1 = Apellido(0)
        Apellido2 = Apellido(1)
    End If
    
    'Nombre
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Nombre"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
 
    nombre = Split(Left(Aux, 25), "@")
    If UBound(nombre) = 0 Then
        nombre1 = nombre(0)
        nombre2 = ""
    Else
        nombre1 = nombre(0)
        nombre2 = nombre(1)
    End If
    
    'Fecha de Nacimiento
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Fecha de Nacimiento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Fnac = Aux
    If Fnac = "N/A" Or EsNulo(Fnac) Then
        Fnac = "Null"
    End If
    
    'Pais de Nacimiento
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Pais de Nacimiento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    PaisNac = Aux
    If PaisNac <> "N/A" Then
        StrSql = " SELECT paisnro FROM pais WHERE UPPER(paisdesc) = '" & UCase(PaisNac) & "'"
        If rs.State = adStateOpen Then rs.Close
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            nro_paisnac = rs!Paisnro
        Else
            StrSql = " INSERT INTO pais(paisdesc,paisdef) VALUES ('" & UCase(PaisNac) & "',0)"
            objConn.Execute StrSql, , adExecuteNoRecords
            nro_paisnac = getLastIdentity(objConn, "pais")
        End If
    Else
        nro_paisnac = 0
    End If
    
    'Nacionalidad
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Nacionalidad"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    NAC = UCase(Aux)
    If NAC <> "N/A" And Not EsNulo(NAC) Then
        StrSql = " SELECT nacionalnro FROM nacionalidad WHERE upper(nacionaldes) = '" & NAC & "'"
        If rs.State = adStateOpen Then rs.Close
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            nro_nacionalidad = rs!nacionalnro
        Else
            StrSql = " INSERT INTO nacionalidad(nacionaldes) VALUES ('" & UCase(NAC) & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            nro_nacionalidad = getLastIdentity(objConn, "nacionalidad")
        End If
    Else
        nro_nacionalidad = 0
    End If
    If nro_nacionalidad = 0 Then
        Texto = ": " & " - Debe ingresar Nacionalidad."
        NroColumna = 5
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    
    
    'Estado Civil
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Estado Civil"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    EstCiv = Left(UCase(Aux), 30)
    If EstCiv <> "N/A" And Not EsNulo(EstCiv) Then
        StrSql = " SELECT estcivnro FROM estcivil WHERE upper(estcivdesabr) = '" & UCase(EstCiv) & "'"
        If rs.State = adStateOpen Then rs.Close
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            nro_estciv = rs!estcivnro
        Else
            StrSql = " INSERT INTO estcivil(estcivdesabr) VALUES ('" & UCase(EstCiv) & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            nro_estciv = getLastIdentity(objConn, "estcivil")
        End If
    Else
        nro_estciv = 0
    End If
    If nro_estciv = 0 Then
        Texto = ": " & " - Debe ingresar Estado Civil."
        NroColumna = 6
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    
    'Sexo
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Sexo"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    Sexo = UCase(Aux)
    If Sexo = "M" Or Sexo = "MASCULINO" Or Sexo = "-1" Then
        nro_Sexo = -1
    Else
        nro_Sexo = 0
    End If
    
    'Parentesco
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Parentesco"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    GPare = UCase(Aux)
    StrSql = " SELECT parenro FROM parentesco WHERE upper(paredesc) = '" & UCase(GPare) & "'"
    If rs.State = adStateOpen Then rs.Close
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        nro_paren = rs!parenro
    Else
        nro_paren = 0
    End If
    If nro_paren = 0 Then
        Texto = ": " & " - El parentesco ingresado no existe, verifíquelo." & GPare
        NroColumna = 8
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    If UCase(GPare) = "CONYUGE" Then
        StrSql = "SELECT * FROM tercero "
        StrSql = StrSql & " INNER JOIN ter_tip ON tercero.ternro = ter_tip.ternro AND ter_tip.tipnro = 3 "
        StrSql = StrSql & " INNER JOIN familiar ON familiar.ternro = tercero.ternro AND familiar.empleado = " & NroEmpleado
        StrSql = StrSql & " WHERE ternom = '" & nombre1 & "'"
        StrSql = StrSql & " AND terape = '" & Apellido1 & "'"
        If rs.State = adStateOpen Then rs.Close
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            NroTercero = rs("ternro")
        Else
            NroTercero = 0
        End If
      
        StrSql = " SELECT ternro FROM familiar"
        StrSql = StrSql & " INNER JOIN parentesco ON familiar.parenro= parentesco.parenro "
        StrSql = StrSql & " WHERE paredesc = 'conyuge'"
        StrSql = StrSql & " AND famest = -1 "
        StrSql = StrSql & " AND empleado=" & NroEmpleado
        If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
        If Not rs.EOF Then
           If (NroTercero <> rs("ternro") Or NroTercero = 0) Then
             Texto = ": " & " - Campo " & Campoetiqueta & " Ya existe un conyuge cargado"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            RegError = RegError + 1
            Exit Sub
           End If
        End If
    End If
    'Discapacitado
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Discapacitado"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    Disc = UCase(Aux)
    If Disc = "N/A" Or Disc = "NO" Then
        nro_disc = 0
    Else
        nro_disc = -1
    End If
    
    'Estudia
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Estudia"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = UCase(Trim(Mid(strReg, pos1, pos2 - pos1 + 1)))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    Estudia = Aux
    If Estudia = "N/A" Or Estudia = "NO" Then
        nro_estudia = 0
    Else
        nro_estudia = -1
    End If
    
    'Nivel de estudio
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Nivel de estudio"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = UCase(Trim(Mid(strReg, pos1, pos2 - pos1 + 1)))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    NivEst = Aux
    'Por ahora no hago nada con el nivel de estudio porque en Accor no lo pasaron
    If NivEst = "N/A" Or EsNulo(NivEst) Then
         nro_nivest = 0
    Else
        'busco el primer novel de estudio, si no existe la creo
        StrSql = " SELECT * FROM nivest WHERE nivdesc = '" & NivEst & "'"
        If rs.State = adStateOpen Then rs.Close
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            nro_nivest = rs!nivnro
        Else
            'creo una
            StrSql = " INSERT INTO nivest (nivdesc) VALUES ('" & NivEst & "')"
            objConn.Execute StrSql, , adExecuteNoRecords
            nro_nivest = getLastIdentity(objConn, "nivest")
        End If
     End If

    'Tipo de Doc
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Tipo de Doc"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    TipDoc = Aux
    If TipDoc <> "N/A" And Not EsNulo(TipDoc) Then
        StrSql = " SELECT tidnro FROM tipodocu WHERE UPPER(tidsigla) = '" & UCase(TipDoc) & "'"
        If rs_Sql.State = adStateOpen Then rs_Sql.Close
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            Nro_TDocumento = rs_Sql!tidnro
        Else
            'busco la primera institucion, si no existe la creo
            StrSql = " SELECT * FROM institucion "
            If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                Nro_Institucion = rs!InstNro
            Else
                'creo una
                StrSql = " INSERT INTO institucion (instdes,instabre) VALUES ('NACIONAL','NAC')"
                objConn.Execute StrSql, , adExecuteNoRecords
                Nro_Institucion = getLastIdentity(objConn, "institucion")
            End If
            'creo el tipo de documento
            StrSql = " INSERT INTO tipodocu(tidnom,tidsigla,tidsist,instnro,tidunico) VALUES ('" & UCase(TipDoc) & "','" & UCase(TipDoc) & "',0," & Nro_Institucion & ",0)"
            objConn.Execute StrSql, , adExecuteNoRecords
            Nro_TDocumento = getLastIdentity(objConn, "tipodocu")
        End If
    Else
        Nro_TDocumento = 0
    End If
    
    'Nro de Doc
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Nro de Doc"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    NroDoc = Aux
    If NroDoc = "N/A" Or EsNulo(NroDoc) Then
        NroDoc = "0"
    End If
    
        
    'Obra Social
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Obra Social"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    ObraSocial = Aux
    If ObraSocial = "N/A" Or ObraSocial = "" Then
        nro_osocial = 0
    Else
        StrSql = " SELECT ternro FROM osocial WHERE UPPER(osdesc) = '" & UCase(ObraSocial) & "'"
        If rs.State = adStateOpen Then rs.Close
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            nro_osocial = rs!Ternro
        Else
            nro_osocial = 0
        End If
    End If

    'Plan de OS
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Plan de Obra Social"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    PlanOSocial = Aux
    If PlanOSocial = "N/A" Or PlanOSocial = "" Then
        nro_planos = 0
    Else
        If nro_osocial <> 0 Then
            StrSql = " SELECT plnro FROM planos WHERE UPPER(plnom) = '" & UCase(PlanOSocial) & "'"
            StrSql = StrSql & " AND osocial = " & nro_osocial
            If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                nro_planos = rs!plnro
            Else
                nro_planos = 0
            End If
        Else
            nro_planos = 0
        End If
    End If

    'Aviso Emergencia
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Aviso emergencia"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = UCase(Trim(Mid(strReg, pos1, pos2 - pos1 + 1)))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    AvisoEmer = Aux
    If AvisoEmer = "N/A" Or AvisoEmer = "NO" Then
        nro_aviso = 0
    Else
        nro_aviso = -1
    End If

    'Paga Salario fliar
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Paga salario familiar"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = UCase(Trim(Mid(strReg, pos1, pos2 - pos1 + 1)))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    PagaSalario = Aux
    If PagaSalario = "N/A" Or PagaSalario = "NO" Then
        nro_salario = 0
    Else
        nro_salario = -1
    End If

    'Ganancias
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Ganancias"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1)) 'mdf +1
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Ganancias = Aux
    If Ganancias = "N/A" Or Ganancias = "NO" Or Ganancias = "N" Then
        nro_gan = 0
    Else
        nro_gan = -1
    End If


    'Fecha de Inicio del vinculo
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Fecha de Inicio de Vinculo"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    fechaInicio = Aux
    If fechaInicio = "N/A" Or EsNulo(fechaInicio) Then
        fechaInicio = "Null"
    End If
    If fechaInicio = "Null" Then
        ' Busco la fecha de alta reconocida
         Campoetiqueta = " Fecha de alta reconocida del empleado "
         StrSql = "SELECT altfec FROM fases "
         StrSql = StrSql & " INNER JOIN empleado ON empleado.ternro = fases.empleado "
         StrSql = StrSql & " WHERE empleg = " & Legajo
         StrSql = StrSql & " AND fasrecofec = -1 "
         OpenRecordset StrSql, rs
         If rs.EOF Then
             Texto = ": " & " - Campo " & Campoetiqueta & " no esta configurado para el empleado "
             NroColumna = 1
             Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
             Exit Sub
         End If
         'Calculo la fecha de Inicio
         If IsDate(Fnac) Then
             If CDate(rs!altfec) > CDate(Fnac) Then
                     fechaInicio = rs!altfec
             Else
                     fechaInicio = Fnac
             End If
         Else
             Texto = ": " & " - Campo Fecha de Nacimiento del familiar no es válida.El formato es (dd/mm/aaaa) "
             NroColumna = 1
             Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
             Exit Sub
         End If
    End If


   'Fecha Vto
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Fecha de Vencimiento"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    'pos2 = Len(strReg)
    If pos2 <= pos1 Then
        pos2 = Len(strReg)
        
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        ' Es obligatoria si el empleado paga salario familiar
        'If nro_salario = -1 Then
        '    Obligatorio = True
        'Else
        '    Obligatorio = False
        'End If
        
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
            If Not IsDate(Aux) Then
                Texto = ": " & " - Campo " & Campoetiqueta & " con valor: " & Aux & " no tiene un formato de fecha válido (dd/mm/aaaa)."
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                Exit Sub
            End If
        End If
        fechaVto = Aux
        If fechaVto = "N/A" Or EsNulo(fechaVto) Then
            fechaVto = "Null"
        End If
    Else
    
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        ' Es obligatoria si el empleado paga salario familiar
       ' If nro_salario = -1 Then
       '     Obligatorio = True
       ' Else
       '     Obligatorio = False
       ' End If
        
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
            If Not IsDate(Aux) Then
                Texto = ": " & " - Campo " & Campoetiqueta & " con valor: " & Aux & " no tiene un formato de fecha válido (dd/mm/aaaa)."
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                Exit Sub
            End If
        End If
        fechaVto = Aux
        If fechaVto = "N/A" Or EsNulo(fechaVto) Then
            fechaVto = "Null"
        End If
    
        Item_DDJJ = 0
      
        'Nro de Item
        NroColumna = NroColumna + 1
        Obligatorio = False
        Campoetiqueta = "ITEM DDJJ"
        pos1 = pos2 + 2
        pos2 = InStr(pos1, strReg, separador) - 1
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            RegError = RegError + 1
            Exit Sub
        Else
            
            If Aux = "N/A" Or EsNulo(Aux) Then
                Item_DDJJ = 0
            Else
                Item_DDJJ = Aux
            End If
            If CBool(nro_gan) Then
                StrSql = "SELECT itenro FROM item WHERE itenro = " & Item_DDJJ
                OpenRecordset StrSql, rs
                If rs.EOF Then
                    Texto = ": " & " - Campo " & Campoetiqueta & " no se encuentra"
                    Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                End If
            End If
        End If
        
        'EGO - 07/06/2010 - fechas DDJJ
        
        Desde_DDJJ = 0
        'Desde fecha de DDJJ
        NroColumna = NroColumna + 1
        Obligatorio = False
        Campoetiqueta = "Fecha desde DDJJ"
        pos1 = pos2 + 2
        pos2 = InStr(pos1, strReg, separador) - 1
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            RegError = RegError + 1
            Exit Sub
        End If
        Desde_DDJJ = Aux
        If Desde_DDJJ = "N/A" Or EsNulo(Desde_DDJJ) Then
            Desde_DDJJ = "Null"
        End If
        
        Hasta_DDJJ = 0
        'Hasta fecha de DDJJ
        NroColumna = NroColumna + 1
        Obligatorio = False
        Campoetiqueta = "Fecha hasta DDJJ"
        pos1 = pos2 + 2
        'pos2 = Len(strReg)
        pos2 = InStr(pos1, strReg, separador) - 1
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            RegError = RegError + 1
            Exit Sub
        End If
        Hasta_DDJJ = Aux
        If Hasta_DDJJ = "N/A" Or EsNulo(Desde_DDJJ) Then
            Hasta_DDJJ = "Null"
        End If
        
    End If
    
    
'-------------------------------------------------
'-------------------------------------------------
    'TIPO DOCUMENTO 2
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Tipo de Documento 2"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))

    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Or (TipDoc = Aux) Then
    
        If (TipDoc = Aux) Then
            Texto = ": " & " - Campo " & Campoetiqueta & " no puede ser el mismo tipo de doc. que el Documento 1"
        Else
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        End If
        
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    TipDoc2 = Aux
    If TipDoc2 <> "N/A" And Not EsNulo(TipDoc2) Then
        StrSql = " SELECT tidnro FROM tipodocu WHERE UPPER(tidsigla) = '" & UCase(TipDoc2) & "'"
        If rs_Sql.State = adStateOpen Then rs_Sql.Close
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            Nro_TDocumento2 = rs_Sql!tidnro
        Else
            'busco la primera institucion, si no existe la creo
            StrSql = " SELECT * FROM institucion "
            If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
            If Not rs.EOF Then
                Nro_Institucion = rs!InstNro
            Else
                'creo una
                StrSql = " INSERT INTO institucion (instdes,instabre) VALUES ('NACIONAL','NAC')"
                objConn.Execute StrSql, , adExecuteNoRecords
                Nro_Institucion = getLastIdentity(objConn, "institucion")
            End If
            'creo el tipo de documento
            StrSql = " INSERT INTO tipodocu(tidnom,tidsigla,tidsist,instnro,tidunico) VALUES ('" & UCase(TipDoc2) & "','" & UCase(TipDoc2) & "',0," & Nro_Institucion & ",0)"
            objConn.Execute StrSql, , adExecuteNoRecords
            Nro_TDocumento2 = getLastIdentity(objConn, "tipodocu")
        End If
    Else
        Nro_TDocumento2 = 0
        
    End If
    
    
    If Nro_TDocumento2 <> 0 Then
        'Nro de Doc
        NroColumna = NroColumna + 1
        Obligatorio = False
        Campoetiqueta = "Nro de Documento 2"
        pos1 = pos2 + 2
        pos2 = InStr(pos1, strReg, separador) - 1
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            RegError = RegError + 1
            Exit Sub
        End If
        NroDoc2 = Aux
        If NroDoc2 = "N/A" Or EsNulo(NroDoc2) Then
            NroDoc2 = "0"
        End If
    Else
        NroDoc2 = "0"
        pos1 = pos2 + 2 'mdf
        pos2 = InStr(pos1, strReg, separador) - 1 'mdf
    End If
    
    '____________________________________________________
    ' A cargo CTM
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "A cargo CTM"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = UCase(Trim(Mid(strReg, pos1, pos2 - pos1 + 1)))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        RegError = RegError + 1
        Exit Sub
    End If
    
    If Aux = "N/A" Or Aux = "NO" Then
        pos1 = pos2 + 2 'mdf
        pos2 = InStr(pos1, strReg, separador) - 1 'mdf
        Guarderia = 0
        EmergenciaMedica = ""
    Else
        Guarderia = -1
        'Emergencia Médica
        NroColumna = NroColumna + 1
        Obligatorio = False
        Campoetiqueta = "Emergencia Médica"
        pos1 = pos2 + 2
        'pos2 = Len(strReg)mdf
        pos2 = InStr(pos1, strReg, separador) - 1
        Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        End If
        
        
        
        EmergenciaMedica = Aux
        If EmergenciaMedica = "N/A" Or EsNulo(EmergenciaMedica) Then
            EmergenciaMedica = 0
        Else
            StrSql = " SELECT * FROM estructura WHERE estrnro = " & EmergenciaMedica
            If rs.State = adStateOpen Then rs.Close
                OpenRecordset StrSql, rs
            If rs.EOF Then
                 Texto = ": " & " - Campo " & Campoetiqueta & " La estructura ingresada como emergencia médica no existe"
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
                RegError = RegError + 1
            End If
        End If
    End If
    
'--------------------------------------------------------------------------------------------
'MDF agrego: fecha de documentacion, acta, tomo, folio, tribunal,juzgado, secretaria, comuna
'--------------------------------------------------------------------------------------------
    
    
   'fecha de la documentacion (famfecadopcion, campo en la tabla familiar)
   NroColumna = NroColumna + 1
   Obligatorio = False
   Campoetiqueta = "fecha de documentacion"
   pos1 = pos2 + 2
   pos2 = InStr(pos1, strReg, separador) - 1
   Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
   If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
       Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
       Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
       RegError = RegError + 1
       Exit Sub
       If Not IsDate(Aux) Then
          Texto = ": " & " - Campo " & Campoetiqueta & " con valor: " & Aux & " no tiene un formato de fecha válido (dd/mm/aaaa)."
          Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
          RegError = RegError + 1
          Exit Sub
       End If
   End If
   fecdocu = Aux
   If (Aux = "N/A") Then
    fecdocu = "Null"
   End If
 
  
   'Acta (famceracta, campo en la tabla familiar)
   NroColumna = NroColumna + 1
   Obligatorio = False
   Campoetiqueta = "Acta"
   pos1 = pos2 + 2
   pos2 = InStr(pos1, strReg, separador) - 1
   Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
   If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
      Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
      Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
      RegError = RegError + 1
      Exit Sub
   End If
   acta = Aux
   If (Aux = "N/A") Then
      acta = "Null"
   End If
   
   'Tomo (famcertomo, campo en la tabla familiar)
   NroColumna = NroColumna + 1
   Obligatorio = False
   Campoetiqueta = "Tomo"
   pos1 = pos2 + 2
   pos2 = InStr(pos1, strReg, separador) - 1
   Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
   If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
      Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
      Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
      RegError = RegError + 1
      Exit Sub
   End If
   tomo = Aux
   If (Aux = "N/A") Then
      tomo = "Null"
   End If
   
    'Folio (famcerfolio, campo en la tabla familiar)
   NroColumna = NroColumna + 1
   Obligatorio = False
   Campoetiqueta = "Folio"
   pos1 = pos2 + 2
   pos2 = InStr(pos1, strReg, separador) - 1
   Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
   If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
      Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
      Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
      RegError = RegError + 1
      Exit Sub
   End If
   folio = Aux
   If (Aux = "N/A") Then
      folio = "Null"
   End If
   
   'Tribunal (famtribunal, campo en la tabla familiar)
   NroColumna = NroColumna + 1
   Obligatorio = False
   Campoetiqueta = "Tribunal"
   pos1 = pos2 + 2
   pos2 = InStr(pos1, strReg, separador) - 1
   Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
   If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
      Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
      Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
      RegError = RegError + 1
      Exit Sub
   End If
   tribunal = Aux
   If (Aux = "N/A") Then
      tribunal = "Null"
   End If
   
   'Juzgado (famjuzgado, campo en la tabla familiar)
   NroColumna = NroColumna + 1
   Obligatorio = False
   Campoetiqueta = "Juzgado"
   pos1 = pos2 + 2
   pos2 = InStr(pos1, strReg, separador) - 1
   Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
   If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
      Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
      Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
      RegError = RegError + 1
      Exit Sub
   End If
   juzgado = Aux
   If (Aux = "N/A") Then
      juzgado = "Null"
   End If
   
   'Secretaria (famsecretaria, campo en la tabla familiar)
   NroColumna = NroColumna + 1
   Obligatorio = False
   Campoetiqueta = "Secretaria"
   pos1 = pos2 + 2
   pos2 = InStr(pos1, strReg, separador) - 1
   Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
   If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
      Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
      Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
      RegError = RegError + 1
      Exit Sub
   End If
   secretaria = Aux
   If (Aux = "N/A") Then
      secretaria = "Null"
   End If
   
   'Comuna (famcomuna, campo en la tabla familiar)
   NroColumna = NroColumna + 1
   Obligatorio = False
   Campoetiqueta = "Comuna"
   pos1 = pos2 + 2
   pos2 = Len(strReg) 'mdf
  ' pos2 = InStr(pos1, strReg, separador) - 1
   Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
   If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
      Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
      Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
      RegError = RegError + 1
      Exit Sub
   End If
   comuna = Aux
   If (Aux = "N/A") Then
      comuna = "Null"
   End If
    

'-------------------------------------------------
' fin mdf
'-------------------------------------------------

    

    
    ' Veo que la fecha de vencimiento no sea menor que la de inicio
    If IsDate(fechaVto) Then
        If CDate(fechaInicio) > CDate(fechaVto) Then
            Texto = ": " & " - Campo Fecha de vencimiento es mayor al de fecha de inicio."
            NroColumna = 1
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
            Exit Sub
        Else
            fechaVto = ConvFecha(fechaVto)
        End If
    End If
    
    
    
    fechaInicio = ConvFecha(fechaInicio)
    Fnac = ConvFecha(Fnac)
    
' ==================================================================================
' ==================================================================================



  
StrSql = "SELECT * FROM tercero "
StrSql = StrSql & " INNER JOIN ter_tip ON tercero.ternro = ter_tip.ternro AND ter_tip.tipnro = 3 "
StrSql = StrSql & " INNER JOIN familiar ON familiar.ternro = tercero.ternro AND familiar.empleado = " & NroEmpleado
StrSql = StrSql & " WHERE ternom = '" & nombre1 & "'"
StrSql = StrSql & " AND terape = '" & Apellido1 & "'"
If rs.State = adStateOpen Then rs.Close
OpenRecordset StrSql, rs
If rs.EOF Then
    'Inserto el tercero asociado al familiar
    
    StrSql = " INSERT INTO tercero(ternom,ternom2,terape,terape2,terfecnac,tersex,nacionalnro,paisnro,estcivnro)"
    StrSql = StrSql & " VALUES('" & nombre1 & "','" & nombre2 & "','" & Apellido1 & "','" & Apellido2 & "'," & Fnac & "," & nro_Sexo & ","
    If nro_nacionalidad <> 0 Then
      StrSql = StrSql & nro_nacionalidad & ","
    Else
      StrSql = StrSql & "Null,"
    End If
    If nro_paisnac <> 0 Then
      StrSql = StrSql & nro_paisnac & ","
    Else
      StrSql = StrSql & "Null,"
    End If
    StrSql = StrSql & nro_estciv & ")"
    objConn.Execute StrSql, , adExecuteNoRecords

    NroTercero = getLastIdentity(objConn, "tercero")
    
    'Inserto el Registro correspondiente en ter_tip
    StrSql = " INSERT INTO ter_tip(ternro,tipnro) VALUES(" & NroTercero & ",3)"
    objConn.Execute StrSql, , adExecuteNoRecords
    
    '----------------------------------------------------------------------------
    'INSERTO FAMILIAR
    '----------------------------------------------------------------------------
    'NG - Se agregó famfecvtoguard,famguarderia
    StrSql = " INSERT INTO familiar(empleado,ternro,parenro,famest,famestudia,famcernac,faminc,famsalario,famemergencia,famcargadgi,osocial,plnro,famternro,famfec,famfecvto,famfecvtoguard,famguarderia,famfecadopcion,famceracta,famcertomo,famcerfolio,famtribunal,famjuzgado,famsecretaria,famcomuna,famemermed )" 'mdf
    StrSql = StrSql & " values(" & NroEmpleado & "," & NroTercero & "," & nro_paren & ",-1," & nro_estudia & ",0," & nro_disc & "," & nro_salario & "," & nro_aviso & "," & nro_gan & "," & nro_osocial & "," & nro_planos & ",0," & fechaInicio & "," & fechaVto
    StrSql = StrSql & ",null," & Guarderia
    
    '-------mdf
    If EsNulo(fecdocu) Then
        StrSql = StrSql & ",null "
    Else
        StrSql = StrSql & "," & ConvFecha(fecdocu)
    End If
    
    If EsNulo(acta) Then
        StrSql = StrSql & ",null "
    Else
        StrSql = StrSql & ", '" & acta & "' "
    End If
    
    If EsNulo(tomo) Then
        StrSql = StrSql & ",null "
    Else
        StrSql = StrSql & ", '" & tomo & "' "
    End If
    
    If EsNulo(folio) Then
        StrSql = StrSql & ",null "
    Else
        StrSql = StrSql & ", '" & folio & "' "
    End If
    
    If EsNulo(tribunal) Then
        StrSql = StrSql & ",null "
    Else
        StrSql = StrSql & ", '" & tribunal & "' "
    End If
    
    If EsNulo(juzgado) Then
        StrSql = StrSql & ",null "
    Else
        StrSql = StrSql & ", '" & juzgado & "' "
    End If
    
    If EsNulo(secretaria) Then
        StrSql = StrSql & ",null "
    Else
        StrSql = StrSql & ", '" & secretaria & "' "
    End If
    
    If EsNulo(comuna) Then
        StrSql = StrSql & ",null "
    Else
        StrSql = StrSql & ", '" & comuna & "' "
    End If
    
    If EsNulo(EmergenciaMedica) Then
        StrSql = StrSql & ",null "
    Else
        StrSql = StrSql & ", '" & EmergenciaMedica & "' "
    End If
    
    '------ fin mdf
    
    StrSql = StrSql & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
    
    'Inserto los estudios de familiar
    If nro_estudia = -1 Then
        StrSql = " INSERT INTO estudio_actual (ternro, nivnro) VALUES (" & NroTercero & "," & nro_nivest & ")"
        objConn.Execute StrSql, , adExecuteNoRecords
    End If
    
    Texto = "Inserte el Familiar - " & Legajo & " - " & Apellido1 & " - " & nombre1
    Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
Else
    'Actualizo los datos
    StrSql = "UPDATE tercero SET "
    StrSql = StrSql & " terfecnac = " & Fnac
    StrSql = StrSql & " ,tersex = " & nro_Sexo
    If nro_nacionalidad <> 0 Then
        StrSql = StrSql & " ,nacionalnro = " & nro_nacionalidad
    End If
    If nro_paisnac <> 0 Then
        StrSql = StrSql & " ,paisnro = " & nro_paisnac
    End If
    StrSql = StrSql & " WHERE ternro = " & rs!Ternro
    objConn.Execute StrSql, , adExecuteNoRecords

    NroTercero = rs!Ternro

    StrSql = "UPDATE familiar SET "
    StrSql = StrSql & " parenro = " & nro_paren
    StrSql = StrSql & " ,famestudia = " & nro_estudia
    StrSql = StrSql & " ,faminc = " & nro_disc
    StrSql = StrSql & " ,famsalario = " & nro_salario
    StrSql = StrSql & " ,famemergencia = " & nro_aviso
    StrSql = StrSql & " ,famcargadgi = " & nro_gan
    StrSql = StrSql & " ,osocial = " & nro_osocial
    StrSql = StrSql & " ,plnro = " & nro_planos
    StrSql = StrSql & " ,famternro = 0"
    'NG 05/07/2013
     StrSql = StrSql & " ,famfecvtoguard=NULL"
    
    StrSql = StrSql & " ,famguarderia=" & Guarderia
    '------------------mdf famfecadopcion,famceracta,famcertomo,famcerfolio,famtribunal,famjuzgado,famsecretaria,famcomuna
     If EsNulo(fecdocu) Then
        StrSql = StrSql & ",famfecadopcion = null "
    Else
        StrSql = StrSql & ", famfecadopcion=" & ConvFecha(fecdocu)
    End If
    
    If EsNulo(acta) Then
        StrSql = StrSql & ",famceracta=null "
    Else
        StrSql = StrSql & ",famceracta= '" & acta & "' "
    End If
    
    If EsNulo(tomo) Then
        StrSql = StrSql & ", famcertomo= null "
    Else
        StrSql = StrSql & ", famcertomo= '" & tomo & "' "
    End If
    
    If EsNulo(folio) Then
        StrSql = StrSql & ", famcerfolio=null "
    Else
        StrSql = StrSql & ",famcerfolio= '" & folio & "' "
    End If
    
    If EsNulo(tribunal) Then
        StrSql = StrSql & ", famtribunal=null "
    Else
        StrSql = StrSql & ",famtribunal= '" & tribunal & "' "
    End If
    
    If EsNulo(juzgado) Then
        StrSql = StrSql & ",famjuzgado=null "
    Else
        StrSql = StrSql & ",famjuzgado= '" & juzgado & "' "
    End If
    
    If EsNulo(secretaria) Then
        StrSql = StrSql & ",famsecretaria=null "
    Else
        StrSql = StrSql & ",famsecretaria= '" & secretaria & "' "
    End If
    
    If EsNulo(comuna) Then
        StrSql = StrSql & ",famcomuna=null "
    Else
        StrSql = StrSql & ", famcomuna='" & comuna & "' "
    End If
    
    If EsNulo(EmergenciaMedica) Then
        StrSql = StrSql & ",famemermed =null "
    Else
        StrSql = StrSql & ", famemermed ='" & EmergenciaMedica & "' "
    End If
    '-------------------- fin mdf
    
    StrSql = StrSql & " WHERE empleado = " & NroEmpleado
    StrSql = StrSql & " AND ternro = " & NroTercero
    objConn.Execute StrSql, , adExecuteNoRecords

    If nro_estudia = -1 Then
        StrSql = " SELECT ternro FROM estudio_actual WHERE ternro = " & NroTercero
        If rs.State = adStateOpen Then rs.Close
        OpenRecordset StrSql, rs
        If rs.EOF Then
            StrSql = " INSERT INTO estudio_actual (ternro, nivnro) VALUES (" & NroTercero & "," & nro_nivest & ")"
            objConn.Execute StrSql, , adExecuteNoRecords
        Else
            StrSql = " UPDATE estudio_actual SET nivnro = " & nro_nivest
            StrSql = StrSql & "WHERE ternro = " & NroTercero
            objConn.Execute StrSql, , adExecuteNoRecords
        End If
    
    Else
        'StrSql = " DELETE FROM estudio_actual WHERE ternro = " & NroTercero
        'objConn.Execute StrSql, , adExecuteNoRecords
    End If
    
    Texto = "Familiar actualizado - " & Legajo & " - " & Apellido1 & " - " & nombre1
    Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
End If



'Inserto los Documentos
' Dimatz Rafael valido que no exista el documento

If NroDoc2 <> "0" Then
    b = 1
Else
    b = 0
End If


For a = 0 To b

    If a = 1 Then
        NroDoc = NroDoc2
        Nro_TDocumento = Nro_TDocumento2
    End If

    StrSql = "SELECT * FROM ter_doc WHERE nrodoc = '" & NroDoc & "'"
    StrSql = StrSql & " AND tidnro = " & Nro_TDocumento
    OpenRecordset StrSql, rs_Doc
    If Not rs_Doc.EOF Then
         'MsgBox ("Este documento ya existe") ' 13-12-2010 -se comenta-cuelga el proceso
        Texto = ": " & "Este documento ya existe"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
    Else
        If NroDoc <> "" And NroDoc <> "N/A" And TipDoc <> "N/A" Then
            StrSql = "SELECT * FROM ter_doc WHERE ternro = " & NroTercero
            StrSql = StrSql & " AND tidnro = " & Nro_TDocumento
            If rs.State = adStateOpen Then rs.Close
            OpenRecordset StrSql, rs
            If rs.EOF Then
                StrSql = " INSERT INTO ter_doc(ternro,tidnro,nrodoc) "
                StrSql = StrSql & " VALUES(" & NroTercero & "," & Nro_TDocumento & ",'" & NroDoc & "')"
                objConn.Execute StrSql, , adExecuteNoRecords
                
                Texto = ": " & "Inserte el Documento - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
            Else
                StrSql = " UPDATE ter_doc SET "
                StrSql = StrSql & " nrodoc = '" & NroDoc & "'"
                StrSql = StrSql & " WHERE ternro = " & NroTercero
                StrSql = StrSql & " AND tidnro = " & Nro_TDocumento
                objConn.Execute StrSql, , adExecuteNoRecords
                
                Texto = ": " & "Documento actualizado - "
                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
            End If
        End If
    End If
Next


'Inserto el Domicilio
'If Not IngresoDom = False Then
'    StrSql = "SELECT * FROM cabdom  "
'    StrSql = StrSql & " WHERE tipnro = 1"
'    StrSql = StrSql & " AND ternro = " & NroTercero
'    StrSql = StrSql & " AND domdefault = -1"
'    StrSql = StrSql & " AND tidonro = 2"
'    If rs.State = adStateOpen Then rs.Close
'    OpenRecordset StrSql, rs
'    If rs.EOF Then
'        StrSql = " INSERT INTO cabdom(tipnro,ternro,domdefault,tidonro) "
'        StrSql = StrSql & " VALUES(1," & NroTercero & ",-1,2)"
'        objConn.Execute StrSql, , adExecuteNoRecords
'
'        NroDom = getLastIdentity(objConn, "cabdom")
'
'        StrSql = " INSERT INTO detdom(domnro,calle,nro,piso,oficdepto,torre,manzana,codigopostal,"
'        StrSql = StrSql & "locnro,provnro,paisnro,barrio,partnro,zonanro) "
'        StrSql = StrSql & " VALUES (" & NroDom & ",'" & Calle & "','" & Nro_Nrodom & "','" & Piso & "','"
'        StrSql = StrSql & Depto & "','" & Torre & "','" & Manzana & "','" & Cpostal & "'," & Nro_Localidad & ","
'        StrSql = StrSql & Nro_Provincia & "," & Nro_Pais & ",'" & Barrio & "'," & Nro_Partido & "," & Nro_Zona & ")"
'        objConn.Execute StrSql, , adExecuteNoRecords
'
'        Texto = ": " & "Domicilio Insertado - "
'        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
'
'        If Telefono <> "" Then
'            StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
'            StrSql = StrSql & " VALUES(" & NroDom & ",'" & Telefono & "',0,-1,0,1)"
'            objConn.Execute StrSql, , adExecuteNoRecords
'
'            Texto = ": " & "Inserte el Telefono Principal - "
'            Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
'        End If
'    Else
'        StrSql = " UPDATE detdom SET "
'        StrSql = StrSql & " calle =" & "'" & Calle & "'"
'        StrSql = StrSql & ",nro =" & "'" & Nro_Nrodom & "'"
'        StrSql = StrSql & ",piso =" & "'" & Piso & "'"
'        StrSql = StrSql & ",oficdepto =" & "'" & Depto & "'"
'        StrSql = StrSql & ",torre =" & "'" & Torre & "'"
'        StrSql = StrSql & ",manzana =" & "'" & Manzana & "'"
'        StrSql = StrSql & ",codigopostal =" & "'" & Cpostal & "'"
'        StrSql = StrSql & ",entrecalles =" & "'" & Entre & "'"
'        StrSql = StrSql & ",locnro =" & Nro_Localidad
'        StrSql = StrSql & ",provnro =" & Nro_Provincia
'        StrSql = StrSql & ",paisnro =" & Nro_Pais
'        StrSql = StrSql & ", partnro = " & Nro_Partido
'        StrSql = StrSql & ", zonanro =" & Nro_Zona
'        StrSql = StrSql & " WHERE domnro = " & rs!domnro
'        objConn.Execute StrSql, , adExecuteNoRecords
'
'        Texto = ": " & "Domicilio Actualizado - "
'        Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
'
'        If Telefono <> "" Then
'            StrSql = "SELECT * FROM telefono "
'            StrSql = StrSql & " WHERE domnro =" & rs!domnro
'            StrSql = StrSql & " AND telnro ='" & Telefono & "'"
'            If rs_Tel.State = adStateOpen Then rs_Tel.Close
'            OpenRecordset StrSql, rs_Tel
'            If rs_Tel.EOF Then
'                'FGZ - 04/05/2011 --- le agregué el tipo de telefono ---------------------
'                StrSql = " INSERT INTO telefono(domnro,telnro,telfax,teldefault,telcelular,tipotel) "
'                StrSql = StrSql & " VALUES(" & rs!domnro & ",'" & Telefono & "',0,-1,0,1)"
'                objConn.Execute StrSql, , adExecuteNoRecords
'
'                Texto = ": " & "Inserte el Telefono Principal - "
'                Call Escribir_Log("flogp", LineaCarga, 1, Texto, Tabs + 1, strReg)
'            End If
'        End If
'    End If
'End If



'FGZ - 12/04/2010 - DDJJ
'EGO - 07/06/2010 - DDJJ
If CBool(nro_gan) And Item_DDJJ <> 0 Then
    Anio_DDJJ = Year(Desde_DDJJ)

    StrSql = "SELECT desmondec "
    StrSql = StrSql & " FROM desmen "
    StrSql = StrSql & " WHERE empleado = " & NroEmpleado
    StrSql = StrSql & " AND     itenro = " & Item_DDJJ
    StrSql = StrSql & " AND  desfecdes = " & ConvFecha(Desde_DDJJ)
    StrSql = StrSql & " AND  desfechas = " & ConvFecha(Hasta_DDJJ)
    OpenRecordset StrSql, rs
    If rs.EOF Then
        StrSql = "INSERT INTO desmen (itenro, desano, desfecdes, desfechas, desmondec, empleado)"
        StrSql = StrSql & "VALUES (" & Item_DDJJ
        StrSql = StrSql & "," & Anio_DDJJ
        StrSql = StrSql & "," & ConvFecha(Desde_DDJJ)
        StrSql = StrSql & "," & ConvFecha(Hasta_DDJJ)
        StrSql = StrSql & ",1"
        StrSql = StrSql & "," & NroEmpleado
        StrSql = StrSql & ")"
    Else
        StrSql = "UPDATE desmen SET desmondec = desmondec + 1"
        StrSql = StrSql & " WHERE itenro = " & Item_DDJJ
        StrSql = StrSql & " AND empleado = " & NroEmpleado
        StrSql = StrSql & " AND desfecdes = " & ConvFecha(Desde_DDJJ)
        StrSql = StrSql & " AND desfechas = " & ConvFecha(Hasta_DDJJ)
    End If
    objConn.Execute StrSql, , adExecuteNoRecords
End If

OK = True

'Cierro y libero
If rs.State = adStateOpen Then rs.Close
If rs_Tel.State = adStateOpen Then rs_Tel.Close
Set rs = Nothing
Set rs_Tel = Nothing


Exit Sub

SaltoLinea:
    Texto = " Error (398): " & Err.Description
    Call Escribir_Log("floge", LineaCarga, 1, Texto, Tabs + 1, strReg)
    MyRollbackTrans
    OK = False
End Sub

Public Sub LineaModelo_400(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación de dependencias de estructura
' Autor      : LED
' Fecha      : 08/05/2015
' Modificado :
' ---------------------------------------------------------------------------------------------------------------
' Formato de texto ingresado:
'Estructura;Estructura Padre;nivelPadre;Tipo Nivel;nivelcategoria;Estructura Nivel
'1240;;0;3;1;1300
'1242;1500;1;3;2;1300
' ---------------------------------------------------------------------------------------------------------------
Dim rs_datos As New ADODB.Recordset
Dim ArrDatos
Dim Estrnro As Long
Dim estrnroPadre As Long
'Dim tenroPadre As Long
Dim estrnroNivel As Long
Dim tenroNivel As Long
Dim Nivel As Long
Dim nivelPadre As Long

Dim indice As Long
Dim error As Long

On Error GoTo Manejador_De_Error

    Tabs = 1
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    NroColumna = 0
    ArrDatos = Split(strLinea, separador)
    For indice = 0 To UBound(ArrDatos)
        Select Case CLng(indice)
            '------------------------------------------------------------------------------------------------------------------
            Case 0  'Estructura Puesto
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    StrSql = " SELECT estrnro FROM estructura WHERE upper(estrdabr) = '" & UCase(ArrDatos(indice)) & "' AND tenro = 4"
                    OpenRecordset StrSql, rs_datos
                    If Not rs_datos.EOF Then
                        Estrnro = rs_datos!Estrnro
                    Else
                        Texto = ": La estructura debe existir "
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        HuboError = True
                        Exit Sub
                    End If
                Else
                    Texto = ": Estructura no informada "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    HuboError = True
                    Exit Sub
                End If
                
            '------------------------------------------------------------------------------------------------------------------
            Case 1  'Estructura padre
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    StrSql = " SELECT estrnro FROM estructura WHERE upper(estrdabr) = '" & UCase(ArrDatos(indice)) & "' AND tenro = 4"
                    OpenRecordset StrSql, rs_datos
                    If Not rs_datos.EOF Then
                        estrnroPadre = rs_datos!Estrnro
                    Else
                        Texto = ": La estructura debe existir "
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        HuboError = True
                        Exit Sub
                    End If
                
                Else
                    Texto = ": Nodo Sin Padre "
                    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
                End If
            
            '------------------------------------------------------------------------------------------------------------------
            Case 2  'Nivel del padre
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    nivelPadre = ArrDatos(indice)
                Else
                    Texto = ": El nivel del Padre no informado "
                    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
                End If
            
            '------------------------------------------------------------------------------------------------------------------
            Case 3  'Tipo de estructura Nivel
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    'controlo que exista el tipo de estructura
                    StrSql = " SELECT tenro FROM tipoestructura WHERE upper(tedabr) = '" & UCase(ArrDatos(indice)) & "'"
                    OpenRecordset StrSql, rs_datos
                    If Not rs_datos.EOF Then
                        tenroNivel = rs_datos!Tenro
                    Else
                        Texto = ": Tipo de Estructura nivel no existe "
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        HuboError = True
                        Exit Sub
                    End If
                Else
                    Texto = ": Tipo de Estructura nivel no informada "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    HuboError = True
                    Exit Sub
                End If
                
            '------------------------------------------------------------------------------------------------------------------
            Case 4  'Posicion Nivel
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    Nivel = ArrDatos(indice)
                Else
                    Texto = ": Nivel no informado "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    HuboError = True
                    Exit Sub

                End If
                
            '------------------------------------------------------------------------------------------------------------------
            Case 5  'Estructura Nivel
                NroColumna = NroColumna + 1
                If Trim(ArrDatos(indice)) <> "" And UCase(ArrDatos(indice)) <> "N/A" Then
                    'controlo que exista la estructura
                    StrSql = " SELECT estrnro FROM estructura WHERE upper(estrdabr) = '" & UCase(ArrDatos(indice)) & "' AND tenro = " & tenroNivel
                    OpenRecordset StrSql, rs_datos
                    If Not rs_datos.EOF Then
                        estrnroNivel = rs_datos!Estrnro
                    Else
                        Texto = ": La estructura debe existir "
                        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                        HuboError = True
                        Exit Sub
                    End If
                Else
                    Texto = ": Estructura no informada "
                    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                    HuboError = True
                    Exit Sub

                End If
            
        End Select
    Next
    

'inserto la dependencia
If estrnroPadre <> 0 Then
    'inserto la dependecnia puesto-puesto
    StrSql = " INSERT INTO det_estruc_dep (cabestdepnro, detestdepnivel, tenro1, estrnro1, tenro2, estrnro2, detestdepnivpadre) " & _
             " VALUES (1, 0, 4, " & estrnroPadre & ", 4, " & Estrnro & ", " & nivelPadre & ")"
    objConn.Execute StrSql, , adExecuteNoRecords
End If

'inserto la dependecnia nivel-puesto
StrSql = " INSERT INTO det_estruc_dep (cabestdepnro, detestdepnivel, tenro1, estrnro1, tenro2, estrnro2, detestdepnivpadre) " & _
         " VALUES (1, " & Nivel & ", " & tenroNivel & ", " & estrnroNivel & ", 4, " & Estrnro & ", 0)"
objConn.Execute StrSql, , adExecuteNoRecords

Fin:
'Cierro y libero

If rs_datos.State = adStateOpen Then rs_datos.Close
Set rs_datos = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_401(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta datos historicos para la sección People Review
' Autor      : Carmen Quintero
'              El formato es:
'                     Evento,Legajo,Desempeño,Potencial,Estructura de Posicion 1,Otro/Cual 1,Plazo de Posicion 1,Estructura de Posición 2,Otro/Cual 2,Plazo de Posicion 2,Backup,Plazo 1,Sucesor,Plazo 2,
' Fecha      : 29/06/2015
' Ultima Mod.:
' ---------------------------------------------------------------------------------------------

Dim pos1 As Long
Dim pos2 As Long
    
Dim evaevenro As Integer
Dim Legajo As Double
Dim evadesempenio As Integer
Dim evapotencial As Integer
Dim evapuesto1 As Integer
Dim evaotro1 As String
Dim evaplazo1 As Integer
Dim evapuesto2 As Integer
Dim evaotro2 As String
Dim evaplazo2 As Integer
Dim evabackup As Integer
Dim evatiempo1 As Integer
Dim evareemplazo As Integer
Dim evatiempo2 As Integer
Dim Ternro As Double
Dim evaseccnro As Integer
Dim evacabnro As Integer
Dim evldrnro As Double
Dim l_valor As String
Dim empreporta  As Integer
Dim ArrDatos
Dim pos


Dim rs_Seccion As New ADODB.Recordset
Dim rs_Resu As New ADODB.Recordset
Dim rs2 As New ADODB.Recordset


On Error GoTo Manejador_De_Error
    Tabs = 1
    
    Texto = "Procesando linea " & strLinea
    Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
    
    
    ArrDatos = Split(strLinea, separador)
     
    If UBound(ArrDatos) > 0 Then
        'Evento
        NroColumna = NroColumna + 1
        Obligatorio = True
        Campoetiqueta = "Evento"
        Aux = ArrDatos(0)
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            InsertaError 1, 25
            HuboError = True
            Exit Sub
        End If
        evaevenro = CInt(Aux)
    End If
    
    If UBound(ArrDatos) > 1 Then
        'legajo
        NroColumna = NroColumna + 1
        Obligatorio = True
        Campoetiqueta = "Legajo"
        Aux = ArrDatos(1)
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            InsertaError 2, 25
            HuboError = True
            Exit Sub
        End If
        Legajo = Aux
   End If
   
   If UBound(ArrDatos) > 2 Then
        'Desempeño
        NroColumna = NroColumna + 1
        Campoetiqueta = "Desempeño"
        Aux = ArrDatos(2)
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            InsertaError 3, 25
            HuboError = True
            Exit Sub
        End If
        l_valor = CStr(Aux)
        
        If Trim(l_valor) = "A" Then
            evadesempenio = 1
        Else
            If Trim(l_valor) = "B" Then
                evadesempenio = 2
            Else
                If Trim(l_valor) = "C" Then
                    evadesempenio = 3
                End If
            End If
        End If
   End If
   
   If UBound(ArrDatos) > 3 Then
        'Potencial
        NroColumna = NroColumna + 1
        Campoetiqueta = "Potencial"
        Aux = ArrDatos(3)
        If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
            Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            InsertaError 4, 25
            HuboError = True
            Exit Sub
        End If
        evapotencial = CInt(Aux)
   End If
    
   'Nombre de Posición
   evapuesto1 = 0
   If UBound(ArrDatos) > 4 Then
        NroColumna = NroColumna + 1
        Campoetiqueta = "Estructura de Posición 1"
        Aux = ArrDatos(4)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            If IsNumeric(Aux) Then
                evapuesto1 = CInt(Aux)
            Else
                Texto = ": " & "El Nombre de posicion no es numerico "
                Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
                InsertaError 5, 3
                HuboError = True
                Exit Sub
            End If
        End If
   End If
    
  'Otro/Cual 1
  evaotro1 = ""
  If UBound(ArrDatos) > 5 Then
        NroColumna = NroColumna + 1
        Aux = ArrDatos(5)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            evaotro1 = CStr(Aux)
        End If
  End If
    
 'Plazo de Posición 1
  evaplazo1 = 0
  If UBound(ArrDatos) > 6 Then
        NroColumna = NroColumna + 1
        Aux = ArrDatos(6)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            evaplazo1 = CInt(Aux)
        End If
  End If
    
  'Estructura de Posición 2
  evapuesto2 = 0
  If UBound(ArrDatos) > 7 Then
        NroColumna = NroColumna + 1
        Aux = ArrDatos(7)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            evapuesto2 = CInt(Aux)
        End If
  End If
    
  'Otro/Cual 2
  evaotro2 = ""
  If UBound(ArrDatos) > 8 Then
        NroColumna = NroColumna + 1
        Aux = ArrDatos(8)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            evaotro2 = CStr(Aux)
        End If
  End If
    
  'Plazo de Posición 2
  evaplazo2 = 0
  If UBound(ArrDatos) > 9 Then
        NroColumna = NroColumna + 1
        Aux = ArrDatos(9)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            evaplazo2 = CInt(Aux)
        End If
  End If
  
  'Backup
  evabackup = 0
  pos = 0
  If UBound(ArrDatos) > 10 Then
        NroColumna = NroColumna + 1
        Aux = ArrDatos(10)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            pos = InStr(1, Aux, "/")
            If pos = 0 Then
                evabackup = CInt(Aux)
            Else
                evabackup = CInt(Mid(Aux, 1, pos - 1))
            End If
        End If
  End If
    
  'Plazo 1
  evatiempo1 = 0
  If UBound(ArrDatos) > 11 Then
        NroColumna = NroColumna + 1
        Aux = ArrDatos(11)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            evatiempo1 = CInt(Aux)
        End If
  End If
    
  'Reemplazo
  evareemplazo = 0
  pos = 0
  If UBound(ArrDatos) > 12 Then
        NroColumna = NroColumna + 1
        Aux = ArrDatos(12)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            pos = InStr(1, Aux, "/")
            If pos = 0 Then
                evareemplazo = CInt(Aux)
            Else
                evareemplazo = CInt(Mid(Aux, 1, pos - 1))
            End If
        End If
  End If
    
 'Plazo 2
  evatiempo2 = 0
  If UBound(ArrDatos) > 13 Then
        NroColumna = NroColumna + 1
        Aux = ArrDatos(13)
        If Len(Trim(Aux)) > 0 And Aux <> separador Then
            evatiempo2 = CInt(Aux)
        End If
  End If
  

' ====================================================================
'   Validar los parametros Levantados
' ====================================================================
evaseccnro = 0
Ternro = 0

StrSql = "SELECT DISTINCT evaseccnro "
StrSql = StrSql & " FROM evasecc "
StrSql = StrSql & " INNER JOIN evatipoeva ON evatipoeva.evatipnro= evasecc.evatipnro "
StrSql = StrSql & " INNER JOIN evaevento  ON evaevento.evatipnro = evatipoeva.evatipnro "
StrSql = StrSql & " INNER JOIN evatiposecc ON evatiposecc.tipsecnro= evasecc.tipsecnro "
StrSql = StrSql & " WHERE evaevenro = " & evaevenro
OpenRecordset StrSql, rs_Seccion
If Not rs_Seccion.EOF Then
    evaseccnro = rs_Seccion("evaseccnro")
    StrSql = "SELECT ternro FROM empleado WHERE empleg = " & Legajo
    OpenRecordset StrSql, rs_Resu
    If Not rs_Resu.EOF Then
        Ternro = rs_Resu("ternro")
    End If
    rs_Resu.Close
    
    evacabnro = 0
    If Ternro <> 0 Then
        StrSql = "SELECT evacab.evacabnro, evaetanro, cabaprobada "
        StrSql = StrSql & " FROM evacab "
        StrSql = StrSql & " WHERE evacab.Empleado = " & Ternro
        StrSql = StrSql & " AND   evacab.evaevenro = " & evaevenro
        OpenRecordset StrSql, rs_Resu
        If Not rs_Resu.EOF Then
            evacabnro = rs_Resu("evacabnro")
        End If
        rs_Resu.Close
        
        evldrnro = 0
        StrSql = "SELECT empreporta FROM empleado "
        StrSql = StrSql & " WHERE ternro=" & Ternro
        OpenRecordset StrSql, rs2
        If Not rs2.EOF Then
            If rs2("empreporta") <> 0 And Not IsNull(rs2("empreporta")) Then
                empreporta = rs2("empreporta")
            End If
        End If
        rs2.Close
        
        StrSql = "SELECT evldrnro FROM evadetevldor "
        StrSql = StrSql & " WHERE evadetevldor.evacabnro = " & evacabnro
        StrSql = StrSql & " AND   evadetevldor.evatevnro = 2"
        StrSql = StrSql & " AND evadetevldor.evaluador = " & empreporta
        StrSql = StrSql & " AND   evadetevldor.evaseccnro = " & evaseccnro
        OpenRecordset StrSql, rs_Resu
        If Not rs_Resu.EOF Then
            evldrnro = rs_Resu("evldrnro")
        End If
        rs_Resu.Close
        
        If evldrnro <> 0 Then
        
            StrSql = "SELECT evldrnro FROM evagenterevision WHERE evldrnro= " & evldrnro
            OpenRecordset StrSql, rs_Resu
            If Not rs_Resu.EOF Then
                StrSql = "UPDATE evagenterevision SET evadesempenio = " & evadesempenio
                StrSql = StrSql & ", evapotencial =" & evapotencial
                StrSql = StrSql & ", evapuesto1 =" & evapuesto1
                StrSql = StrSql & ", evaotro1 ='" & evaotro1 & "'"
                StrSql = StrSql & ", evaplazo1 =" & evaplazo1
                StrSql = StrSql & ", evapuesto2 =" & evapuesto2
                StrSql = StrSql & ", evaotro2 ='" & evaotro2 & "'"
                StrSql = StrSql & ", evaplazo2 =" & evaplazo2
                StrSql = StrSql & ", evabackup =" & evabackup
                StrSql = StrSql & ", evatiempo1 =" & evatiempo1
                StrSql = StrSql & ", evareemplazo =" & evareemplazo
                StrSql = StrSql & ", evatiempo2 =" & evatiempo2
                StrSql = StrSql & " WHERE evldrnro = " & evldrnro
                Texto = " Información People Review Actualizada "
            Else
                StrSql = "INSERT INTO evagenterevision(evldrnro,evadesempenio,evapotencial,evapuesto1,"
                StrSql = StrSql & " evaotro1,evaplazo1,evapuesto2,evaotro2,evaplazo2,evabackup,evatiempo1,"
                StrSql = StrSql & " evareemplazo,evatiempo2)"
                StrSql = StrSql & " VALUES (" & evldrnro & ""
                StrSql = StrSql & ",'" & evadesempenio & "'"
                StrSql = StrSql & "," & evapotencial
                StrSql = StrSql & " ," & evapuesto1
                StrSql = StrSql & " ,'" & evaotro1 & "'"
                StrSql = StrSql & "," & evaplazo1
                StrSql = StrSql & " ," & evapuesto2
                StrSql = StrSql & " ,'" & evaotro2 & "'"
                StrSql = StrSql & "," & evaplazo2
                StrSql = StrSql & "," & evabackup
                StrSql = StrSql & "," & evatiempo1
                StrSql = StrSql & "," & evareemplazo
                StrSql = StrSql & "," & evatiempo2
                StrSql = StrSql & ")"
                Texto = " Información People Review Insertada "
            End If
            
            objConn.Execute StrSql, , adExecuteNoRecords
            Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
            rs_Resu.Close
            
        End If
    
    End If
    
End If
    
    
Fin:
'Cierro todo y libero
If rs_Seccion.State = adStateOpen Then rs_Seccion.Close
If rs_Resu.State = adStateOpen Then rs_Resu.Close
If rs2.State = adStateOpen Then rs2.Close

Set rs_Seccion = Nothing
Set rs_Resu = Nothing
Set rs2 = Nothing
Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_402(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación de Partes de Cambio de Turno
' Autor      : Carmen Quintero
' Caso       : CAS-31268 - IBT - CUSTOM PARTE DE CAMBIO DE TURNO
' Fecha      : 29/07/2015
' Modificado :
' ---------------------------------------------------------------------------------------------------------------
   
Dim Ternro As Long
Dim NroLegajo As Long
Dim Turno As String
Dim Turnro As Integer
Dim GrtOffset As Integer
Dim GrtdDesde
Dim GrtdHasta
Dim GrtObservacion As String
Dim GcpDesAbr As String
Dim gcpnro
Dim Descripcion As String
Dim tenro1, tenro2, tenro3, tenro4, tenro5
Dim estrnro1, estrnro2, estrnro3, estrnro4, estrnro5
Dim gtpnro
Dim masinro
Dim gtrnro


Dim rs_Empleado As New ADODB.Recordset
Dim rs_Turno As New ADODB.Recordset
Dim rs_modAsi As New ADODB.Recordset


Dim ArrDatos

Dim error As Long

On Error GoTo Manejador_De_Error
 Tabs = 1
  
 Texto = "Procesando linea " & strLinea
 Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
 
 
 ArrDatos = Split(strLinea, separador)
  
 tenro1 = "NULL"
 estrnro1 = "NULL"
 tenro2 = "NULL"
 estrnro2 = "NULL"
 tenro3 = "NULL"
 estrnro3 = "NULL"
 tenro4 = "NULL"
 estrnro4 = "NULL"
 tenro5 = "NULL"
 estrnro5 = "NULL"
  
 If UBound(ArrDatos) >= 0 Then
     'Empleado
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Empleado"
     Aux = ArrDatos(0)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 1, 25
         HuboError = True
         Exit Sub
     End If
     NroLegajo = CLng(Aux)
 End If
 
 If UBound(ArrDatos) >= 1 Then
     'Turno
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Turno"
     Aux = ArrDatos(1)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 2, 25
         HuboError = True
         Exit Sub
     End If
     Turno = Aux
 End If

 If UBound(ArrDatos) >= 2 Then
     'Offset
     NroColumna = NroColumna + 1
     Aux = ArrDatos(2)
     If (Aux = "N/A" Or EsNulo(Aux) Or Aux = "0") Then
         GrtOffset = 0
     Else
         GrtOffset = CInt(Aux)
     End If
 End If

 If UBound(ArrDatos) >= 3 Then
     'Descripcion del Tipo de Parte
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Descripcion del Tipo de Parte"
     Aux = ArrDatos(3)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 4, 25
         HuboError = True
         Exit Sub
     End If
     Descripcion = Aux
 End If

 If UBound(ArrDatos) >= 4 Then
     'Fecha Desde
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Fecha Desde"
     Aux = ArrDatos(4)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 5, 25
         HuboError = True
         Exit Sub
     End If
     
     If IsDate(Aux) Then
        GrtdDesde = CDate(Aux)
     Else
        If Not EsNulo(Aux) Then
            Texto = ": Fecha no valida "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(5, 4)
            HuboError = True
            Exit Sub
        End If
     End If
 End If
   
 If UBound(ArrDatos) >= 5 Then
     'Fecha Hasta
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Fecha Hasta"
     Aux = ArrDatos(5)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 6, 25
         HuboError = True
         Exit Sub
     End If
     
    If IsDate(Aux) Then
        GrtdHasta = CDate(Aux)
    Else
       If Not EsNulo(Aux) Then
            Texto = ": Fecha no valida "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(6, 4)
            HuboError = True
            Exit Sub
       End If
    End If
    
    'VALIDA QUE FEC HASTA NO SEA MENOR QUE DESDE
    If GetFecha(GrtdDesde) > GetFecha(GrtdHasta) Then
        Texto = ": " & "La fecha Hasta no puede ser inferior a la Desde "
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(6, 47)
        HuboError = True
        Exit Sub
    End If
    
 End If
 
 masinro = ""
 If UBound(ArrDatos) >= 6 Then
    'Modelo
    Aux = ArrDatos(6)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            masinro = Aux
        End If
    End If
 End If
 
 If UBound(ArrDatos) >= 7 Then
     'Estructura 1
     Aux = ArrDatos(7)
     If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            estrnro1 = Aux
        End If
     End If
 End If
 
 If UBound(ArrDatos) >= 8 Then
     'Estructura 2
     Aux = ArrDatos(8)
     If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            estrnro2 = Aux
        End If
     End If
 End If
 
 If UBound(ArrDatos) >= 9 Then
     'Estructura 3
     Aux = ArrDatos(9)
     If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            estrnro3 = Aux
        End If
     End If
 End If
 
 If UBound(ArrDatos) >= 10 Then
     'Estructura 4
     Aux = ArrDatos(10)
     If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            estrnro4 = Aux
        End If
     End If
 End If
 
 If UBound(ArrDatos) >= 11 Then
     'Estructura 5
     Aux = ArrDatos(11)
     If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            estrnro5 = Aux
        End If
     End If
 End If
 
 
 If UBound(ArrDatos) >= 12 Then
     'Observaciones
     GrtObservacion = ""
     NroColumna = NroColumna + 1
     Campoetiqueta = "Observaciones"
     Aux = ArrDatos(12)
     If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
         GrtObservacion = Left(Aux, 200)
     End If
 End If
 
     
    
' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'______________________
'QUE EXISTA EL LEGAJO
StrSql = "SELECT * FROM empleado WHERE empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    Ternro = rs_Empleado!Ternro
End If

If Len(Trim(Turno)) = 4 Then
    'StrSql = "SELECT turnro FROM gti_turno WHERE turdesc = '" & Turno & "'"
    StrSql = "SELECT turfpagnro "
    StrSql = StrSql & " FROM gti_turno "
    StrSql = StrSql & " INNER JOIN gti_turforpago ON gti_turno.turnro = gti_turforpago.turnro "
    StrSql = StrSql & " WHERE turdesc = '" & Turno & "'"
    OpenRecordset StrSql, rs_Turno
    If rs_Turno.EOF Then
        Texto = ": " & "No se encontró el turno " & Turno
        NroColumna = 2
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        'Call InsertaError(2, 129)
        HuboError = True
        Exit Sub
    Else
        'Turnro = rs_Turno!Turnro
        Turnro = rs_Turno!turfpagnro
    End If
End If


If Len(Descripcion) > 0 Then
    StrSql = "SELECT gtpnro FROM gti_tipoparte "
    StrSql = StrSql & " WHERE gtpdesabr = '" & Trim(Descripcion) & "'"
    OpenRecordset StrSql, rs_Turno
    If rs_Turno.EOF Then
        Texto = ": " & "No se encontró el Tipo de parte " & Trim(Descripcion)
        NroColumna = 4
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        'Call InsertaError(4, 129)
        HuboError = True
        Exit Sub
    Else
       gtpnro = rs_Turno!gtpnro
    End If

End If

If Len(masinro) = 0 Then masinro = "NULL"

If Len(masinro) > 0 Then
    If masinro <> "NULL" Then
        NroColumna = 7
        'controlo que exista el modelo de asiento
        StrSql = " SELECT masinro FROM mod_asiento WHERE masinro = " & masinro
        OpenRecordset StrSql, rs_modAsi
        If Not rs_modAsi.EOF Then
            Texto = ": Modelo de asiento " & masinro & " Encontrado."
        Else
            Texto = ": Modelo de asiento " & masinro & " No encontrado."
        End If
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    End If
End If

If ((masinro <> "NULL" And masinro <> 0) And estrnro1 <> "NULL") Then
    StrSql = " SELECT tenro FROM estructura "
    StrSql = StrSql & " WHERE estrnro = " & estrnro1
    OpenRecordset StrSql, rs_Empleado
    If rs_Empleado.EOF Then
        Texto = ": " & "No se encontró el tipo de estructura de la estructura " & estrnro1
        NroColumna = 8
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    Else
        tenro1 = rs_Empleado!Tenro
    End If
End If

If ((masinro <> "NULL" And masinro <> 0) And estrnro2 <> "NULL") Then
    StrSql = " SELECT tenro FROM estructura "
    StrSql = StrSql & " WHERE estrnro = " & estrnro2
    OpenRecordset StrSql, rs_Empleado
    If rs_Empleado.EOF Then
        Texto = ": " & "No se encontró el tipo de estructura de la estructura " & estrnro2
        NroColumna = 9
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    Else
        tenro2 = rs_Empleado!Tenro
    End If
End If

If ((masinro <> "NULL" And masinro <> 0) And estrnro3 <> "NULL") Then
    StrSql = " SELECT tenro FROM estructura "
    StrSql = StrSql & " WHERE estrnro = " & estrnro3
    OpenRecordset StrSql, rs_Empleado
    If rs_Empleado.EOF Then
        Texto = ": " & "No se encontró el tipo de estructura de la estructura " & estrnro3
        NroColumna = 10
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    Else
        tenro3 = rs_Empleado!Tenro
    End If
End If

If ((masinro <> "NULL" And masinro <> 0) And estrnro4 <> "NULL") Then
    StrSql = " SELECT tenro FROM estructura "
    StrSql = StrSql & " WHERE estrnro = " & estrnro4
    OpenRecordset StrSql, rs_Empleado
    If rs_Empleado.EOF Then
        Texto = ": " & "No se encontró el tipo de estructura de la estructura " & estrnro4
        NroColumna = 11
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    Else
        tenro4 = rs_Empleado!Tenro
    End If
End If

If ((masinro <> "NULL" And masinro <> 0) And estrnro5 <> "NULL") Then
    StrSql = " SELECT tenro FROM estructura "
    StrSql = StrSql & " WHERE estrnro = " & estrnro5
    OpenRecordset StrSql, rs_Empleado
    If rs_Empleado.EOF Then
        Texto = ": " & "No se encontró el tipo de estructura de la estructura " & estrnro5
        NroColumna = 12
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub
    Else
        tenro5 = rs_Empleado!Tenro
    End If
End If

If (masinro <> "NULL" And masinro <> 0) Then
    StrSql = " SELECT masinivternro1, masinivternro2, masinivternro3 "
    StrSql = StrSql & " FROM mod_asiento "
    StrSql = StrSql & " WHERE masinro = " & masinro
    OpenRecordset StrSql, rs_modAsi
    If Not rs_modAsi.EOF Then
    
        If (Not IsNull(rs_modAsi!MasinivTernro1) And tenro1 <> "NULL") Then
            If CLng(rs_modAsi!MasinivTernro1) <> CLng(tenro1) Then
                Texto = ": " & "Esta estructura no pertenece al 1º nivel de apertura configurado en el modelo: " & masinro
                NroColumna = 8
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                HuboError = True
                Exit Sub
            End If
        End If
        
        If (Not IsNull(rs_modAsi!MasinivTernro2) And tenro2 <> "NULL") Then
            If CLng(rs_modAsi!MasinivTernro2) <> CLng(tenro2) Then
                Texto = ": " & "Esta estructura no pertenece al 2º nivel de apertura configurado en el modelo: " & masinro
                NroColumna = 9
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                HuboError = True
                Exit Sub
            End If
        End If
        
        If (Not IsNull(rs_modAsi!MasinivTernro3) And tenro3 <> "NULL") Then
            If CLng(rs_modAsi!MasinivTernro3) <> CLng(tenro3) Then
                Texto = ": " & "Esta estructura no pertenece al 3º nivel de apertura configurado en el modelo: " & masinro
                NroColumna = 10
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                HuboError = True
                Exit Sub
            End If
        End If
    End If
End If

Select Case CInt(gtpnro)
    Case 3:
        ' ====================================================================
        ' VALIDO QUE NO EXISTA EL PARTE
        ' ====================================================================
        StrSql = "SELECT gti_cabparte.gcpnro FROM gti_reldtur "
        StrSql = StrSql & "INNER JOIN gti_cabparte ON gti_cabparte.gcpnro = gti_reldtur.gcpnro "
        StrSql = StrSql & " WHERE ternro = " & Ternro
        StrSql = StrSql & " AND ((grtddesde >=" & ConvFecha(GrtdDesde)
        StrSql = StrSql & " AND grtddesde <=" & ConvFecha(GrtdHasta) & ") "
        StrSql = StrSql & " OR (grtdhasta >=" & ConvFecha(GrtdDesde)
        StrSql = StrSql & " AND grtdhasta <=" & ConvFecha(GrtdHasta) & ") "
        StrSql = StrSql & " OR (grtddesde <=" & ConvFecha(GrtdDesde)
        StrSql = StrSql & " AND grtdhasta >=" & ConvFecha(GrtdDesde) & ") "
        StrSql = StrSql & " OR (grtddesde <=" & ConvFecha(GrtdHasta)
        StrSql = StrSql & " AND grtdhasta >=" & ConvFecha(GrtdHasta) & ")) "
        OpenRecordset StrSql, rs_Empleado
        If Not rs_Empleado.EOF Then
            Texto = " Este Cambio de Turnos se superpone con otro cargado anterior. Codigo: " & rs_Empleado!gcpnro
            NroColumna = 1
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            HuboError = True
            Exit Sub
        Else
            ' ====================================================================
            ' INSERTO CABECERA
            ' ====================================================================
                MyBeginTrans
                
                GcpDesAbr = "Aut. " & NroLegajo & " - " & GrtdDesde
                StrSql = "INSERT INTO gti_cabparte ( "
                StrSql = StrSql & "gtpnro, gcpdesde, gcphasta, gcpdesabr, gcpdesext, ft, ftap "
                StrSql = StrSql & ")"
                StrSql = StrSql & "VALUES( "
                StrSql = StrSql & gtpnro & "," & ConvFecha(GrtdDesde) & "," & ConvFecha(GrtdHasta)
                StrSql = StrSql & ",'" & GcpDesAbr & "','',0,0"
                StrSql = StrSql & ")"
                           
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Cabecera insertada "
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                
                gcpnro = getLastIdentity(objConn, "gti_cabparte")
         
                ' ====================================================================
                'INSERTO gti_reldtur
                ' ====================================================================
                StrSql = "INSERT INTO gti_reldtur("
                StrSql = StrSql & "gcpnro, ternro, grtddesde, grtdhasta, turnro, grtoffset, grtobservacion"
                StrSql = StrSql & ") "
                StrSql = StrSql & "VALUES("
                StrSql = StrSql & gcpnro & "," & Ternro & "," & ConvFecha(GrtdDesde) & "," & ConvFecha(GrtdHasta) & "," & Turnro & ""
                StrSql = StrSql & "," & GrtOffset & ",'" & GrtObservacion & "'"
                StrSql = StrSql & ")"
                
                objConn.Execute StrSql, , adExecuteNoRecords
                Texto = "Detalle del parte cambio de turno insertado"
                Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                
                gtrnro = getLastIdentity(objConn, "gti_reldtur")
                If tenro1 <> "NULL" Then
                    
                    StrSql = "INSERT INTO gti_dist_parte ( "
                    StrSql = StrSql & "gtpnro, gcpnro, gtrnro, masinro, tenro1, estrnro1, tenro2, estrnro2, tenro3, estrnro3, tenro4, estrnro4, tenro5, estrnro5 "
                    StrSql = StrSql & ")"
                    StrSql = StrSql & "VALUES( "
                    StrSql = StrSql & gtpnro & "," & gcpnro & "," & gtrnro & "," & masinro & "," & tenro1 & "," & estrnro1 & "," & tenro2 & "," & estrnro2 & "," & tenro3 & "," & estrnro3
                    StrSql = StrSql & "," & tenro4 & "," & estrnro4 & "," & tenro5 & "," & estrnro5
                    StrSql = StrSql & ")"
                    
                    Texto = "Distribución del parte insertado "
                                        
                    objConn.Execute StrSql, , adExecuteNoRecords
                    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                End If
             
                MyCommitTrans
        '--------------------------------------
        End If ' CIERRO IF QUE VALIDA SI YA ESTA CARGADO EL PARTE DE CAMBIO DE TURNO
End Select
Fin:
'Cierro y libero

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
Set rs_Empleado = Nothing
    
If rs_Turno.State = adStateOpen Then rs_Turno.Close
Set rs_Turno = Nothing
    
If rs_modAsi.State = adStateOpen Then rs_modAsi.Close
Set rs_modAsi = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True
    MyRollbackTrans
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_403(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación de Visitas Medicas
' Autor      : Sebastian Stremel
' Caso       : CAS-30758 - ACARA - SO - ABM de visitas medicas y nueva interfaz de importación
' Fecha      : 05/08/2015
' Modificado :
' ---------------------------------------------------------------------------------------------------------------
   
Dim Ternro As Long

Dim NroLegajo As Long
Dim Descripcion As String
Dim Ubicacion As String
Dim fechaVisita As String
Dim horaVisita As String
Dim fechaProxVisita As String
Dim horaProxVisita As String
Dim servicioMedico As String
Dim patologia As String
Dim hAux
Dim mAux
Dim codServMedico As Integer
Dim codPatologia As Integer

Dim codVisitaMed As Long

Dim rs_Empleado As New ADODB.Recordset
Dim ArrDatos

Dim error As Long

On Error GoTo Manejador_De_Error
 Tabs = 1
  
 Texto = "Procesando linea " & strLinea
 Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
 
 
 ArrDatos = Split(strLinea, separador)
  
 If UBound(ArrDatos) > 0 Then
     'Empleado
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Empleado"
     Aux = ArrDatos(0)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 1, 25
         HuboError = True
         Exit Sub
     End If
     NroLegajo = CLng(Aux)
 End If
 
 If UBound(ArrDatos) > 1 Then
     'Descripcion
     NroColumna = NroColumna + 1
     Obligatorio = False
     Campoetiqueta = "Descripcion"
     Aux = ArrDatos(1)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 2, 25
         HuboError = True
         Exit Sub
     End If
     Descripcion = Aux
 End If

 If UBound(ArrDatos) > 2 Then
     'Ubicacion
     NroColumna = NroColumna + 1
     Aux = ArrDatos(2)
     If (Aux = "N/A" Or EsNulo(Aux)) Then
         Ubicacion = 0
     Else
        If UCase(Aux) = "C" Then
            Ubicacion = 0
        Else
            If UCase(Aux) = "D" Then
                Ubicacion = -1
            End If
        End If
     End If
 End If

 If UBound(ArrDatos) > 3 Then
     'Fecha Visita
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Fecha de la visita"
     Aux = ArrDatos(3)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 4, 25
         HuboError = True
         Exit Sub
     End If
     If IsDate(Aux) Then
        fechaVisita = CDate(Aux)
     Else
        If Not EsNulo(Aux) Then
            Texto = ": Fecha no valida "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(5, 4)
            HuboError = True
            Exit Sub
        End If
     End If
 End If

 If UBound(ArrDatos) > 4 Then
     'Hora Visita
     NroColumna = NroColumna + 1
     Obligatorio = False
     Campoetiqueta = "Hora visita"
     Aux = ArrDatos(4)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 5, 25
         HuboError = True
         Exit Sub
     End If
     
     If Len(Aux) = 5 Then
        hAux = Mid(Aux, 1, 2)
        If hAux > 24 Or hAux < 0 Then
            Campoetiqueta = "Hora Visita"
            Texto = " - Campo " & Campoetiqueta & " con valor incorrecto, no puede ser mayor a 24 y menor de 0"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            InsertaError 5, 25
            HuboError = True
            Exit Sub
        End If
        
        mAux = Mid(Aux, 4, 2)
        If mAux > 60 Or mAux < 0 Then
            Campoetiqueta = "Minutos Visita"
            Texto = " - Campo " & Campoetiqueta & " con valor incorrecto, no puede ser mayor a 60 y menor de 0"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            InsertaError 5, 25
            HuboError = True
            Exit Sub
        End If
        horaVisita = Aux
    Else
        If Aux <> "N/A" And Aux <> "" Then
            Texto = "La longitud del campo hora de la visita es incorrecta, formto 00:00"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            InsertaError 5, 25
            HuboError = True
            Exit Sub
        Else
            horaVisita = "00:00"
        End If
    End If
 End If
   
 If UBound(ArrDatos) > 5 Then
     'Fecha Proxima Visita
     NroColumna = NroColumna + 1
     Obligatorio = False
     Campoetiqueta = "Fecha de la proxima visita"
     Aux = ArrDatos(5)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 4, 25
         HuboError = True
         Exit Sub
     Else
        If IsDate(Aux) Then
            If CDate(Aux) < CDate(fechaVisita) Then
                Texto = ": Fecha proxima visita mayor a fecha primer visita "
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(5, 4)
                HuboError = True
                Exit Sub
            Else
                fechaProxVisita = CDate(Aux)
            End If
        Else
            If Not EsNulo(Aux) And Aux <> "N/A" Then
                Texto = ": Fecha proxima visita no valida "
                Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
                Call InsertaError(5, 4)
                HuboError = True
                Exit Sub
            Else
                fechaProxVisita = ""
            End If
        End If
     
     End If
 End If

 If UBound(ArrDatos) > 6 Then
     'Hora Proxima Visita
     NroColumna = NroColumna + 1
     Obligatorio = False
     Campoetiqueta = "Hora Prox visita"
     Aux = ArrDatos(6)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 5, 25
         HuboError = True
         Exit Sub
     End If
     
    If Len(Aux) = 5 Then
       hAux = Mid(Aux, 1, 2)
       If hAux > 24 Or hAux < 0 Then
           Campoetiqueta = "Hora Visita"
           Texto = " - Campo " & Campoetiqueta & " con valor incorrecto, no puede ser mayor a 24 y menor de 0"
           Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
           InsertaError 5, 25
           HuboError = True
           Exit Sub
       End If
       
       mAux = Mid(Aux, 4, 2)
       If mAux > 60 Or mAux < 0 Then
           Campoetiqueta = "Minutos Visita"
           Texto = " - Campo " & Campoetiqueta & " con valor incorrecto, no puede ser mayor a 60 y menor de 0"
           Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
           InsertaError 5, 25
           HuboError = True
           Exit Sub
       End If
       horaProxVisita = Aux
    Else
        If Aux <> "N/A" And Aux <> "" Then
            Texto = "La longitud del campo hora de la proxima visita es incorrecta, formto 00:00"
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            InsertaError 5, 25
            HuboError = True
            Exit Sub
        Else
            If EsNulo(fechaProxVisita) Then
                horaProxVisita = ""
            Else
                horaProxVisita = "00:00"
            End If
        End If
    End If
 End If
   
  If UBound(ArrDatos) > 7 Then
     'Servicio Medico
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Servicio Medico"
     Aux = ArrDatos(7)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 5, 25
         HuboError = True
         Exit Sub
     Else
        servicioMedico = Aux
     End If
 End If
   
  If UBound(ArrDatos) >= 8 Then
     'Patologia
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Patologia"
     Aux = ArrDatos(8)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 5, 25
         HuboError = True
         Exit Sub
     Else
        patologia = Aux
     End If
 End If
    
' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================

'______________________
'QUE EXISTA EL LEGAJO
StrSql = "SELECT * FROM empleado WHERE empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    Ternro = rs_Empleado!Ternro
End If
rs_Empleado.Close

'_____________________________
'QUE EXISTA EL SERVICIO MEDICO
StrSql = " SELECT tercero.ternro, terrazsoc "
StrSql = StrSql & " From soservmedico "
StrSql = StrSql & " INNER JOIN tercero ON tercero.ternro = soservmedico.ternro "
StrSql = StrSql & " INNER JOIN ter_tip ON tercero.ternro = ter_tip.ternro "
StrSql = StrSql & " Where ter_tip.tipnro = 28 AND upper(terrazsoc)= '" & UCase(servicioMedico) & "'"
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró el servicio Medico " & servicioMedico
    NroColumna = 8
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    codServMedico = rs_Empleado!Ternro
End If
rs_Empleado.Close

'_____________________________
'QUE EXISTA LA PATOLOGIA
StrSql = " SELECT patologianro FROM sopatologias "
StrSql = StrSql & " Where upper(patologiadesabr)= '" & UCase(patologia) & "'"
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró la patologia " & patologia
    NroColumna = 9
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    codPatologia = rs_Empleado!patologianro
End If
rs_Empleado.Close


'INSERTO LA VISITA MEDICA
StrSql = " INSERT INTO sovisitamedica "
StrSql = StrSql & "("
StrSql = StrSql & " vismeddesc, vismedubicacion, vismedfecha, vismedhora, ternro, "
StrSql = StrSql & " servmedico, visproxmedfecha, visproxmedhora,tipvinro, vismedcosto "
StrSql = StrSql & ")"
StrSql = StrSql & " VALUES "
StrSql = StrSql & "("
StrSql = StrSql & "'" & Left(Descripcion, 255) & "',"
StrSql = StrSql & Ubicacion & ","
StrSql = StrSql & ConvFecha(fechaVisita) & ","
StrSql = StrSql & "'" & Replace(horaVisita, ":", "") & "',"
StrSql = StrSql & Ternro & ","
StrSql = StrSql & codServMedico & ","
StrSql = StrSql & IIf(EsNulo(fechaProxVisita), "NULL", ConvFecha(fechaVisita)) & ","
If EsNulo(horaProxVisita) Then
    StrSql = StrSql & "NULL,"
Else
    StrSql = StrSql & "'" & Replace(horaProxVisita, ":", "") & "',"
End If
StrSql = StrSql & "1,"
StrSql = StrSql & "0"
StrSql = StrSql & ")"
objConn.Execute StrSql, , adExecuteNoRecords

codVisitaMed = getLastIdentity(objConn, "sovisitamedica")

StrSql = " INSERT INTO sopatol_visitas "
StrSql = StrSql & "("
StrSql = StrSql & " visitamed, patologianro "
StrSql = StrSql & ")"
StrSql = StrSql & " VALUES "
StrSql = StrSql & "("
StrSql = StrSql & codVisitaMed & "," & codPatologia
StrSql = StrSql & ")"
objConn.Execute StrSql, , adExecuteNoRecords

Flog.writeline "Linea Numero: " & NroLinea & " Insertada."
'HASTA ACA


Fin:
'Cierro y libero

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
Set rs_Empleado = Nothing
    

Exit Sub

Manejador_De_Error:
    HuboError = True
    MyRollbackTrans
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub

Public Sub LineaModelo_404(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------------------------
' Descripcion: Importación de Seguros
' Autor      : Carmen Quintero
' Caso       : CAS-32751 - LA CAJA - Custom Seguros ADP
' Fecha      : 20/10/2015
' Modificado :
' ---------------------------------------------------------------------------------------------------------------
   
Dim Ternro As Long
Dim NroTercero As Long
Dim NroLegajo As Long
Dim tipsegnro As Integer
Dim segbeneftipo As Integer
Dim NroLegajoBenef As Long
Dim terape As String
Dim ternom As String
Dim segbenefobs As String
Dim Nro_TDocumento As String
Dim segbenefecnac
Dim segbenefecalta
Dim segbenefecbaja
Dim segbenefcarac As Integer
Dim segcondnro As Integer
Dim segbenefporc As Double
Dim segbenefactivo As Long
Dim segbenefternro As Long
Dim tersex As Long
Dim tidnro As Long
Dim NroDoc As Long
Dim terfecnac As String
Dim l_suma As Double
Dim segbenefpoliza As String
Dim Paisnro As Integer
Dim segbenefnro As Integer
Dim ternom2 As String
Dim terape2 As String
Dim estcivnro
Dim tercasape As String
Dim terfecing As String
Dim nacionalnro
Dim terfecestciv
Dim terfecfallec
Dim lugarnro
Dim tertip As Long


Dim rs_Empleado As New ADODB.Recordset
Dim rs_Sql As New ADODB.Recordset
Dim rs_tdoc As New ADODB.Recordset


Dim ArrDatos

Dim error As Long

On Error GoTo Manejador_De_Error
 Tabs = 1
  
 Texto = "Procesando linea " & strLinea
 Call Escribir_Log("flog", NroLinea, NroColumna, Texto, Tabs, strLinea)
 
 ArrDatos = Split(strLinea, separador)
  
 If UBound(ArrDatos) >= 0 Then
     'Legajo
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Legajo"
     Aux = ArrDatos(0)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 1, 25
         HuboError = True
         Exit Sub
     End If
     NroLegajo = CLng(Aux)
 End If
 
 If UBound(ArrDatos) >= 1 Then
     'Tipos de Seguros
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Tipos de Seguros"
     Aux = ArrDatos(1)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 2, 25
         HuboError = True
         Exit Sub
     End If
     tipsegnro = CLng(Aux)
 End If

 If UBound(ArrDatos) >= 2 Then
     'Condicion
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Condicion"
     Aux = ArrDatos(2)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 3, 25
         HuboError = True
         Exit Sub
     End If
     segcondnro = CLng(Aux)
 End If
 
 If UBound(ArrDatos) >= 3 Then
     'Tipo de Beneficiario
     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Tipo de Beneficiario"
     Aux = ArrDatos(3)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 4, 25
         HuboError = True
         Exit Sub
     End If
     segbeneftipo = CLng(Aux)
 End If

NroLegajoBenef = 0
If UBound(ArrDatos) >= 4 Then
    'Legajo del Beneficiario
    NroColumna = NroColumna + 1
    Aux = ArrDatos(4)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            NroLegajoBenef = CLng(Aux)
        Else
            Texto = ": " & "El campo no es númerico " & NroLegajoBenef
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            HuboError = True
            Exit Sub
        End If
    End If
End If
 
If UBound(ArrDatos) >= 5 Then
    'Apellido
    NroColumna = NroColumna + 1
    Aux = ArrDatos(5)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        terape = Left(Aux, 25)
    End If
End If

If UBound(ArrDatos) >= 6 Then
    'Nombre
    NroColumna = NroColumna + 1
    Aux = ArrDatos(6)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        ternom = Left(Aux, 25)
    End If
End If
 
If UBound(ArrDatos) >= 7 Then
    'Sexo
    NroColumna = NroColumna + 1
    Aux = ArrDatos(7)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            tersex = CLng(Aux)
        Else
            Texto = ": " & "El valor debe ser 0 ó -1 "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            HuboError = True
            Exit Sub
        End If
    End If
End If
 
segbenefobs = ""
If UBound(ArrDatos) >= 8 Then
    'Parentesco
    NroColumna = NroColumna + 1
    Aux = ArrDatos(8)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        segbenefobs = Left(Aux, 200)
    End If
End If
 
If UBound(ArrDatos) >= 9 Then
    'Tipo de Doc
    NroColumna = NroColumna + 1
    Aux = ArrDatos(9)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        StrSql = " SELECT tidnro FROM tipodocu WHERE UPPER(tidsigla) = '" & UCase(Aux) & "'"
        OpenRecordset StrSql, rs_Sql
        If Not rs_Sql.EOF Then
            tidnro = rs_Sql!tidnro
        Else
            Texto = ": " & " - El Tipo de Documento no Existe."
            Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
            RegError = RegError + 1
            Exit Sub
        End If
    End If
End If
 
If UBound(ArrDatos) >= 10 Then
    'Nro de Documento
    NroColumna = NroColumna + 1
    Aux = ArrDatos(10)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
'        StrSql = "SELECT * FROM empleado "
'        StrSql = StrSql & " INNER JOIN ter_doc ON ter_doc.ternro = empleado.ternro "
'        StrSql = StrSql & " WHERE ter_doc.tidnro = " & tidnro
'        StrSql = StrSql & " AND ter_doc.nrodoc = '" & Aux & "'"
'        StrSql = StrSql & " AND empleado.ternro <> " & NroTercero
'        OpenRecordset StrSql, rs_tdoc
'        If (Not rs_tdoc.EOF) Then
'           NroTercero = rs_tdoc!Ternro
'           Texto = ": " & " - Empleado: " & Legajo & " - Ese Tipo y Numero de Documento estan Asignados a otro Empleado."
'           Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
'        Else
'            NroDoc = Left(Aux, 30)
'        End If
        NroDoc = Left(Aux, 30)
    End If
End If
 
If UBound(ArrDatos) >= 11 Then
     'Fecha de Nacimiento
     NroColumna = NroColumna + 1
     segbenefecnac = ""
     Aux = ArrDatos(11)
     If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsDate(Aux) Then
           segbenefecnac = CDate(Aux)
        Else
           If Not EsNulo(Aux) Then
               Texto = ": Fecha no valida "
               Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
               Call InsertaError(10, 4)
               HuboError = True
               Exit Sub
           End If
        End If
    End If
End If
 
If UBound(ArrDatos) >= 12 Then
     'Fecha Desde
     NroColumna = NroColumna + 1
     segbenefecalta = "Null"
     Aux = ArrDatos(12)
     If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsDate(Aux) Then
           segbenefecalta = CDate(Aux)
        Else
           If Not EsNulo(Aux) Then
               Texto = ": Fecha no valida "
               Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
               Call InsertaError(11, 4)
               HuboError = True
               Exit Sub
           End If
        End If
    End If
End If
   
If UBound(ArrDatos) >= 13 Then
     'Fecha Hasta
     NroColumna = NroColumna + 1
     segbenefecbaja = "Null"
     Aux = ArrDatos(13)
     If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsDate(Aux) Then
           segbenefecbaja = CDate(Aux)
        Else
           If Not EsNulo(Aux) Then
               Texto = ": Fecha no valida "
               Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
               Call InsertaError(5, 4)
               HuboError = True
               Exit Sub
           End If
        End If
        
        'VALIDA QUE FEC HASTA NO SEA MENOR QUE DESDE
        If GetFecha(segbenefecalta) > GetFecha(segbenefecbaja) Then
            Texto = ": " & "La fecha Hasta no puede ser inferior a la Desde "
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(13, 47)
            HuboError = True
            Exit Sub
        End If
    End If
End If
 
If UBound(ArrDatos) >= 14 Then
    'Poliza
    'Aux = ArrDatos(14)
'    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
'        segbenefpoliza = Aux
'    End If

     NroColumna = NroColumna + 1
     Obligatorio = True
     Campoetiqueta = "Poliza"
     Aux = ArrDatos(14)
     If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
         Texto = " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
         Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strLinea)
         InsertaError 1, 25
         HuboError = True
         Exit Sub
     End If
     segbenefpoliza = Aux
End If

If UBound(ArrDatos) >= 15 Then
    'Caracteristicas
    NroColumna = NroColumna + 1
    Aux = ArrDatos(15)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            segbenefcarac = CLng(Aux)
        End If
    End If
End If
 
If UBound(ArrDatos) >= 16 Then
    '% Beneficiario
    NroColumna = NroColumna + 1
    Aux = ArrDatos(16)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            segbenefporc = CDbl(Aux)
        Else
            Texto = ": " & "El campo no es númerico: " & segbenefporc
            NroColumna = 17
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            HuboError = True
            Exit Sub
        End If
    End If
End If
 
If segbenefporc > 100 Then
    Texto = ": " & "El Porcentaje no puede superar el 100%."
    NroColumna = 15
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    HuboError = True
    Exit Sub
End If
 
If UBound(ArrDatos) >= 17 Then
    'Estado
    NroColumna = NroColumna + 1
    Aux = ArrDatos(17)
    If (Aux <> "N/A" And Not EsNulo(Aux)) And Aux <> separador Then
        If IsNumeric(Aux) Then
            segbenefactivo = CLng(Aux)
        End If
    End If
End If
     
    
' ====================================================================
' VALIDAR LOS PARAMETROS LEVANTADOS
' ====================================================================
'______________________
'QUE EXISTA EL LEGAJO
StrSql = "SELECT * FROM empleado WHERE empleg = " & NroLegajo
OpenRecordset StrSql, rs_Empleado
If rs_Empleado.EOF Then
    Texto = ": " & "No se encontró el legajo " & NroLegajo
    NroColumna = 1
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 129)
    HuboError = True
    Exit Sub
Else
    Ternro = rs_Empleado!Ternro
End If

'QUE EXISTA EL TIPO DE SEGURO
StrSql = "SELECT * FROM tiposeguro WHERE tipsegnro = " & tipsegnro
OpenRecordset StrSql, rs_Sql
If rs_Sql.EOF Then
    Texto = ": " & "No se encontró el tipo de seguro " & tipsegnro
    NroColumna = 2
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    HuboError = True
    Exit Sub
End If

'QUE EXISTA LA CONDICION
StrSql = "SELECT * FROM seg_condicion WHERE segcondnro = " & segcondnro
OpenRecordset StrSql, rs_Sql
If rs_Sql.EOF Then
    Texto = ": " & "No se encontró la condición " & segcondnro
    NroColumna = 3
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    HuboError = True
    Exit Sub
End If

'QUE EXISTA EL TIPO DE BENEFICIARIO
If segbeneftipo <> 1 And segbeneftipo <> 2 And segbeneftipo <> 3 Then
    Texto = ": " & "No se encontró el tipo de beneficiario " & segbeneftipo
    NroColumna = 4
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    HuboError = True
    Exit Sub
End If

'QUE EXISTA EL NRO DE LEGAJO DEL BENEFICIARIO SI ES EMPLEADO
If NroLegajoBenef <> 0 Then
    If segbeneftipo = 1 Then
    
        StrSql = " SELECT tercero.ternro, tercero.terape, tercero.ternom, tersex, terfecnac, tercero.paisnro, tdp.tidnro, doc.nrodoc FROM empleado "
        StrSql = StrSql & " INNER JOIN tercero on tercero.ternro = empleado.ternro "
        StrSql = StrSql & " INNER JOIN tipodocu_pais tdp ON tdp.paisnro = tercero.paisnro "
        StrSql = StrSql & " INNER JOIN ter_doc doc ON doc.tidnro = tdp.tidnro AND (doc.ternro= empleado.ternro) "
        StrSql = StrSql & " WHERE empleg=" & NroLegajoBenef
        StrSql = StrSql & "  AND tdp.tidcod <= 5 "
        StrSql = StrSql & "  ORDER BY tidnro "
        OpenRecordset StrSql, rs_Empleado
        
        If rs_Empleado.EOF Then
            Texto = ": " & "No se encontró el legajo " & NroLegajoBenef
            NroColumna = 5
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 129)
            HuboError = True
            Exit Sub
        Else
            segbenefternro = rs_Empleado!Ternro
            ternom = rs_Empleado!ternom
            terape = rs_Empleado!terape
            tersex = rs_Empleado!tersex
            tidnro = rs_Empleado!tidnro
            NroDoc = rs_Empleado!NroDoc
            segbenefecnac = rs_Empleado!terfecnac
            Paisnro = rs_Empleado!Paisnro
        End If
    Else
'        Texto = ": " & "El tipo de beneficiario debe ser 1 "
'        NroColumna = 4
'        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
'        HuboError = True
'        Exit Sub
    End If
End If

'QUE EXISTA EL BENEFICIARIO SI ES FAMILIAR
If segbeneftipo = 2 And NroLegajoBenef = 0 Then
    Texto = ": " & "Debe ingresar el código o código interno del familiar."
    NroColumna = 5
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    HuboError = True
    Exit Sub
End If

If NroLegajoBenef <> 0 Then
    If segbeneftipo = 2 Then
        StrSql = "SELECT tercero.ternro,tercero.terape, tercero.ternom, famest, terfecnac, tersex"
        StrSql = StrSql & " , famsalario, famfecvto, famCargaDGI, famDGIdesde, famDGIhasta, famemergencia,doc.nrodoc, tercero.paisnro,tdp.tidnro "
        StrSql = StrSql & " , paredesc "
        StrSql = StrSql & " FROM  tercero INNER JOIN familiar ON tercero.ternro=familiar.ternro "
        StrSql = StrSql & " LEFT JOIN parentesco ON familiar.parenro=parentesco.parenro "
        StrSql = StrSql & " INNER JOIN tipodocu_pais tdp ON tdp.paisnro = tercero.paisnro "
        StrSql = StrSql & " INNER JOIN ter_doc doc ON doc.tidnro = tdp.tidnro AND (doc.ternro= familiar.ternro) "
        StrSql = StrSql & " WHERE familiar.ternro = " & NroLegajoBenef
        StrSql = StrSql & "  AND tdp.tidcod <= 5 "
        OpenRecordset StrSql, rs_Empleado
        
        If rs_Empleado.EOF Then
            Texto = ": " & "No se encontró el familiar " & NroLegajoBenef
            NroColumna = 5
            Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
            Call InsertaError(1, 129)
            HuboError = True
            Exit Sub
        Else
            segbenefternro = rs_Empleado!Ternro
            ternom = rs_Empleado!ternom
            terape = rs_Empleado!terape
            tersex = rs_Empleado!tersex
            tidnro = rs_Empleado!tidnro
            NroDoc = rs_Empleado!NroDoc
            segbenefecnac = rs_Empleado!terfecnac
            Paisnro = rs_Empleado!Paisnro
            segbenefobs = rs_Empleado!paredesc
        End If
    End If
End If

'SI ES UN TERCERO OTRO
If segbeneftipo = 3 Then
    If (Len(terape) = 0 Or Len(ternom) = 0) Then
        Texto = ": " & "Debe indicar el nombre y el apellido "
        NroColumna = 6
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        Call InsertaError(1, 129)
        HuboError = True
        Exit Sub
    End If
    Paisnro = 3
End If

'QUE EXISTA LA CARACTERISTICA
If segbenefcarac <> 0 And segbenefcarac <> -1 Then
    Texto = ": " & "No se encontró la caracteristica indicada: " & segbenefcarac
    NroColumna = 16
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    HuboError = True
    Exit Sub
End If

'QUE EXISTA EL ESTADO
If segbenefactivo <> 0 And segbenefactivo <> -1 Then
    Texto = ": " & "No se encontró el estado indicado: " & segbenefactivo
    NroColumna = 18
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    HuboError = True
    Exit Sub
End If

  StrSql = "SELECT segbenefnro FROM seg_beneficiario "
  StrSql = StrSql & " WHERE ternro = " & Ternro
  StrSql = StrSql & " AND tipsegnro = " & tipsegnro
  StrSql = StrSql & " AND segbenefternro = " & segbenefternro
  StrSql = StrSql & "  AND segbenefactivo=-1"
  StrSql = StrSql & "  AND tipsegnro= " & tipsegnro & " and segcondnro=" & segcondnro 'mdf
   
  OpenRecordset StrSql, rs_Sql
    If Not rs_Sql.EOF Then
        Texto = ": " & "Ya existe el mismo beneficiario cargado en el mismo tipo de seguro. "
        NroColumna = 4
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
        HuboError = True
        Exit Sub

  End If
'------------------------------------------------ If segcondnro = 2 Or segcondnro = 3 Then          End If
l_suma = 0
If segcondnro = 2 Or segcondnro = 3 Then
    StrSql = "SELECT SUM(segbenefporc) porc FROM seg_beneficiario "
    StrSql = StrSql & " WHERE ternro=" & Ternro
    StrSql = StrSql & "  AND segbenefactivo=-1"
    StrSql = StrSql & "  AND tipsegnro= " & tipsegnro 'MDF
    
    OpenRecordset StrSql, rs_Sql
    If Not rs_Sql.EOF Then
        If Not IsNull(rs_Sql("porc")) Then
            l_suma = CDbl(rs_Sql("porc")) + CDbl(segbenefporc)
        Else
            l_suma = CDbl(segbenefporc)
        End If
    End If
End If
'Flog.writeline "suma: " & l_suma & ""
If l_suma > 100 Then
    Texto = ": " & "El total del porcentaje de los beneficiarios supera el 100% "
    NroColumna = 17
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    HuboError = True
    Exit Sub
End If

MyBeginTrans

segbenefnro = 0
StrSql = "SELECT segbenefnro FROM seg_beneficiario "
StrSql = StrSql & " WHERE ternro = " & Ternro
StrSql = StrSql & " AND tipsegnro = " & tipsegnro
StrSql = StrSql & " AND segbenefternro = " & segbenefternro
StrSql = StrSql & "  AND segbenefactivo=-1"
OpenRecordset StrSql, rs_Sql
If Not rs_Sql.EOF Then
    segbenefnro = rs_Sql("segbenefnro")
End If

If segbenefnro = 0 Then
    If CLng(segbeneftipo) = 3 Then
        ternom2 = "Null"
        terape2 = "Null"
        estcivnro = "Null"
        tercasape = "Null"
        terfecing = ConvFecha(Date)
        nacionalnro = "Null"
        terfecestciv = "Null"
        terfecfallec = "Null"
        lugarnro = "Null"
        
        StrSql = "INSERT INTO tercero "
        StrSql = StrSql & "(terape,ternom,terape2,ternom2,terfecnac,estcivnro,tersex,tercasape,paisnro,terfecing,nacionalnro,terfecestciv,terfecfallec,lugarnro,docpais) "
        StrSql = StrSql & " VALUES ('"
        StrSql = StrSql & ternom & "', '"
        StrSql = StrSql & terape & "', "
        StrSql = StrSql & ternom2 & ","
        StrSql = StrSql & terape2 & ","
        
        If segbenefecnac = "Null" Then
            StrSql = StrSql & segbenefecnac & ","
        Else
            StrSql = StrSql & ConvFecha(segbenefecnac) & ","
        End If
        
        StrSql = StrSql & estcivnro & ","
        StrSql = StrSql & tersex & ","
        StrSql = StrSql & tercasape & ","
        StrSql = StrSql & Paisnro & ","
        StrSql = StrSql & terfecing & ","
        StrSql = StrSql & nacionalnro & ","
        StrSql = StrSql & terfecestciv & ","
        StrSql = StrSql & terfecfallec & ","
        StrSql = StrSql & lugarnro & ","
        StrSql = StrSql & Paisnro & ""
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Tercero insertado "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
                
        segbenefternro = getLastIdentity(objConn, "tercero")
    
        tertip = 18
    
        StrSql = "INSERT INTO ter_tip (ternro, tipnro) "
        StrSql = StrSql & " VALUES (" & segbenefternro & "," & tertip & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Tipo de tercero insertado "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
        
        StrSql = "INSERT INTO ter_doc (tidnro,nrodoc,ternro)"
        StrSql = StrSql & " VALUES ( "
        StrSql = StrSql & tidnro & ",'" & NroDoc & "'," & segbenefternro
        StrSql = StrSql & ")"
        
        objConn.Execute StrSql, , adExecuteNoRecords
        Texto = "Documento del tercero insertado "
        Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)
    
    End If

  '  Flog.writeline "fecha: " & segbenefecnac
    
    StrSql = "INSERT INTO seg_beneficiario "
    StrSql = StrSql & "(ternro, tipsegnro, segbeneftipo, segbenefternro, ternom, terape, tersex, segbenefcarac, segbenefactivo, segbenefecnac, segbenefecalta, "
    StrSql = StrSql & " segbenefecbaja, segbenefpoliza, segbenefporc, segcondnro, segbenefobs, paisnro, tidnro, nrodoc ) "
    StrSql = StrSql & " VALUES ("
    StrSql = StrSql & Ternro & ","
    StrSql = StrSql & tipsegnro & ","
    StrSql = StrSql & segbeneftipo & ","
    StrSql = StrSql & segbenefternro & ",'"
    StrSql = StrSql & ternom & "', '"
    StrSql = StrSql & terape & "', "
    StrSql = StrSql & tersex & ","
    StrSql = StrSql & segbenefcarac & ","
    StrSql = StrSql & segbenefactivo & ","
    
    If segbenefecnac = "Null" Then
        StrSql = StrSql & segbenefecnac & ","
    Else
        StrSql = StrSql & ConvFecha(segbenefecnac) & ","
    End If
    
    If segbenefecalta = "Null" Then
        StrSql = StrSql & segbenefecalta & ","
    Else
        StrSql = StrSql & ConvFecha(segbenefecalta) & ","
    End If
    
    If segbenefecbaja = "Null" Then
        StrSql = StrSql & segbenefecbaja & ",'"
    Else
        StrSql = StrSql & ConvFecha(segbenefecbaja) & ",'"
    End If
    
    StrSql = StrSql & segbenefpoliza & "',"
    StrSql = StrSql & segbenefporc & ","
    StrSql = StrSql & segcondnro & ",'"
    StrSql = StrSql & segbenefobs & "',"
    StrSql = StrSql & Paisnro & ","
    StrSql = StrSql & tidnro & ",'"
    StrSql = StrSql & NroDoc & "'"
    StrSql = StrSql & ")"
    Texto = "Detalle del asegurado insertado "
Else
    StrSql = "UPDATE seg_beneficiario SET "
    StrSql = StrSql & " ternro = " & Ternro & ","
    StrSql = StrSql & " tipsegnro = " & tipsegnro & ","
    StrSql = StrSql & " segbeneftipo = " & segbeneftipo & ","
    StrSql = StrSql & " segbenefternro = " & segbenefternro & ","
    StrSql = StrSql & " ternom = '" & ternom & "', "
    StrSql = StrSql & " terape = '" & terape & "', "
    StrSql = StrSql & " tersex = " & tersex & ","
    StrSql = StrSql & " segbenefcarac = " & segbenefcarac & ","
    StrSql = StrSql & " segbenefactivo = " & segbenefactivo & ","
    
    If segbenefecnac = "Null" Then
        StrSql = StrSql & " segbenefecnac = " & segbenefecnac & ","
    Else
        StrSql = StrSql & " segbenefecnac = " & ConvFecha(segbenefecnac) & ","
    End If
    
    If segbenefecalta = "Null" Then
        StrSql = StrSql & " segbenefecalta = " & segbenefecalta & ","
    Else
        StrSql = StrSql & " segbenefecalta = " & ConvFecha(segbenefecalta) & ","
    End If
    
    If segbenefecbaja = "Null" Then
        StrSql = StrSql & " segbenefecbaja = " & segbenefecbaja & ","
    Else
        StrSql = StrSql & " segbenefecbaja = " & ConvFecha(segbenefecbaja) & ","
    End If
    
    StrSql = StrSql & " segbenefpoliza = '" & segbenefpoliza & "',"
    StrSql = StrSql & " segbenefporc = " & segbenefporc & ","
    StrSql = StrSql & " segcondnro = " & segcondnro & ","
    StrSql = StrSql & " segbenefobs = '" & segbenefobs & "',"
    StrSql = StrSql & " paisnro =" & Paisnro & ","
    StrSql = StrSql & " tidnro =" & tidnro & ","
    StrSql = StrSql & " nrodoc = '" & NroDoc & "'"
    StrSql = StrSql & " WHERE segbenefnro  = " & segbenefnro

    Texto = "Detalle del asegurado actualizado "
End If
objConn.Execute StrSql, , adExecuteNoRecords
Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strLinea)

MyCommitTrans

Fin:
'Cierro y libero

If rs_Empleado.State = adStateOpen Then rs_Empleado.Close
Set rs_Empleado = Nothing
    
If rs_Sql.State = adStateOpen Then rs_Sql.Close
Set rs_Sql = Nothing
    
Exit Sub

Manejador_De_Error:
    HuboError = True
    MyRollbackTrans
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error insalvable en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Error: " & Err.Number
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    Texto = Err.Description
    Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strLinea)
    Call InsertaError(1, 7)
    GoTo Fin
End Sub


Public Sub LineaModelo_670(ByVal strLinea As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Inserta Parte de Horas
' Autor      : LED
'              El formato es:
'                       Nro. de Legajo;Apellido y Nombre;Fecha de trabajo;Descripción del CN;Zona;Adicional;Etapa;TareaHoras Totales
'
' Fecha      : 09/01/2013
' Ultima Mod.:
' ---------------------------------------------------------------------------------------------


'-----------------------------------------------------------------
Dim arregloLinea
Dim indice As Integer
Dim Ternro As String
Dim Legajo As String
Dim Fecha As String
Dim proyectoNro As String           'centro de costo y proyecto
Dim clienteNro As String
Dim przonanro As String             '
Dim adicional As String
Dim etapaNro As String
Dim tareaNro As String
Dim totalHoras As String
Dim totalMinutos As String

Dim rsAux As New ADODB.Recordset
Dim rsAux2 As New ADODB.Recordset

On Error GoTo Manejador_De_Error

arregloLinea = Split(strLinea, separador)
For indice = 0 To UBound(arregloLinea)
    Select Case CInt(indice)
        Case 0: 'Legajo - Obligatorio
            If (arregloLinea(indice) <> "") And (UCase(arregloLinea(indice)) <> "N/A") Then
                Legajo = arregloLinea(indice)
                'Chequeo que exista el legajo
                StrSql = " SELECT ternro FROM empleado WHERE empleg = " & Legajo
                OpenRecordset StrSql, rsAux
                If Not rsAux.EOF Then
                    Ternro = rsAux!Ternro
                    Flog.writeline "Empleado con legajo: " & Legajo & " - encontrado."
                Else
                    Flog.writeline "Empleado con legajo: " & Legajo & " - no encontrado."
                    GoTo Fin
                End If
            Else
                Flog.writeline "Legajo no informado, el campo es obligatorio."
                GoTo Fin
            End If
            
        Case 1: 'Nombre y apellido - No es necesario este dato
            If (arregloLinea(indice) <> "") And (UCase(arregloLinea(indice)) <> "N/A") Then
                Flog.writeline "Empleado con nombre: " & arregloLinea(indice) & "."
            Else
                Flog.writeline "No se encontro el nombre del Empleado."
            End If

        Case 2: 'Fecha - Obligatorio
            If (arregloLinea(indice) <> "") And (UCase(arregloLinea(indice)) <> "N/A") Then
                Fecha = Left(arregloLinea(indice), 10)
            Else
                Flog.writeline "Fecha no informada, el campo es obligatorio."
                GoTo Fin
            End If
        Case 3: 'Centro de Costo o CN o Proyecto - Obligatorio
            If (arregloLinea(indice) <> "") And (UCase(arregloLinea(indice)) <> "N/A") Then
                StrSql = " SELECT estrnro, estrdabr FROM estructura WHERE tenro = 5 AND upper(estrdabr) = '" & UCase(Trim(arregloLinea(indice))) & "'"
                OpenRecordset StrSql, rsAux
                If Not rsAux.EOF Then
                    'Chequeo que exista el proyecto
                    StrSql = " SELECT proyecnro, clientenro FROM proyecto WHERE upper(proyecdesabr) = '" & UCase(Trim(arregloLinea(indice))) & "'"
                    OpenRecordset StrSql, rsAux2
                    If Not rsAux2.EOF Then
                        proyectoNro = rsAux2!proyecnro
                        clienteNro = rsAux2!clienteNro
                        Flog.writeline "Proyecto y Centro de Costo existente."
                    Else
                        Flog.writeline "Proyecto no existente en el sistema, la linea no se toma en cuenta."
                        GoTo Fin
                    End If
                Else
                    Flog.writeline "Centro de Costo no existente en el sistema, la linea no se toma en cuenta."
                    GoTo Fin
                End If
            Else
                Flog.writeline "Centro de Costo o CN o Proyecto no informado, el campo es obligatorio."
                GoTo Fin
            End If
        
        Case 4: 'Codigo Zona - Zona
            If (arregloLinea(indice) <> "") And (UCase(arregloLinea(indice)) <> "N/A") Then
                'Chequeo que exista el legajo
                If InStr(arregloLinea(indice), "-") > 0 Then
                    StrSql = " SELECT przonanro FROM proyecto_zona WHERE upper(przonacodext) = '" & UCase(Trim(Split(Trim(arregloLinea(indice)), "-")(0))) & "'"
                    OpenRecordset StrSql, rsAux
                    If Not rsAux.EOF Then
                        przonanro = rsAux!przonanro
                        Flog.writeline "Codigo Zona: " & Trim(Split(Trim(arregloLinea(indice)), "-")(0)) & " existente."
                    Else
                        Flog.writeline "Codigo Zona: " & Trim(Split(Trim(arregloLinea(indice)), "-")(0)) & " no existe, la linea no se toma en cuenta."
                        GoTo Fin
                    End If
                Else
                    Flog.writeline "Codigo Zona - Zona, debe tener un el caracter - como separador, la linea no se toma en cuenta."
                    GoTo Fin
                End If
            Else
                Flog.writeline "Codigo Zona - Zona, no informado, la linea no se toma en cuenta."
                GoTo Fin
            End If
        Case 5: 'Adicional - Obligatorio
            If (arregloLinea(indice) <> "") And (UCase(arregloLinea(indice)) <> "N/A") Then
                'Chequeo que exista el legajo
                Flog.writeline "Adicional informado."
                If UCase(arregloLinea(indice)) = "S" Then
                    adicional = "-1"
                Else
                    adicional = "0"
                End If
            Else
                Flog.writeline "Adicional no informado, el campo es obligatorio."
                GoTo Fin
            End If
                
        Case 6: 'Etapa - No obligatorio, si no se informa se toma la primera como default
            If (arregloLinea(indice) <> "") And (UCase(arregloLinea(indice)) <> "N/A") Then
                'Busco la etapa
                StrSql = " SELECT etapanro FROM etapas WHERE upper(etapadesabr) = '" & UCase(Trim(arregloLinea(indice))) & "'"
                OpenRecordset StrSql, rsAux
                If Not rsAux.EOF Then
                    etapaNro = rsAux!etapaNro
                    Flog.writeline "Etapa encontrada."
                Else
                    Flog.writeline "No existe ninguna Etapa, no se toma en cuenta la linea."
                    GoTo Fin
                End If
    
                'Chequeo la etapa dependa del proyecto informado
                StrSql = " SELECT etapanro FROM etapas WHERE proyecnro = " & proyectoNro & " AND etapanro = " & etapaNro
                OpenRecordset StrSql, rsAux
                If Not rsAux.EOF Then
                    Flog.writeline "Etapa y proyecto correctos."
                Else
                    Flog.writeline "La etapa no esta asociada al proyecto informado, no se toma en cuenta la linea."
                    GoTo Fin
                End If
            Else
                'Busco la primer etapa
                StrSql = " SELECT etapanro FROM etapas WHERE proyecnro = " & proyectoNro & " ORDER BY etapanro ASC "
                OpenRecordset StrSql, rsAux
                If Not rsAux.EOF Then
                    etapaNro = rsAux!etapaNro
                    Flog.writeline "Etapa default encontrada."
                Else
                    Flog.writeline "No existe ninguna Etapa para el proyecto, no se toma en cuenta la linea."
                    GoTo Fin
                End If
            End If

        Case 7: 'Tarea - No obligatorio, si no se informa se toma la primera como default
            If (arregloLinea(indice) <> "") And (UCase(arregloLinea(indice)) <> "N/A") Then
                'Busco la tarea
                StrSql = " SELECT tareanro FROM tarea WHERE upper(tareadesabr) = '" & UCase(Trim(arregloLinea(indice))) & "'"
                OpenRecordset StrSql, rsAux
                If Not rsAux.EOF Then
                    tareaNro = rsAux!tareaNro
                    Flog.writeline "Tarea encontrada."
                Else
                    Flog.writeline "No existe ninguna Tarea, no se toma en cuenta la linea."
                    GoTo Fin
                End If
    
                'Chequeo la Tarea dependa de la etapa informada o la default
                StrSql = " SELECT tareanro FROM tarea WHERE etapanro = " & etapaNro & " AND tareanro = " & tareaNro
                OpenRecordset StrSql, rsAux
                If Not rsAux.EOF Then
                    Flog.writeline "Tarea y Etapa correctos."
                Else
                    Flog.writeline "La tarea no esta asociada a la etapa informada o default, no se toma en cuenta la linea."
                    GoTo Fin
                End If
            Else
                'Busco la primer tarea
                StrSql = " SELECT tareanro FROM tarea WHERE etapanro = " & etapaNro & " ORDER BY tareanro ASC "
                OpenRecordset StrSql, rsAux
                If Not rsAux.EOF Then
                    tareaNro = rsAux!tareaNro
                    Flog.writeline "Tarea default encontrada."
                Else
                    Flog.writeline "No existe ninguna Tarea para la Etapa, no se toma en cuenta la linea."
                    GoTo Fin
                End If
            End If
        
        Case 8: 'Horas Totales - obligatorio
            If (arregloLinea(indice) <> "") And (UCase(arregloLinea(indice)) <> "N/A") Then
                'Chequeo que exista el legajo
                Flog.writeline "Total de Horas informado."
                totalHoras = Replace(arregloLinea(indice), ",", ".")
                totalHoras = CHorasSF(totalHoras, 60)
                totalMinutos = Split(totalHoras, ":")(1)
                totalHoras = Split(totalHoras, ":")(0)
            Else
                Flog.writeline "Total de Horas no informado, el campo es obligatorio."
                GoTo Fin
            End If
    End Select
    Flog.writeline "Linea: " & NroLinea & " - Posicion: " & indice & " - valor: " & arregloLinea(indice)
Next

'Chequeo que el empleado este vinculado al proyecto
StrSql = " SELECT equiponro FROM Equipo WHERE proyecnro = " & proyectoNro & " AND ternro = " & Ternro
OpenRecordset StrSql, rsAux
If rsAux.EOF Then
    'El empleado no esta asignado al proyecto
    Flog.writeline "El empleado no esta asignado al proyecto, se saltea la linea."
    GoTo Fin
End If


'EAM- Controla si existe un registro para el mismo proyecto, día y hora. Si existe actualiza la cantidad de horas.
StrSql = "SELECT h.horanro FROM Horas h " & _
        " INNER JOIN tarea t ON t.tareanro = h.tareanro " & _
        " INNER JOIN empleado e ON e.ternro = h.ternro " & _
        " INNER JOIN proyecto_zona pz ON pz.przonanro = h.przonanro " & _
        " INNER JOIN etapas e2 ON t.etapanro = e2.etapanro " & _
        " INNER JOIN proyecto p ON p.proyecnro = e2.proyecnro AND p.proyecnro = " & proyectoNro & _
        " AND h.ternro= " & Ternro & " AND h.fecha=" & ConvFecha(Fecha)
OpenRecordset StrSql, rsAux
                
If Not rsAux.EOF Then
    'Si llego hasta aca, esta todo Ok para insertar.
    StrSql = " UPDATE Horas SET CantHoras= " & totalHoras & ",CantMin= " & totalMinutos & ",horasfact= " & adicional & _
    " WHERE horanro= " & rsAux!horanro
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline "Linea Numero: " & NroLinea & " Acutalizada."
Else
   'Si llego hasta aca, esta todo Ok para insertar.
    StrSql = " INSERT INTO Horas (tareanro,ternro,fecha,CantHoras,CantMin,horasfact,przonanro) VALUES " & _
             " (" & tareaNro & "," & Ternro & "," & ConvFecha(Fecha) & "," & totalHoras & "," & totalMinutos & "," & adicional & "," & przonanro & ")"
    'objConn.Execute StrSql, , adExecuteNoRecords
    objConn.Execute StrSql, , adExecuteNoRecords
    Flog.writeline "Linea Numero: " & NroLinea & " Insertada."
End If


'-----------------------------------------------------------------


Fin:
'Cierro todo y libero
If rsAux.State = adStateOpen Then rsAux.Close
If rsAux2.State = adStateOpen Then rsAux2.Close

Set rsAux = Nothing
Set rsAux2 = Nothing

Exit Sub

Manejador_De_Error:
    HuboError = True

    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "Error en la linea " & strLinea
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline Espacios(Tabulador * 1) & "Error. " & Format(Now, "dd/mm/yyyy hh:mm:ss")
    Flog.writeline Espacios(Tabulador * 1) & "Decripcion: " & Err.Description
    Flog.writeline
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "SQL Ejecutado: " & StrSql
    Flog.writeline
    Flog.writeline Espacios(Tabulador * 1) & "**********************************************************"
    Flog.writeline
    
    GoTo Fin
End Sub



'EAM- Resta dos horas operandolos en forma de minutos. Retorna un long que reperesta a los mintos
Function RestarHoras(ByVal Hora As String, ByVal horaResta As String) As Long
  Dim Minutos As Long
  Dim minutosResta As Long
  Dim total As Long
  
    
    If (Hora <> "") And (horaResta <> "") Then
        Minutos = Val(Left(Hora, (Len(Hora) - 2))) * 60 + Val(Right(Hora, 2))
        minutosResta = Val(Left(horaResta, (Len(horaResta) - 2))) * 60 + Val(Right(horaResta, 2))
        total = (Minutos - minutosResta)
    Else
        total = 0
    End If
        
    RestarHoras = total
End Function


Public Sub SumoHorasV2(fecini As Date, HoraIni As String, horamas As String, ByRef Mifecha, ByRef MiHora)
'Mas conocido como gtis1h01
'Suma de Horas
'La hora debe estar en formato 9999
Const Hora = 60
Const Dia = 1440
Dim totminutos As Long
Dim Minutos As Long
Dim minutosmas As Long
Dim canthoras As Long

Dim fecha_aux As Date

    fecha_aux = fecini
    Minutos = (Val(Left(HoraIni, (Len(HoraIni) - 2))) * Hora + _
                Val(Right(HoraIni, 2)))
    minutosmas = (Val(Left(horamas, (Len(horamas) - 2))) * Hora + _
                Val(Right(horamas, 2)))
    totminutos = (Minutos + minutosmas)
    Do While (totminutos >= Dia)
    '      fecini = fecini + 1
        fecha_aux = DateAdd("d", 1, fecha_aux)
        totminutos = totminutos - Dia
    Loop
    'Hay que pasar los minutos a horas y minutos
    Do While (totminutos >= Hora)
    '      fecini = fecini + 1
        canthoras = canthoras + 1
        totminutos = totminutos - Hora
    Loop
    Mifecha = fecha_aux
    MiHora = Format(canthoras, "#####00") & ":" & Format(totminutos, "00")
    
End Sub

'Sebastian stremel - Obtiene el saldo de dias correspondientes (dias corresp + dias bonificacion)
Function TotalDiasCorrespondientes(Ternro)
    Dim StrSql1 As String
    Dim diasCorresp As Double
    Dim rs  As New ADODB.Recordset
    
    StrSql1 = "SELECT SUM(vdiascorcant) vdiascorcant FROM vacdiascor WHERE venc=0 AND ternro= " & Ternro
    OpenRecordset StrSql1, rs

    diasCorresp = 0
    If Not EsNulo(rs!vdiascorcant) Then
        diasCorresp = CDbl(rs!vdiascorcant)
    End If
    TotalDiasCorrespondientes = diasCorresp
    rs.Close
End Function


'Sebastian Stremel - Obtiene el total de las licencias gozadas por vacaciones
Function TotalDiasGozados(Ternro)
    Dim StrSql1 As String
    Dim diasGozados As Double
    Dim rs As New ADODB.Recordset
    StrSql1 = " SELECT SUM(elcantdiashab) elcantdiashab "
    StrSql1 = StrSql1 & " FROM emp_lic "
    StrSql1 = StrSql1 & " WHERE emp_lic.empleado = " & Ternro & " AND tdnro = 2 AND licestnro = 2"
    OpenRecordset StrSql1, rs
    
    diasGozados = 0
    If Not EsNulo(rs!elcantdiashab) Then
        diasGozados = rs!elcantdiashab
    End If
    
    TotalDiasGozados = diasGozados
    rs.Close
End Function

'Sebastian Stremel - Obtiene el total de días de Beneficio
Function TotalDiasBeneficio(Ternro)
    Dim StrSql1 As String
    Dim diasBeneficio As Double
    Dim rs  As New ADODB.Recordset
    
    StrSql1 = "SELECT SUM(vdiascorcant) vdiascorcant FROM vacdiascor WHERE venc=3 AND ternro= " & Ternro
    OpenRecordset StrSql1, rs
    diasBeneficio = 0
    If Not EsNulo(rs!vdiascorcant) Then
        diasBeneficio = CDbl(rs!vdiascorcant)
    End If
    TotalDiasBeneficio = diasBeneficio
    rs.Close

End Function

'Obtiene total de días vendidos APROBADOS.
Function TotalDiasVendidos(l_ternro)
    Dim StrSql1 As String
    Dim rs  As New ADODB.Recordset

    StrSql1 = "SELECT SUM(cantvacvendidos) cantvacvendidos FROM vacvendidos"
    StrSql1 = StrSql1 & " WHERE aprobado = -1 AND ternro = " & l_ternro
    OpenRecordset StrSql1, rs
    If Not rs.EOF And Not EsNulo(rs!cantvacvendidos) Then
        TotalDiasVendidos = rs!cantvacvendidos
    Else
        TotalDiasVendidos = 0
    End If

    rs.Close
End Function


Public Sub LineaModelo_674(ByVal strReg As String)
' ---------------------------------------------------------------------------------------------
' Descripcion: Migracion de Comisiones
' Autor      : Dimatz Rafael
' Fecha      : 04/04/2014
' Ultima Mod.:
' Descripcion: Custom - Importacion de Comisiones - CAS 23307
' Ultima Mod.:
' ---------------------------------------------------------------------------------------------
Dim pos1 As Long
Dim pos2 As Long
Dim nro_estructura      As Long
Dim estrdesc             As Boolean     ' True indica que se hace por Descripcion.
                                        ' False por Codigo Externo

Dim Escala          As String
Dim EscComNro       As Long
Dim TE              As String
Dim Tenro           As Long
Dim estructura      As String
Dim Estrnro         As Long
Dim producto        As String
Dim ConcNro         As Long
Dim PorcDesde       As Double
Dim PorcHasta       As Double
Dim Comision        As Double

Dim NroColumna      As Byte

Dim rs As New ADODB.Recordset

    'Indica si la Validacion de la Estructura es por Descripcion o Codigo Externo
    estrdesc = True
    LineaCarga = LineaCarga + 1
    Tabs = 1
    
    On Error GoTo SaltoLinea
    Flog.writeline
    FlogE.writeline
    FlogP.writeline
    'FlogP.writeline Espacios(Tabulador * 1) & " Linea: " & LineaCarga
    

    ' Recupero los Valores del Archivo
            
    'Tipo de Escala
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Tipo de Escala"
    pos1 = 1
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        HuboError = True
        RegError = RegError + 1 '17-03-2011
        Exit Sub                '17-03-2011
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    Escala = Aux
        
        
    'Tipo Estructura
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Tipo de Estructura"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        HuboError = True
        RegError = RegError + 1
        Exit Sub
    End If
    TE = Aux
            
    'Estructura
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Estructura"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        HuboError = True
        RegError = RegError + 1
        Exit Sub
    End If
    Aux = EliminarCHInvalidosII(Aux, 1, "")
    estructura = Aux
        
    'Producto
    NroColumna = NroColumna + 1
    Obligatorio = True
    Campoetiqueta = "Producto"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        HuboError = True
        RegError = RegError + 1
        Exit Sub
    End If
    If Aux = "N/A" Or Aux = "" Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
    Else
        producto = Aux
    End If
    
    'Porcentaje Desde
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "% Desde"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        HuboError = True
        RegError = RegError + 1
        Exit Sub
    End If
    PorcDesde = Aux

   'Porcentaje Hasta
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "% Hasta"
    pos1 = pos2 + 2
    pos2 = InStr(pos1, strReg, separador) - 1
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        HuboError = True
        RegError = RegError + 1
        Exit Sub
    End If
    PorcHasta = Aux
        
   'Comision
    NroColumna = NroColumna + 1
    Obligatorio = False
    Campoetiqueta = "Comision"
    pos1 = pos2 + 2
    pos2 = Len(strReg)
    Aux = Trim(Mid(strReg, pos1, pos2 - pos1 + 1))
    If (Aux = "N/A" Or EsNulo(Aux)) And Obligatorio Then
        Texto = ": " & " - Campo " & Campoetiqueta & " con valor Nulo y es obligatorio"
        Call Escribir_Log("floge", LineaCarga, NroColumna, Texto, Tabs, strReg)
        HuboError = True
        RegError = RegError + 1
        Exit Sub
    End If
    Comision = CDbl(Aux)
    
    

'Validaciones --------------------------------------------------------------------------------------------------
'   Que la escala existe. Si no existe ==> Error
'   Que el tipo de estructura existe. Si no existe ==> Error
'   Que la estructura existe. Si no existe ==> Error
'   Que el concepto existe. Si no existe ==> Error
'   Que el tipo de estructura este asocaido a la escala
'   Que el concepto este asocaido a la escala

'Que existe la escala
    StrSql = "SELECT esccomnro FROM escala_comision "
    StrSql = StrSql & "WHERE esccomnro = " & Escala
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
       EscComNro = rs!EscComNro
    Else
        Texto = ": " & "Escala de comisiones Desconicida " & Escala
        NroColumna = 1
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strReg)
        Call InsertaError(NroColumna, 148)
        HuboError = True
        RegError = RegError + 1
    End If


'Valido el tipo de estructura
    StrSql = "SELECT tenro FROM tipoestructura WHERE UPPER(tedabr) = '" & UCase(TE) & "'"
    OpenRecordset StrSql, rs
    If rs.EOF Then
        Texto = ": " & "Tipo de Estructura Desconicida " & TE
        NroColumna = 2
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strReg)
        Call InsertaError(NroColumna, 149)
        HuboError = True
        RegError = RegError + 1
    Else
        Tenro = rs!Tenro
    End If

'Valido la Estructura
    StrSql = " SELECT estrnro FROM estructura WHERE UPPER(estructura.estrdabr) = '" & UCase(Mid(estructura, 1, 60)) & "'"
    StrSql = StrSql & " AND estructura.tenro = " & Tenro
    OpenRecordset StrSql, rs
    If rs.EOF Then
        Texto = ": " & "Estructura Desconicida " & estructura
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strReg)
        Call InsertaError(NroColumna, 150)
        HuboError = True
        RegError = RegError + 1
    Else
        Estrnro = rs!Estrnro
    End If

'Valido el concepto
    StrSql = " SELECT concnro FROM concepto WHERE conccod = '" & producto & "'"
    OpenRecordset StrSql, rs
    If rs.EOF Then
        Texto = ": " & "Concepto Desconicido " & producto
        NroColumna = 4
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strReg)
        Call InsertaError(NroColumna, 10)
        HuboError = True
        RegError = RegError + 1
    Else
        ConcNro = rs!ConcNro
    End If

'Valido que este asociado el Concepto a la escala
    StrSql = "SELECT * FROM escala_comision_conc "
    StrSql = StrSql & " WHERE esccomnro = " & Escala
    StrSql = StrSql & " AND  concnro = " & ConcNro
    OpenRecordset StrSql, rs
    If rs.EOF Then
        Texto = ": " & "El concepto " & producto & " NO está asociado a la escala " & Escala
        NroColumna = 4
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strReg)
        Call InsertaError(NroColumna, 151)
        HuboError = True
        RegError = RegError + 1
    End If

    StrSql = "SELECT * FROM escala_comision_estr "
    StrSql = StrSql & " WHERE esccomnro = " & Escala
    StrSql = StrSql & " AND  estrnro = " & Estrnro & " AND tenro = " & Tenro
    OpenRecordset StrSql, rs
    If rs.EOF Then
        Texto = ": " & "La estructura " & estructura & " NO está asociada a la escala " & Escala
        NroColumna = 3
        Call Escribir_Log("floge", NroLinea, NroColumna, Texto, Tabs, strReg)
        Call InsertaError(NroColumna, 152)
        HuboError = True
        RegError = RegError + 1
    End If

'Validaciones --------------------------------------------------------------------------------------------------

'=========================================================================
'=========================================================================
If Not HuboError Then

    StrSql = "SELECT * FROM escala_comision_det "
    StrSql = StrSql & " WHERE esccomnro = " & EscComNro
    StrSql = StrSql & " AND  estrnro = " & Estrnro & " AND tenro = " & Tenro
    StrSql = StrSql & " AND  concnro = " & ConcNro
    StrSql = StrSql & " AND  pordesde = " & PorcDesde
    StrSql = StrSql & " AND  porhasta = " & PorcHasta
    OpenRecordset StrSql, rs
    If rs.EOF Then
        StrSql = "INSERT INTO escala_comision_det(esccomnro,tenro,estrnro,concnro,pordesde,porhasta,comision) "
        StrSql = StrSql & "VALUES("
        StrSql = StrSql & " '" & EscComNro & "' , '" & Tenro & "', " & Estrnro & ", '" & ConcNro & "' , '" & PorcDesde & "'"
        StrSql = StrSql & ", '" & PorcHasta & "', " & Comision & ")"
        
        Texto = "   Comision Insertada "
    Else
        StrSql = "UPDATE escala_comision_det SET comision = " & Comision
        StrSql = StrSql & " WHERE esccomnro = " & EscComNro
        StrSql = StrSql & " AND  estrnro = " & Estrnro & " AND tenro = " & Tenro
        StrSql = StrSql & " AND  concnro = " & ConcNro
        StrSql = StrSql & " AND  pordesde = " & PorcDesde
        StrSql = StrSql & " AND  porhasta = " & PorcHasta
        Texto = "   Comision Actualizada "
    End If
    objConn.Execute StrSql, , adExecuteNoRecords
    Call Escribir_Log("flogp", NroLinea, 1, Texto, Tabs, strReg)
End If
           
'Cierro y libero
If rs.State = adStateOpen Then rs.Close
Set rs = Nothing
Exit Sub

SaltoLinea:
    Texto = " Error (674) " & Err.Number & " - " & Err.Description
    Call Escribir_Log("floge", LineaCarga, 1, Texto, Tabs + 1, strReg)
    MyRollbackTrans
    OK = False
End Sub

Sub insertarAlcance(ByVal Tenro As Long)
Dim maxOrden As Long
Dim rs As New ADODB.Recordset

    'busco si existe el tipo de estructura dentro del alcance
    StrSql = " SELECT tanro FROM  alcance_testr where tanro = 13 AND tenro = " & Tenro
    OpenRecordset StrSql, rs
    If Not rs.EOF Then
        Flog.writeline Espacios(Tabulador * 1) & "Tipo de estructura: " & Tenro & " existente la configuracion del alcance de estructura"
    Else
        'busco el maxorden dentro del alcance
        StrSql = " SELECT MAX(alteorden) orden FROM  alcance_testr where tanro = 13 "
        OpenRecordset StrSql, rs
        If Not rs.EOF Then
            If Not IsNull(rs!Orden) Then
                maxOrden = CLng(rs!Orden) + 1
            Else
                maxOrden = 1
            End If
        Else
            maxOrden = 1
        End If
        
        'insertamos el alcance para gerencia
        StrSql = " INSERT INTO alcance_testr (tenro, alteorden, tanro) VALUES (" & Tenro & ", " & maxOrden & ",13) "
        objConn.Execute StrSql, , adExecuteNoRecords
        Flog.writeline Espacios(Tabulador * 1) & "Alcance para el tipo de estructura: " & Tenro & " insertado"
    End If

If rs.State = adStateOpen Then rs.Close
Set rs = Nothing
    
End Sub
